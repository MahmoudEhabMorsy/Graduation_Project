
Node_Integration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00004e84  00004f18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800174  00800174  0000502c  2**0
                  ALLOC
  3 .stab         000051d8  00000000  00000000  0000502c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000244e  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c652  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000c812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000ca26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010506  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011814  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000119f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00011cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_4>
      14:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_5>
      18:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_6>
      1c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_9>
      28:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_10>
      2c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 13 	call	0x272e	; 0x272e <main>
      8a:	0c 94 40 27 	jmp	0x4e80	; 0x4e80 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 31 27 	jmp	0x4e62	; 0x4e62 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 31 27 	jmp	0x4e62	; 0x4e62 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 25 27 	jmp	0x4e4a	; 0x4e4a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 31 27 	jmp	0x4e62	; 0x4e62 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 31 27 	jmp	0x4e62	; 0x4e62 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 31 27 	jmp	0x4e62	; 0x4e62 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 2e 27 	jmp	0x4e5c	; 0x4e5c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 2d 27 	jmp	0x4e5a	; 0x4e5a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TWI_init>:
 * 																		*
 * [Args]							*
 * [Return]															*
 *======================================================================*/

void TWI_init(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate Configuration */
#if BIT_RATE >= MINIMUM_BIT_RATE
	TWBR = BIT_RATE;
     ef2:	e0 e2       	ldi	r30, 0x20	; 32
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	88 e4       	ldi	r24, 0x48	; 72
     ef8:	80 83       	st	Z, r24
#else
#error "Invalid I2C bit rate configuration. Minimum bit rate allowed is 10."
#endif
	/* Prescaler Configuration */
#if PRESCALER_1 == PRESCALER
	CLEAR_BIT(TWSR, TWPS1);
     efa:	a1 e2       	ldi	r26, 0x21	; 33
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e2       	ldi	r30, 0x21	; 33
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWPS0);
     f08:	a1 e2       	ldi	r26, 0x21	; 33
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e1 e2       	ldi	r30, 0x21	; 33
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8c 93       	st	X, r24
#else
#error "Invalid I2C prescaler configuration"
#endif
	/* Slave Address Configuration */
#if SLAVE_ADDRESS >= MINIMUM_ADDRESS && SLAVE_ADDRESS <= MAXIMUM_ADDRESS
	TWAR = (SLAVE_ADDRESS << 1);
     f16:	e2 e2       	ldi	r30, 0x22	; 34
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	80 83       	st	Z, r24
#error "Invalid I2C slave address configuration (out of range)."
#endif
#if ENABLE_GENERAL_CALL == GENERAL_CALL
	SET_BIT(TWAR, TWGCE);
#elif DISABLE_GENERAL_CALL == GENERAL_CALL
	CLEAR_BIT(TWAR, TWGCE);
     f1e:	a2 e2       	ldi	r26, 0x22	; 34
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e2       	ldi	r30, 0x22	; 34
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
#else
#error "Invalid general call configuration"
#endif
	/* Enable I2C Peripheral */
	SET_BIT(TWCR, TWEN);
     f2c:	a6 e5       	ldi	r26, 0x56	; 86
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	8c 93       	st	X, r24
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <TWI_Start>:
 * 																		*
 * [Args]		uint8 slave_write_adress						*
 * [Return]															*
 *======================================================================*/

uint8 TWI_Start(uint8 slave_write_adress) {
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <TWI_Start+0x6>
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	84 ea       	ldi	r24, 0xA4	; 164
     f54:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <TWI_Start+0x16>
		;
	status = TWI_getStatus();
     f60:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f64:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	11 f0       	breq	.+4      	; 0xf70 <TWI_Start+0x30>
		return 0;
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <TWI_Start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     f70:	e3 e2       	ldi	r30, 0x23	; 35
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     f78:	e6 e5       	ldi	r30, 0x56	; 86
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	84 e8       	ldi	r24, 0x84	; 132
     f7e:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f80:	e6 e5       	ldi	r30, 0x56	; 86
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	dc f7       	brge	.-10     	; 0xf80 <TWI_Start+0x40>
		;
	status = TWI_getStatus();
     f8a:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f8e:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 31       	cpi	r24, 0x18	; 24
     f94:	19 f4       	brne	.+6      	; 0xf9c <TWI_Start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <TWI_Start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 32       	cpi	r24, 0x20	; 32
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <TWI_Start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <TWI_Start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TWI_Repeated_start>:
 * [Description]:	Function responsible for re-start the TWI communication.*
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
uint8 TWI_Repeated_start(uint8 slave_write_adress) {
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <TWI_Repeated_start+0x6>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	84 ea       	ldi	r24, 0xA4	; 164
     fce:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <TWI_Repeated_start+0x16>
		;
	status = TWI_getStatus();
     fda:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     fde:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_REP_START) /* Check weather start condition transmitted successfully or not? */
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	11 f0       	breq	.+4      	; 0xfea <TWI_Repeated_start+0x30>
		return 0;
     fe6:	1b 82       	std	Y+3, r1	; 0x03
     fe8:	1e c0       	rjmp	.+60     	; 0x1026 <TWI_Repeated_start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     fea:	e3 e2       	ldi	r30, 0x23	; 35
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     ffa:	e6 e5       	ldi	r30, 0x56	; 86
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 23       	and	r24, r24
    1002:	dc f7       	brge	.-10     	; 0xffa <TWI_Repeated_start+0x40>
		;
	status = TWI_getStatus();
    1004:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
    1008:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_R_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	19 f4       	brne	.+6      	; 0x1016 <TWI_Repeated_start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <TWI_Repeated_start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 32       	cpi	r24, 0x20	; 32
    101a:	19 f4       	brne	.+6      	; 0x1022 <TWI_Repeated_start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <TWI_Repeated_start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_Start_Wait>:
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <TWI_Start_Wait+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	84 ea       	ldi	r24, 0xA4	; 164
    1046:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	dc f7       	brge	.-10     	; 0x1048 <TWI_Start_Wait+0x14>
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    1052:	e1 e2       	ldi	r30, 0x21	; 33
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	79 f7       	brne	.-34     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* If no then continue with start loop again */
		TWDR = slave_write_address; /* If yes then write SLA+W in TWI data register */
    1062:	e3 e2       	ldi	r30, 0x23	; 35
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	80 83       	st	Z, r24
		TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	84 e8       	ldi	r24, 0x84	; 132
    1070:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1072:	e6 e5       	ldi	r30, 0x56	; 86
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 23       	and	r24, r24
    107a:	dc f7       	brge	.-10     	; 0x1072 <TWI_Start_Wait+0x3e>
			; /* Wait until TWI finish its current job (Write operation) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    107c:	e1 e2       	ldi	r30, 0x21	; 33
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	88 31       	cpi	r24, 0x18	; 24
    108a:	19 f0       	breq	.+6      	; 0x1092 <TWI_Start_Wait+0x5e>
		{
			TWI_Stop(); /* If not then generate stop condition */
    108c:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    1090:	d7 cf       	rjmp	.-82     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* continue with start loop again */
		}
		break; /* If yes then break loop */
	}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <TWI_Stop>:
 * [Description]:	Function responsible for stop the TWI communication *
 * 																*
 * [Args]		void											*
 * [Return]			void										*
 *======================================================================*/
void TWI_Stop(void) {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	84 e9       	ldi	r24, 0x94	; 148
    10aa:	80 83       	st	Z, r24
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TWI_WriteByte>:
 * [Description]:	Function responsible for sending 1 byte *
 * 																*
 * [Args]		uint8 data											*
 * [Return]			void										*
 *======================================================================*/
void TWI_WriteByte(uint8 data) {
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    10be:	e3 e2       	ldi	r30, 0x23	; 35
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    10c6:	e6 e5       	ldi	r30, 0x56	; 86
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	84 e8       	ldi	r24, 0x84	; 132
    10cc:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10ce:	e6 e5       	ldi	r30, 0x56	; 86
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 23       	and	r24, r24
    10d6:	dc f7       	brge	.-10     	; 0x10ce <TWI_WriteByte+0x1c>
		;
}
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TWI_ReadByteWithACK>:
 * [Description]:	Function responsible for reading 1 byte with ack *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithACK(void) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    10e8:	e6 e5       	ldi	r30, 0x56	; 86
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	84 ec       	ldi	r24, 0xC4	; 196
    10ee:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	dc f7       	brge	.-10     	; 0x10f0 <TWI_ReadByteWithACK+0x10>
		;
	/* Read Data */
	return TWDR;
    10fa:	e3 e2       	ldi	r30, 0x23	; 35
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <TWI_ReadByteWithNACK>:
 * [Description]:	Function responsible for reading 1 byte with NACK *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithNACK(void) {
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 e8       	ldi	r24, 0x84	; 132
    1114:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	dc f7       	brge	.-10     	; 0x1116 <TWI_ReadByteWithNACK+0x10>
		;
	/* Read Data */
	return TWDR;
    1120:	e3 e2       	ldi	r30, 0x23	; 35
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TWI_getStatus>:
 * [Description]:	FET STATUS from TWSR register *
 * 																*
 * [Args]													*
 * [Return]			uint8 status									*
 *======================================================================*/
uint8 TWI_getStatus(void) {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1136:	e1 e2       	ldi	r30, 0x21	; 33
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
}
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_11>:
/********************************************************/
/*                     ISRs
/********************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1174:	80 91 74 01 	lds	r24, 0x0174
    1178:	90 91 75 01 	lds	r25, 0x0175
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	29 f0       	breq	.+10     	; 0x118a <__vector_11+0x40>
		(*g_Timer0CallBackPtr)();
    1180:	e0 91 74 01 	lds	r30, 0x0174
    1184:	f0 91 75 01 	lds	r31, 0x0175
    1188:	09 95       	icall
	}
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_10>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    11da:	80 91 74 01 	lds	r24, 0x0174
    11de:	90 91 75 01 	lds	r25, 0x0175
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <__vector_10+0x40>
		(*g_Timer0CallBackPtr)();
    11e6:	e0 91 74 01 	lds	r30, 0x0174
    11ea:	f0 91 75 01 	lds	r31, 0x0175
    11ee:	09 95       	icall
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_9>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	2f 93       	push	r18
    1222:	3f 93       	push	r19
    1224:	4f 93       	push	r20
    1226:	5f 93       	push	r21
    1228:	6f 93       	push	r22
    122a:	7f 93       	push	r23
    122c:	8f 93       	push	r24
    122e:	9f 93       	push	r25
    1230:	af 93       	push	r26
    1232:	bf 93       	push	r27
    1234:	ef 93       	push	r30
    1236:	ff 93       	push	r31
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1240:	80 91 76 01 	lds	r24, 0x0176
    1244:	90 91 77 01 	lds	r25, 0x0177
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	29 f0       	breq	.+10     	; 0x1256 <__vector_9+0x40>
		(*g_Timer1CallBackPtr)();
    124c:	e0 91 76 01 	lds	r30, 0x0176
    1250:	f0 91 77 01 	lds	r31, 0x0177
    1254:	09 95       	icall
	}
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    12a6:	80 91 76 01 	lds	r24, 0x0176
    12aa:	90 91 77 01 	lds	r25, 0x0177
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	29 f0       	breq	.+10     	; 0x12bc <__vector_7+0x40>
		(*g_Timer1CallBackPtr)();
    12b2:	e0 91 76 01 	lds	r30, 0x0176
    12b6:	f0 91 77 01 	lds	r31, 0x0177
    12ba:	09 95       	icall
	}
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_5>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    130c:	80 91 78 01 	lds	r24, 0x0178
    1310:	90 91 79 01 	lds	r25, 0x0179
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	29 f0       	breq	.+10     	; 0x1322 <__vector_5+0x40>
		(*g_Timer2CallBackPtr)();
    1318:	e0 91 78 01 	lds	r30, 0x0178
    131c:	f0 91 79 01 	lds	r31, 0x0179
    1320:	09 95       	icall
	}
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_4>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1372:	80 91 78 01 	lds	r24, 0x0178
    1376:	90 91 79 01 	lds	r25, 0x0179
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    137e:	e0 91 78 01 	lds	r30, 0x0178
    1382:	f0 91 79 01 	lds	r31, 0x0179
    1386:	09 95       	icall
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <Timer_init>:

/********************************************************/
/* Functions Implementation */
/********************************************************/

void Timer_init(const Timer_configuration *timer_config){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Timer_init+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	80 81       	ld	r24, Z
    13c2:	88 23       	and	r24, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <Timer_init+0x1a>
    13c6:	60 c0       	rjmp	.+192    	; 0x1488 <Timer_init+0xda>

		TCNT0 = timer_config->initialValue;
    13c8:	a2 e5       	ldi	r26, 0x52	; 82
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e9 81       	ldd	r30, Y+1	; 0x01
    13ce:	fa 81       	ldd	r31, Y+2	; 0x02
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	8c 93       	st	X, r24
		TCCR0 = 0;
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	90 81       	ld	r25, Z
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	89 2b       	or	r24, r25
    13ee:	8c 93       	st	X, r24

		if (timer_config->mode == Normal){
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	81 81       	ldd	r24, Z+1	; 0x01
    13f6:	88 23       	and	r24, r24
    13f8:	b1 f4       	brne	.+44     	; 0x1426 <Timer_init+0x78>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    13fa:	a3 e5       	ldi	r26, 0x53	; 83
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e5       	ldi	r30, 0x53	; 83
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    1416:	a8 e5       	ldi	r26, 0x58	; 88
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e5       	ldi	r30, 0x58	; 88
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	28 c0       	rjmp	.+80     	; 0x1476 <Timer_init+0xc8>

		}else if (timer_config->mode == CTC){
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	19 f5       	brne	.+70     	; 0x1476 <Timer_init+0xc8>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1430:	a3 e5       	ldi	r26, 0x53	; 83
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e3 e5       	ldi	r30, 0x53	; 83
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    143e:	a3 e5       	ldi	r26, 0x53	; 83
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e3 e5       	ldi	r30, 0x53	; 83
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    144c:	ac e5       	ldi	r26, 0x5C	; 92
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	84 81       	ldd	r24, Z+4	; 0x04
    1456:	95 81       	ldd	r25, Z+5	; 0x05
    1458:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    145a:	a9 e5       	ldi	r26, 0x59	; 89
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e9 e5       	ldi	r30, 0x59	; 89
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    1468:	a8 e5       	ldi	r26, 0x58	; 88
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e5       	ldi	r30, 0x58	; 88
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	87 81       	ldd	r24, Z+7	; 0x07
    147c:	90 85       	ldd	r25, Z+8	; 0x08
    147e:	90 93 75 01 	sts	0x0175, r25
    1482:	80 93 74 01 	sts	0x0174, r24
    1486:	c4 c0       	rjmp	.+392    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer1){
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	80 81       	ld	r24, Z
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <Timer_init+0xe6>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <Timer_init+0x1a6>
		TCCR1A =0;
    1494:	ef e4       	ldi	r30, 0x4F	; 79
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    149a:	af e4       	ldi	r26, 0x4F	; 79
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e4       	ldi	r30, 0x4F	; 79
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    14c2:	ac e4       	ldi	r26, 0x4C	; 76
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24

		if (timer_config->mode == Normal) {
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	81 81       	ldd	r24, Z+1	; 0x01
    14da:	88 23       	and	r24, r24
    14dc:	79 f4       	brne	.+30     	; 0x14fc <Timer_init+0x14e>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    14de:	a9 e5       	ldi	r26, 0x59	; 89
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e9 e5       	ldi	r30, 0x59	; 89
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    14ec:	a8 e5       	ldi	r26, 0x58	; 88
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e8 e5       	ldi	r30, 0x58	; 88
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
    14fa:	23 c0       	rjmp	.+70     	; 0x1542 <Timer_init+0x194>

		} else if (timer_config->mode == CTC) {
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	f1 f4       	brne	.+60     	; 0x1542 <Timer_init+0x194>
			SET_BIT(TCCR1B, WGM12);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    1514:	aa e4       	ldi	r26, 0x4A	; 74
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1526:	a9 e5       	ldi	r26, 0x59	; 89
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 61       	ori	r24, 0x10	; 16
    1532:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1534:	a8 e5       	ldi	r26, 0x58	; 88
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e5       	ldi	r30, 0x58	; 88
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	87 81       	ldd	r24, Z+7	; 0x07
    1548:	90 85       	ldd	r25, Z+8	; 0x08
    154a:	90 93 77 01 	sts	0x0177, r25
    154e:	80 93 76 01 	sts	0x0176, r24
    1552:	5e c0       	rjmp	.+188    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer2){
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	80 81       	ld	r24, Z
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	09 f0       	breq	.+2      	; 0x1560 <Timer_init+0x1b2>
    155e:	58 c0       	rjmp	.+176    	; 0x1610 <Timer_init+0x262>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    156e:	a4 e4       	ldi	r26, 0x44	; 68
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	8c 93       	st	X, r24
		TCCR2 = 0;
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	90 81       	ld	r25, Z
    158c:	e9 81       	ldd	r30, Y+1	; 0x01
    158e:	fa 81       	ldd	r31, Y+2	; 0x02
    1590:	86 81       	ldd	r24, Z+6	; 0x06
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24

		if (timer_config->mode == Normal) {
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	88 23       	and	r24, r24
    159e:	79 f4       	brne	.+30     	; 0x15be <Timer_init+0x210>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    15a0:	a9 e5       	ldi	r26, 0x59	; 89
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 64       	ori	r24, 0x40	; 64
    15ac:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    15ae:	a8 e5       	ldi	r26, 0x58	; 88
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e5       	ldi	r30, 0x58	; 88
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	8c 93       	st	X, r24
    15bc:	21 c0       	rjmp	.+66     	; 0x1600 <Timer_init+0x252>

		} else if (timer_config->mode == CTC) {
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	81 81       	ldd	r24, Z+1	; 0x01
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	e1 f4       	brne	.+56     	; 0x1600 <Timer_init+0x252>
			SET_BIT(TCCR0, WGM21);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    15d6:	a3 e4       	ldi	r26, 0x43	; 67
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	84 81       	ldd	r24, Z+4	; 0x04
    15e0:	95 81       	ldd	r25, Z+5	; 0x05
    15e2:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    15e4:	a9 e5       	ldi	r26, 0x59	; 89
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    15f2:	a8 e5       	ldi	r26, 0x58	; 88
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e5       	ldi	r30, 0x58	; 88
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    1600:	e9 81       	ldd	r30, Y+1	; 0x01
    1602:	fa 81       	ldd	r31, Y+2	; 0x02
    1604:	87 81       	ldd	r24, Z+7	; 0x07
    1606:	90 85       	ldd	r25, Z+8	; 0x08
    1608:	90 93 79 01 	sts	0x0179, r25
    160c:	80 93 78 01 	sts	0x0178, r24
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	88 23       	and	r24, r24
    162a:	e1 f4       	brne	.+56     	; 0x1664 <Timer_deInit+0x4a>
		TCCR0 = 0;
    162c:	e3 e5       	ldi	r30, 0x53	; 83
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    1632:	e2 e5       	ldi	r30, 0x52	; 82
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    1638:	ec e5       	ldi	r30, 0x5C	; 92
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    163e:	a9 e5       	ldi	r26, 0x59	; 89
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e9 e5       	ldi	r30, 0x59	; 89
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    164c:	a9 e5       	ldi	r26, 0x59	; 89
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e9 e5       	ldi	r30, 0x59	; 89
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8e 7f       	andi	r24, 0xFE	; 254
    1658:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    165a:	10 92 75 01 	sts	0x0175, r1
    165e:	10 92 74 01 	sts	0x0174, r1
    1662:	42 c0       	rjmp	.+132    	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer1){
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f5       	brne	.+66     	; 0x16ac <Timer_deInit+0x92>
		TCCR1A =0;
    166a:	ef e4       	ldi	r30, 0x4F	; 79
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
		TCNT1 = 0;
    1676:	ec e4       	ldi	r30, 0x4C	; 76
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	11 82       	std	Z+1, r1	; 0x01
    167c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    167e:	a9 e5       	ldi	r26, 0x59	; 89
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    168c:	ea e4       	ldi	r30, 0x4A	; 74
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    16a2:	10 92 77 01 	sts	0x0177, r1
    16a6:	10 92 76 01 	sts	0x0176, r1
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer2){
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	d9 f4       	brne	.+54     	; 0x16e8 <Timer_deInit+0xce>
		TCCR2 = 0;
    16b2:	e5 e4       	ldi	r30, 0x45	; 69
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    16b8:	e4 e4       	ldi	r30, 0x44	; 68
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    16be:	e3 e4       	ldi	r30, 0x43	; 67
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    16c4:	a9 e5       	ldi	r26, 0x59	; 89
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e9 e5       	ldi	r30, 0x59	; 89
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    16d2:	a9 e5       	ldi	r26, 0x59	; 89
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e9 e5       	ldi	r30, 0x59	; 89
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7b       	andi	r24, 0xBF	; 191
    16de:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    16e0:	10 92 79 01 	sts	0x0179, r1
    16e4:	10 92 78 01 	sts	0x0178, r1
	}
}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <Timer_reset>:

void Timer_reset(Timer_ID timer_ID){
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	88 23       	and	r24, r24
    1700:	21 f4       	brne	.+8      	; 0x170a <Timer_reset+0x1a>
		TCNT0 = 0;
    1702:	e2 e5       	ldi	r30, 0x52	; 82
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	10 82       	st	Z, r1
    1708:	0e c0       	rjmp	.+28     	; 0x1726 <Timer_reset+0x36>
	}else if (timer_ID == Timer1){
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	29 f4       	brne	.+10     	; 0x171a <Timer_reset+0x2a>
		TCNT1 = 0;
    1710:	ec e4       	ldi	r30, 0x4C	; 76
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	11 82       	std	Z+1, r1	; 0x01
    1716:	10 82       	st	Z, r1
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <Timer_reset+0x36>
	}else if (timer_ID == Timer2){
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	19 f4       	brne	.+6      	; 0x1726 <Timer_reset+0x36>
		TCNT2 = 0;
    1720:	e4 e4       	ldi	r30, 0x44	; 68
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	10 82       	st	Z, r1
	}
}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	64 e0       	ldi	r22, 0x04	; 4
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	65 e0       	ldi	r22, 0x05	; 5
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	67 e0       	ldi	r22, 0x07	; 7
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR);
    175e:	ed e2       	ldi	r30, 0x2D	; 45
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 e5       	ldi	r24, 0x50	; 80
    1764:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    1766:	ae e2       	ldi	r26, 0x2E	; 46
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ee e2       	ldi	r30, 0x2E	; 46
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8e 7f       	andi	r24, 0xFE	; 254
    1772:	8c 93       	st	X, r24
}
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	64 e0       	ldi	r22, 0x04	; 4
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	65 e0       	ldi	r22, 0x05	; 5
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	66 e0       	ldi	r22, 0x06	; 6
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	67 e0       	ldi	r22, 0x07	; 7
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    17aa:	ed e2       	ldi	r30, 0x2D	; 45
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 e4       	ldi	r24, 0x40	; 64
    17b0:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    17b2:	ae e2       	ldi	r26, 0x2E	; 46
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	ee e2       	ldi	r30, 0x2E	; 46
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8e 7f       	andi	r24, 0xFE	; 254
    17be:	8c 93       	st	X, r24
}
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    17d2:	ef e2       	ldi	r30, 0x2F	; 47
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    17da:	ee e2       	ldi	r30, 0x2E	; 46
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	88 23       	and	r24, r24
    17e2:	dc f7       	brge	.-10     	; 0x17da <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    17e4:	ef e2       	ldi	r30, 0x2F	; 47
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
}
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <SPI_sendString+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <SPI_sendString+0x8>
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	9c 83       	std	Y+4, r25	; 0x04
    1800:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1802:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    1804:	19 82       	std	Y+1, r1	; 0x01
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	fc 01       	movw	r30, r24
    1814:	e2 0f       	add	r30, r18
    1816:	f3 1f       	adc	r31, r19
    1818:	80 81       	ld	r24, Z
    181a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SPI_sendReceiveByte>
    181e:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	8f 5f       	subi	r24, 0xFF	; 255
    1824:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	fc 01       	movw	r30, r24
    1832:	e2 0f       	add	r30, r18
    1834:	f3 1f       	adc	r31, r19
    1836:	80 81       	ld	r24, Z
    1838:	88 23       	and	r24, r24
    183a:	31 f7       	brne	.-52     	; 0x1808 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <SPI_receiveString+0xa>
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	9b 83       	std	Y+3, r25	; 0x03
    185c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    185e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	8c 01       	movw	r16, r24
    186c:	02 0f       	add	r16, r18
    186e:	13 1f       	adc	r17, r19
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SPI_sendReceiveByte>
    1876:	f8 01       	movw	r30, r16
    1878:	80 83       	st	Z, r24
    187a:	10 c0       	rjmp	.+32     	; 0x189c <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	8f 5f       	subi	r24, 0xFF	; 255
    1880:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	8c 01       	movw	r16, r24
    188e:	02 0f       	add	r16, r18
    1890:	13 1f       	adc	r17, r19
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SPI_sendReceiveByte>
    1898:	f8 01       	movw	r30, r16
    189a:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	9b 81       	ldd	r25, Y+3	; 0x03
    18a6:	fc 01       	movw	r30, r24
    18a8:	e2 0f       	add	r30, r18
    18aa:	f3 1f       	adc	r31, r19
    18ac:	80 81       	ld	r24, Z
    18ae:	83 32       	cpi	r24, 0x23	; 35
    18b0:	29 f7       	brne	.-54     	; 0x187c <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	fc 01       	movw	r30, r24
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	10 82       	st	Z, r1
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    18fe:	80 91 7a 01 	lds	r24, 0x017A
    1902:	90 91 7b 01 	lds	r25, 0x017B
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	29 f0       	breq	.+10     	; 0x1914 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    190a:	e0 91 7a 01 	lds	r30, 0x017A
    190e:	f0 91 7b 01 	lds	r31, 0x017B
    1912:	09 95       	icall
	}
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	ff 91       	pop	r31
    191a:	ef 91       	pop	r30
    191c:	bf 91       	pop	r27
    191e:	af 91       	pop	r26
    1920:	9f 91       	pop	r25
    1922:	8f 91       	pop	r24
    1924:	7f 91       	pop	r23
    1926:	6f 91       	pop	r22
    1928:	5f 91       	pop	r21
    192a:	4f 91       	pop	r20
    192c:	3f 91       	pop	r19
    192e:	2f 91       	pop	r18
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <Icu_init+0x6>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B = (1<<ICES1)|(1<<CS11); //start by catching the rising edge & no prescaler
    1948:	ee e4       	ldi	r30, 0x4E	; 78
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	82 e4       	ldi	r24, 0x42	; 66
    194e:	80 83       	st	Z, r24
	TCNT1  = 0;
    1950:	ec e4       	ldi	r30, 0x4C	; 76
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	11 82       	std	Z+1, r1	; 0x01
    1956:	10 82       	st	Z, r1
	ICR1   = 0;
    1958:	e6 e4       	ldi	r30, 0x46	; 70
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	11 82       	std	Z+1, r1	; 0x01
    195e:	10 82       	st	Z, r1
	TIMSK |= (1<<TICIE1);
    1960:	a9 e5       	ldi	r26, 0x59	; 89
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e9 e5       	ldi	r30, 0x59	; 89
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 62       	ori	r24, 0x20	; 32
    196c:	8c 93       	st	X, r24

	/* Configure ICP1/PD6 as i/p pin */
	//DDRD &= ~(1<<PD6);
	CLEAR_BIT(DDRD,6);
    196e:	a1 e3       	ldi	r26, 0x31	; 49
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e1 e3       	ldi	r30, 0x31	; 49
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7b       	andi	r24, 0xBF	; 191
    197a:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    197c:	ef e4       	ldi	r30, 0x4F	; 79
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8c e0       	ldi	r24, 0x0C	; 12
    1982:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->clock));
    1984:	ae e4       	ldi	r26, 0x4E	; 78
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ee e4       	ldi	r30, 0x4E	; 78
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	98 2f       	mov	r25, r24
    1990:	98 7f       	andi	r25, 0xF8	; 248
    1992:	e9 81       	ldd	r30, Y+1	; 0x01
    1994:	fa 81       	ldd	r31, Y+2	; 0x02
    1996:	80 81       	ld	r24, Z
    1998:	89 2b       	or	r24, r25
    199a:	8c 93       	st	X, r24
	/*
    * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    199c:	ae e4       	ldi	r26, 0x4E	; 78
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	ee e4       	ldi	r30, 0x4E	; 78
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	2f 7b       	andi	r18, 0xBF	; 191
    19aa:	e9 81       	ldd	r30, Y+1	; 0x01
    19ac:	fa 81       	ldd	r31, Y+2	; 0x02
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	00 24       	eor	r0, r0
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	07 94       	ror	r0
    19bc:	96 95       	lsr	r25
    19be:	87 95       	ror	r24
    19c0:	07 94       	ror	r0
    19c2:	98 2f       	mov	r25, r24
    19c4:	80 2d       	mov	r24, r0
    19c6:	82 2b       	or	r24, r18
    19c8:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    19ca:	ec e4       	ldi	r30, 0x4C	; 76
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	11 82       	std	Z+1, r1	; 0x01
    19d0:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    19d2:	e6 e4       	ldi	r30, 0x46	; 70
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	11 82       	std	Z+1, r1	; 0x01
    19d8:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    19da:	a9 e5       	ldi	r26, 0x59	; 89
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e9 e5       	ldi	r30, 0x59	; 89
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	8c 93       	st	X, r24
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <Icu_setCallBack+0x6>
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	9a 81       	ldd	r25, Y+2	; 0x02
    1a04:	90 93 7b 01 	sts	0x017B, r25
    1a08:	80 93 7a 01 	sts	0x017A, r24
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <Icu_setEdgeDetectionType>:

/*
* Description: Function to set the required edge detection.
*/
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1a22:	ae e4       	ldi	r26, 0x4E	; 78
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ee e4       	ldi	r30, 0x4E	; 78
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	2f 7b       	andi	r18, 0xBF	; 191
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	00 24       	eor	r0, r0
    1a38:	96 95       	lsr	r25
    1a3a:	87 95       	ror	r24
    1a3c:	07 94       	ror	r0
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	07 94       	ror	r0
    1a44:	98 2f       	mov	r25, r24
    1a46:	80 2d       	mov	r24, r0
    1a48:	82 2b       	or	r24, r18
    1a4a:	8c 93       	st	X, r24
}
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <Icu_getInputCaptureValue>:
/*
* Description: Function to get the Timer1 Value when the input is captured
*              The value stored at Input Capture Register ICR1
*/
uint16 Icu_getInputCaptureValue(void)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1a5c:	e6 e4       	ldi	r30, 0x46	; 70
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <Icu_clearTimerValue>:

/*
* Description: Function to clear the Timer1 Value to start count from ZERO
*/
void Icu_clearTimerValue(void)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1a72:	ec e4       	ldi	r30, 0x4C	; 76
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	11 82       	std	Z+1, r1	; 0x01
    1a78:	10 82       	st	Z, r1
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <Icu_DeInit>:

/*
* Description: Function to disable the Timer1 to stop the ICU Driver
*/
void Icu_DeInit(void)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1a88:	ef e4       	ldi	r30, 0x4F	; 79
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	10 82       	st	Z, r1
	TCCR1B = 0;
    1a8e:	ee e4       	ldi	r30, 0x4E	; 78
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	10 82       	st	Z, r1
	TCNT1 = 0;
    1a94:	ec e4       	ldi	r30, 0x4C	; 76
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	11 82       	std	Z+1, r1	; 0x01
    1a9a:	10 82       	st	Z, r1
	ICR1 = 0;
    1a9c:	e6 e4       	ldi	r30, 0x46	; 70
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	11 82       	std	Z+1, r1	; 0x01
    1aa2:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1aa4:	a9 e5       	ldi	r26, 0x59	; 89
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e9 e5       	ldi	r30, 0x59	; 89
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8f 7d       	andi	r24, 0xDF	; 223
    1ab0:	8c 93       	st	X, r24
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <DIO_setupPinDirection>:

#include "../../UTILITIES/common_macros.h"


void DIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <DIO_setupPinDirection+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <DIO_setupPinDirection+0x8>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6a 83       	std	Y+2, r22	; 0x02
    1aca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	88 30       	cpi	r24, 0x08	; 8
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <DIO_setupPinDirection+0x1c>
    1ad2:	d5 c0       	rjmp	.+426    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <DIO_setupPinDirection+0x24>
    1ada:	d1 c0       	rjmp	.+418    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3d 83       	std	Y+5, r19	; 0x05
    1ae4:	2c 83       	std	Y+4, r18	; 0x04
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <DIO_setupPinDirection+0x3a>
    1af0:	43 c0       	rjmp	.+134    	; 0x1b78 <DIO_setupPinDirection+0xc0>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <DIO_setupPinDirection+0x4e>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	71 f0       	breq	.+28     	; 0x1b20 <DIO_setupPinDirection+0x68>
    1b04:	bc c0       	rjmp	.+376    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <DIO_setupPinDirection+0x5a>
    1b10:	5f c0       	rjmp	.+190    	; 0x1bd0 <DIO_setupPinDirection+0x118>
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	83 30       	cpi	r24, 0x03	; 3
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <DIO_setupPinDirection+0x66>
    1b1c:	85 c0       	rjmp	.+266    	; 0x1c28 <DIO_setupPinDirection+0x170>
    1b1e:	af c0       	rjmp	.+350    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	a1 f4       	brne	.+40     	; 0x1b4e <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b26:	aa e3       	ldi	r26, 0x3A	; 58
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	ea e3       	ldi	r30, 0x3A	; 58
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 2e       	mov	r0, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <DIO_setupPinDirection+0x8c>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	0a 94       	dec	r0
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <DIO_setupPinDirection+0x88>
    1b48:	84 2b       	or	r24, r20
    1b4a:	8c 93       	st	X, r24
    1b4c:	98 c0       	rjmp	.+304    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b4e:	aa e3       	ldi	r26, 0x3A	; 58
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ea e3       	ldi	r30, 0x3A	; 58
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_setupPinDirection+0xb4>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_setupPinDirection+0xb0>
    1b70:	80 95       	com	r24
    1b72:	84 23       	and	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	83 c0       	rjmp	.+262    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	a1 f4       	brne	.+40     	; 0x1ba6 <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b7e:	a7 e3       	ldi	r26, 0x37	; 55
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e7 e3       	ldi	r30, 0x37	; 55
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_setupPinDirection+0xe4>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_setupPinDirection+0xe0>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	6c c0       	rjmp	.+216    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ba6:	a7 e3       	ldi	r26, 0x37	; 55
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e7 e3       	ldi	r30, 0x37	; 55
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_setupPinDirection+0x10c>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_setupPinDirection+0x108>
    1bc8:	80 95       	com	r24
    1bca:	84 23       	and	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	57 c0       	rjmp	.+174    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	a1 f4       	brne	.+40     	; 0x1bfe <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bd6:	a4 e3       	ldi	r26, 0x34	; 52
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e4 e3       	ldi	r30, 0x34	; 52
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_setupPinDirection+0x13c>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_setupPinDirection+0x138>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	40 c0       	rjmp	.+128    	; 0x1c7e <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bfe:	a4 e3       	ldi	r26, 0x34	; 52
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e4 e3       	ldi	r30, 0x34	; 52
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <DIO_setupPinDirection+0x164>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <DIO_setupPinDirection+0x160>
    1c20:	80 95       	com	r24
    1c22:	84 23       	and	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	2b c0       	rjmp	.+86     	; 0x1c7e <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	a1 f4       	brne	.+40     	; 0x1c56 <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c2e:	a1 e3       	ldi	r26, 0x31	; 49
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e1 e3       	ldi	r30, 0x31	; 49
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_setupPinDirection+0x194>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_setupPinDirection+0x190>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	14 c0       	rjmp	.+40     	; 0x1c7e <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c56:	a1 e3       	ldi	r26, 0x31	; 49
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e1 e3       	ldi	r30, 0x31	; 49
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_setupPinDirection+0x1bc>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_setupPinDirection+0x1b8>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <DIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void DIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <DIO_writePin+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <DIO_writePin+0x8>
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	6a 83       	std	Y+2, r22	; 0x02
    1ca0:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	88 30       	cpi	r24, 0x08	; 8
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <DIO_writePin+0x1c>
    1ca8:	d5 c0       	rjmp	.+426    	; 0x1e54 <DIO_writePin+0x1c6>
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	84 30       	cpi	r24, 0x04	; 4
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <DIO_writePin+0x24>
    1cb0:	d1 c0       	rjmp	.+418    	; 0x1e54 <DIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3d 83       	std	Y+5, r19	; 0x05
    1cba:	2c 83       	std	Y+4, r18	; 0x04
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <DIO_writePin+0x3a>
    1cc6:	43 c0       	rjmp	.+134    	; 0x1d4e <DIO_writePin+0xc0>
    1cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <DIO_writePin+0x4e>
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	71 f0       	breq	.+28     	; 0x1cf6 <DIO_writePin+0x68>
    1cda:	bc c0       	rjmp	.+376    	; 0x1e54 <DIO_writePin+0x1c6>
    1cdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cde:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <DIO_writePin+0x5a>
    1ce6:	5f c0       	rjmp	.+190    	; 0x1da6 <DIO_writePin+0x118>
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	91 05       	cpc	r25, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <DIO_writePin+0x66>
    1cf2:	85 c0       	rjmp	.+266    	; 0x1dfe <DIO_writePin+0x170>
    1cf4:	af c0       	rjmp	.+350    	; 0x1e54 <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	a1 f4       	brne	.+40     	; 0x1d24 <DIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cfc:	ab e3       	ldi	r26, 0x3B	; 59
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e3       	ldi	r30, 0x3B	; 59
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 2e       	mov	r0, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_writePin+0x8c>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <DIO_writePin+0x88>
    1d1e:	84 2b       	or	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	98 c0       	rjmp	.+304    	; 0x1e54 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d24:	ab e3       	ldi	r26, 0x3B	; 59
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	eb e3       	ldi	r30, 0x3B	; 59
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_writePin+0xb4>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_writePin+0xb0>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	83 c0       	rjmp	.+262    	; 0x1e54 <DIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	a1 f4       	brne	.+40     	; 0x1d7c <DIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_writePin+0xe4>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_writePin+0xe0>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	6c c0       	rjmp	.+216    	; 0x1e54 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d7c:	a8 e3       	ldi	r26, 0x38	; 56
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_writePin+0x10c>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_writePin+0x108>
    1d9e:	80 95       	com	r24
    1da0:	84 23       	and	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	57 c0       	rjmp	.+174    	; 0x1e54 <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	a1 f4       	brne	.+40     	; 0x1dd4 <DIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1dac:	a5 e3       	ldi	r26, 0x35	; 53
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e3       	ldi	r30, 0x35	; 53
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <DIO_writePin+0x13c>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <DIO_writePin+0x138>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	40 c0       	rjmp	.+128    	; 0x1e54 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1dd4:	a5 e3       	ldi	r26, 0x35	; 53
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e5 e3       	ldi	r30, 0x35	; 53
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_writePin+0x164>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_writePin+0x160>
    1df6:	80 95       	com	r24
    1df8:	84 23       	and	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	2b c0       	rjmp	.+86     	; 0x1e54 <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	a1 f4       	brne	.+40     	; 0x1e2c <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e04:	a2 e3       	ldi	r26, 0x32	; 50
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e2 e3       	ldi	r30, 0x32	; 50
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <DIO_writePin+0x194>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <DIO_writePin+0x190>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_writePin+0x1bc>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <DIO_writePin+0x1b8>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <DIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 DIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <DIO_readPin+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <DIO_readPin+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e76:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	88 30       	cpi	r24, 0x08	; 8
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <DIO_readPin+0x1c>
    1e7e:	84 c0       	rjmp	.+264    	; 0x1f88 <DIO_readPin+0x124>
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <DIO_readPin+0x24>
    1e86:	80 c0       	rjmp	.+256    	; 0x1f88 <DIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	4c 81       	ldd	r20, Y+4	; 0x04
    1e94:	5d 81       	ldd	r21, Y+5	; 0x05
    1e96:	41 30       	cpi	r20, 0x01	; 1
    1e98:	51 05       	cpc	r21, r1
    1e9a:	79 f1       	breq	.+94     	; 0x1efa <DIO_readPin+0x96>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	34 f4       	brge	.+12     	; 0x1eb2 <DIO_readPin+0x4e>
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	21 15       	cp	r18, r1
    1eac:	31 05       	cpc	r19, r1
    1eae:	69 f0       	breq	.+26     	; 0x1eca <DIO_readPin+0x66>
    1eb0:	6b c0       	rjmp	.+214    	; 0x1f88 <DIO_readPin+0x124>
    1eb2:	4c 81       	ldd	r20, Y+4	; 0x04
    1eb4:	5d 81       	ldd	r21, Y+5	; 0x05
    1eb6:	42 30       	cpi	r20, 0x02	; 2
    1eb8:	51 05       	cpc	r21, r1
    1eba:	b9 f1       	breq	.+110    	; 0x1f2a <DIO_readPin+0xc6>
    1ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec0:	83 30       	cpi	r24, 0x03	; 3
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <DIO_readPin+0x64>
    1ec6:	49 c0       	rjmp	.+146    	; 0x1f5a <DIO_readPin+0xf6>
    1ec8:	5f c0       	rjmp	.+190    	; 0x1f88 <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1eca:	e9 e3       	ldi	r30, 0x39	; 57
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a9 01       	movw	r20, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_readPin+0x7e>
    1ede:	55 95       	asr	r21
    1ee0:	47 95       	ror	r20
    1ee2:	8a 95       	dec	r24
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_readPin+0x7a>
    1ee6:	ca 01       	movw	r24, r20
    1ee8:	81 70       	andi	r24, 0x01	; 1
    1eea:	90 70       	andi	r25, 0x00	; 0
    1eec:	88 23       	and	r24, r24
    1eee:	19 f0       	breq	.+6      	; 0x1ef6 <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	49 c0       	rjmp	.+146    	; 0x1f88 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ef6:	19 82       	std	Y+1, r1	; 0x01
    1ef8:	47 c0       	rjmp	.+142    	; 0x1f88 <DIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1efa:	e6 e3       	ldi	r30, 0x36	; 54
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a9 01       	movw	r20, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <DIO_readPin+0xae>
    1f0e:	55 95       	asr	r21
    1f10:	47 95       	ror	r20
    1f12:	8a 95       	dec	r24
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <DIO_readPin+0xaa>
    1f16:	ca 01       	movw	r24, r20
    1f18:	81 70       	andi	r24, 0x01	; 1
    1f1a:	90 70       	andi	r25, 0x00	; 0
    1f1c:	88 23       	and	r24, r24
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	31 c0       	rjmp	.+98     	; 0x1f88 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	2f c0       	rjmp	.+94     	; 0x1f88 <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f2a:	e3 e3       	ldi	r30, 0x33	; 51
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	88 2f       	mov	r24, r24
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a9 01       	movw	r20, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <DIO_readPin+0xde>
    1f3e:	55 95       	asr	r21
    1f40:	47 95       	ror	r20
    1f42:	8a 95       	dec	r24
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <DIO_readPin+0xda>
    1f46:	ca 01       	movw	r24, r20
    1f48:	81 70       	andi	r24, 0x01	; 1
    1f4a:	90 70       	andi	r25, 0x00	; 0
    1f4c:	88 23       	and	r24, r24
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	19 c0       	rjmp	.+50     	; 0x1f88 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f56:	19 82       	std	Y+1, r1	; 0x01
    1f58:	17 c0       	rjmp	.+46     	; 0x1f88 <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f5a:	e0 e3       	ldi	r30, 0x30	; 48
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a9 01       	movw	r20, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <DIO_readPin+0x10e>
    1f6e:	55 95       	asr	r21
    1f70:	47 95       	ror	r20
    1f72:	8a 95       	dec	r24
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <DIO_readPin+0x10a>
    1f76:	ca 01       	movw	r24, r20
    1f78:	81 70       	andi	r24, 0x01	; 1
    1f7a:	90 70       	andi	r25, 0x00	; 0
    1f7c:	88 23       	and	r24, r24
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f86:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <DIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <DIO_setupPortDirection+0x6>
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <DIO_setupPortDirection+0x8>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	84 30       	cpi	r24, 0x04	; 4
    1fae:	90 f5       	brcc	.+100    	; 0x2014 <DIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3c 83       	std	Y+4, r19	; 0x04
    1fb8:	2b 83       	std	Y+3, r18	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	d1 f0       	breq	.+52     	; 0x1ff8 <DIO_setupPortDirection+0x5e>
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <DIO_setupPortDirection+0x3e>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <DIO_setupPortDirection+0x54>
    1fd6:	1e c0       	rjmp	.+60     	; 0x2014 <DIO_setupPortDirection+0x7a>
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	81 f0       	breq	.+32     	; 0x2002 <DIO_setupPortDirection+0x68>
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	91 05       	cpc	r25, r1
    1fea:	81 f0       	breq	.+32     	; 0x200c <DIO_setupPortDirection+0x72>
    1fec:	13 c0       	rjmp	.+38     	; 0x2014 <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fee:	ea e3       	ldi	r30, 0x3A	; 58
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	80 83       	st	Z, r24
    1ff6:	0e c0       	rjmp	.+28     	; 0x2014 <DIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ff8:	e7 e3       	ldi	r30, 0x37	; 55
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	80 83       	st	Z, r24
    2000:	09 c0       	rjmp	.+18     	; 0x2014 <DIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2002:	e4 e3       	ldi	r30, 0x34	; 52
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	80 83       	st	Z, r24
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <DIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    200c:	e1 e3       	ldi	r30, 0x31	; 49
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	80 83       	st	Z, r24
			break;
		}
	}
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_num, uint8 value)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <DIO_writePort+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <DIO_writePort+0x8>
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	84 30       	cpi	r24, 0x04	; 4
    2036:	90 f5       	brcc	.+100    	; 0x209c <DIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	3c 83       	std	Y+4, r19	; 0x04
    2040:	2b 83       	std	Y+3, r18	; 0x03
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	91 05       	cpc	r25, r1
    204a:	d1 f0       	breq	.+52     	; 0x2080 <DIO_writePort+0x5e>
    204c:	2b 81       	ldd	r18, Y+3	; 0x03
    204e:	3c 81       	ldd	r19, Y+4	; 0x04
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	2c f4       	brge	.+10     	; 0x2060 <DIO_writePort+0x3e>
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	61 f0       	breq	.+24     	; 0x2076 <DIO_writePort+0x54>
    205e:	1e c0       	rjmp	.+60     	; 0x209c <DIO_writePort+0x7a>
    2060:	2b 81       	ldd	r18, Y+3	; 0x03
    2062:	3c 81       	ldd	r19, Y+4	; 0x04
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	81 f0       	breq	.+32     	; 0x208a <DIO_writePort+0x68>
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	91 05       	cpc	r25, r1
    2072:	81 f0       	breq	.+32     	; 0x2094 <DIO_writePort+0x72>
    2074:	13 c0       	rjmp	.+38     	; 0x209c <DIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2076:	eb e3       	ldi	r30, 0x3B	; 59
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
    207e:	0e c0       	rjmp	.+28     	; 0x209c <DIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = value;
    2080:	e8 e3       	ldi	r30, 0x38	; 56
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	80 83       	st	Z, r24
    2088:	09 c0       	rjmp	.+18     	; 0x209c <DIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = value;
    208a:	e5 e3       	ldi	r30, 0x35	; 53
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	80 83       	st	Z, r24
    2092:	04 c0       	rjmp	.+8      	; 0x209c <DIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = value;
    2094:	e2 e3       	ldi	r30, 0x32	; 50
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	80 83       	st	Z, r24
			break;
		}
	}
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_num)
{	uint8 value = LOGIC_LOW;
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <DIO_readPort+0x6>
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <DIO_readPort+0x8>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    20b8:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	84 30       	cpi	r24, 0x04	; 4
    20be:	90 f5       	brcc	.+100    	; 0x2124 <DIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	3c 83       	std	Y+4, r19	; 0x04
    20c8:	2b 83       	std	Y+3, r18	; 0x03
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	91 05       	cpc	r25, r1
    20d2:	d1 f0       	breq	.+52     	; 0x2108 <DIO_readPort+0x5e>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <DIO_readPort+0x3e>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	61 f0       	breq	.+24     	; 0x20fe <DIO_readPort+0x54>
    20e6:	1e c0       	rjmp	.+60     	; 0x2124 <DIO_readPort+0x7a>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	22 30       	cpi	r18, 0x02	; 2
    20ee:	31 05       	cpc	r19, r1
    20f0:	81 f0       	breq	.+32     	; 0x2112 <DIO_readPort+0x68>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	81 f0       	breq	.+32     	; 0x211c <DIO_readPort+0x72>
    20fc:	13 c0       	rjmp	.+38     	; 0x2124 <DIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20fe:	e9 e3       	ldi	r30, 0x39	; 57
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <DIO_readPort+0x7a>
			break;

		case PORTB_ID:
			value = PINB;
    2108:	e6 e3       	ldi	r30, 0x36	; 54
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	09 c0       	rjmp	.+18     	; 0x2124 <DIO_readPort+0x7a>
			break;

		case PORTC_ID:
			value = PINC;
    2112:	e3 e3       	ldi	r30, 0x33	; 51
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <DIO_readPort+0x7a>
			break;

		case PORTD_ID:
			value = PIND;
    211c:	e0 e3       	ldi	r30, 0x30	; 48
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <DIO_togglePin>:

void DIO_togglePin(uint8 port_num, uint8 pin_num)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <DIO_togglePin+0x6>
    213a:	00 d0       	rcall	.+0      	; 0x213c <DIO_togglePin+0x8>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	88 30       	cpi	r24, 0x08	; 8
    2148:	08 f0       	brcs	.+2      	; 0x214c <DIO_togglePin+0x18>
    214a:	72 c0       	rjmp	.+228    	; 0x2230 <DIO_togglePin+0xfc>
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	84 30       	cpi	r24, 0x04	; 4
    2150:	08 f0       	brcs	.+2      	; 0x2154 <DIO_togglePin+0x20>
    2152:	6e c0       	rjmp	.+220    	; 0x2230 <DIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	3c 83       	std	Y+4, r19	; 0x04
    215c:	2b 83       	std	Y+3, r18	; 0x03
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	91 05       	cpc	r25, r1
    2166:	49 f1       	breq	.+82     	; 0x21ba <DIO_togglePin+0x86>
    2168:	2b 81       	ldd	r18, Y+3	; 0x03
    216a:	3c 81       	ldd	r19, Y+4	; 0x04
    216c:	22 30       	cpi	r18, 0x02	; 2
    216e:	31 05       	cpc	r19, r1
    2170:	2c f4       	brge	.+10     	; 0x217c <DIO_togglePin+0x48>
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	61 f0       	breq	.+24     	; 0x2192 <DIO_togglePin+0x5e>
    217a:	5a c0       	rjmp	.+180    	; 0x2230 <DIO_togglePin+0xfc>
    217c:	2b 81       	ldd	r18, Y+3	; 0x03
    217e:	3c 81       	ldd	r19, Y+4	; 0x04
    2180:	22 30       	cpi	r18, 0x02	; 2
    2182:	31 05       	cpc	r19, r1
    2184:	71 f1       	breq	.+92     	; 0x21e2 <DIO_togglePin+0xae>
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	83 30       	cpi	r24, 0x03	; 3
    218c:	91 05       	cpc	r25, r1
    218e:	e9 f1       	breq	.+122    	; 0x220a <DIO_togglePin+0xd6>
    2190:	4f c0       	rjmp	.+158    	; 0x2230 <DIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA,pin_num);
    2192:	ab e3       	ldi	r26, 0x3B	; 59
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	eb e3       	ldi	r30, 0x3B	; 59
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	48 2f       	mov	r20, r24
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 2e       	mov	r0, r18
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <DIO_togglePin+0x7c>
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	0a 94       	dec	r0
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <DIO_togglePin+0x78>
    21b4:	84 27       	eor	r24, r20
    21b6:	8c 93       	st	X, r24
    21b8:	3b c0       	rjmp	.+118    	; 0x2230 <DIO_togglePin+0xfc>
			break;

		case PORTB_ID:
			TOGGLE_BIT(PORTB,pin_num);
    21ba:	a8 e3       	ldi	r26, 0x38	; 56
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e8 e3       	ldi	r30, 0x38	; 56
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <DIO_togglePin+0xa4>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <DIO_togglePin+0xa0>
    21dc:	84 27       	eor	r24, r20
    21de:	8c 93       	st	X, r24
    21e0:	27 c0       	rjmp	.+78     	; 0x2230 <DIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC,pin_num);
    21e2:	a5 e3       	ldi	r26, 0x35	; 53
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e5 e3       	ldi	r30, 0x35	; 53
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	48 2f       	mov	r20, r24
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	02 2e       	mov	r0, r18
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <DIO_togglePin+0xcc>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <DIO_togglePin+0xc8>
    2204:	84 27       	eor	r24, r20
    2206:	8c 93       	st	X, r24
    2208:	13 c0       	rjmp	.+38     	; 0x2230 <DIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD,pin_num);
    220a:	a2 e3       	ldi	r26, 0x32	; 50
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e2 e3       	ldi	r30, 0x32	; 50
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	48 2f       	mov	r20, r24
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 2e       	mov	r0, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_togglePin+0xf4>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	0a 94       	dec	r0
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <DIO_togglePin+0xf0>
    222c:	84 27       	eor	r24, r20
    222e:	8c 93       	st	X, r24
			break;
		}
	}
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <timercallBckFunc>:
//		g_testCase++;
//	}
//}

void timercallBckFunc(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <timercallBckFunc+0x6>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter=0;

	switch(ultrasonicInterval)
    2248:	80 91 89 01 	lds	r24, 0x0189
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	3a 83       	std	Y+2, r19	; 0x02
    2252:	29 83       	std	Y+1, r18	; 0x01
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	82 30       	cpi	r24, 0x02	; 2
    225a:	91 05       	cpc	r25, r1
    225c:	71 f1       	breq	.+92     	; 0x22ba <timercallBckFunc+0x7c>
    225e:	29 81       	ldd	r18, Y+1	; 0x01
    2260:	3a 81       	ldd	r19, Y+2	; 0x02
    2262:	23 30       	cpi	r18, 0x03	; 3
    2264:	31 05       	cpc	r19, r1
    2266:	34 f4       	brge	.+12     	; 0x2274 <timercallBckFunc+0x36>
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	91 05       	cpc	r25, r1
    2270:	69 f0       	breq	.+26     	; 0x228c <timercallBckFunc+0x4e>
    2272:	7a c0       	rjmp	.+244    	; 0x2368 <timercallBckFunc+0x12a>
    2274:	29 81       	ldd	r18, Y+1	; 0x01
    2276:	3a 81       	ldd	r19, Y+2	; 0x02
    2278:	23 30       	cpi	r18, 0x03	; 3
    227a:	31 05       	cpc	r19, r1
    227c:	d9 f1       	breq	.+118    	; 0x22f4 <timercallBckFunc+0xb6>
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	91 05       	cpc	r25, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <timercallBckFunc+0x4c>
    2288:	52 c0       	rjmp	.+164    	; 0x232e <timercallBckFunc+0xf0>
    228a:	6e c0       	rjmp	.+220    	; 0x2368 <timercallBckFunc+0x12a>
	case LOW_RISK_DISTANCE:
		//we need to make the buzzer on for 400ms and off for 100ms
		//to make it on for 100ms we need the timer to overflow 6 times
		//to make it off for 100ms we need the timer to overflow 6 times
		//so the buzzer will toggle when counter is 24
		Parking_LED_default();
    228c:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>

		//		if(counter > 24)
		//		{
		//			counter = 0;
		//		}
		if(counter == 24)
    2290:	80 91 8b 01 	lds	r24, 0x018B
    2294:	88 31       	cpi	r24, 0x18	; 24
    2296:	59 f4       	brne	.+22     	; 0x22ae <timercallBckFunc+0x70>
		{
			BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	67 e0       	ldi	r22, 0x07	; 7
    229c:	0e 94 40 18 	call	0x3080	; 0x3080 <BUZZER_TOGGLE>
			LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_LOW_RISK_LED_PIN_ID);
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	64 e0       	ldi	r22, 0x04	; 4
    22a4:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LED_TOGGLE>
			counter = 0;
    22a8:	10 92 8b 01 	sts	0x018B, r1
    22ac:	65 c0       	rjmp	.+202    	; 0x2378 <timercallBckFunc+0x13a>
		}
		else
		{
			counter++;
    22ae:	80 91 8b 01 	lds	r24, 0x018B
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
    22b4:	80 93 8b 01 	sts	0x018B, r24
    22b8:	5f c0       	rjmp	.+190    	; 0x2378 <timercallBckFunc+0x13a>
		break;

	case MODERATE_RISK_DISTANCE:
		//we need to make the buzzer toggle each 300ms
		//so it will toggle when counter is 18
		Parking_LED_default();
    22ba:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>

		//	Buzzer_on(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
		//	LED_ON(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);

		if(counter > 18)
    22be:	80 91 8b 01 	lds	r24, 0x018B
    22c2:	83 31       	cpi	r24, 0x13	; 19
    22c4:	10 f0       	brcs	.+4      	; 0x22ca <timercallBckFunc+0x8c>
		{
			counter = 0;
    22c6:	10 92 8b 01 	sts	0x018B, r1
		}
		if(counter == 18)
    22ca:	80 91 8b 01 	lds	r24, 0x018B
    22ce:	82 31       	cpi	r24, 0x12	; 18
    22d0:	59 f4       	brne	.+22     	; 0x22e8 <timercallBckFunc+0xaa>
		{
			BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	67 e0       	ldi	r22, 0x07	; 7
    22d6:	0e 94 40 18 	call	0x3080	; 0x3080 <BUZZER_TOGGLE>
			LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	65 e0       	ldi	r22, 0x05	; 5
    22de:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LED_TOGGLE>
			counter = 0;
    22e2:	10 92 8b 01 	sts	0x018B, r1
    22e6:	48 c0       	rjmp	.+144    	; 0x2378 <timercallBckFunc+0x13a>
		}
		else
		{
			counter++;
    22e8:	80 91 8b 01 	lds	r24, 0x018B
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	80 93 8b 01 	sts	0x018B, r24
    22f2:	42 c0       	rjmp	.+132    	; 0x2378 <timercallBckFunc+0x13a>
		break;

	case HIGH_RISK_DISTANCE:
		//we need to make the buzzer toggle each 200ms
		//so it will toggle when counter is 12
		Parking_LED_default();
    22f4:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>
		//	Buzzer_on(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
		//	LED_ON(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);

		if(counter > 12)
    22f8:	80 91 8b 01 	lds	r24, 0x018B
    22fc:	8d 30       	cpi	r24, 0x0D	; 13
    22fe:	10 f0       	brcs	.+4      	; 0x2304 <timercallBckFunc+0xc6>
		{
			counter = 0;
    2300:	10 92 8b 01 	sts	0x018B, r1
		}
		if(counter == 12)
    2304:	80 91 8b 01 	lds	r24, 0x018B
    2308:	8c 30       	cpi	r24, 0x0C	; 12
    230a:	59 f4       	brne	.+22     	; 0x2322 <timercallBckFunc+0xe4>
		{
			BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	67 e0       	ldi	r22, 0x07	; 7
    2310:	0e 94 40 18 	call	0x3080	; 0x3080 <BUZZER_TOGGLE>
			LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	66 e0       	ldi	r22, 0x06	; 6
    2318:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LED_TOGGLE>
			counter = 0;
    231c:	10 92 8b 01 	sts	0x018B, r1
    2320:	2b c0       	rjmp	.+86     	; 0x2378 <timercallBckFunc+0x13a>
		}
		else
		{
			counter++;
    2322:	80 91 8b 01 	lds	r24, 0x018B
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	80 93 8b 01 	sts	0x018B, r24
    232c:	25 c0       	rjmp	.+74     	; 0x2378 <timercallBckFunc+0x13a>
		break;

	case EXTREME_RISK_DISTANCE:
		//we need to make the buzzer toggle each 100ms
		//so it will toggle when counter is 6
		Parking_LED_default();
    232e:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>
		//	Buzzer_on(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
		//	LED_ON(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);

		if(counter > 6)
    2332:	80 91 8b 01 	lds	r24, 0x018B
    2336:	87 30       	cpi	r24, 0x07	; 7
    2338:	10 f0       	brcs	.+4      	; 0x233e <timercallBckFunc+0x100>
		{
			counter = 0;
    233a:	10 92 8b 01 	sts	0x018B, r1
		}
		if(counter == 6)
    233e:	80 91 8b 01 	lds	r24, 0x018B
    2342:	86 30       	cpi	r24, 0x06	; 6
    2344:	59 f4       	brne	.+22     	; 0x235c <timercallBckFunc+0x11e>
		{
			BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	67 e0       	ldi	r22, 0x07	; 7
    234a:	0e 94 40 18 	call	0x3080	; 0x3080 <BUZZER_TOGGLE>
			LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	66 e0       	ldi	r22, 0x06	; 6
    2352:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <LED_TOGGLE>
			counter = 0;
    2356:	10 92 8b 01 	sts	0x018B, r1
    235a:	0e c0       	rjmp	.+28     	; 0x2378 <timercallBckFunc+0x13a>
		}
		else
		{
			counter++;
    235c:	80 91 8b 01 	lds	r24, 0x018B
    2360:	8f 5f       	subi	r24, 0xFF	; 255
    2362:	80 93 8b 01 	sts	0x018B, r24
    2366:	08 c0       	rjmp	.+16     	; 0x2378 <timercallBckFunc+0x13a>
		}
		break;

	default:
		Parking_LED_default();
    2368:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>
		BUZZER_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	67 e0       	ldi	r22, 0x07	; 7
    2370:	0e 94 2f 18 	call	0x305e	; 0x305e <BUZZER_OFF>
		counter = 0;
    2374:	10 92 8b 01 	sts	0x018B, r1
		break;
	}
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <warning>:

void warning(uint16 Distance)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <warning+0x6>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
	if(Distance <= LOW_RISK_DISTANCE_UPPER_LIMIT && Distance > LOW_RISK_DISTANCE_LOWER_LIMIT)
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	85 31       	cpi	r24, 0x15	; 21
    2396:	91 05       	cpc	r25, r1
    2398:	60 f4       	brcc	.+24     	; 0x23b2 <warning+0x30>
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	80 31       	cpi	r24, 0x10	; 16
    23a0:	91 05       	cpc	r25, r1
    23a2:	38 f0       	brcs	.+14     	; 0x23b2 <warning+0x30>
	{
		ultrasonicInterval = LOW_RISK_DISTANCE;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	80 93 89 01 	sts	0x0189, r24
		Timer_reset(Timer0);
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    23b0:	33 c0       	rjmp	.+102    	; 0x2418 <warning+0x96>
	}
	else if(Distance <= MODERATE_RISK_DISTANCE_UPPER_LIMIT && Distance > MODERATE_RISK_DISTANCE_LOWER_LIMIT)
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	9a 81       	ldd	r25, Y+2	; 0x02
    23b6:	80 31       	cpi	r24, 0x10	; 16
    23b8:	91 05       	cpc	r25, r1
    23ba:	60 f4       	brcc	.+24     	; 0x23d4 <warning+0x52>
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	8b 30       	cpi	r24, 0x0B	; 11
    23c2:	91 05       	cpc	r25, r1
    23c4:	38 f0       	brcs	.+14     	; 0x23d4 <warning+0x52>
	{
		ultrasonicInterval = MODERATE_RISK_DISTANCE;
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	80 93 89 01 	sts	0x0189, r24
		Timer_reset(Timer0);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    23d2:	22 c0       	rjmp	.+68     	; 0x2418 <warning+0x96>
	}
	else if(Distance <= HIGH_RISK_DISTANCE_UPPER_LIMIT && Distance > HIGH_RISK_DISTANCE_LOWER_LIMIT)
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	8b 30       	cpi	r24, 0x0B	; 11
    23da:	91 05       	cpc	r25, r1
    23dc:	60 f4       	brcc	.+24     	; 0x23f6 <warning+0x74>
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	86 30       	cpi	r24, 0x06	; 6
    23e4:	91 05       	cpc	r25, r1
    23e6:	38 f0       	brcs	.+14     	; 0x23f6 <warning+0x74>
	{
		ultrasonicInterval = HIGH_RISK_DISTANCE;
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	80 93 89 01 	sts	0x0189, r24
		Timer_reset(Timer0);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    23f4:	11 c0       	rjmp	.+34     	; 0x2418 <warning+0x96>
	}
	else if(Distance <= EXTREME_RISK_DISTANCE_UPPER_LIMIT)
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	86 30       	cpi	r24, 0x06	; 6
    23fc:	91 05       	cpc	r25, r1
    23fe:	38 f4       	brcc	.+14     	; 0x240e <warning+0x8c>
	{
		ultrasonicInterval = EXTREME_RISK_DISTANCE;
    2400:	84 e0       	ldi	r24, 0x04	; 4
    2402:	80 93 89 01 	sts	0x0189, r24
		Timer_reset(Timer0);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <warning+0x96>
	}
	else
	{
		ultrasonicInterval = SAFE_DISTANCE;
    240e:	10 92 89 01 	sts	0x0189, r1
		Timer_reset(Timer0);
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
	}
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <Parking_LED_init>:

void Parking_LED_init(void)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
	LED_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_LOW_RISK_LED_PIN_ID);
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	64 e0       	ldi	r22, 0x04	; 4
    242e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <LED_init>
	LED_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	65 e0       	ldi	r22, 0x05	; 5
    2436:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <LED_init>
	LED_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <LED_init>
	BUZZER_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	67 e0       	ldi	r22, 0x07	; 7
    2446:	0e 94 08 18 	call	0x3010	; 0x3010 <BUZZER_init>
}
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <Parking_LED_default>:

void Parking_LED_default(void)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
	LED_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_LOW_RISK_LED_PIN_ID);
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	64 e0       	ldi	r22, 0x04	; 4
    245c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LED_OFF>
	LED_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	65 e0       	ldi	r22, 0x05	; 5
    2464:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LED_OFF>
	LED_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	66 e0       	ldi	r22, 0x06	; 6
    246c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LED_OFF>
}
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <Temp_state>:

void Temp_state(void){
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
	if (g_BMP180_readings.temperature >= TEMPERATURE_SEVERE)
    247e:	80 91 7c 01 	lds	r24, 0x017C
    2482:	90 91 7d 01 	lds	r25, 0x017D
    2486:	a0 91 7e 01 	lds	r26, 0x017E
    248a:	b0 91 7f 01 	lds	r27, 0x017F
    248e:	8d 32       	cpi	r24, 0x2D	; 45
    2490:	91 05       	cpc	r25, r1
    2492:	a1 05       	cpc	r26, r1
    2494:	b1 05       	cpc	r27, r1
    2496:	24 f0       	brlt	.+8      	; 0x24a0 <Temp_state+0x2a>
	{
		g_temperature_state = SEVERE;
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	80 93 88 01 	sts	0x0188, r24
    249e:	37 c0       	rjmp	.+110    	; 0x250e <Temp_state+0x98>
	}
	else if ((g_BMP180_readings.temperature >= TEMPERATURE_MODERATE) && (g_BMP180_readings.temperature < TEMPERATURE_SEVERE))
    24a0:	80 91 7c 01 	lds	r24, 0x017C
    24a4:	90 91 7d 01 	lds	r25, 0x017D
    24a8:	a0 91 7e 01 	lds	r26, 0x017E
    24ac:	b0 91 7f 01 	lds	r27, 0x017F
    24b0:	86 32       	cpi	r24, 0x26	; 38
    24b2:	91 05       	cpc	r25, r1
    24b4:	a1 05       	cpc	r26, r1
    24b6:	b1 05       	cpc	r27, r1
    24b8:	8c f0       	brlt	.+34     	; 0x24dc <Temp_state+0x66>
    24ba:	80 91 7c 01 	lds	r24, 0x017C
    24be:	90 91 7d 01 	lds	r25, 0x017D
    24c2:	a0 91 7e 01 	lds	r26, 0x017E
    24c6:	b0 91 7f 01 	lds	r27, 0x017F
    24ca:	8d 32       	cpi	r24, 0x2D	; 45
    24cc:	91 05       	cpc	r25, r1
    24ce:	a1 05       	cpc	r26, r1
    24d0:	b1 05       	cpc	r27, r1
    24d2:	24 f4       	brge	.+8      	; 0x24dc <Temp_state+0x66>
	{
		g_temperature_state = MODERATE;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 93 88 01 	sts	0x0188, r24
    24da:	19 c0       	rjmp	.+50     	; 0x250e <Temp_state+0x98>
	}
	else if ((g_BMP180_readings.temperature >= TEMPERATURE_SAFE) && (g_BMP180_readings.temperature < TEMPERATURE_MODERATE))
    24dc:	80 91 7c 01 	lds	r24, 0x017C
    24e0:	90 91 7d 01 	lds	r25, 0x017D
    24e4:	a0 91 7e 01 	lds	r26, 0x017E
    24e8:	b0 91 7f 01 	lds	r27, 0x017F
    24ec:	bb 23       	and	r27, r27
    24ee:	7c f0       	brlt	.+30     	; 0x250e <Temp_state+0x98>
    24f0:	80 91 7c 01 	lds	r24, 0x017C
    24f4:	90 91 7d 01 	lds	r25, 0x017D
    24f8:	a0 91 7e 01 	lds	r26, 0x017E
    24fc:	b0 91 7f 01 	lds	r27, 0x017F
    2500:	86 32       	cpi	r24, 0x26	; 38
    2502:	91 05       	cpc	r25, r1
    2504:	a1 05       	cpc	r26, r1
    2506:	b1 05       	cpc	r27, r1
    2508:	14 f4       	brge	.+4      	; 0x250e <Temp_state+0x98>
	{
		g_temperature_state = SAFE;
    250a:	10 92 88 01 	sts	0x0188, r1
	}
}
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <Press_state>:

void Press_state(void)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	if (g_BMP180_readings.pressure >= PRESSURE_SEVERE)
    251c:	80 91 80 01 	lds	r24, 0x0180
    2520:	90 91 81 01 	lds	r25, 0x0181
    2524:	a0 91 82 01 	lds	r26, 0x0182
    2528:	b0 91 83 01 	lds	r27, 0x0183
    252c:	80 31       	cpi	r24, 0x10	; 16
    252e:	27 e2       	ldi	r18, 0x27	; 39
    2530:	92 07       	cpc	r25, r18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	a2 07       	cpc	r26, r18
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	b2 07       	cpc	r27, r18
    253a:	24 f0       	brlt	.+8      	; 0x2544 <Press_state+0x30>
	{
		g_pressure_state = SEVERE;
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	80 93 87 01 	sts	0x0187, r24
    2542:	46 c0       	rjmp	.+140    	; 0x25d0 <Press_state+0xbc>
	}
	else if ((g_BMP180_readings.pressure >= PRESSURE_MODERATE) && (g_BMP180_readings.pressure < PRESSURE_SEVERE))
    2544:	80 91 80 01 	lds	r24, 0x0180
    2548:	90 91 81 01 	lds	r25, 0x0181
    254c:	a0 91 82 01 	lds	r26, 0x0182
    2550:	b0 91 83 01 	lds	r27, 0x0183
    2554:	80 3d       	cpi	r24, 0xD0	; 208
    2556:	27 e0       	ldi	r18, 0x07	; 7
    2558:	92 07       	cpc	r25, r18
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	a2 07       	cpc	r26, r18
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	b2 07       	cpc	r27, r18
    2562:	a4 f0       	brlt	.+40     	; 0x258c <Press_state+0x78>
    2564:	80 91 80 01 	lds	r24, 0x0180
    2568:	90 91 81 01 	lds	r25, 0x0181
    256c:	a0 91 82 01 	lds	r26, 0x0182
    2570:	b0 91 83 01 	lds	r27, 0x0183
    2574:	80 31       	cpi	r24, 0x10	; 16
    2576:	27 e2       	ldi	r18, 0x27	; 39
    2578:	92 07       	cpc	r25, r18
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	a2 07       	cpc	r26, r18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	b2 07       	cpc	r27, r18
    2582:	24 f4       	brge	.+8      	; 0x258c <Press_state+0x78>
	{
		g_pressure_state = MODERATE;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	80 93 87 01 	sts	0x0187, r24
    258a:	22 c0       	rjmp	.+68     	; 0x25d0 <Press_state+0xbc>
	}
	else if ((g_BMP180_readings.pressure >= PRESSURE_SAFE) && (g_BMP180_readings.pressure < PRESSURE_MODERATE))
    258c:	80 91 80 01 	lds	r24, 0x0180
    2590:	90 91 81 01 	lds	r25, 0x0181
    2594:	a0 91 82 01 	lds	r26, 0x0182
    2598:	b0 91 83 01 	lds	r27, 0x0183
    259c:	8c 32       	cpi	r24, 0x2C	; 44
    259e:	21 e0       	ldi	r18, 0x01	; 1
    25a0:	92 07       	cpc	r25, r18
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	a2 07       	cpc	r26, r18
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	b2 07       	cpc	r27, r18
    25aa:	94 f0       	brlt	.+36     	; 0x25d0 <Press_state+0xbc>
    25ac:	80 91 80 01 	lds	r24, 0x0180
    25b0:	90 91 81 01 	lds	r25, 0x0181
    25b4:	a0 91 82 01 	lds	r26, 0x0182
    25b8:	b0 91 83 01 	lds	r27, 0x0183
    25bc:	80 3d       	cpi	r24, 0xD0	; 208
    25be:	27 e0       	ldi	r18, 0x07	; 7
    25c0:	92 07       	cpc	r25, r18
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	a2 07       	cpc	r26, r18
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	b2 07       	cpc	r27, r18
    25ca:	14 f4       	brge	.+4      	; 0x25d0 <Press_state+0xbc>
	{
		g_pressure_state = SAFE;
    25cc:	10 92 87 01 	sts	0x0187, r1
	}
}
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <Action_severe>:

void Action_severe(void)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
	BUZZER_ON(BMP_BUZZER_PORT_ID,BMP_BUZZER_PIN_ID);
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	65 e0       	ldi	r22, 0x05	; 5
    25e2:	0e 94 1e 18 	call	0x303c	; 0x303c <BUZZER_ON>
	LED_ON(BMP_LED_PORT_ID,BMP_LED_PIN_ID);
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	63 e0       	ldi	r22, 0x03	; 3
    25ea:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <LED_ON>
	if (g_temperature_state == SEVERE || g_temperature_state == MODERATE)
    25ee:	80 91 88 01 	lds	r24, 0x0188
    25f2:	82 30       	cpi	r24, 0x02	; 2
    25f4:	21 f0       	breq	.+8      	; 0x25fe <Action_severe+0x28>
    25f6:	80 91 88 01 	lds	r24, 0x0188
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	19 f4       	brne	.+6      	; 0x2604 <Action_severe+0x2e>
	{
		WATERPUMP_on();
    25fe:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <WATERPUMP_on>
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <Action_severe+0x32>
	}
	else
	{
		WATERPUMP_off();
    2604:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <WATERPUMP_off>
	}
	DIO_writePin(SLS_FLAG_PORT_ID, SLS_FLAG_PIN_ID, LOGIC_LOW);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	62 e0       	ldi	r22, 0x02	; 2
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
	//	_delay_ms(5);
	//	DIO_writePin(SLS_FLAG_PORT_ID, SLS_FLAG_PIN_ID, LOGIC_LOW);
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <Action_moderate>:

void Action_moderate(void)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
	BUZZER_ON(BMP_BUZZER_PORT_ID,BMP_BUZZER_PIN_ID);
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	0e 94 1e 18 	call	0x303c	; 0x303c <BUZZER_ON>
	LED_ON(BMP_LED_PORT_ID,BMP_LED_PIN_ID);
    2628:	83 e0       	ldi	r24, 0x03	; 3
    262a:	63 e0       	ldi	r22, 0x03	; 3
    262c:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <LED_ON>
	if (g_temperature_state == SEVERE || g_temperature_state == MODERATE)
    2630:	80 91 88 01 	lds	r24, 0x0188
    2634:	82 30       	cpi	r24, 0x02	; 2
    2636:	21 f0       	breq	.+8      	; 0x2640 <Action_moderate+0x28>
    2638:	80 91 88 01 	lds	r24, 0x0188
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	19 f4       	brne	.+6      	; 0x2646 <Action_moderate+0x2e>
	{
		WATERPUMP_on();
    2640:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <WATERPUMP_on>
    2644:	02 c0       	rjmp	.+4      	; 0x264a <Action_moderate+0x32>
	}
	else
	{
		WATERPUMP_off();
    2646:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <WATERPUMP_off>

	}
	DIO_writePin(SLS_FLAG_PORT_ID, SLS_FLAG_PIN_ID, LOGIC_HIGH);
    264a:	83 e0       	ldi	r24, 0x03	; 3
    264c:	62 e0       	ldi	r22, 0x02	; 2
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <Action_safe>:

void Action_safe(void)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	BUZZER_OFF(BMP_BUZZER_PORT_ID,BMP_BUZZER_PIN_ID);
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	65 e0       	ldi	r22, 0x05	; 5
    2666:	0e 94 2f 18 	call	0x305e	; 0x305e <BUZZER_OFF>
	LED_OFF(BMP_LED_PORT_ID,BMP_LED_PIN_ID);
    266a:	83 e0       	ldi	r24, 0x03	; 3
    266c:	63 e0       	ldi	r22, 0x03	; 3
    266e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LED_OFF>
	WATERPUMP_off();
    2672:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <WATERPUMP_off>
	DIO_writePin(SLS_FLAG_PORT_ID, SLS_FLAG_PIN_ID, LOGIC_HIGH);
    2676:	83 e0       	ldi	r24, 0x03	; 3
    2678:	62 e0       	ldi	r22, 0x02	; 2
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <Detection_LED_init>:

void Detection_LED_init(void)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	LED_init(BMP_BUZZER_PORT_ID,BMP_BUZZER_PIN_ID);
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	65 e0       	ldi	r22, 0x05	; 5
    2692:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <LED_init>
	BUZZER_init(BMP_LED_PORT_ID,BMP_LED_PIN_ID);
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	63 e0       	ldi	r22, 0x03	; 3
    269a:	0e 94 08 18 	call	0x3010	; 0x3010 <BUZZER_init>
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <Test_Case_Config>:
//	MCUCSR |= (1<<ISC2);     // Trigger INT2 with the raising edge
//	GICR   |= (1<<INT2);	 // Enable external interrupt pin INT2
//}

void Test_Case_Config(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	if((DIO_readPin(INTERRUPT_TESTCASE_PORT1, INTERRUPT_TESTCASE_PIN1) == LOGIC_LOW) && (DIO_readPin(INTERRUPT_TESTCASE_PORT2, INTERRUPT_TESTCASE_PIN2) == LOGIC_LOW))
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	62 e0       	ldi	r22, 0x02	; 2
    26b0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    26b4:	88 23       	and	r24, r24
    26b6:	49 f4       	brne	.+18     	; 0x26ca <Test_Case_Config+0x26>
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	63 e0       	ldi	r22, 0x03	; 3
    26bc:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    26c0:	88 23       	and	r24, r24
    26c2:	19 f4       	brne	.+6      	; 0x26ca <Test_Case_Config+0x26>
	{
		g_testCase = TEST_DEFAULT;
    26c4:	10 92 8a 01 	sts	0x018A, r1
    26c8:	2f c0       	rjmp	.+94     	; 0x2728 <Test_Case_Config+0x84>
	}
	else if((DIO_readPin(INTERRUPT_TESTCASE_PORT1, INTERRUPT_TESTCASE_PIN1) == LOGIC_LOW) && (DIO_readPin(INTERRUPT_TESTCASE_PORT2, INTERRUPT_TESTCASE_PIN2) == LOGIC_HIGH))
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	62 e0       	ldi	r22, 0x02	; 2
    26ce:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    26d2:	88 23       	and	r24, r24
    26d4:	51 f4       	brne	.+20     	; 0x26ea <Test_Case_Config+0x46>
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	63 e0       	ldi	r22, 0x03	; 3
    26da:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	21 f4       	brne	.+8      	; 0x26ea <Test_Case_Config+0x46>
	{
		g_testCase = TEST_EDS;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 93 8a 01 	sts	0x018A, r24
    26e8:	1f c0       	rjmp	.+62     	; 0x2728 <Test_Case_Config+0x84>
	}
	else if((DIO_readPin(INTERRUPT_TESTCASE_PORT1, INTERRUPT_TESTCASE_PIN1) == LOGIC_HIGH) && (DIO_readPin(INTERRUPT_TESTCASE_PORT2, INTERRUPT_TESTCASE_PIN2) == LOGIC_LOW))
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	62 e0       	ldi	r22, 0x02	; 2
    26ee:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	51 f4       	brne	.+20     	; 0x270a <Test_Case_Config+0x66>
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	63 e0       	ldi	r22, 0x03	; 3
    26fa:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    26fe:	88 23       	and	r24, r24
    2700:	21 f4       	brne	.+8      	; 0x270a <Test_Case_Config+0x66>
	{
		g_testCase = TEST_WCS;
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	80 93 8a 01 	sts	0x018A, r24
    2708:	0f c0       	rjmp	.+30     	; 0x2728 <Test_Case_Config+0x84>
	}
	else if((DIO_readPin(INTERRUPT_TESTCASE_PORT1, INTERRUPT_TESTCASE_PIN1) == LOGIC_HIGH) && (DIO_readPin(INTERRUPT_TESTCASE_PORT2, INTERRUPT_TESTCASE_PIN2) == LOGIC_HIGH))
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	62 e0       	ldi	r22, 0x02	; 2
    270e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	49 f4       	brne	.+18     	; 0x2728 <Test_Case_Config+0x84>
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	63 e0       	ldi	r22, 0x03	; 3
    271a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    271e:	81 30       	cpi	r24, 0x01	; 1
    2720:	19 f4       	brne	.+6      	; 0x2728 <Test_Case_Config+0x84>
	{
		g_testCase = TEST_SLS;
    2722:	83 e0       	ldi	r24, 0x03	; 3
    2724:	80 93 8a 01 	sts	0x018A, r24
	}
}
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <main>:

int main()
{
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	a1 97       	sbiw	r28, 0x21	; 33
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
	uint8 send_Byte=0;
    274a:	19 8a       	std	Y+17, r1	; 0x11

	Timer_configuration Timer0_Configuration={Timer0,Normal,TIMER_INITIAL_VALUE,NO_COMPARE_VALUE,Prescaler_1024,timercallBckFunc};
    274c:	8e 01       	movw	r16, r28
    274e:	0e 5e       	subi	r16, 0xEE	; 238
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	1e 8f       	std	Y+30, r17	; 0x1e
    2754:	0d 8f       	std	Y+29, r16	; 0x1d
    2756:	2a e6       	ldi	r18, 0x6A	; 106
    2758:	31 e0       	ldi	r19, 0x01	; 1
    275a:	38 a3       	std	Y+32, r19	; 0x20
    275c:	2f 8f       	std	Y+31, r18	; 0x1f
    275e:	39 e0       	ldi	r19, 0x09	; 9
    2760:	39 a3       	std	Y+33, r19	; 0x21
    2762:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2764:	f8 a1       	ldd	r31, Y+32	; 0x20
    2766:	00 80       	ld	r0, Z
    2768:	0f 8d       	ldd	r16, Y+31	; 0x1f
    276a:	18 a1       	ldd	r17, Y+32	; 0x20
    276c:	0f 5f       	subi	r16, 0xFF	; 255
    276e:	1f 4f       	sbci	r17, 0xFF	; 255
    2770:	18 a3       	std	Y+32, r17	; 0x20
    2772:	0f 8f       	std	Y+31, r16	; 0x1f
    2774:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2776:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2778:	00 82       	st	Z, r0
    277a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    277c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    277e:	0f 5f       	subi	r16, 0xFF	; 255
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	1e 8f       	std	Y+30, r17	; 0x1e
    2784:	0d 8f       	std	Y+29, r16	; 0x1d
    2786:	19 a1       	ldd	r17, Y+33	; 0x21
    2788:	11 50       	subi	r17, 0x01	; 1
    278a:	19 a3       	std	Y+33, r17	; 0x21
    278c:	29 a1       	ldd	r18, Y+33	; 0x21
    278e:	22 23       	and	r18, r18
    2790:	41 f7       	brne	.-48     	; 0x2762 <main+0x34>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	aa e7       	ldi	r26, 0x7A	; 122
    2798:	b3 e4       	ldi	r27, 0x43	; 67
    279a:	8b 87       	std	Y+11, r24	; 0x0b
    279c:	9c 87       	std	Y+12, r25	; 0x0c
    279e:	ad 87       	std	Y+13, r26	; 0x0d
    27a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4a e7       	ldi	r20, 0x7A	; 122
    27b0:	55 e4       	ldi	r21, 0x45	; 69
    27b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	8f 83       	std	Y+7, r24	; 0x07
    27bc:	98 87       	std	Y+8, r25	; 0x08
    27be:	a9 87       	std	Y+9, r26	; 0x09
    27c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e8       	ldi	r20, 0x80	; 128
    27d0:	5f e3       	ldi	r21, 0x3F	; 63
    27d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <main+0xb6>
		__ticks = 1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	3f c0       	rjmp	.+126    	; 0x2862 <main+0x134>
	else if (__tmp > 65535)
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	3f ef       	ldi	r19, 0xFF	; 255
    27f0:	4f e7       	ldi	r20, 0x7F	; 127
    27f2:	57 e4       	ldi	r21, 0x47	; 71
    27f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	4c f5       	brge	.+82     	; 0x284e <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2800:	8d 85       	ldd	r24, Y+13	; 0x0d
    2802:	9e 85       	ldd	r25, Y+14	; 0x0e
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e2       	ldi	r20, 0x20	; 32
    280a:	51 e4       	ldi	r21, 0x41	; 65
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <main+0x116>
    2826:	80 e9       	ldi	r24, 0x90	; 144
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	9c 83       	std	Y+4, r25	; 0x04
    282c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	9c 81       	ldd	r25, Y+4	; 0x04
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <main+0x104>
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9e 83       	std	Y+6, r25	; 0x06
    2842:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	9e 81       	ldd	r25, Y+6	; 0x06
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	69 f7       	brne	.-38     	; 0x2826 <main+0xf8>
    284c:	14 c0       	rjmp	.+40     	; 0x2876 <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	6f 81       	ldd	r22, Y+7	; 0x07
    2850:	78 85       	ldd	r23, Y+8	; 0x08
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	9a 83       	std	Y+2, r25	; 0x02
    2868:	89 83       	std	Y+1, r24	; 0x01
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	9a 81       	ldd	r25, Y+2	; 0x02
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <main+0x140>
    2872:	9a 83       	std	Y+2, r25	; 0x02
    2874:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(250);
	TWI_init();
    2876:	0e 94 75 07 	call	0xeea	; 0xeea <TWI_init>
	BMP180_Start();
    287a:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <BMP180_Start>

	Detection_LED_init();
    287e:	0e 94 43 13 	call	0x2686	; 0x2686 <Detection_LED_init>
	Parking_LED_init();
    2882:	0e 94 11 12 	call	0x2422	; 0x2422 <Parking_LED_init>

	Timer_init(&Timer0_Configuration);
    2886:	ce 01       	movw	r24, r28
    2888:	42 96       	adiw	r24, 0x12	; 18
    288a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Timer_init>
	DIO_setupPinDirection(SLS_FLAG_PORT_ID, SLS_FLAG_PIN_ID, PIN_OUTPUT);
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	62 e0       	ldi	r22, 0x02	; 2
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_writePin(SLS_FLAG_PORT_ID,SLS_FLAG_PIN_ID,LOGIC_HIGH);
    2898:	83 e0       	ldi	r24, 0x03	; 3
    289a:	62 e0       	ldi	r22, 0x02	; 2
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>

	DIO_setupPinDirection(INTERRUPT_TESTCASE_PORT1, INTERRUPT_TESTCASE_PIN1, PIN_INPUT);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_setupPinDirection(INTERRUPT_TESTCASE_PORT2, INTERRUPT_TESTCASE_PIN2, PIN_INPUT);
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	63 e0       	ldi	r22, 0x03	; 3
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>

	DIO_setupPinDirection(SLL_FLAG_PORT, SLL_FLAG_PIN, PIN_INPUT);
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	67 e0       	ldi	r22, 0x07	; 7
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_HIGH);//pull up resistor
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	67 e0       	ldi	r22, 0x07	; 7
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>

	DDRC |= (1<<2); /*Configure PC2 as Output pin*/
    28ca:	a4 e3       	ldi	r26, 0x34	; 52
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e4 e3       	ldi	r30, 0x34	; 52
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	84 60       	ori	r24, 0x04	; 4
    28d6:	8c 93       	st	X, r24
	PORTC |= (1<<2); /*Initiate it to be VCCed*/
    28d8:	a5 e3       	ldi	r26, 0x35	; 53
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e5 e3       	ldi	r30, 0x35	; 53
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	84 60       	ori	r24, 0x04	; 4
    28e4:	8c 93       	st	X, r24

	/* Initialize the SPI driver as Master */
	SPI_initMaster();
    28e6:	0e 94 97 0b 	call	0x172e	; 0x172e <SPI_initMaster>


	Ultrasonic_init(); /*initializing Ultrasonic*/
    28ea:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Ultrasonic_init>
	WATERPUMP_init();
    28ee:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <WATERPUMP_init>


//	INT2_init();
	sei();
    28f2:	78 94       	sei

	while(1)
	{
		if(!DIO_readPin(SLL_FLAG_PORT,SLL_FLAG_PIN)){
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
    28fc:	88 23       	and	r24, r24
    28fe:	09 f0       	breq	.+2      	; 0x2902 <main+0x1d4>
    2900:	69 c0       	rjmp	.+210    	; 0x29d4 <main+0x2a6>
			PORTC &= ~(1 << 2);
    2902:	a5 e3       	ldi	r26, 0x35	; 53
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e5 e3       	ldi	r30, 0x35	; 53
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	8b 7f       	andi	r24, 0xFB	; 251
    290e:	8c 93       	st	X, r24
			SPI_sendReceiveByte(FRONT_LEFT); /*Wheel ID*/
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SPI_sendReceiveByte>
			/**/
			for (uint8 i = 0; i < counter_Bytes; i++) {
    2916:	18 8a       	std	Y+16, r1	; 0x10
    2918:	23 c0       	rjmp	.+70     	; 0x2960 <main+0x232>
				send_Byte = (g_BMP180_readings.temperature >> (i * 8));
    291a:	20 91 7c 01 	lds	r18, 0x017C
    291e:	30 91 7d 01 	lds	r19, 0x017D
    2922:	40 91 7e 01 	lds	r20, 0x017E
    2926:	50 91 7f 01 	lds	r21, 0x017F
    292a:	88 89       	ldd	r24, Y+16	; 0x10
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	88 0f       	add	r24, r24
    2932:	99 1f       	adc	r25, r25
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	79 01       	movw	r14, r18
    293e:	8a 01       	movw	r16, r20
    2940:	04 c0       	rjmp	.+8      	; 0x294a <main+0x21c>
    2942:	15 95       	asr	r17
    2944:	07 95       	ror	r16
    2946:	f7 94       	ror	r15
    2948:	e7 94       	ror	r14
    294a:	8a 95       	dec	r24
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <main+0x214>
    294e:	d8 01       	movw	r26, r16
    2950:	c7 01       	movw	r24, r14
    2952:	89 8b       	std	Y+17, r24	; 0x11
				SPI_sendReceiveByte(send_Byte);
    2954:	89 89       	ldd	r24, Y+17	; 0x11
    2956:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SPI_sendReceiveByte>
	{
		if(!DIO_readPin(SLL_FLAG_PORT,SLL_FLAG_PIN)){
			PORTC &= ~(1 << 2);
			SPI_sendReceiveByte(FRONT_LEFT); /*Wheel ID*/
			/**/
			for (uint8 i = 0; i < counter_Bytes; i++) {
    295a:	88 89       	ldd	r24, Y+16	; 0x10
    295c:	8f 5f       	subi	r24, 0xFF	; 255
    295e:	88 8b       	std	Y+16, r24	; 0x10
    2960:	88 89       	ldd	r24, Y+16	; 0x10
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	80 91 68 01 	lds	r24, 0x0168
    296a:	90 91 69 01 	lds	r25, 0x0169
    296e:	28 17       	cp	r18, r24
    2970:	39 07       	cpc	r19, r25
    2972:	98 f2       	brcs	.-90     	; 0x291a <main+0x1ec>
				send_Byte = (g_BMP180_readings.temperature >> (i * 8));
				SPI_sendReceiveByte(send_Byte);
			}

			for (uint8 i = 0; i < counter_Bytes; i++) {
    2974:	1f 86       	std	Y+15, r1	; 0x0f
    2976:	23 c0       	rjmp	.+70     	; 0x29be <main+0x290>
				send_Byte = (g_BMP180_readings.pressure >> (i * 8));
    2978:	20 91 80 01 	lds	r18, 0x0180
    297c:	30 91 81 01 	lds	r19, 0x0181
    2980:	40 91 82 01 	lds	r20, 0x0182
    2984:	50 91 83 01 	lds	r21, 0x0183
    2988:	8f 85       	ldd	r24, Y+15	; 0x0f
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	88 0f       	add	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	79 01       	movw	r14, r18
    299c:	8a 01       	movw	r16, r20
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <main+0x27a>
    29a0:	15 95       	asr	r17
    29a2:	07 95       	ror	r16
    29a4:	f7 94       	ror	r15
    29a6:	e7 94       	ror	r14
    29a8:	8a 95       	dec	r24
    29aa:	d2 f7       	brpl	.-12     	; 0x29a0 <main+0x272>
    29ac:	d8 01       	movw	r26, r16
    29ae:	c7 01       	movw	r24, r14
    29b0:	89 8b       	std	Y+17, r24	; 0x11
				SPI_sendReceiveByte(send_Byte);
    29b2:	89 89       	ldd	r24, Y+17	; 0x11
    29b4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SPI_sendReceiveByte>
			for (uint8 i = 0; i < counter_Bytes; i++) {
				send_Byte = (g_BMP180_readings.temperature >> (i * 8));
				SPI_sendReceiveByte(send_Byte);
			}

			for (uint8 i = 0; i < counter_Bytes; i++) {
    29b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	8f 87       	std	Y+15, r24	; 0x0f
    29be:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	80 91 68 01 	lds	r24, 0x0168
    29c8:	90 91 69 01 	lds	r25, 0x0169
    29cc:	28 17       	cp	r18, r24
    29ce:	39 07       	cpc	r19, r25
    29d0:	98 f2       	brcs	.-90     	; 0x2978 <main+0x24a>
    29d2:	90 cf       	rjmp	.-224    	; 0x28f4 <main+0x1c6>
				SPI_sendReceiveByte(send_Byte);
			}
		}
		else
		{
			PORTC |= (1 << 2);
    29d4:	a5 e3       	ldi	r26, 0x35	; 53
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e5 e3       	ldi	r30, 0x35	; 53
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	84 60       	ori	r24, 0x04	; 4
    29e0:	8c 93       	st	X, r24


			Test_Case_Config();
    29e2:	0e 94 52 13 	call	0x26a4	; 0x26a4 <Test_Case_Config>

			switch(g_testCase)
    29e6:	80 91 8a 01 	lds	r24, 0x018A
    29ea:	08 2f       	mov	r16, r24
    29ec:	10 e0       	ldi	r17, 0x00	; 0
    29ee:	1c 8f       	std	Y+28, r17	; 0x1c
    29f0:	0b 8f       	std	Y+27, r16	; 0x1b
    29f2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    29f4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    29f6:	21 30       	cpi	r18, 0x01	; 1
    29f8:	31 05       	cpc	r19, r1
    29fa:	d9 f0       	breq	.+54     	; 0x2a32 <main+0x304>
    29fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a00:	82 30       	cpi	r24, 0x02	; 2
    2a02:	91 05       	cpc	r25, r1
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <main+0x2e2>
    2a06:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2a08:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2a0a:	30 97       	sbiw	r30, 0x00	; 0
    2a0c:	69 f0       	breq	.+26     	; 0x2a28 <main+0x2fa>
    2a0e:	6d c0       	rjmp	.+218    	; 0x2aea <main+0x3bc>
    2a10:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2a12:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2a14:	02 30       	cpi	r16, 0x02	; 2
    2a16:	11 05       	cpc	r17, r1
    2a18:	59 f1       	breq	.+86     	; 0x2a70 <main+0x342>
    2a1a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2a1c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2a1e:	23 30       	cpi	r18, 0x03	; 3
    2a20:	31 05       	cpc	r19, r1
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <main+0x2f8>
    2a24:	44 c0       	rjmp	.+136    	; 0x2aae <main+0x380>
    2a26:	61 c0       	rjmp	.+194    	; 0x2aea <main+0x3bc>
			{
			case TEST_DEFAULT:
				BMP180_calculate(&g_BMP180_readings);
    2a28:	8c e7       	ldi	r24, 0x7C	; 124
    2a2a:	91 e0       	ldi	r25, 0x01	; 1
    2a2c:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <BMP180_calculate>
    2a30:	5c c0       	rjmp	.+184    	; 0x2aea <main+0x3bc>
				break;
			case TEST_EDS:
				g_BMP180_readings.temperature = 25;
    2a32:	89 e1       	ldi	r24, 0x19	; 25
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a0 e0       	ldi	r26, 0x00	; 0
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	80 93 7c 01 	sts	0x017C, r24
    2a3e:	90 93 7d 01 	sts	0x017D, r25
    2a42:	a0 93 7e 01 	sts	0x017E, r26
    2a46:	b0 93 7f 01 	sts	0x017F, r27
				g_BMP180_readings.pressure = 3000;
    2a4a:	88 eb       	ldi	r24, 0xB8	; 184
    2a4c:	9b e0       	ldi	r25, 0x0B	; 11
    2a4e:	a0 e0       	ldi	r26, 0x00	; 0
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	80 93 80 01 	sts	0x0180, r24
    2a56:	90 93 81 01 	sts	0x0181, r25
    2a5a:	a0 93 82 01 	sts	0x0182, r26
    2a5e:	b0 93 83 01 	sts	0x0183, r27
				Parking_LED_default();
    2a62:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>
				BUZZER_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	67 e0       	ldi	r22, 0x07	; 7
    2a6a:	0e 94 2f 18 	call	0x305e	; 0x305e <BUZZER_OFF>
    2a6e:	3d c0       	rjmp	.+122    	; 0x2aea <main+0x3bc>
				break;
			case TEST_WCS:
				g_BMP180_readings.temperature = 40;
    2a70:	88 e2       	ldi	r24, 0x28	; 40
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a0 e0       	ldi	r26, 0x00	; 0
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	80 93 7c 01 	sts	0x017C, r24
    2a7c:	90 93 7d 01 	sts	0x017D, r25
    2a80:	a0 93 7e 01 	sts	0x017E, r26
    2a84:	b0 93 7f 01 	sts	0x017F, r27
				g_BMP180_readings.pressure = 900;
    2a88:	84 e8       	ldi	r24, 0x84	; 132
    2a8a:	93 e0       	ldi	r25, 0x03	; 3
    2a8c:	a0 e0       	ldi	r26, 0x00	; 0
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	80 93 80 01 	sts	0x0180, r24
    2a94:	90 93 81 01 	sts	0x0181, r25
    2a98:	a0 93 82 01 	sts	0x0182, r26
    2a9c:	b0 93 83 01 	sts	0x0183, r27
				Parking_LED_default();
    2aa0:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>
				BUZZER_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	67 e0       	ldi	r22, 0x07	; 7
    2aa8:	0e 94 2f 18 	call	0x305e	; 0x305e <BUZZER_OFF>
    2aac:	1e c0       	rjmp	.+60     	; 0x2aea <main+0x3bc>
				break;
			case TEST_SLS:
				g_BMP180_readings.temperature = 25;
    2aae:	89 e1       	ldi	r24, 0x19	; 25
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	a0 e0       	ldi	r26, 0x00	; 0
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	80 93 7c 01 	sts	0x017C, r24
    2aba:	90 93 7d 01 	sts	0x017D, r25
    2abe:	a0 93 7e 01 	sts	0x017E, r26
    2ac2:	b0 93 7f 01 	sts	0x017F, r27
				g_BMP180_readings.pressure = 12000;
    2ac6:	80 ee       	ldi	r24, 0xE0	; 224
    2ac8:	9e e2       	ldi	r25, 0x2E	; 46
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	80 93 80 01 	sts	0x0180, r24
    2ad2:	90 93 81 01 	sts	0x0181, r25
    2ad6:	a0 93 82 01 	sts	0x0182, r26
    2ada:	b0 93 83 01 	sts	0x0183, r27
				Parking_LED_default();
    2ade:	0e 94 28 12 	call	0x2450	; 0x2450 <Parking_LED_default>
				BUZZER_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	67 e0       	ldi	r22, 0x07	; 7
    2ae6:	0e 94 2f 18 	call	0x305e	; 0x305e <BUZZER_OFF>
				break;
			}

			Temp_state();
    2aea:	0e 94 3b 12 	call	0x2476	; 0x2476 <Temp_state>
			Press_state();
    2aee:	0e 94 8a 12 	call	0x2514	; 0x2514 <Press_state>

			if (g_pressure_state == SEVERE || g_temperature_state == SEVERE)
    2af2:	80 91 87 01 	lds	r24, 0x0187
    2af6:	82 30       	cpi	r24, 0x02	; 2
    2af8:	21 f0       	breq	.+8      	; 0x2b02 <main+0x3d4>
    2afa:	80 91 88 01 	lds	r24, 0x0188
    2afe:	82 30       	cpi	r24, 0x02	; 2
    2b00:	19 f4       	brne	.+6      	; 0x2b08 <main+0x3da>
			{
				Action_severe();
    2b02:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Action_severe>
    2b06:	1c c0       	rjmp	.+56     	; 0x2b40 <main+0x412>
			}
			else if (g_pressure_state == MODERATE || g_temperature_state == MODERATE)
    2b08:	80 91 87 01 	lds	r24, 0x0187
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	21 f0       	breq	.+8      	; 0x2b18 <main+0x3ea>
    2b10:	80 91 88 01 	lds	r24, 0x0188
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	19 f4       	brne	.+6      	; 0x2b1e <main+0x3f0>
			{
				Action_moderate();
    2b18:	0e 94 0c 13 	call	0x2618	; 0x2618 <Action_moderate>
    2b1c:	11 c0       	rjmp	.+34     	; 0x2b40 <main+0x412>
			}
			else if (g_pressure_state == SAFE || g_temperature_state == SAFE)
    2b1e:	80 91 87 01 	lds	r24, 0x0187
    2b22:	88 23       	and	r24, r24
    2b24:	21 f0       	breq	.+8      	; 0x2b2e <main+0x400>
    2b26:	80 91 88 01 	lds	r24, 0x0188
    2b2a:	88 23       	and	r24, r24
    2b2c:	19 f4       	brne	.+6      	; 0x2b34 <main+0x406>
			{
				Action_safe();
    2b2e:	0e 94 2d 13 	call	0x265a	; 0x265a <Action_safe>
    2b32:	06 c0       	rjmp	.+12     	; 0x2b40 <main+0x412>
			}
			else
			{
				BUZZER_OFF(BMP_BUZZER_PORT_ID,BMP_BUZZER_PIN_ID);
    2b34:	83 e0       	ldi	r24, 0x03	; 3
    2b36:	65 e0       	ldi	r22, 0x05	; 5
    2b38:	0e 94 2f 18 	call	0x305e	; 0x305e <BUZZER_OFF>
				WATERPUMP_off();
    2b3c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <WATERPUMP_off>
			}

			g_distance = Ultrasonic_readDistance(); /*storing the measured distance*/
    2b40:	0e 94 f6 16 	call	0x2dec	; 0x2dec <Ultrasonic_readDistance>
    2b44:	90 93 86 01 	sts	0x0186, r25
    2b48:	80 93 85 01 	sts	0x0185, r24
			warning(g_distance);
    2b4c:	80 91 85 01 	lds	r24, 0x0185
    2b50:	90 91 86 01 	lds	r25, 0x0186
    2b54:	0e 94 c1 11 	call	0x2382	; 0x2382 <warning>
    2b58:	cd ce       	rjmp	.-614    	; 0x28f4 <main+0x1c6>

00002b5a <WATERPUMP_init>:

#include "../../MCAL/DIO/dio.h"
#include "../../ECUAL/WATERPUMP/waterpump.h"

void WATERPUMP_init(void)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <WATERPUMP_on>:

void WATERPUMP_on(void)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2b8e:	cf 91       	pop	r28
    2b90:	df 91       	pop	r29
    2b92:	08 95       	ret

00002b94 <WATERPUMP_off>:

void WATERPUMP_off(void)
{
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	cd b7       	in	r28, 0x3d	; 61
    2b9a:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	60 e0       	ldi	r22, 0x00	; 0
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <Ultrasonic_edgeProcessing>:
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_edgeProcessing(void)

{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    2bb4:	80 91 8c 01 	lds	r24, 0x018C
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	80 93 8c 01 	sts	0x018C, r24
	if(g_edgeCount == 1)
    2bbe:	80 91 8c 01 	lds	r24, 0x018C
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	31 f4       	brne	.+12     	; 0x2bd2 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
    2bc6:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Icu_clearTimerValue>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Icu_setEdgeDetectionType>
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <Ultrasonic_edgeProcessing+0x44>
	}
	else if(g_edgeCount == 2)
    2bd2:	80 91 8c 01 	lds	r24, 0x018C
    2bd6:	82 30       	cpi	r24, 0x02	; 2
    2bd8:	59 f4       	brne	.+22     	; 0x2bf0 <Ultrasonic_edgeProcessing+0x44>
	{
		/* storing the value of the 'ICR1' register in the g_timerValue variable where it's global *
		 * as it will be used again in another function which is called "ULTRASONIC_readDistance". */

		g_timeHigh = Icu_getInputCaptureValue();
    2bda:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <Icu_getInputCaptureValue>
    2bde:	90 93 8e 01 	sts	0x018E, r25
    2be2:	80 93 8d 01 	sts	0x018D, r24
		/* Detect rising edge */


		Icu_setEdgeDetectionType(RISING);
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Icu_setEdgeDetectionType>
		g_edgeCount=0;
    2bec:	10 92 8c 01 	sts	0x018C, r1
	}


}
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <Ultrasonic_init>:
 *
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_init(void)
{
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <Ultrasonic_init+0x6>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	8a 83       	std	Y+2, r24	; 0x02
	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    2c08:	86 ed       	ldi	r24, 0xD6	; 214
    2c0a:	95 e1       	ldi	r25, 0x15	; 21
    2c0c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Icu_setCallBack>
	/* Initialize the ICU driver */
	Icu_init(&Icu_Config);
    2c10:	ce 01       	movw	r24, r28
    2c12:	01 96       	adiw	r24, 0x01	; 1
    2c14:	0e 94 9d 0c 	call	0x193a	; 0x193a <Icu_init>
	/*setup the direction of the trigger pin as output pin through the gpio driver*/
	DIO_setupPinDirection(TRIGGER_PORT_ID,TRIGGER_PIN_ID,PIN_OUTPUT);
    2c18:	83 e0       	ldi	r24, 0x03	; 3
    2c1a:	65 e0       	ldi	r22, 0x05	; 5
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	/*disabling trigger pin*/
	DIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,LOGIC_LOW);
    2c22:	83 e0       	ldi	r24, 0x03	; 3
    2c24:	65 e0       	ldi	r22, 0x05	; 5
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>

}
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <Ultrasonic_Trigger>:
 * [Description]   : Send the Trigger pulse to the ultrasonic
 *
 * [Args]          : NONE
 *******************************************************************************/
void Ultrasonic_Trigger(void)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	68 97       	sbiw	r28, 0x18	; 24
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
	DIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,LOGIC_HIGH);
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	65 e0       	ldi	r22, 0x05	; 5
    2c4e:	41 e0       	ldi	r20, 0x01	; 1
    2c50:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a0 e8       	ldi	r26, 0x80	; 128
    2c5a:	bf e3       	ldi	r27, 0x3F	; 63
    2c5c:	8d 8b       	std	Y+21, r24	; 0x15
    2c5e:	9e 8b       	std	Y+22, r25	; 0x16
    2c60:	af 8b       	std	Y+23, r26	; 0x17
    2c62:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c64:	6d 89       	ldd	r22, Y+21	; 0x15
    2c66:	7e 89       	ldd	r23, Y+22	; 0x16
    2c68:	8f 89       	ldd	r24, Y+23	; 0x17
    2c6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6c:	2b ea       	ldi	r18, 0xAB	; 171
    2c6e:	3a ea       	ldi	r19, 0xAA	; 170
    2c70:	4a ea       	ldi	r20, 0xAA	; 170
    2c72:	50 e4       	ldi	r21, 0x40	; 64
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	89 8b       	std	Y+17, r24	; 0x11
    2c7e:	9a 8b       	std	Y+18, r25	; 0x12
    2c80:	ab 8b       	std	Y+19, r26	; 0x13
    2c82:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c84:	69 89       	ldd	r22, Y+17	; 0x11
    2c86:	7a 89       	ldd	r23, Y+18	; 0x12
    2c88:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	1c f4       	brge	.+6      	; 0x2ca2 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	88 8b       	std	Y+16, r24	; 0x10
    2ca0:	91 c0       	rjmp	.+290    	; 0x2dc4 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    2ca2:	69 89       	ldd	r22, Y+17	; 0x11
    2ca4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4f e7       	ldi	r20, 0x7F	; 127
    2cb0:	53 e4       	ldi	r21, 0x43	; 67
    2cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb6:	18 16       	cp	r1, r24
    2cb8:	0c f0       	brlt	.+2      	; 0x2cbc <Ultrasonic_Trigger+0x86>
    2cba:	7b c0       	rjmp	.+246    	; 0x2db2 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a e7       	ldi	r20, 0x7A	; 122
    2cca:	54 e4       	ldi	r21, 0x44	; 68
    2ccc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	8c 87       	std	Y+12, r24	; 0x0c
    2cd6:	9d 87       	std	Y+13, r25	; 0x0d
    2cd8:	ae 87       	std	Y+14, r26	; 0x0e
    2cda:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cdc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cde:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ce0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ce2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	4a e7       	ldi	r20, 0x7A	; 122
    2cea:	55 e4       	ldi	r21, 0x45	; 69
    2cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	88 87       	std	Y+8, r24	; 0x08
    2cf6:	99 87       	std	Y+9, r25	; 0x09
    2cf8:	aa 87       	std	Y+10, r26	; 0x0a
    2cfa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cfc:	68 85       	ldd	r22, Y+8	; 0x08
    2cfe:	79 85       	ldd	r23, Y+9	; 0x09
    2d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e8       	ldi	r20, 0x80	; 128
    2d0a:	5f e3       	ldi	r21, 0x3F	; 63
    2d0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d10:	88 23       	and	r24, r24
    2d12:	2c f4       	brge	.+10     	; 0x2d1e <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9f 83       	std	Y+7, r25	; 0x07
    2d1a:	8e 83       	std	Y+6, r24	; 0x06
    2d1c:	3f c0       	rjmp	.+126    	; 0x2d9c <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    2d1e:	68 85       	ldd	r22, Y+8	; 0x08
    2d20:	79 85       	ldd	r23, Y+9	; 0x09
    2d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	4c f5       	brge	.+82     	; 0x2d88 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d36:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d38:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e2       	ldi	r20, 0x20	; 32
    2d44:	51 e4       	ldi	r21, 0x41	; 65
    2d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	9f 83       	std	Y+7, r25	; 0x07
    2d5c:	8e 83       	std	Y+6, r24	; 0x06
    2d5e:	0f c0       	rjmp	.+30     	; 0x2d7e <Ultrasonic_Trigger+0x148>
    2d60:	80 e9       	ldi	r24, 0x90	; 144
    2d62:	91 e0       	ldi	r25, 0x01	; 1
    2d64:	9d 83       	std	Y+5, r25	; 0x05
    2d66:	8c 83       	std	Y+4, r24	; 0x04
    2d68:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <Ultrasonic_Trigger+0x136>
    2d70:	9d 83       	std	Y+5, r25	; 0x05
    2d72:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d74:	8e 81       	ldd	r24, Y+6	; 0x06
    2d76:	9f 81       	ldd	r25, Y+7	; 0x07
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	9f 83       	std	Y+7, r25	; 0x07
    2d7c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d80:	9f 81       	ldd	r25, Y+7	; 0x07
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	69 f7       	brne	.-38     	; 0x2d60 <Ultrasonic_Trigger+0x12a>
    2d86:	24 c0       	rjmp	.+72     	; 0x2dd0 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d88:	68 85       	ldd	r22, Y+8	; 0x08
    2d8a:	79 85       	ldd	r23, Y+9	; 0x09
    2d8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9f 83       	std	Y+7, r25	; 0x07
    2d9a:	8e 83       	std	Y+6, r24	; 0x06
    2d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2da0:	9b 83       	std	Y+3, r25	; 0x03
    2da2:	8a 83       	std	Y+2, r24	; 0x02
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	9b 81       	ldd	r25, Y+3	; 0x03
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <Ultrasonic_Trigger+0x172>
    2dac:	9b 83       	std	Y+3, r25	; 0x03
    2dae:	8a 83       	std	Y+2, r24	; 0x02
    2db0:	0f c0       	rjmp	.+30     	; 0x2dd0 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2db2:	69 89       	ldd	r22, Y+17	; 0x11
    2db4:	7a 89       	ldd	r23, Y+18	; 0x12
    2db6:	8b 89       	ldd	r24, Y+19	; 0x13
    2db8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	88 8b       	std	Y+16, r24	; 0x10
    2dc4:	88 89       	ldd	r24, Y+16	; 0x10
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	8a 95       	dec	r24
    2dcc:	f1 f7       	brne	.-4      	; 0x2dca <Ultrasonic_Trigger+0x194>
    2dce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_writePin(TRIGGER_PORT_ID,TRIGGER_PIN_ID,LOGIC_LOW);
    2dd0:	83 e0       	ldi	r24, 0x03	; 3
    2dd2:	65 e0       	ldi	r22, 0x05	; 5
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2dda:	68 96       	adiw	r28, 0x18	; 24
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <Ultrasonic_readDistance>:
 * [Returns]       : Distance (The measured distance in Centimeter).
 * [NOTE]          : The calculated distance will be updated when use another prescaler and CPU freq
 *******************************************************************************/

uint16 Ultrasonic_readDistance(void)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <Ultrasonic_readDistance+0x6>
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
	static uint32 distance;
	/*for calibrating the reading due to ultrasonic tolerance*/
	static uint32 distance_calibration;

	/*enabling triggering*/
	Ultrasonic_Trigger();
    2df6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <Ultrasonic_Trigger>
				 in this case i will work with no prescaler so prescaler=1
				 distance is divided by 2 because it is distance of going and return back*/

	/******** distance =(g_timeHigh*0.01715)*(Prescaler/FCPU)+1  ***********/

	distance = (g_timeHigh*0.01715)/2+1;
    2dfa:	80 91 8d 01 	lds	r24, 0x018D
    2dfe:	90 91 8e 01 	lds	r25, 0x018E
    2e02:	cc 01       	movw	r24, r24
    2e04:	a0 e0       	ldi	r26, 0x00	; 0
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	28 e2       	ldi	r18, 0x28	; 40
    2e1a:	3e e7       	ldi	r19, 0x7E	; 126
    2e1c:	4c e8       	ldi	r20, 0x8C	; 140
    2e1e:	5c e3       	ldi	r21, 0x3C	; 60
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e4       	ldi	r21, 0x40	; 64
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	80 93 93 01 	sts	0x0193, r24
    2e60:	90 93 94 01 	sts	0x0194, r25
    2e64:	a0 93 95 01 	sts	0x0195, r26
    2e68:	b0 93 96 01 	sts	0x0196, r27
	/* (+1) because of ultrasonic tolerence*/
	/*Also for calibration*/

	if(distance>=342){
    2e6c:	80 91 93 01 	lds	r24, 0x0193
    2e70:	90 91 94 01 	lds	r25, 0x0194
    2e74:	a0 91 95 01 	lds	r26, 0x0195
    2e78:	b0 91 96 01 	lds	r27, 0x0196
    2e7c:	86 35       	cpi	r24, 0x56	; 86
    2e7e:	21 e0       	ldi	r18, 0x01	; 1
    2e80:	92 07       	cpc	r25, r18
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	a2 07       	cpc	r26, r18
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	b2 07       	cpc	r27, r18
    2e8a:	f0 f0       	brcs	.+60     	; 0x2ec8 <Ultrasonic_readDistance+0xdc>
		distance_calibration=distance+2;
    2e8c:	80 91 93 01 	lds	r24, 0x0193
    2e90:	90 91 94 01 	lds	r25, 0x0194
    2e94:	a0 91 95 01 	lds	r26, 0x0195
    2e98:	b0 91 96 01 	lds	r27, 0x0196
    2e9c:	02 96       	adiw	r24, 0x02	; 2
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	b1 1d       	adc	r27, r1
    2ea2:	80 93 8f 01 	sts	0x018F, r24
    2ea6:	90 93 90 01 	sts	0x0190, r25
    2eaa:	a0 93 91 01 	sts	0x0191, r26
    2eae:	b0 93 92 01 	sts	0x0192, r27
		return distance_calibration;
    2eb2:	80 91 8f 01 	lds	r24, 0x018F
    2eb6:	90 91 90 01 	lds	r25, 0x0190
    2eba:	a0 91 91 01 	lds	r26, 0x0191
    2ebe:	b0 91 92 01 	lds	r27, 0x0192
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	45 c0       	rjmp	.+138    	; 0x2f52 <Ultrasonic_readDistance+0x166>
	}
	else if(distance>=154&&distance<342){
    2ec8:	80 91 93 01 	lds	r24, 0x0193
    2ecc:	90 91 94 01 	lds	r25, 0x0194
    2ed0:	a0 91 95 01 	lds	r26, 0x0195
    2ed4:	b0 91 96 01 	lds	r27, 0x0196
    2ed8:	8a 39       	cpi	r24, 0x9A	; 154
    2eda:	91 05       	cpc	r25, r1
    2edc:	a1 05       	cpc	r26, r1
    2ede:	b1 05       	cpc	r27, r1
    2ee0:	70 f1       	brcs	.+92     	; 0x2f3e <Ultrasonic_readDistance+0x152>
    2ee2:	80 91 93 01 	lds	r24, 0x0193
    2ee6:	90 91 94 01 	lds	r25, 0x0194
    2eea:	a0 91 95 01 	lds	r26, 0x0195
    2eee:	b0 91 96 01 	lds	r27, 0x0196
    2ef2:	86 35       	cpi	r24, 0x56	; 86
    2ef4:	21 e0       	ldi	r18, 0x01	; 1
    2ef6:	92 07       	cpc	r25, r18
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	a2 07       	cpc	r26, r18
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	b2 07       	cpc	r27, r18
    2f00:	f0 f4       	brcc	.+60     	; 0x2f3e <Ultrasonic_readDistance+0x152>
		distance_calibration=distance+1;
    2f02:	80 91 93 01 	lds	r24, 0x0193
    2f06:	90 91 94 01 	lds	r25, 0x0194
    2f0a:	a0 91 95 01 	lds	r26, 0x0195
    2f0e:	b0 91 96 01 	lds	r27, 0x0196
    2f12:	01 96       	adiw	r24, 0x01	; 1
    2f14:	a1 1d       	adc	r26, r1
    2f16:	b1 1d       	adc	r27, r1
    2f18:	80 93 8f 01 	sts	0x018F, r24
    2f1c:	90 93 90 01 	sts	0x0190, r25
    2f20:	a0 93 91 01 	sts	0x0191, r26
    2f24:	b0 93 92 01 	sts	0x0192, r27
		return distance_calibration;
    2f28:	80 91 8f 01 	lds	r24, 0x018F
    2f2c:	90 91 90 01 	lds	r25, 0x0190
    2f30:	a0 91 91 01 	lds	r26, 0x0191
    2f34:	b0 91 92 01 	lds	r27, 0x0192
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	0a c0       	rjmp	.+20     	; 0x2f52 <Ultrasonic_readDistance+0x166>
	}

	else{
		return distance;
    2f3e:	80 91 93 01 	lds	r24, 0x0193
    2f42:	90 91 94 01 	lds	r25, 0x0194
    2f46:	a0 91 95 01 	lds	r26, 0x0195
    2f4a:	b0 91 96 01 	lds	r27, 0x0196
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	return 1;
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <LED_init>:

#include "led.h"
#include <util/delay.h>

void LED_init(uint8 port_number, uint8 pin_number)
{
    2f60:	df 93       	push	r29
    2f62:	cf 93       	push	r28
    2f64:	00 d0       	rcall	.+0      	; 0x2f66 <LED_init+0x6>
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setupPinDirection(port_number,pin_number,PIN_OUTPUT);
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	6a 81       	ldd	r22, Y+2	; 0x02
    2f72:	41 e0       	ldi	r20, 0x01	; 1
    2f74:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_writePin(port_number,pin_number, LOGIC_LOW); /*Initiate LEDs to OFF*/
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	6a 81       	ldd	r22, Y+2	; 0x02
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <LED_ON>:
 * Function to turn on LED.
 * It depends on DIO driver, as it take port number and pin number,
 * then turn on the required pin (LED).
 */
void LED_ON(uint8 port_number, uint8 pin_number)
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	00 d0       	rcall	.+0      	; 0x2f92 <LED_ON+0x6>
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    2f96:	89 83       	std	Y+1, r24	; 0x01
    2f98:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number, LOGIC_HIGH);
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	6a 81       	ldd	r22, Y+2	; 0x02
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <LED_OFF>:
 * Function to turn off LED.
 * It depends on DIO driver, as it take port number and pin number,
 * then turn off the required pin (LED).
 */
void LED_OFF(uint8 port_number, uint8 pin_number)
{
    2fae:	df 93       	push	r29
    2fb0:	cf 93       	push	r28
    2fb2:	00 d0       	rcall	.+0      	; 0x2fb4 <LED_OFF+0x6>
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number, LOGIC_LOW);
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	6a 81       	ldd	r22, Y+2	; 0x02
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <LED_TOGGLE>:
 * Function to toggle LED.
 * It depends on DIO driver, as it take port number and pin number,
 * then toggle the required pin (LED).
 */
void LED_TOGGLE(uint8 port_number, uint8 pin_number)
{
    2fd0:	df 93       	push	r29
    2fd2:	cf 93       	push	r28
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <LED_TOGGLE+0x6>
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	89 83       	std	Y+1, r24	; 0x01
    2fdc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_togglePin(port_number,pin_number);
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	6a 81       	ldd	r22, Y+2	; 0x02
    2fe2:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_togglePin>
}
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <LED_IS_ON>:
/*
 * Description :
 * Function to check if the LED is on.
*/
uint8 LED_IS_ON(uint8 port_number, uint8 pin_number)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <LED_IS_ON+0x6>
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_readPin(port_number,pin_number);
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	6a 81       	ldd	r22, Y+2	; 0x02
    3002:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <DIO_readPin>
}
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	cf 91       	pop	r28
    300c:	df 91       	pop	r29
    300e:	08 95       	ret

00003010 <BUZZER_init>:
 * Inputs: No inputs
 * Outputs: No outputs.
 */

void BUZZER_init(uint8 port_number, uint8 pin_number)
{
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	00 d0       	rcall	.+0      	; 0x3016 <BUZZER_init+0x6>
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	89 83       	std	Y+1, r24	; 0x01
    301c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setupPinDirection(port_number,pin_number,PIN_OUTPUT);
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	6a 81       	ldd	r22, Y+2	; 0x02
    3022:	41 e0       	ldi	r20, 0x01	; 1
    3024:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <DIO_setupPinDirection>
	DIO_writePin(port_number,pin_number,LOGIC_LOW);
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	6a 81       	ldd	r22, Y+2	; 0x02
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <BUZZER_ON>:
 * Inputs: No inputs
 * Outputs: No outputs.
 */

void BUZZER_ON(uint8 port_number, uint8 pin_number)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <BUZZER_ON+0x6>
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number,LOGIC_HIGH);
    304a:	89 81       	ldd	r24, Y+1	; 0x01
    304c:	6a 81       	ldd	r22, Y+2	; 0x02
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <BUZZER_OFF>:
 * Description : Function to turn the Buzzer Off.
 * Inputs: No inputs
 * Outputs: No outputs.
 */
void BUZZER_OFF(uint8 port_number, uint8 pin_number)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	00 d0       	rcall	.+0      	; 0x3064 <BUZZER_OFF+0x6>
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	89 83       	std	Y+1, r24	; 0x01
    306a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number,LOGIC_LOW);
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	6a 81       	ldd	r22, Y+2	; 0x02
    3070:	40 e0       	ldi	r20, 0x00	; 0
    3072:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <DIO_writePin>
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <BUZZER_TOGGLE>:

void BUZZER_TOGGLE(uint8 port_number, uint8 pin_number)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <BUZZER_TOGGLE+0x6>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_togglePin(port_number,pin_number);
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	6a 81       	ldd	r22, Y+2	; 0x02
    3092:	0e 94 9a 10 	call	0x2134	; 0x2134 <DIO_togglePin>
}
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	08 95       	ret

000030a0 <BMP180_ReadCalb>:
/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;
void delay(void);
void BMP180_ReadCalb(void) {
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	c2 59       	subi	r28, 0x92	; 146
    30ae:	d0 40       	sbci	r29, 0x00	; 0
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61

	uint8_t Callib_Data[22] = { 0 };
    30ba:	ce 01       	movw	r24, r28
    30bc:	83 58       	subi	r24, 0x83	; 131
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	26 e1       	ldi	r18, 0x16	; 22
    30c2:	fc 01       	movw	r30, r24
    30c4:	df 01       	movw	r26, r30
    30c6:	82 2f       	mov	r24, r18
    30c8:	1d 92       	st	X+, r1
    30ca:	8a 95       	dec	r24
    30cc:	e9 f7       	brne	.-6      	; 0x30c8 <BMP180_ReadCalb+0x28>
	uint16_t Callib_Start = 0xAA;
    30ce:	fe 01       	movw	r30, r28
    30d0:	e5 58       	subi	r30, 0x85	; 133
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	8a ea       	ldi	r24, 0xAA	; 170
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	80 83       	st	Z, r24

	for (int i = 0; i < 22; i++) {
    30dc:	fe 01       	movw	r30, r28
    30de:	e7 58       	subi	r30, 0x87	; 135
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	11 82       	std	Z+1, r1	; 0x01
    30e4:	10 82       	st	Z, r1
    30e6:	d9 c4       	rjmp	.+2482   	; 0x3a9a <BMP180_ReadCalb+0x9fa>
		TWI_Start_Wait(BMP180_ADDRESS_W);// To write
    30e8:	8e ee       	ldi	r24, 0xEE	; 238
    30ea:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
    30ee:	fe 01       	movw	r30, r28
    30f0:	eb 58       	subi	r30, 0x8B	; 139
    30f2:	ff 4f       	sbci	r31, 0xFF	; 255
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	a0 e2       	ldi	r26, 0x20	; 32
    30fa:	b1 e4       	ldi	r27, 0x41	; 65
    30fc:	80 83       	st	Z, r24
    30fe:	91 83       	std	Z+1, r25	; 0x01
    3100:	a2 83       	std	Z+2, r26	; 0x02
    3102:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3104:	8e 01       	movw	r16, r28
    3106:	0f 58       	subi	r16, 0x8F	; 143
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	fe 01       	movw	r30, r28
    310c:	eb 58       	subi	r30, 0x8B	; 139
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	60 81       	ld	r22, Z
    3112:	71 81       	ldd	r23, Z+1	; 0x01
    3114:	82 81       	ldd	r24, Z+2	; 0x02
    3116:	93 81       	ldd	r25, Z+3	; 0x03
    3118:	2b ea       	ldi	r18, 0xAB	; 171
    311a:	3a ea       	ldi	r19, 0xAA	; 170
    311c:	4a ea       	ldi	r20, 0xAA	; 170
    311e:	50 e4       	ldi	r21, 0x40	; 64
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	f8 01       	movw	r30, r16
    312a:	80 83       	st	Z, r24
    312c:	91 83       	std	Z+1, r25	; 0x01
    312e:	a2 83       	std	Z+2, r26	; 0x02
    3130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3132:	fe 01       	movw	r30, r28
    3134:	ef 58       	subi	r30, 0x8F	; 143
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	60 81       	ld	r22, Z
    313a:	71 81       	ldd	r23, Z+1	; 0x01
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	93 81       	ldd	r25, Z+3	; 0x03
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	40 e8       	ldi	r20, 0x80	; 128
    3146:	5f e3       	ldi	r21, 0x3F	; 63
    3148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314c:	88 23       	and	r24, r24
    314e:	34 f4       	brge	.+12     	; 0x315c <BMP180_ReadCalb+0xbc>
		__ticks = 1;
    3150:	fe 01       	movw	r30, r28
    3152:	e0 59       	subi	r30, 0x90	; 144
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	80 83       	st	Z, r24
    315a:	e0 c0       	rjmp	.+448    	; 0x331c <BMP180_ReadCalb+0x27c>
	else if (__tmp > 255)
    315c:	fe 01       	movw	r30, r28
    315e:	ef 58       	subi	r30, 0x8F	; 143
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	60 81       	ld	r22, Z
    3164:	71 81       	ldd	r23, Z+1	; 0x01
    3166:	82 81       	ldd	r24, Z+2	; 0x02
    3168:	93 81       	ldd	r25, Z+3	; 0x03
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	4f e7       	ldi	r20, 0x7F	; 127
    3170:	53 e4       	ldi	r21, 0x43	; 67
    3172:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3176:	18 16       	cp	r1, r24
    3178:	0c f0       	brlt	.+2      	; 0x317c <BMP180_ReadCalb+0xdc>
    317a:	c0 c0       	rjmp	.+384    	; 0x32fc <BMP180_ReadCalb+0x25c>
	{
		_delay_ms(__us / 1000.0);
    317c:	fe 01       	movw	r30, r28
    317e:	eb 58       	subi	r30, 0x8B	; 139
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a e7       	ldi	r20, 0x7A	; 122
    3190:	54 e4       	ldi	r21, 0x44	; 68
    3192:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	fe 01       	movw	r30, r28
    319c:	e4 59       	subi	r30, 0x94	; 148
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 83       	st	Z, r24
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	a2 83       	std	Z+2, r26	; 0x02
    31a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a8:	8e 01       	movw	r16, r28
    31aa:	08 59       	subi	r16, 0x98	; 152
    31ac:	1f 4f       	sbci	r17, 0xFF	; 255
    31ae:	fe 01       	movw	r30, r28
    31b0:	e4 59       	subi	r30, 0x94	; 148
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	82 81       	ldd	r24, Z+2	; 0x02
    31ba:	93 81       	ldd	r25, Z+3	; 0x03
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	4a e7       	ldi	r20, 0x7A	; 122
    31c2:	55 e4       	ldi	r21, 0x45	; 69
    31c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	f8 01       	movw	r30, r16
    31ce:	80 83       	st	Z, r24
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	a2 83       	std	Z+2, r26	; 0x02
    31d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d6:	fe 01       	movw	r30, r28
    31d8:	e8 59       	subi	r30, 0x98	; 152
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e8       	ldi	r20, 0x80	; 128
    31ea:	5f e3       	ldi	r21, 0x3F	; 63
    31ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f0:	88 23       	and	r24, r24
    31f2:	44 f4       	brge	.+16     	; 0x3204 <BMP180_ReadCalb+0x164>
		__ticks = 1;
    31f4:	fe 01       	movw	r30, r28
    31f6:	ea 59       	subi	r30, 0x9A	; 154
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
    3202:	64 c0       	rjmp	.+200    	; 0x32cc <BMP180_ReadCalb+0x22c>
	else if (__tmp > 65535)
    3204:	fe 01       	movw	r30, r28
    3206:	e8 59       	subi	r30, 0x98	; 152
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	60 81       	ld	r22, Z
    320c:	71 81       	ldd	r23, Z+1	; 0x01
    320e:	82 81       	ldd	r24, Z+2	; 0x02
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	3f ef       	ldi	r19, 0xFF	; 255
    3216:	4f e7       	ldi	r20, 0x7F	; 127
    3218:	57 e4       	ldi	r21, 0x47	; 71
    321a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321e:	18 16       	cp	r1, r24
    3220:	0c f0       	brlt	.+2      	; 0x3224 <BMP180_ReadCalb+0x184>
    3222:	43 c0       	rjmp	.+134    	; 0x32aa <BMP180_ReadCalb+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3224:	fe 01       	movw	r30, r28
    3226:	e4 59       	subi	r30, 0x94	; 148
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	82 81       	ldd	r24, Z+2	; 0x02
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e2       	ldi	r20, 0x20	; 32
    3238:	51 e4       	ldi	r21, 0x41	; 65
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	8e 01       	movw	r16, r28
    3244:	0a 59       	subi	r16, 0x9A	; 154
    3246:	1f 4f       	sbci	r17, 0xFF	; 255
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	f8 01       	movw	r30, r16
    3256:	91 83       	std	Z+1, r25	; 0x01
    3258:	80 83       	st	Z, r24
    325a:	1f c0       	rjmp	.+62     	; 0x329a <BMP180_ReadCalb+0x1fa>
    325c:	fe 01       	movw	r30, r28
    325e:	ec 59       	subi	r30, 0x9C	; 156
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	80 e9       	ldi	r24, 0x90	; 144
    3264:	91 e0       	ldi	r25, 0x01	; 1
    3266:	91 83       	std	Z+1, r25	; 0x01
    3268:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    326a:	fe 01       	movw	r30, r28
    326c:	ec 59       	subi	r30, 0x9C	; 156
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <BMP180_ReadCalb+0x1d4>
    3278:	fe 01       	movw	r30, r28
    327a:	ec 59       	subi	r30, 0x9C	; 156
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3282:	de 01       	movw	r26, r28
    3284:	aa 59       	subi	r26, 0x9A	; 154
    3286:	bf 4f       	sbci	r27, 0xFF	; 255
    3288:	fe 01       	movw	r30, r28
    328a:	ea 59       	subi	r30, 0x9A	; 154
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	11 96       	adiw	r26, 0x01	; 1
    3296:	9c 93       	st	X, r25
    3298:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	fe 01       	movw	r30, r28
    329c:	ea 59       	subi	r30, 0x9A	; 154
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	d1 f6       	brne	.-76     	; 0x325c <BMP180_ReadCalb+0x1bc>
    32a8:	4b c0       	rjmp	.+150    	; 0x3340 <BMP180_ReadCalb+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32aa:	8e 01       	movw	r16, r28
    32ac:	0a 59       	subi	r16, 0x9A	; 154
    32ae:	1f 4f       	sbci	r17, 0xFF	; 255
    32b0:	fe 01       	movw	r30, r28
    32b2:	e8 59       	subi	r30, 0x98	; 152
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	60 81       	ld	r22, Z
    32b8:	71 81       	ldd	r23, Z+1	; 0x01
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	93 81       	ldd	r25, Z+3	; 0x03
    32be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	f8 01       	movw	r30, r16
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
    32cc:	de 01       	movw	r26, r28
    32ce:	ae 59       	subi	r26, 0x9E	; 158
    32d0:	bf 4f       	sbci	r27, 0xFF	; 255
    32d2:	fe 01       	movw	r30, r28
    32d4:	ea 59       	subi	r30, 0x9A	; 154
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	11 96       	adiw	r26, 0x01	; 1
    32de:	9c 93       	st	X, r25
    32e0:	8e 93       	st	-X, r24
    32e2:	fe 01       	movw	r30, r28
    32e4:	ee 59       	subi	r30, 0x9E	; 158
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	80 81       	ld	r24, Z
    32ea:	91 81       	ldd	r25, Z+1	; 0x01
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <BMP180_ReadCalb+0x24c>
    32f0:	fe 01       	movw	r30, r28
    32f2:	ee 59       	subi	r30, 0x9E	; 158
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	91 83       	std	Z+1, r25	; 0x01
    32f8:	80 83       	st	Z, r24
    32fa:	22 c0       	rjmp	.+68     	; 0x3340 <BMP180_ReadCalb+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32fc:	8e 01       	movw	r16, r28
    32fe:	00 59       	subi	r16, 0x90	; 144
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	fe 01       	movw	r30, r28
    3304:	ef 58       	subi	r30, 0x8F	; 143
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	60 81       	ld	r22, Z
    330a:	71 81       	ldd	r23, Z+1	; 0x01
    330c:	82 81       	ldd	r24, Z+2	; 0x02
    330e:	93 81       	ldd	r25, Z+3	; 0x03
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	f8 01       	movw	r30, r16
    331a:	80 83       	st	Z, r24
    331c:	de 01       	movw	r26, r28
    331e:	af 59       	subi	r26, 0x9F	; 159
    3320:	bf 4f       	sbci	r27, 0xFF	; 255
    3322:	fe 01       	movw	r30, r28
    3324:	e0 59       	subi	r30, 0x90	; 144
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	80 81       	ld	r24, Z
    332a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    332c:	fe 01       	movw	r30, r28
    332e:	ef 59       	subi	r30, 0x9F	; 159
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 81       	ld	r24, Z
    3334:	8a 95       	dec	r24
    3336:	f1 f7       	brne	.-4      	; 0x3334 <BMP180_ReadCalb+0x294>
    3338:	fe 01       	movw	r30, r28
    333a:	ef 59       	subi	r30, 0x9F	; 159
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_WriteByte(Callib_Start + i);
    3340:	fe 01       	movw	r30, r28
    3342:	e5 58       	subi	r30, 0x85	; 133
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	90 81       	ld	r25, Z
    3348:	fe 01       	movw	r30, r28
    334a:	e7 58       	subi	r30, 0x87	; 135
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	89 0f       	add	r24, r25
    3352:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
    3356:	fe 01       	movw	r30, r28
    3358:	e3 5a       	subi	r30, 0xA3	; 163
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	a0 e2       	ldi	r26, 0x20	; 32
    3362:	b1 e4       	ldi	r27, 0x41	; 65
    3364:	80 83       	st	Z, r24
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	a2 83       	std	Z+2, r26	; 0x02
    336a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    336c:	8e 01       	movw	r16, r28
    336e:	07 5a       	subi	r16, 0xA7	; 167
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
    3372:	fe 01       	movw	r30, r28
    3374:	e3 5a       	subi	r30, 0xA3	; 163
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	2b ea       	ldi	r18, 0xAB	; 171
    3382:	3a ea       	ldi	r19, 0xAA	; 170
    3384:	4a ea       	ldi	r20, 0xAA	; 170
    3386:	50 e4       	ldi	r21, 0x40	; 64
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	f8 01       	movw	r30, r16
    3392:	80 83       	st	Z, r24
    3394:	91 83       	std	Z+1, r25	; 0x01
    3396:	a2 83       	std	Z+2, r26	; 0x02
    3398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    339a:	fe 01       	movw	r30, r28
    339c:	e7 5a       	subi	r30, 0xA7	; 167
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e8       	ldi	r20, 0x80	; 128
    33ae:	5f e3       	ldi	r21, 0x3F	; 63
    33b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b4:	88 23       	and	r24, r24
    33b6:	34 f4       	brge	.+12     	; 0x33c4 <BMP180_ReadCalb+0x324>
		__ticks = 1;
    33b8:	fe 01       	movw	r30, r28
    33ba:	e8 5a       	subi	r30, 0xA8	; 168
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	80 83       	st	Z, r24
    33c2:	e0 c0       	rjmp	.+448    	; 0x3584 <BMP180_ReadCalb+0x4e4>
	else if (__tmp > 255)
    33c4:	fe 01       	movw	r30, r28
    33c6:	e7 5a       	subi	r30, 0xA7	; 167
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	4f e7       	ldi	r20, 0x7F	; 127
    33d8:	53 e4       	ldi	r21, 0x43	; 67
    33da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33de:	18 16       	cp	r1, r24
    33e0:	0c f0       	brlt	.+2      	; 0x33e4 <BMP180_ReadCalb+0x344>
    33e2:	c0 c0       	rjmp	.+384    	; 0x3564 <BMP180_ReadCalb+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    33e4:	fe 01       	movw	r30, r28
    33e6:	e3 5a       	subi	r30, 0xA3	; 163
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	60 81       	ld	r22, Z
    33ec:	71 81       	ldd	r23, Z+1	; 0x01
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	93 81       	ldd	r25, Z+3	; 0x03
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	4a e7       	ldi	r20, 0x7A	; 122
    33f8:	54 e4       	ldi	r21, 0x44	; 68
    33fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	fe 01       	movw	r30, r28
    3404:	ec 5a       	subi	r30, 0xAC	; 172
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 83       	st	Z, r24
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	a2 83       	std	Z+2, r26	; 0x02
    340e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3410:	8e 01       	movw	r16, r28
    3412:	00 5b       	subi	r16, 0xB0	; 176
    3414:	1f 4f       	sbci	r17, 0xFF	; 255
    3416:	fe 01       	movw	r30, r28
    3418:	ec 5a       	subi	r30, 0xAC	; 172
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	4a e7       	ldi	r20, 0x7A	; 122
    342a:	55 e4       	ldi	r21, 0x45	; 69
    342c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	f8 01       	movw	r30, r16
    3436:	80 83       	st	Z, r24
    3438:	91 83       	std	Z+1, r25	; 0x01
    343a:	a2 83       	std	Z+2, r26	; 0x02
    343c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    343e:	fe 01       	movw	r30, r28
    3440:	e0 5b       	subi	r30, 0xB0	; 176
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	60 81       	ld	r22, Z
    3446:	71 81       	ldd	r23, Z+1	; 0x01
    3448:	82 81       	ldd	r24, Z+2	; 0x02
    344a:	93 81       	ldd	r25, Z+3	; 0x03
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	5f e3       	ldi	r21, 0x3F	; 63
    3454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3458:	88 23       	and	r24, r24
    345a:	44 f4       	brge	.+16     	; 0x346c <BMP180_ReadCalb+0x3cc>
		__ticks = 1;
    345c:	fe 01       	movw	r30, r28
    345e:	e2 5b       	subi	r30, 0xB2	; 178
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	91 83       	std	Z+1, r25	; 0x01
    3468:	80 83       	st	Z, r24
    346a:	64 c0       	rjmp	.+200    	; 0x3534 <BMP180_ReadCalb+0x494>
	else if (__tmp > 65535)
    346c:	fe 01       	movw	r30, r28
    346e:	e0 5b       	subi	r30, 0xB0	; 176
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	3f ef       	ldi	r19, 0xFF	; 255
    347e:	4f e7       	ldi	r20, 0x7F	; 127
    3480:	57 e4       	ldi	r21, 0x47	; 71
    3482:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3486:	18 16       	cp	r1, r24
    3488:	0c f0       	brlt	.+2      	; 0x348c <BMP180_ReadCalb+0x3ec>
    348a:	43 c0       	rjmp	.+134    	; 0x3512 <BMP180_ReadCalb+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    348c:	fe 01       	movw	r30, r28
    348e:	ec 5a       	subi	r30, 0xAC	; 172
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e2       	ldi	r20, 0x20	; 32
    34a0:	51 e4       	ldi	r21, 0x41	; 65
    34a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	8e 01       	movw	r16, r28
    34ac:	02 5b       	subi	r16, 0xB2	; 178
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	f8 01       	movw	r30, r16
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	80 83       	st	Z, r24
    34c2:	1f c0       	rjmp	.+62     	; 0x3502 <BMP180_ReadCalb+0x462>
    34c4:	fe 01       	movw	r30, r28
    34c6:	e4 5b       	subi	r30, 0xB4	; 180
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	80 e9       	ldi	r24, 0x90	; 144
    34cc:	91 e0       	ldi	r25, 0x01	; 1
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34d2:	fe 01       	movw	r30, r28
    34d4:	e4 5b       	subi	r30, 0xB4	; 180
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	91 81       	ldd	r25, Z+1	; 0x01
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <BMP180_ReadCalb+0x43c>
    34e0:	fe 01       	movw	r30, r28
    34e2:	e4 5b       	subi	r30, 0xB4	; 180
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	91 83       	std	Z+1, r25	; 0x01
    34e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ea:	de 01       	movw	r26, r28
    34ec:	a2 5b       	subi	r26, 0xB2	; 178
    34ee:	bf 4f       	sbci	r27, 0xFF	; 255
    34f0:	fe 01       	movw	r30, r28
    34f2:	e2 5b       	subi	r30, 0xB2	; 178
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	80 81       	ld	r24, Z
    34f8:	91 81       	ldd	r25, Z+1	; 0x01
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	11 96       	adiw	r26, 0x01	; 1
    34fe:	9c 93       	st	X, r25
    3500:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3502:	fe 01       	movw	r30, r28
    3504:	e2 5b       	subi	r30, 0xB2	; 178
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	d1 f6       	brne	.-76     	; 0x34c4 <BMP180_ReadCalb+0x424>
    3510:	4b c0       	rjmp	.+150    	; 0x35a8 <BMP180_ReadCalb+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3512:	8e 01       	movw	r16, r28
    3514:	02 5b       	subi	r16, 0xB2	; 178
    3516:	1f 4f       	sbci	r17, 0xFF	; 255
    3518:	fe 01       	movw	r30, r28
    351a:	e0 5b       	subi	r30, 0xB0	; 176
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	60 81       	ld	r22, Z
    3520:	71 81       	ldd	r23, Z+1	; 0x01
    3522:	82 81       	ldd	r24, Z+2	; 0x02
    3524:	93 81       	ldd	r25, Z+3	; 0x03
    3526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	f8 01       	movw	r30, r16
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	80 83       	st	Z, r24
    3534:	de 01       	movw	r26, r28
    3536:	a6 5b       	subi	r26, 0xB6	; 182
    3538:	bf 4f       	sbci	r27, 0xFF	; 255
    353a:	fe 01       	movw	r30, r28
    353c:	e2 5b       	subi	r30, 0xB2	; 178
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	11 96       	adiw	r26, 0x01	; 1
    3546:	9c 93       	st	X, r25
    3548:	8e 93       	st	-X, r24
    354a:	fe 01       	movw	r30, r28
    354c:	e6 5b       	subi	r30, 0xB6	; 182
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <BMP180_ReadCalb+0x4b4>
    3558:	fe 01       	movw	r30, r28
    355a:	e6 5b       	subi	r30, 0xB6	; 182
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	80 83       	st	Z, r24
    3562:	22 c0       	rjmp	.+68     	; 0x35a8 <BMP180_ReadCalb+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3564:	8e 01       	movw	r16, r28
    3566:	08 5a       	subi	r16, 0xA8	; 168
    3568:	1f 4f       	sbci	r17, 0xFF	; 255
    356a:	fe 01       	movw	r30, r28
    356c:	e7 5a       	subi	r30, 0xA7	; 167
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	f8 01       	movw	r30, r16
    3582:	80 83       	st	Z, r24
    3584:	de 01       	movw	r26, r28
    3586:	a7 5b       	subi	r26, 0xB7	; 183
    3588:	bf 4f       	sbci	r27, 0xFF	; 255
    358a:	fe 01       	movw	r30, r28
    358c:	e8 5a       	subi	r30, 0xA8	; 168
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3594:	fe 01       	movw	r30, r28
    3596:	e7 5b       	subi	r30, 0xB7	; 183
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	8a 95       	dec	r24
    359e:	f1 f7       	brne	.-4      	; 0x359c <BMP180_ReadCalb+0x4fc>
    35a0:	fe 01       	movw	r30, r28
    35a2:	e7 5b       	subi	r30, 0xB7	; 183
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_Repeated_start(BMP180_ADDRESS_R);	// To read
    35a8:	8f ee       	ldi	r24, 0xEF	; 239
    35aa:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
    35ae:	fe 01       	movw	r30, r28
    35b0:	eb 5b       	subi	r30, 0xBB	; 187
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	a0 e2       	ldi	r26, 0x20	; 32
    35ba:	b1 e4       	ldi	r27, 0x41	; 65
    35bc:	80 83       	st	Z, r24
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	a2 83       	std	Z+2, r26	; 0x02
    35c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35c4:	8e 01       	movw	r16, r28
    35c6:	0f 5b       	subi	r16, 0xBF	; 191
    35c8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ca:	fe 01       	movw	r30, r28
    35cc:	eb 5b       	subi	r30, 0xBB	; 187
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	2b ea       	ldi	r18, 0xAB	; 171
    35da:	3a ea       	ldi	r19, 0xAA	; 170
    35dc:	4a ea       	ldi	r20, 0xAA	; 170
    35de:	50 e4       	ldi	r21, 0x40	; 64
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	f8 01       	movw	r30, r16
    35ea:	80 83       	st	Z, r24
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	a2 83       	std	Z+2, r26	; 0x02
    35f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f2:	fe 01       	movw	r30, r28
    35f4:	ef 5b       	subi	r30, 0xBF	; 191
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	60 81       	ld	r22, Z
    35fa:	71 81       	ldd	r23, Z+1	; 0x01
    35fc:	82 81       	ldd	r24, Z+2	; 0x02
    35fe:	93 81       	ldd	r25, Z+3	; 0x03
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	34 f4       	brge	.+12     	; 0x361c <BMP180_ReadCalb+0x57c>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	fe 01       	movw	r30, r28
    3614:	e0 5c       	subi	r30, 0xC0	; 192
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 83       	st	Z, r24
    361a:	9d c0       	rjmp	.+314    	; 0x3756 <BMP180_ReadCalb+0x6b6>
	else if (__tmp > 255)
    361c:	fe 01       	movw	r30, r28
    361e:	ef 5b       	subi	r30, 0xBF	; 191
    3620:	ff 4f       	sbci	r31, 0xFF	; 255
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	4f e7       	ldi	r20, 0x7F	; 127
    3630:	53 e4       	ldi	r21, 0x43	; 67
    3632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3636:	18 16       	cp	r1, r24
    3638:	0c f0       	brlt	.+2      	; 0x363c <BMP180_ReadCalb+0x59c>
    363a:	7e c0       	rjmp	.+252    	; 0x3738 <BMP180_ReadCalb+0x698>
	{
		_delay_ms(__us / 1000.0);
    363c:	fe 01       	movw	r30, r28
    363e:	eb 5b       	subi	r30, 0xBB	; 187
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	60 81       	ld	r22, Z
    3644:	71 81       	ldd	r23, Z+1	; 0x01
    3646:	82 81       	ldd	r24, Z+2	; 0x02
    3648:	93 81       	ldd	r25, Z+3	; 0x03
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	4a e7       	ldi	r20, 0x7A	; 122
    3650:	54 e4       	ldi	r21, 0x44	; 68
    3652:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	8c af       	std	Y+60, r24	; 0x3c
    365c:	9d af       	std	Y+61, r25	; 0x3d
    365e:	ae af       	std	Y+62, r26	; 0x3e
    3660:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3662:	6c ad       	ldd	r22, Y+60	; 0x3c
    3664:	7d ad       	ldd	r23, Y+61	; 0x3d
    3666:	8e ad       	ldd	r24, Y+62	; 0x3e
    3668:	9f ad       	ldd	r25, Y+63	; 0x3f
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	4a e7       	ldi	r20, 0x7A	; 122
    3670:	55 e4       	ldi	r21, 0x45	; 69
    3672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	88 af       	std	Y+56, r24	; 0x38
    367c:	99 af       	std	Y+57, r25	; 0x39
    367e:	aa af       	std	Y+58, r26	; 0x3a
    3680:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3682:	68 ad       	ldd	r22, Y+56	; 0x38
    3684:	79 ad       	ldd	r23, Y+57	; 0x39
    3686:	8a ad       	ldd	r24, Y+58	; 0x3a
    3688:	9b ad       	ldd	r25, Y+59	; 0x3b
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	5f e3       	ldi	r21, 0x3F	; 63
    3692:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3696:	88 23       	and	r24, r24
    3698:	2c f4       	brge	.+10     	; 0x36a4 <BMP180_ReadCalb+0x604>
		__ticks = 1;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9f ab       	std	Y+55, r25	; 0x37
    36a0:	8e ab       	std	Y+54, r24	; 0x36
    36a2:	3f c0       	rjmp	.+126    	; 0x3722 <BMP180_ReadCalb+0x682>
	else if (__tmp > 65535)
    36a4:	68 ad       	ldd	r22, Y+56	; 0x38
    36a6:	79 ad       	ldd	r23, Y+57	; 0x39
    36a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    36aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	3f ef       	ldi	r19, 0xFF	; 255
    36b0:	4f e7       	ldi	r20, 0x7F	; 127
    36b2:	57 e4       	ldi	r21, 0x47	; 71
    36b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b8:	18 16       	cp	r1, r24
    36ba:	4c f5       	brge	.+82     	; 0x370e <BMP180_ReadCalb+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    36be:	7d ad       	ldd	r23, Y+61	; 0x3d
    36c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    36c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e2       	ldi	r20, 0x20	; 32
    36ca:	51 e4       	ldi	r21, 0x41	; 65
    36cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	bc 01       	movw	r22, r24
    36d6:	cd 01       	movw	r24, r26
    36d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	9f ab       	std	Y+55, r25	; 0x37
    36e2:	8e ab       	std	Y+54, r24	; 0x36
    36e4:	0f c0       	rjmp	.+30     	; 0x3704 <BMP180_ReadCalb+0x664>
    36e6:	80 e9       	ldi	r24, 0x90	; 144
    36e8:	91 e0       	ldi	r25, 0x01	; 1
    36ea:	9d ab       	std	Y+53, r25	; 0x35
    36ec:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36ee:	8c a9       	ldd	r24, Y+52	; 0x34
    36f0:	9d a9       	ldd	r25, Y+53	; 0x35
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <BMP180_ReadCalb+0x652>
    36f6:	9d ab       	std	Y+53, r25	; 0x35
    36f8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fa:	8e a9       	ldd	r24, Y+54	; 0x36
    36fc:	9f a9       	ldd	r25, Y+55	; 0x37
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	9f ab       	std	Y+55, r25	; 0x37
    3702:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3704:	8e a9       	ldd	r24, Y+54	; 0x36
    3706:	9f a9       	ldd	r25, Y+55	; 0x37
    3708:	00 97       	sbiw	r24, 0x00	; 0
    370a:	69 f7       	brne	.-38     	; 0x36e6 <BMP180_ReadCalb+0x646>
    370c:	2d c0       	rjmp	.+90     	; 0x3768 <BMP180_ReadCalb+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370e:	68 ad       	ldd	r22, Y+56	; 0x38
    3710:	79 ad       	ldd	r23, Y+57	; 0x39
    3712:	8a ad       	ldd	r24, Y+58	; 0x3a
    3714:	9b ad       	ldd	r25, Y+59	; 0x3b
    3716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	9f ab       	std	Y+55, r25	; 0x37
    3720:	8e ab       	std	Y+54, r24	; 0x36
    3722:	8e a9       	ldd	r24, Y+54	; 0x36
    3724:	9f a9       	ldd	r25, Y+55	; 0x37
    3726:	9b ab       	std	Y+51, r25	; 0x33
    3728:	8a ab       	std	Y+50, r24	; 0x32
    372a:	8a a9       	ldd	r24, Y+50	; 0x32
    372c:	9b a9       	ldd	r25, Y+51	; 0x33
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <BMP180_ReadCalb+0x68e>
    3732:	9b ab       	std	Y+51, r25	; 0x33
    3734:	8a ab       	std	Y+50, r24	; 0x32
    3736:	18 c0       	rjmp	.+48     	; 0x3768 <BMP180_ReadCalb+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3738:	fe 01       	movw	r30, r28
    373a:	ef 5b       	subi	r30, 0xBF	; 191
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	60 81       	ld	r22, Z
    3740:	71 81       	ldd	r23, Z+1	; 0x01
    3742:	82 81       	ldd	r24, Z+2	; 0x02
    3744:	93 81       	ldd	r25, Z+3	; 0x03
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	fe 01       	movw	r30, r28
    3750:	e0 5c       	subi	r30, 0xC0	; 192
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 83       	st	Z, r24
    3756:	fe 01       	movw	r30, r28
    3758:	e0 5c       	subi	r30, 0xC0	; 192
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	80 81       	ld	r24, Z
    375e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3760:	89 a9       	ldd	r24, Y+49	; 0x31
    3762:	8a 95       	dec	r24
    3764:	f1 f7       	brne	.-4      	; 0x3762 <BMP180_ReadCalb+0x6c2>
    3766:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		Callib_Data[i] = TWI_ReadByteWithNACK();
    3768:	fe 01       	movw	r30, r28
    376a:	e7 58       	subi	r30, 0x87	; 135
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	00 81       	ld	r16, Z
    3770:	11 81       	ldd	r17, Z+1	; 0x01
    3772:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3776:	28 2f       	mov	r18, r24
    3778:	ce 01       	movw	r24, r28
    377a:	83 58       	subi	r24, 0x83	; 131
    377c:	9f 4f       	sbci	r25, 0xFF	; 255
    377e:	fc 01       	movw	r30, r24
    3780:	e0 0f       	add	r30, r16
    3782:	f1 1f       	adc	r31, r17
    3784:	20 83       	st	Z, r18
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	a0 e2       	ldi	r26, 0x20	; 32
    378c:	b1 e4       	ldi	r27, 0x41	; 65
    378e:	8d a7       	std	Y+45, r24	; 0x2d
    3790:	9e a7       	std	Y+46, r25	; 0x2e
    3792:	af a7       	std	Y+47, r26	; 0x2f
    3794:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3796:	6d a5       	ldd	r22, Y+45	; 0x2d
    3798:	7e a5       	ldd	r23, Y+46	; 0x2e
    379a:	8f a5       	ldd	r24, Y+47	; 0x2f
    379c:	98 a9       	ldd	r25, Y+48	; 0x30
    379e:	2b ea       	ldi	r18, 0xAB	; 171
    37a0:	3a ea       	ldi	r19, 0xAA	; 170
    37a2:	4a ea       	ldi	r20, 0xAA	; 170
    37a4:	50 e4       	ldi	r21, 0x40	; 64
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	89 a7       	std	Y+41, r24	; 0x29
    37b0:	9a a7       	std	Y+42, r25	; 0x2a
    37b2:	ab a7       	std	Y+43, r26	; 0x2b
    37b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    37b6:	69 a5       	ldd	r22, Y+41	; 0x29
    37b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    37ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    37bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e8       	ldi	r20, 0x80	; 128
    37c4:	5f e3       	ldi	r21, 0x3F	; 63
    37c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ca:	88 23       	and	r24, r24
    37cc:	1c f4       	brge	.+6      	; 0x37d4 <BMP180_ReadCalb+0x734>
		__ticks = 1;
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	88 a7       	std	Y+40, r24	; 0x28
    37d2:	91 c0       	rjmp	.+290    	; 0x38f6 <BMP180_ReadCalb+0x856>
	else if (__tmp > 255)
    37d4:	69 a5       	ldd	r22, Y+41	; 0x29
    37d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    37d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    37da:	9c a5       	ldd	r25, Y+44	; 0x2c
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	4f e7       	ldi	r20, 0x7F	; 127
    37e2:	53 e4       	ldi	r21, 0x43	; 67
    37e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e8:	18 16       	cp	r1, r24
    37ea:	0c f0       	brlt	.+2      	; 0x37ee <BMP180_ReadCalb+0x74e>
    37ec:	7b c0       	rjmp	.+246    	; 0x38e4 <BMP180_ReadCalb+0x844>
	{
		_delay_ms(__us / 1000.0);
    37ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    37f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    37f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f4:	98 a9       	ldd	r25, Y+48	; 0x30
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	4a e7       	ldi	r20, 0x7A	; 122
    37fc:	54 e4       	ldi	r21, 0x44	; 68
    37fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	8c a3       	std	Y+36, r24	; 0x24
    3808:	9d a3       	std	Y+37, r25	; 0x25
    380a:	ae a3       	std	Y+38, r26	; 0x26
    380c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380e:	6c a1       	ldd	r22, Y+36	; 0x24
    3810:	7d a1       	ldd	r23, Y+37	; 0x25
    3812:	8e a1       	ldd	r24, Y+38	; 0x26
    3814:	9f a1       	ldd	r25, Y+39	; 0x27
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4a e7       	ldi	r20, 0x7A	; 122
    381c:	55 e4       	ldi	r21, 0x45	; 69
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	88 a3       	std	Y+32, r24	; 0x20
    3828:	99 a3       	std	Y+33, r25	; 0x21
    382a:	aa a3       	std	Y+34, r26	; 0x22
    382c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    382e:	68 a1       	ldd	r22, Y+32	; 0x20
    3830:	79 a1       	ldd	r23, Y+33	; 0x21
    3832:	8a a1       	ldd	r24, Y+34	; 0x22
    3834:	9b a1       	ldd	r25, Y+35	; 0x23
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e8       	ldi	r20, 0x80	; 128
    383c:	5f e3       	ldi	r21, 0x3F	; 63
    383e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3842:	88 23       	and	r24, r24
    3844:	2c f4       	brge	.+10     	; 0x3850 <BMP180_ReadCalb+0x7b0>
		__ticks = 1;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	9f 8f       	std	Y+31, r25	; 0x1f
    384c:	8e 8f       	std	Y+30, r24	; 0x1e
    384e:	3f c0       	rjmp	.+126    	; 0x38ce <BMP180_ReadCalb+0x82e>
	else if (__tmp > 65535)
    3850:	68 a1       	ldd	r22, Y+32	; 0x20
    3852:	79 a1       	ldd	r23, Y+33	; 0x21
    3854:	8a a1       	ldd	r24, Y+34	; 0x22
    3856:	9b a1       	ldd	r25, Y+35	; 0x23
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f e7       	ldi	r20, 0x7F	; 127
    385e:	57 e4       	ldi	r21, 0x47	; 71
    3860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3864:	18 16       	cp	r1, r24
    3866:	4c f5       	brge	.+82     	; 0x38ba <BMP180_ReadCalb+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3868:	6c a1       	ldd	r22, Y+36	; 0x24
    386a:	7d a1       	ldd	r23, Y+37	; 0x25
    386c:	8e a1       	ldd	r24, Y+38	; 0x26
    386e:	9f a1       	ldd	r25, Y+39	; 0x27
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e2       	ldi	r20, 0x20	; 32
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	9f 8f       	std	Y+31, r25	; 0x1f
    388e:	8e 8f       	std	Y+30, r24	; 0x1e
    3890:	0f c0       	rjmp	.+30     	; 0x38b0 <BMP180_ReadCalb+0x810>
    3892:	80 e9       	ldi	r24, 0x90	; 144
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	9d 8f       	std	Y+29, r25	; 0x1d
    3898:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    389a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    389c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <BMP180_ReadCalb+0x7fe>
    38a2:	9d 8f       	std	Y+29, r25	; 0x1d
    38a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	9f 8f       	std	Y+31, r25	; 0x1f
    38ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	69 f7       	brne	.-38     	; 0x3892 <BMP180_ReadCalb+0x7f2>
    38b8:	24 c0       	rjmp	.+72     	; 0x3902 <BMP180_ReadCalb+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ba:	68 a1       	ldd	r22, Y+32	; 0x20
    38bc:	79 a1       	ldd	r23, Y+33	; 0x21
    38be:	8a a1       	ldd	r24, Y+34	; 0x22
    38c0:	9b a1       	ldd	r25, Y+35	; 0x23
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	9f 8f       	std	Y+31, r25	; 0x1f
    38cc:	8e 8f       	std	Y+30, r24	; 0x1e
    38ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38d2:	9b 8f       	std	Y+27, r25	; 0x1b
    38d4:	8a 8f       	std	Y+26, r24	; 0x1a
    38d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <BMP180_ReadCalb+0x83a>
    38de:	9b 8f       	std	Y+27, r25	; 0x1b
    38e0:	8a 8f       	std	Y+26, r24	; 0x1a
    38e2:	0f c0       	rjmp	.+30     	; 0x3902 <BMP180_ReadCalb+0x862>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38e4:	69 a5       	ldd	r22, Y+41	; 0x29
    38e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    38e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    38ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	88 a7       	std	Y+40, r24	; 0x28
    38f6:	88 a5       	ldd	r24, Y+40	; 0x28
    38f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38fa:	89 8d       	ldd	r24, Y+25	; 0x19
    38fc:	8a 95       	dec	r24
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <BMP180_ReadCalb+0x85c>
    3900:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		TWI_Stop();
    3902:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	a0 e2       	ldi	r26, 0x20	; 32
    390c:	b1 e4       	ldi	r27, 0x41	; 65
    390e:	8d 8b       	std	Y+21, r24	; 0x15
    3910:	9e 8b       	std	Y+22, r25	; 0x16
    3912:	af 8b       	std	Y+23, r26	; 0x17
    3914:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3916:	6d 89       	ldd	r22, Y+21	; 0x15
    3918:	7e 89       	ldd	r23, Y+22	; 0x16
    391a:	8f 89       	ldd	r24, Y+23	; 0x17
    391c:	98 8d       	ldd	r25, Y+24	; 0x18
    391e:	2b ea       	ldi	r18, 0xAB	; 171
    3920:	3a ea       	ldi	r19, 0xAA	; 170
    3922:	4a ea       	ldi	r20, 0xAA	; 170
    3924:	50 e4       	ldi	r21, 0x40	; 64
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	89 8b       	std	Y+17, r24	; 0x11
    3930:	9a 8b       	std	Y+18, r25	; 0x12
    3932:	ab 8b       	std	Y+19, r26	; 0x13
    3934:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3936:	69 89       	ldd	r22, Y+17	; 0x11
    3938:	7a 89       	ldd	r23, Y+18	; 0x12
    393a:	8b 89       	ldd	r24, Y+19	; 0x13
    393c:	9c 89       	ldd	r25, Y+20	; 0x14
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e8       	ldi	r20, 0x80	; 128
    3944:	5f e3       	ldi	r21, 0x3F	; 63
    3946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394a:	88 23       	and	r24, r24
    394c:	1c f4       	brge	.+6      	; 0x3954 <BMP180_ReadCalb+0x8b4>
		__ticks = 1;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	88 8b       	std	Y+16, r24	; 0x10
    3952:	91 c0       	rjmp	.+290    	; 0x3a76 <BMP180_ReadCalb+0x9d6>
	else if (__tmp > 255)
    3954:	69 89       	ldd	r22, Y+17	; 0x11
    3956:	7a 89       	ldd	r23, Y+18	; 0x12
    3958:	8b 89       	ldd	r24, Y+19	; 0x13
    395a:	9c 89       	ldd	r25, Y+20	; 0x14
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	4f e7       	ldi	r20, 0x7F	; 127
    3962:	53 e4       	ldi	r21, 0x43	; 67
    3964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3968:	18 16       	cp	r1, r24
    396a:	0c f0       	brlt	.+2      	; 0x396e <BMP180_ReadCalb+0x8ce>
    396c:	7b c0       	rjmp	.+246    	; 0x3a64 <BMP180_ReadCalb+0x9c4>
	{
		_delay_ms(__us / 1000.0);
    396e:	6d 89       	ldd	r22, Y+21	; 0x15
    3970:	7e 89       	ldd	r23, Y+22	; 0x16
    3972:	8f 89       	ldd	r24, Y+23	; 0x17
    3974:	98 8d       	ldd	r25, Y+24	; 0x18
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	4a e7       	ldi	r20, 0x7A	; 122
    397c:	54 e4       	ldi	r21, 0x44	; 68
    397e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	8c 87       	std	Y+12, r24	; 0x0c
    3988:	9d 87       	std	Y+13, r25	; 0x0d
    398a:	ae 87       	std	Y+14, r26	; 0x0e
    398c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3990:	7d 85       	ldd	r23, Y+13	; 0x0d
    3992:	8e 85       	ldd	r24, Y+14	; 0x0e
    3994:	9f 85       	ldd	r25, Y+15	; 0x0f
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	4a e7       	ldi	r20, 0x7A	; 122
    399c:	55 e4       	ldi	r21, 0x45	; 69
    399e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	88 87       	std	Y+8, r24	; 0x08
    39a8:	99 87       	std	Y+9, r25	; 0x09
    39aa:	aa 87       	std	Y+10, r26	; 0x0a
    39ac:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    39ae:	68 85       	ldd	r22, Y+8	; 0x08
    39b0:	79 85       	ldd	r23, Y+9	; 0x09
    39b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e8       	ldi	r20, 0x80	; 128
    39bc:	5f e3       	ldi	r21, 0x3F	; 63
    39be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c2:	88 23       	and	r24, r24
    39c4:	2c f4       	brge	.+10     	; 0x39d0 <BMP180_ReadCalb+0x930>
		__ticks = 1;
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	9f 83       	std	Y+7, r25	; 0x07
    39cc:	8e 83       	std	Y+6, r24	; 0x06
    39ce:	3f c0       	rjmp	.+126    	; 0x3a4e <BMP180_ReadCalb+0x9ae>
	else if (__tmp > 65535)
    39d0:	68 85       	ldd	r22, Y+8	; 0x08
    39d2:	79 85       	ldd	r23, Y+9	; 0x09
    39d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	3f ef       	ldi	r19, 0xFF	; 255
    39dc:	4f e7       	ldi	r20, 0x7F	; 127
    39de:	57 e4       	ldi	r21, 0x47	; 71
    39e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39e4:	18 16       	cp	r1, r24
    39e6:	4c f5       	brge	.+82     	; 0x3a3a <BMP180_ReadCalb+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    39ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    39ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    39ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e2       	ldi	r20, 0x20	; 32
    39f6:	51 e4       	ldi	r21, 0x41	; 65
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	bc 01       	movw	r22, r24
    3a02:	cd 01       	movw	r24, r26
    3a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	9f 83       	std	Y+7, r25	; 0x07
    3a0e:	8e 83       	std	Y+6, r24	; 0x06
    3a10:	0f c0       	rjmp	.+30     	; 0x3a30 <BMP180_ReadCalb+0x990>
    3a12:	80 e9       	ldi	r24, 0x90	; 144
    3a14:	91 e0       	ldi	r25, 0x01	; 1
    3a16:	9d 83       	std	Y+5, r25	; 0x05
    3a18:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <BMP180_ReadCalb+0x97e>
    3a22:	9d 83       	std	Y+5, r25	; 0x05
    3a24:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a26:	8e 81       	ldd	r24, Y+6	; 0x06
    3a28:	9f 81       	ldd	r25, Y+7	; 0x07
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	9f 83       	std	Y+7, r25	; 0x07
    3a2e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a30:	8e 81       	ldd	r24, Y+6	; 0x06
    3a32:	9f 81       	ldd	r25, Y+7	; 0x07
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	69 f7       	brne	.-38     	; 0x3a12 <BMP180_ReadCalb+0x972>
    3a38:	24 c0       	rjmp	.+72     	; 0x3a82 <BMP180_ReadCalb+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3a:	68 85       	ldd	r22, Y+8	; 0x08
    3a3c:	79 85       	ldd	r23, Y+9	; 0x09
    3a3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a40:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9f 83       	std	Y+7, r25	; 0x07
    3a4c:	8e 83       	std	Y+6, r24	; 0x06
    3a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3a50:	9f 81       	ldd	r25, Y+7	; 0x07
    3a52:	9b 83       	std	Y+3, r25	; 0x03
    3a54:	8a 83       	std	Y+2, r24	; 0x02
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <BMP180_ReadCalb+0x9ba>
    3a5e:	9b 83       	std	Y+3, r25	; 0x03
    3a60:	8a 83       	std	Y+2, r24	; 0x02
    3a62:	0f c0       	rjmp	.+30     	; 0x3a82 <BMP180_ReadCalb+0x9e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a64:	69 89       	ldd	r22, Y+17	; 0x11
    3a66:	7a 89       	ldd	r23, Y+18	; 0x12
    3a68:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	88 8b       	std	Y+16, r24	; 0x10
    3a76:	88 89       	ldd	r24, Y+16	; 0x10
    3a78:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	8a 95       	dec	r24
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <BMP180_ReadCalb+0x9dc>
    3a80:	89 83       	std	Y+1, r24	; 0x01
void BMP180_ReadCalb(void) {

	uint8_t Callib_Data[22] = { 0 };
	uint16_t Callib_Start = 0xAA;

	for (int i = 0; i < 22; i++) {
    3a82:	de 01       	movw	r26, r28
    3a84:	a7 58       	subi	r26, 0x87	; 135
    3a86:	bf 4f       	sbci	r27, 0xFF	; 255
    3a88:	fe 01       	movw	r30, r28
    3a8a:	e7 58       	subi	r30, 0x87	; 135
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	01 96       	adiw	r24, 0x01	; 1
    3a94:	11 96       	adiw	r26, 0x01	; 1
    3a96:	9c 93       	st	X, r25
    3a98:	8e 93       	st	-X, r24
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e7 58       	subi	r30, 0x87	; 135
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 81       	ld	r24, Z
    3aa2:	91 81       	ldd	r25, Z+1	; 0x01
    3aa4:	86 31       	cpi	r24, 0x16	; 22
    3aa6:	91 05       	cpc	r25, r1
    3aa8:	0c f4       	brge	.+2      	; 0x3aac <BMP180_ReadCalb+0xa0c>
    3aaa:	1e cb       	rjmp	.-2500   	; 0x30e8 <BMP180_ReadCalb+0x48>
		_delay_us(10);
		TWI_Stop();
		_delay_us(10);
	}

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
    3aac:	fe 01       	movw	r30, r28
    3aae:	e3 58       	subi	r30, 0x83	; 131
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	88 2f       	mov	r24, r24
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	38 2f       	mov	r19, r24
    3aba:	22 27       	eor	r18, r18
    3abc:	fe 01       	movw	r30, r28
    3abe:	e3 58       	subi	r30, 0x83	; 131
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	81 81       	ldd	r24, Z+1	; 0x01
    3ac4:	88 2f       	mov	r24, r24
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	82 2b       	or	r24, r18
    3aca:	93 2b       	or	r25, r19
    3acc:	90 93 98 01 	sts	0x0198, r25
    3ad0:	80 93 97 01 	sts	0x0197, r24
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e3 58       	subi	r30, 0x83	; 131
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	88 2f       	mov	r24, r24
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	38 2f       	mov	r19, r24
    3ae2:	22 27       	eor	r18, r18
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e3 58       	subi	r30, 0x83	; 131
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	83 81       	ldd	r24, Z+3	; 0x03
    3aec:	88 2f       	mov	r24, r24
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	82 2b       	or	r24, r18
    3af2:	93 2b       	or	r25, r19
    3af4:	90 93 9a 01 	sts	0x019A, r25
    3af8:	80 93 99 01 	sts	0x0199, r24
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
    3afc:	fe 01       	movw	r30, r28
    3afe:	e3 58       	subi	r30, 0x83	; 131
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	84 81       	ldd	r24, Z+4	; 0x04
    3b04:	88 2f       	mov	r24, r24
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	38 2f       	mov	r19, r24
    3b0a:	22 27       	eor	r18, r18
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e3 58       	subi	r30, 0x83	; 131
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	85 81       	ldd	r24, Z+5	; 0x05
    3b14:	88 2f       	mov	r24, r24
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	82 2b       	or	r24, r18
    3b1a:	93 2b       	or	r25, r19
    3b1c:	90 93 9c 01 	sts	0x019C, r25
    3b20:	80 93 9b 01 	sts	0x019B, r24
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
    3b24:	fe 01       	movw	r30, r28
    3b26:	e3 58       	subi	r30, 0x83	; 131
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	86 81       	ldd	r24, Z+6	; 0x06
    3b2c:	88 2f       	mov	r24, r24
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	38 2f       	mov	r19, r24
    3b32:	22 27       	eor	r18, r18
    3b34:	fe 01       	movw	r30, r28
    3b36:	e3 58       	subi	r30, 0x83	; 131
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	87 81       	ldd	r24, Z+7	; 0x07
    3b3c:	88 2f       	mov	r24, r24
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	82 2b       	or	r24, r18
    3b42:	93 2b       	or	r25, r19
    3b44:	90 93 a8 01 	sts	0x01A8, r25
    3b48:	80 93 a7 01 	sts	0x01A7, r24
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	e3 58       	subi	r30, 0x83	; 131
    3b50:	ff 4f       	sbci	r31, 0xFF	; 255
    3b52:	80 85       	ldd	r24, Z+8	; 0x08
    3b54:	88 2f       	mov	r24, r24
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	38 2f       	mov	r19, r24
    3b5a:	22 27       	eor	r18, r18
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e3 58       	subi	r30, 0x83	; 131
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	81 85       	ldd	r24, Z+9	; 0x09
    3b64:	88 2f       	mov	r24, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	82 2b       	or	r24, r18
    3b6a:	93 2b       	or	r25, r19
    3b6c:	90 93 aa 01 	sts	0x01AA, r25
    3b70:	80 93 a9 01 	sts	0x01A9, r24
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
    3b74:	fe 01       	movw	r30, r28
    3b76:	e3 58       	subi	r30, 0x83	; 131
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	82 85       	ldd	r24, Z+10	; 0x0a
    3b7c:	88 2f       	mov	r24, r24
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	38 2f       	mov	r19, r24
    3b82:	22 27       	eor	r18, r18
    3b84:	fe 01       	movw	r30, r28
    3b86:	e3 58       	subi	r30, 0x83	; 131
    3b88:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8a:	83 85       	ldd	r24, Z+11	; 0x0b
    3b8c:	88 2f       	mov	r24, r24
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	82 2b       	or	r24, r18
    3b92:	93 2b       	or	r25, r19
    3b94:	90 93 ac 01 	sts	0x01AC, r25
    3b98:	80 93 ab 01 	sts	0x01AB, r24
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e3 58       	subi	r30, 0x83	; 131
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	84 85       	ldd	r24, Z+12	; 0x0c
    3ba4:	88 2f       	mov	r24, r24
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	38 2f       	mov	r19, r24
    3baa:	22 27       	eor	r18, r18
    3bac:	fe 01       	movw	r30, r28
    3bae:	e3 58       	subi	r30, 0x83	; 131
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	85 85       	ldd	r24, Z+13	; 0x0d
    3bb4:	88 2f       	mov	r24, r24
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	82 2b       	or	r24, r18
    3bba:	93 2b       	or	r25, r19
    3bbc:	90 93 9e 01 	sts	0x019E, r25
    3bc0:	80 93 9d 01 	sts	0x019D, r24
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e3 58       	subi	r30, 0x83	; 131
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	86 85       	ldd	r24, Z+14	; 0x0e
    3bcc:	88 2f       	mov	r24, r24
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	38 2f       	mov	r19, r24
    3bd2:	22 27       	eor	r18, r18
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e3 58       	subi	r30, 0x83	; 131
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	87 85       	ldd	r24, Z+15	; 0x0f
    3bdc:	88 2f       	mov	r24, r24
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	82 2b       	or	r24, r18
    3be2:	93 2b       	or	r25, r19
    3be4:	90 93 a0 01 	sts	0x01A0, r25
    3be8:	80 93 9f 01 	sts	0x019F, r24
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
    3bec:	fe 01       	movw	r30, r28
    3bee:	e3 58       	subi	r30, 0x83	; 131
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 89       	ldd	r24, Z+16	; 0x10
    3bf4:	88 2f       	mov	r24, r24
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	38 2f       	mov	r19, r24
    3bfa:	22 27       	eor	r18, r18
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e3 58       	subi	r30, 0x83	; 131
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	81 89       	ldd	r24, Z+17	; 0x11
    3c04:	88 2f       	mov	r24, r24
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	82 2b       	or	r24, r18
    3c0a:	93 2b       	or	r25, r19
    3c0c:	90 93 a2 01 	sts	0x01A2, r25
    3c10:	80 93 a1 01 	sts	0x01A1, r24
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
    3c14:	fe 01       	movw	r30, r28
    3c16:	e3 58       	subi	r30, 0x83	; 131
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	82 89       	ldd	r24, Z+18	; 0x12
    3c1c:	88 2f       	mov	r24, r24
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	38 2f       	mov	r19, r24
    3c22:	22 27       	eor	r18, r18
    3c24:	fe 01       	movw	r30, r28
    3c26:	e3 58       	subi	r30, 0x83	; 131
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	83 89       	ldd	r24, Z+19	; 0x13
    3c2c:	88 2f       	mov	r24, r24
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	82 2b       	or	r24, r18
    3c32:	93 2b       	or	r25, r19
    3c34:	90 93 a4 01 	sts	0x01A4, r25
    3c38:	80 93 a3 01 	sts	0x01A3, r24
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	e3 58       	subi	r30, 0x83	; 131
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	84 89       	ldd	r24, Z+20	; 0x14
    3c44:	88 2f       	mov	r24, r24
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	38 2f       	mov	r19, r24
    3c4a:	22 27       	eor	r18, r18
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	e3 58       	subi	r30, 0x83	; 131
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	85 89       	ldd	r24, Z+21	; 0x15
    3c54:	88 2f       	mov	r24, r24
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	82 2b       	or	r24, r18
    3c5a:	93 2b       	or	r25, r19
    3c5c:	90 93 a6 01 	sts	0x01A6, r25
    3c60:	80 93 a5 01 	sts	0x01A5, r24

}
    3c64:	ce 56       	subi	r28, 0x6E	; 110
    3c66:	df 4f       	sbci	r29, 0xFF	; 255
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	08 95       	ret

00003c7c <Get_UP>:

uint32 Get_UP(void) {
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	66 97       	sbiw	r28, 0x16	; 22
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
	// calculate the value to write to the BMP180 control register based on the oversampling setting
	uint8 datatowrite = 0x34 + (OSS << 6);
    3c90:	84 e3       	ldi	r24, 0x34	; 52
    3c92:	8b 8b       	std	Y+19, r24	; 0x13
	// array to store the raw pressure data
	uint8 Pressure_RAW[3] = { 0 };
    3c94:	83 e0       	ldi	r24, 0x03	; 3
    3c96:	fe 01       	movw	r30, r28
    3c98:	74 96       	adiw	r30, 0x14	; 20
    3c9a:	df 01       	movw	r26, r30
    3c9c:	98 2f       	mov	r25, r24
    3c9e:	1d 92       	st	X+, r1
    3ca0:	9a 95       	dec	r25
    3ca2:	e9 f7       	brne	.-6      	; 0x3c9e <Get_UP+0x22>

	uint32 data = 0;
    3ca4:	1f 86       	std	Y+15, r1	; 0x0f
    3ca6:	18 8a       	std	Y+16, r1	; 0x10
    3ca8:	19 8a       	std	Y+17, r1	; 0x11
    3caa:	1a 8a       	std	Y+18, r1	; 0x12

	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    3cac:	8e ee       	ldi	r24, 0xEE	; 238
    3cae:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    3cb2:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// send the address of the BMP180 control register to initiate the pressure measurement
	TWI_WriteByte(0xF4);
    3cb6:	84 ef       	ldi	r24, 0xF4	; 244
    3cb8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3cbc:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// send the value calculated above to start the measurement with the selected oversampling setting
	TWI_WriteByte(datatowrite);
    3cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3cc6:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    3cca:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	a0 ea       	ldi	r26, 0xA0	; 160
    3cd4:	b0 e4       	ldi	r27, 0x40	; 64
    3cd6:	8b 87       	std	Y+11, r24	; 0x0b
    3cd8:	9c 87       	std	Y+12, r25	; 0x0c
    3cda:	ad 87       	std	Y+13, r26	; 0x0d
    3cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	4a e7       	ldi	r20, 0x7A	; 122
    3cec:	55 e4       	ldi	r21, 0x45	; 69
    3cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	8f 83       	std	Y+7, r24	; 0x07
    3cf8:	98 87       	std	Y+8, r25	; 0x08
    3cfa:	a9 87       	std	Y+9, r26	; 0x09
    3cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3d00:	78 85       	ldd	r23, Y+8	; 0x08
    3d02:	89 85       	ldd	r24, Y+9	; 0x09
    3d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e8       	ldi	r20, 0x80	; 128
    3d0c:	5f e3       	ldi	r21, 0x3F	; 63
    3d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d12:	88 23       	and	r24, r24
    3d14:	2c f4       	brge	.+10     	; 0x3d20 <Get_UP+0xa4>
		__ticks = 1;
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	9e 83       	std	Y+6, r25	; 0x06
    3d1c:	8d 83       	std	Y+5, r24	; 0x05
    3d1e:	3f c0       	rjmp	.+126    	; 0x3d9e <Get_UP+0x122>
	else if (__tmp > 65535)
    3d20:	6f 81       	ldd	r22, Y+7	; 0x07
    3d22:	78 85       	ldd	r23, Y+8	; 0x08
    3d24:	89 85       	ldd	r24, Y+9	; 0x09
    3d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	3f ef       	ldi	r19, 0xFF	; 255
    3d2c:	4f e7       	ldi	r20, 0x7F	; 127
    3d2e:	57 e4       	ldi	r21, 0x47	; 71
    3d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d34:	18 16       	cp	r1, r24
    3d36:	4c f5       	brge	.+82     	; 0x3d8a <Get_UP+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e2       	ldi	r20, 0x20	; 32
    3d46:	51 e4       	ldi	r21, 0x41	; 65
    3d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	bc 01       	movw	r22, r24
    3d52:	cd 01       	movw	r24, r26
    3d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	9e 83       	std	Y+6, r25	; 0x06
    3d5e:	8d 83       	std	Y+5, r24	; 0x05
    3d60:	0f c0       	rjmp	.+30     	; 0x3d80 <Get_UP+0x104>
    3d62:	80 e9       	ldi	r24, 0x90	; 144
    3d64:	91 e0       	ldi	r25, 0x01	; 1
    3d66:	9c 83       	std	Y+4, r25	; 0x04
    3d68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <Get_UP+0xf2>
    3d72:	9c 83       	std	Y+4, r25	; 0x04
    3d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d76:	8d 81       	ldd	r24, Y+5	; 0x05
    3d78:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	69 f7       	brne	.-38     	; 0x3d62 <Get_UP+0xe6>
    3d88:	14 c0       	rjmp	.+40     	; 0x3db2 <Get_UP+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d8c:	78 85       	ldd	r23, Y+8	; 0x08
    3d8e:	89 85       	ldd	r24, Y+9	; 0x09
    3d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	9e 83       	std	Y+6, r25	; 0x06
    3d9c:	8d 83       	std	Y+5, r24	; 0x05
    3d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3da0:	9e 81       	ldd	r25, Y+6	; 0x06
    3da2:	9a 83       	std	Y+2, r25	; 0x02
    3da4:	89 83       	std	Y+1, r24	; 0x01
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	9a 81       	ldd	r25, Y+2	; 0x02
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <Get_UP+0x12e>
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01



	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3db2:	8e ee       	ldi	r24, 0xEE	; 238
    3db4:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3db8:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_WriteByte(0xF6);
    3dbc:	86 ef       	ldi	r24, 0xF6	; 246
    3dbe:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3dc2:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3dc6:	8f ee       	ldi	r24, 0xEF	; 239
    3dc8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3dcc:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	Pressure_RAW[0] = TWI_ReadByteWithNACK();
    3dd0:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3dd4:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    3dd6:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Stop();
    3dda:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    3dde:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3de2:	8e ee       	ldi	r24, 0xEE	; 238
    3de4:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3de8:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_WriteByte(0xF7);
    3dec:	87 ef       	ldi	r24, 0xF7	; 247
    3dee:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3df2:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3df6:	8f ee       	ldi	r24, 0xEF	; 239
    3df8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3dfc:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	Pressure_RAW[1] = TWI_ReadByteWithNACK();
    3e00:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3e04:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    3e06:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Stop();
    3e0a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    3e0e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// read the LSB of the raw pressure data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3e12:	8e ee       	ldi	r24, 0xEE	; 238
    3e14:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3e18:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_WriteByte(0xF8);
    3e1c:	88 ef       	ldi	r24, 0xF8	; 248
    3e1e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3e22:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3e26:	8f ee       	ldi	r24, 0xEF	; 239
    3e28:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3e2c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	Pressure_RAW[2] = TWI_ReadByteWithNACK();
    3e30:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3e34:	8e 8b       	std	Y+22, r24	; 0x16
	delay();
    3e36:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Stop();
    3e3a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	// combine the raw pressure data into a single 24-bit value and shift it right to adjust for the oversampling setting

	data |= ((uint32_t) Pressure_RAW[0] << 16);
    3e3e:	8c 89       	ldd	r24, Y+20	; 0x14
    3e40:	88 2f       	mov	r24, r24
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	a0 e0       	ldi	r26, 0x00	; 0
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	ac 01       	movw	r20, r24
    3e4a:	33 27       	eor	r19, r19
    3e4c:	22 27       	eor	r18, r18
    3e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e50:	98 89       	ldd	r25, Y+16	; 0x10
    3e52:	a9 89       	ldd	r26, Y+17	; 0x11
    3e54:	ba 89       	ldd	r27, Y+18	; 0x12
    3e56:	82 2b       	or	r24, r18
    3e58:	93 2b       	or	r25, r19
    3e5a:	a4 2b       	or	r26, r20
    3e5c:	b5 2b       	or	r27, r21
    3e5e:	8f 87       	std	Y+15, r24	; 0x0f
    3e60:	98 8b       	std	Y+16, r25	; 0x10
    3e62:	a9 8b       	std	Y+17, r26	; 0x11
    3e64:	ba 8b       	std	Y+18, r27	; 0x12
	data |= ((uint32_t) Pressure_RAW[1] << 8);
    3e66:	8d 89       	ldd	r24, Y+21	; 0x15
    3e68:	88 2f       	mov	r24, r24
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	a0 e0       	ldi	r26, 0x00	; 0
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	22 27       	eor	r18, r18
    3e72:	38 2f       	mov	r19, r24
    3e74:	49 2f       	mov	r20, r25
    3e76:	5a 2f       	mov	r21, r26
    3e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e7a:	98 89       	ldd	r25, Y+16	; 0x10
    3e7c:	a9 89       	ldd	r26, Y+17	; 0x11
    3e7e:	ba 89       	ldd	r27, Y+18	; 0x12
    3e80:	82 2b       	or	r24, r18
    3e82:	93 2b       	or	r25, r19
    3e84:	a4 2b       	or	r26, r20
    3e86:	b5 2b       	or	r27, r21
    3e88:	8f 87       	std	Y+15, r24	; 0x0f
    3e8a:	98 8b       	std	Y+16, r25	; 0x10
    3e8c:	a9 8b       	std	Y+17, r26	; 0x11
    3e8e:	ba 8b       	std	Y+18, r27	; 0x12
	data |= (uint32_t) Pressure_RAW[2];
    3e90:	8e 89       	ldd	r24, Y+22	; 0x16
    3e92:	28 2f       	mov	r18, r24
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	40 e0       	ldi	r20, 0x00	; 0
    3e98:	50 e0       	ldi	r21, 0x00	; 0
    3e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e9c:	98 89       	ldd	r25, Y+16	; 0x10
    3e9e:	a9 89       	ldd	r26, Y+17	; 0x11
    3ea0:	ba 89       	ldd	r27, Y+18	; 0x12
    3ea2:	82 2b       	or	r24, r18
    3ea4:	93 2b       	or	r25, r19
    3ea6:	a4 2b       	or	r26, r20
    3ea8:	b5 2b       	or	r27, r21
    3eaa:	8f 87       	std	Y+15, r24	; 0x0f
    3eac:	98 8b       	std	Y+16, r25	; 0x10
    3eae:	a9 8b       	std	Y+17, r26	; 0x11
    3eb0:	ba 8b       	std	Y+18, r27	; 0x12
	data = data >> (8 - OSS);
    3eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eb4:	98 89       	ldd	r25, Y+16	; 0x10
    3eb6:	a9 89       	ldd	r26, Y+17	; 0x11
    3eb8:	ba 89       	ldd	r27, Y+18	; 0x12
    3eba:	89 2f       	mov	r24, r25
    3ebc:	9a 2f       	mov	r25, r26
    3ebe:	ab 2f       	mov	r26, r27
    3ec0:	bb 27       	eor	r27, r27
    3ec2:	8f 87       	std	Y+15, r24	; 0x0f
    3ec4:	98 8b       	std	Y+16, r25	; 0x10
    3ec6:	a9 8b       	std	Y+17, r26	; 0x11
    3ec8:	ba 8b       	std	Y+18, r27	; 0x12
	//division by 2 power (8-oss which is in datasheet (0,1))

	return data;
    3eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ecc:	98 89       	ldd	r25, Y+16	; 0x10
    3ece:	a9 89       	ldd	r26, Y+17	; 0x11
    3ed0:	ba 89       	ldd	r27, Y+18	; 0x12
}
    3ed2:	bc 01       	movw	r22, r24
    3ed4:	cd 01       	movw	r24, r26
    3ed6:	66 96       	adiw	r28, 0x16	; 22
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <Get_UT>:

uint32 Get_UT(void) {
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	65 97       	sbiw	r28, 0x15	; 21
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61
	uint32 data = 0;
    3efc:	18 8a       	std	Y+16, r1	; 0x10
    3efe:	19 8a       	std	Y+17, r1	; 0x11
    3f00:	1a 8a       	std	Y+18, r1	; 0x12
    3f02:	1b 8a       	std	Y+19, r1	; 0x13

	uint8 datatowrite = 0x2E;
    3f04:	8e e2       	ldi	r24, 0x2E	; 46
    3f06:	8f 87       	std	Y+15, r24	; 0x0f
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = { 0 };
    3f08:	1d 8a       	std	Y+21, r1	; 0x15
    3f0a:	1c 8a       	std	Y+20, r1	; 0x14
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    3f0c:	8e ee       	ldi	r24, 0xEE	; 238
    3f0e:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    3f12:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    3f16:	84 ef       	ldi	r24, 0xF4	; 244
    3f18:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3f1c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// send the value calculated above to start the measurement
	TWI_WriteByte(datatowrite);
    3f20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f22:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3f26:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    3f2a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	a0 ea       	ldi	r26, 0xA0	; 160
    3f34:	b0 e4       	ldi	r27, 0x40	; 64
    3f36:	8b 87       	std	Y+11, r24	; 0x0b
    3f38:	9c 87       	std	Y+12, r25	; 0x0c
    3f3a:	ad 87       	std	Y+13, r26	; 0x0d
    3f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	4a e7       	ldi	r20, 0x7A	; 122
    3f4c:	55 e4       	ldi	r21, 0x45	; 69
    3f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	8f 83       	std	Y+7, r24	; 0x07
    3f58:	98 87       	std	Y+8, r25	; 0x08
    3f5a:	a9 87       	std	Y+9, r26	; 0x09
    3f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f60:	78 85       	ldd	r23, Y+8	; 0x08
    3f62:	89 85       	ldd	r24, Y+9	; 0x09
    3f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	40 e8       	ldi	r20, 0x80	; 128
    3f6c:	5f e3       	ldi	r21, 0x3F	; 63
    3f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f72:	88 23       	and	r24, r24
    3f74:	2c f4       	brge	.+10     	; 0x3f80 <Get_UT+0x98>
		__ticks = 1;
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	9e 83       	std	Y+6, r25	; 0x06
    3f7c:	8d 83       	std	Y+5, r24	; 0x05
    3f7e:	3f c0       	rjmp	.+126    	; 0x3ffe <Get_UT+0x116>
	else if (__tmp > 65535)
    3f80:	6f 81       	ldd	r22, Y+7	; 0x07
    3f82:	78 85       	ldd	r23, Y+8	; 0x08
    3f84:	89 85       	ldd	r24, Y+9	; 0x09
    3f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	3f ef       	ldi	r19, 0xFF	; 255
    3f8c:	4f e7       	ldi	r20, 0x7F	; 127
    3f8e:	57 e4       	ldi	r21, 0x47	; 71
    3f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f94:	18 16       	cp	r1, r24
    3f96:	4c f5       	brge	.+82     	; 0x3fea <Get_UT+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e2       	ldi	r20, 0x20	; 32
    3fa6:	51 e4       	ldi	r21, 0x41	; 65
    3fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	bc 01       	movw	r22, r24
    3fb2:	cd 01       	movw	r24, r26
    3fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	9e 83       	std	Y+6, r25	; 0x06
    3fbe:	8d 83       	std	Y+5, r24	; 0x05
    3fc0:	0f c0       	rjmp	.+30     	; 0x3fe0 <Get_UT+0xf8>
    3fc2:	80 e9       	ldi	r24, 0x90	; 144
    3fc4:	91 e0       	ldi	r25, 0x01	; 1
    3fc6:	9c 83       	std	Y+4, r25	; 0x04
    3fc8:	8b 83       	std	Y+3, r24	; 0x03
    3fca:	8b 81       	ldd	r24, Y+3	; 0x03
    3fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <Get_UT+0xe6>
    3fd2:	9c 83       	std	Y+4, r25	; 0x04
    3fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	9e 83       	std	Y+6, r25	; 0x06
    3fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	69 f7       	brne	.-38     	; 0x3fc2 <Get_UT+0xda>
    3fe8:	14 c0       	rjmp	.+40     	; 0x4012 <Get_UT+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fea:	6f 81       	ldd	r22, Y+7	; 0x07
    3fec:	78 85       	ldd	r23, Y+8	; 0x08
    3fee:	89 85       	ldd	r24, Y+9	; 0x09
    3ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	9e 83       	std	Y+6, r25	; 0x06
    3ffc:	8d 83       	std	Y+5, r24	; 0x05
    3ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    4000:	9e 81       	ldd	r25, Y+6	; 0x06
    4002:	9a 83       	std	Y+2, r25	; 0x02
    4004:	89 83       	std	Y+1, r24	; 0x01
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	9a 81       	ldd	r25, Y+2	; 0x02
    400a:	01 97       	sbiw	r24, 0x01	; 1
    400c:	f1 f7       	brne	.-4      	; 0x400a <Get_UT+0x122>
    400e:	9a 83       	std	Y+2, r25	; 0x02
    4010:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw temperature data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4012:	8e ee       	ldi	r24, 0xEE	; 238
    4014:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4018:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_WriteByte(0xF6);
    401c:	86 ef       	ldi	r24, 0xF6	; 246
    401e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4022:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4026:	8f ee       	ldi	r24, 0xEF	; 239
    4028:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    402c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	Temperature_RAW[0] = TWI_ReadByteWithNACK();
    4030:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4034:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    4036:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Stop();
    403a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    403e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	// read the LSB of the raw temperature data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4042:	8e ee       	ldi	r24, 0xEE	; 238
    4044:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4048:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_WriteByte(0xF7);
    404c:	87 ef       	ldi	r24, 0xF7	; 247
    404e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4052:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4056:	8f ee       	ldi	r24, 0xEF	; 239
    4058:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    405c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	Temperature_RAW[1] = TWI_ReadByteWithNACK();
    4060:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4064:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    4066:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <delay>
	TWI_Stop();
    406a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	data |= ((uint32_t) Temperature_RAW[0] << 8);
    406e:	8c 89       	ldd	r24, Y+20	; 0x14
    4070:	88 2f       	mov	r24, r24
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	a0 e0       	ldi	r26, 0x00	; 0
    4076:	b0 e0       	ldi	r27, 0x00	; 0
    4078:	22 27       	eor	r18, r18
    407a:	38 2f       	mov	r19, r24
    407c:	49 2f       	mov	r20, r25
    407e:	5a 2f       	mov	r21, r26
    4080:	88 89       	ldd	r24, Y+16	; 0x10
    4082:	99 89       	ldd	r25, Y+17	; 0x11
    4084:	aa 89       	ldd	r26, Y+18	; 0x12
    4086:	bb 89       	ldd	r27, Y+19	; 0x13
    4088:	82 2b       	or	r24, r18
    408a:	93 2b       	or	r25, r19
    408c:	a4 2b       	or	r26, r20
    408e:	b5 2b       	or	r27, r21
    4090:	88 8b       	std	Y+16, r24	; 0x10
    4092:	99 8b       	std	Y+17, r25	; 0x11
    4094:	aa 8b       	std	Y+18, r26	; 0x12
    4096:	bb 8b       	std	Y+19, r27	; 0x13
	data |= (uint32_t) Temperature_RAW[1];
    4098:	8d 89       	ldd	r24, Y+21	; 0x15
    409a:	28 2f       	mov	r18, r24
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	88 89       	ldd	r24, Y+16	; 0x10
    40a4:	99 89       	ldd	r25, Y+17	; 0x11
    40a6:	aa 89       	ldd	r26, Y+18	; 0x12
    40a8:	bb 89       	ldd	r27, Y+19	; 0x13
    40aa:	82 2b       	or	r24, r18
    40ac:	93 2b       	or	r25, r19
    40ae:	a4 2b       	or	r26, r20
    40b0:	b5 2b       	or	r27, r21
    40b2:	88 8b       	std	Y+16, r24	; 0x10
    40b4:	99 8b       	std	Y+17, r25	; 0x11
    40b6:	aa 8b       	std	Y+18, r26	; 0x12
    40b8:	bb 8b       	std	Y+19, r27	; 0x13
	return data;
    40ba:	88 89       	ldd	r24, Y+16	; 0x10
    40bc:	99 89       	ldd	r25, Y+17	; 0x11
    40be:	aa 89       	ldd	r26, Y+18	; 0x12
    40c0:	bb 89       	ldd	r27, Y+19	; 0x13
}
    40c2:	bc 01       	movw	r22, r24
    40c4:	cd 01       	movw	r24, r26
    40c6:	65 96       	adiw	r28, 0x15	; 21
    40c8:	0f b6       	in	r0, 0x3f	; 63
    40ca:	f8 94       	cli
    40cc:	de bf       	out	0x3e, r29	; 62
    40ce:	0f be       	out	0x3f, r0	; 63
    40d0:	cd bf       	out	0x3d, r28	; 61
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <BMP180_calculateTemperature>:

sint32 BMP180_calculateTemperature(void) {
    40d8:	ef 92       	push	r14
    40da:	ff 92       	push	r15
    40dc:	0f 93       	push	r16
    40de:	1f 93       	push	r17
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	00 d0       	rcall	.+0      	; 0x40e6 <BMP180_calculateTemperature+0xe>
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <BMP180_calculateTemperature+0x10>
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62

	float32 temperature = 0;
    40ec:	80 e0       	ldi	r24, 0x00	; 0
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	a0 e0       	ldi	r26, 0x00	; 0
    40f2:	b0 e0       	ldi	r27, 0x00	; 0
    40f4:	89 83       	std	Y+1, r24	; 0x01
    40f6:	9a 83       	std	Y+2, r25	; 0x02
    40f8:	ab 83       	std	Y+3, r26	; 0x03
    40fa:	bc 83       	std	Y+4, r27	; 0x04

	UT = Get_UT();
    40fc:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <Get_UT>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	80 93 b9 01 	sts	0x01B9, r24
    4108:	90 93 ba 01 	sts	0x01BA, r25
    410c:	a0 93 bb 01 	sts	0x01BB, r26
    4110:	b0 93 bc 01 	sts	0x01BC, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    4114:	20 91 b9 01 	lds	r18, 0x01B9
    4118:	30 91 ba 01 	lds	r19, 0x01BA
    411c:	40 91 bb 01 	lds	r20, 0x01BB
    4120:	50 91 bc 01 	lds	r21, 0x01BC
    4124:	80 91 ab 01 	lds	r24, 0x01AB
    4128:	90 91 ac 01 	lds	r25, 0x01AC
    412c:	cc 01       	movw	r24, r24
    412e:	a0 e0       	ldi	r26, 0x00	; 0
    4130:	b0 e0       	ldi	r27, 0x00	; 0
    4132:	79 01       	movw	r14, r18
    4134:	8a 01       	movw	r16, r20
    4136:	e8 1a       	sub	r14, r24
    4138:	f9 0a       	sbc	r15, r25
    413a:	0a 0b       	sbc	r16, r26
    413c:	1b 0b       	sbc	r17, r27
    413e:	d8 01       	movw	r26, r16
    4140:	c7 01       	movw	r24, r14
    4142:	bc 01       	movw	r22, r24
    4144:	cd 01       	movw	r24, r26
    4146:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    414a:	7b 01       	movw	r14, r22
    414c:	8c 01       	movw	r16, r24
    414e:	80 91 a9 01 	lds	r24, 0x01A9
    4152:	90 91 aa 01 	lds	r25, 0x01AA
    4156:	cc 01       	movw	r24, r24
    4158:	a0 e0       	ldi	r26, 0x00	; 0
    415a:	b0 e0       	ldi	r27, 0x00	; 0
    415c:	bc 01       	movw	r22, r24
    415e:	cd 01       	movw	r24, r26
    4160:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	bc 01       	movw	r22, r24
    416a:	cd 01       	movw	r24, r26
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e0       	ldi	r20, 0x00	; 0
    4172:	57 e4       	ldi	r21, 0x47	; 71
    4174:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	9c 01       	movw	r18, r24
    417e:	ad 01       	movw	r20, r26
    4180:	c8 01       	movw	r24, r16
    4182:	b7 01       	movw	r22, r14
    4184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	bc 01       	movw	r22, r24
    418e:	cd 01       	movw	r24, r26
    4190:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	80 93 ad 01 	sts	0x01AD, r24
    419c:	90 93 ae 01 	sts	0x01AE, r25
    41a0:	a0 93 af 01 	sts	0x01AF, r26
    41a4:	b0 93 b0 01 	sts	0x01B0, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    41a8:	80 91 a3 01 	lds	r24, 0x01A3
    41ac:	90 91 a4 01 	lds	r25, 0x01A4
    41b0:	aa 27       	eor	r26, r26
    41b2:	97 fd       	sbrc	r25, 7
    41b4:	a0 95       	com	r26
    41b6:	ba 2f       	mov	r27, r26
    41b8:	bc 01       	movw	r22, r24
    41ba:	cd 01       	movw	r24, r26
    41bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    41c0:	dc 01       	movw	r26, r24
    41c2:	cb 01       	movw	r24, r22
    41c4:	bc 01       	movw	r22, r24
    41c6:	cd 01       	movw	r24, r26
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	55 e4       	ldi	r21, 0x45	; 69
    41d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	7c 01       	movw	r14, r24
    41da:	8d 01       	movw	r16, r26
    41dc:	80 91 a5 01 	lds	r24, 0x01A5
    41e0:	90 91 a6 01 	lds	r25, 0x01A6
    41e4:	9c 01       	movw	r18, r24
    41e6:	44 27       	eor	r20, r20
    41e8:	37 fd       	sbrc	r19, 7
    41ea:	40 95       	com	r20
    41ec:	54 2f       	mov	r21, r20
    41ee:	80 91 ad 01 	lds	r24, 0x01AD
    41f2:	90 91 ae 01 	lds	r25, 0x01AE
    41f6:	a0 91 af 01 	lds	r26, 0x01AF
    41fa:	b0 91 b0 01 	lds	r27, 0x01B0
    41fe:	82 0f       	add	r24, r18
    4200:	93 1f       	adc	r25, r19
    4202:	a4 1f       	adc	r26, r20
    4204:	b5 1f       	adc	r27, r21
    4206:	bc 01       	movw	r22, r24
    4208:	cd 01       	movw	r24, r26
    420a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    420e:	9b 01       	movw	r18, r22
    4210:	ac 01       	movw	r20, r24
    4212:	c8 01       	movw	r24, r16
    4214:	b7 01       	movw	r22, r14
    4216:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	bc 01       	movw	r22, r24
    4220:	cd 01       	movw	r24, r26
    4222:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	80 93 b1 01 	sts	0x01B1, r24
    422e:	90 93 b2 01 	sts	0x01B2, r25
    4232:	a0 93 b3 01 	sts	0x01B3, r26
    4236:	b0 93 b4 01 	sts	0x01B4, r27
       	B5 = X1 + X2;
    423a:	20 91 ad 01 	lds	r18, 0x01AD
    423e:	30 91 ae 01 	lds	r19, 0x01AE
    4242:	40 91 af 01 	lds	r20, 0x01AF
    4246:	50 91 b0 01 	lds	r21, 0x01B0
    424a:	80 91 b1 01 	lds	r24, 0x01B1
    424e:	90 91 b2 01 	lds	r25, 0x01B2
    4252:	a0 91 b3 01 	lds	r26, 0x01B3
    4256:	b0 91 b4 01 	lds	r27, 0x01B4
    425a:	82 0f       	add	r24, r18
    425c:	93 1f       	adc	r25, r19
    425e:	a4 1f       	adc	r26, r20
    4260:	b5 1f       	adc	r27, r21
    4262:	80 93 b5 01 	sts	0x01B5, r24
    4266:	90 93 b6 01 	sts	0x01B6, r25
    426a:	a0 93 b7 01 	sts	0x01B7, r26
    426e:	b0 93 b8 01 	sts	0x01B8, r27
	temperature = (B5 + 8) / (pow(2, 4));
    4272:	80 91 b5 01 	lds	r24, 0x01B5
    4276:	90 91 b6 01 	lds	r25, 0x01B6
    427a:	a0 91 b7 01 	lds	r26, 0x01B7
    427e:	b0 91 b8 01 	lds	r27, 0x01B8
    4282:	08 96       	adiw	r24, 0x08	; 8
    4284:	a1 1d       	adc	r26, r1
    4286:	b1 1d       	adc	r27, r1
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	bc 01       	movw	r22, r24
    4296:	cd 01       	movw	r24, r26
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e8       	ldi	r20, 0x80	; 128
    429e:	51 e4       	ldi	r21, 0x41	; 65
    42a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	89 83       	std	Y+1, r24	; 0x01
    42aa:	9a 83       	std	Y+2, r25	; 0x02
    42ac:	ab 83       	std	Y+3, r26	; 0x03
    42ae:	bc 83       	std	Y+4, r27	; 0x04
	return temperature / 10.0;
    42b0:	69 81       	ldd	r22, Y+1	; 0x01
    42b2:	7a 81       	ldd	r23, Y+2	; 0x02
    42b4:	8b 81       	ldd	r24, Y+3	; 0x03
    42b6:	9c 81       	ldd	r25, Y+4	; 0x04
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e2       	ldi	r20, 0x20	; 32
    42be:	51 e4       	ldi	r21, 0x41	; 65
    42c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	bc 01       	movw	r22, r24
    42ca:	cd 01       	movw	r24, r26
    42cc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    42d0:	dc 01       	movw	r26, r24
    42d2:	cb 01       	movw	r24, r22
}
    42d4:	bc 01       	movw	r22, r24
    42d6:	cd 01       	movw	r24, r26
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	0f 90       	pop	r0
    42de:	0f 90       	pop	r0
    42e0:	cf 91       	pop	r28
    42e2:	df 91       	pop	r29
    42e4:	1f 91       	pop	r17
    42e6:	0f 91       	pop	r16
    42e8:	ff 90       	pop	r15
    42ea:	ef 90       	pop	r14
    42ec:	08 95       	ret

000042ee <BMP180_calculatePressure>:

sint32 BMP180_calculatePressure(void) {
    42ee:	ef 92       	push	r14
    42f0:	ff 92       	push	r15
    42f2:	0f 93       	push	r16
    42f4:	1f 93       	push	r17
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	cd b7       	in	r28, 0x3d	; 61
    42fc:	de b7       	in	r29, 0x3e	; 62
	UP = Get_UP();
    42fe:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <Get_UP>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	80 93 cd 01 	sts	0x01CD, r24
    430a:	90 93 ce 01 	sts	0x01CE, r25
    430e:	a0 93 cf 01 	sts	0x01CF, r26
    4312:	b0 93 d0 01 	sts	0x01D0, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    4316:	20 91 b9 01 	lds	r18, 0x01B9
    431a:	30 91 ba 01 	lds	r19, 0x01BA
    431e:	40 91 bb 01 	lds	r20, 0x01BB
    4322:	50 91 bc 01 	lds	r21, 0x01BC
    4326:	80 91 ab 01 	lds	r24, 0x01AB
    432a:	90 91 ac 01 	lds	r25, 0x01AC
    432e:	cc 01       	movw	r24, r24
    4330:	a0 e0       	ldi	r26, 0x00	; 0
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	79 01       	movw	r14, r18
    4336:	8a 01       	movw	r16, r20
    4338:	e8 1a       	sub	r14, r24
    433a:	f9 0a       	sbc	r15, r25
    433c:	0a 0b       	sbc	r16, r26
    433e:	1b 0b       	sbc	r17, r27
    4340:	d8 01       	movw	r26, r16
    4342:	c7 01       	movw	r24, r14
    4344:	bc 01       	movw	r22, r24
    4346:	cd 01       	movw	r24, r26
    4348:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    434c:	7b 01       	movw	r14, r22
    434e:	8c 01       	movw	r16, r24
    4350:	80 91 a9 01 	lds	r24, 0x01A9
    4354:	90 91 aa 01 	lds	r25, 0x01AA
    4358:	cc 01       	movw	r24, r24
    435a:	a0 e0       	ldi	r26, 0x00	; 0
    435c:	b0 e0       	ldi	r27, 0x00	; 0
    435e:	bc 01       	movw	r22, r24
    4360:	cd 01       	movw	r24, r26
    4362:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	bc 01       	movw	r22, r24
    436c:	cd 01       	movw	r24, r26
    436e:	20 e0       	ldi	r18, 0x00	; 0
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	40 e0       	ldi	r20, 0x00	; 0
    4374:	57 e4       	ldi	r21, 0x47	; 71
    4376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	9c 01       	movw	r18, r24
    4380:	ad 01       	movw	r20, r26
    4382:	c8 01       	movw	r24, r16
    4384:	b7 01       	movw	r22, r14
    4386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	80 93 ad 01 	sts	0x01AD, r24
    439e:	90 93 ae 01 	sts	0x01AE, r25
    43a2:	a0 93 af 01 	sts	0x01AF, r26
    43a6:	b0 93 b0 01 	sts	0x01B0, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    43aa:	80 91 a3 01 	lds	r24, 0x01A3
    43ae:	90 91 a4 01 	lds	r25, 0x01A4
    43b2:	aa 27       	eor	r26, r26
    43b4:	97 fd       	sbrc	r25, 7
    43b6:	a0 95       	com	r26
    43b8:	ba 2f       	mov	r27, r26
    43ba:	bc 01       	movw	r22, r24
    43bc:	cd 01       	movw	r24, r26
    43be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	bc 01       	movw	r22, r24
    43c8:	cd 01       	movw	r24, r26
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	55 e4       	ldi	r21, 0x45	; 69
    43d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	7c 01       	movw	r14, r24
    43dc:	8d 01       	movw	r16, r26
    43de:	80 91 a5 01 	lds	r24, 0x01A5
    43e2:	90 91 a6 01 	lds	r25, 0x01A6
    43e6:	9c 01       	movw	r18, r24
    43e8:	44 27       	eor	r20, r20
    43ea:	37 fd       	sbrc	r19, 7
    43ec:	40 95       	com	r20
    43ee:	54 2f       	mov	r21, r20
    43f0:	80 91 ad 01 	lds	r24, 0x01AD
    43f4:	90 91 ae 01 	lds	r25, 0x01AE
    43f8:	a0 91 af 01 	lds	r26, 0x01AF
    43fc:	b0 91 b0 01 	lds	r27, 0x01B0
    4400:	82 0f       	add	r24, r18
    4402:	93 1f       	adc	r25, r19
    4404:	a4 1f       	adc	r26, r20
    4406:	b5 1f       	adc	r27, r21
    4408:	bc 01       	movw	r22, r24
    440a:	cd 01       	movw	r24, r26
    440c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4410:	9b 01       	movw	r18, r22
    4412:	ac 01       	movw	r20, r24
    4414:	c8 01       	movw	r24, r16
    4416:	b7 01       	movw	r22, r14
    4418:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	bc 01       	movw	r22, r24
    4422:	cd 01       	movw	r24, r26
    4424:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	80 93 b1 01 	sts	0x01B1, r24
    4430:	90 93 b2 01 	sts	0x01B2, r25
    4434:	a0 93 b3 01 	sts	0x01B3, r26
    4438:	b0 93 b4 01 	sts	0x01B4, r27
	B5 = X1 + X2;
    443c:	20 91 ad 01 	lds	r18, 0x01AD
    4440:	30 91 ae 01 	lds	r19, 0x01AE
    4444:	40 91 af 01 	lds	r20, 0x01AF
    4448:	50 91 b0 01 	lds	r21, 0x01B0
    444c:	80 91 b1 01 	lds	r24, 0x01B1
    4450:	90 91 b2 01 	lds	r25, 0x01B2
    4454:	a0 91 b3 01 	lds	r26, 0x01B3
    4458:	b0 91 b4 01 	lds	r27, 0x01B4
    445c:	82 0f       	add	r24, r18
    445e:	93 1f       	adc	r25, r19
    4460:	a4 1f       	adc	r26, r20
    4462:	b5 1f       	adc	r27, r21
    4464:	80 93 b5 01 	sts	0x01B5, r24
    4468:	90 93 b6 01 	sts	0x01B6, r25
    446c:	a0 93 b7 01 	sts	0x01B7, r26
    4470:	b0 93 b8 01 	sts	0x01B8, r27
	B6 = B5 - 4000;
    4474:	80 91 b5 01 	lds	r24, 0x01B5
    4478:	90 91 b6 01 	lds	r25, 0x01B6
    447c:	a0 91 b7 01 	lds	r26, 0x01B7
    4480:	b0 91 b8 01 	lds	r27, 0x01B8
    4484:	80 5a       	subi	r24, 0xA0	; 160
    4486:	9f 40       	sbci	r25, 0x0F	; 15
    4488:	a0 40       	sbci	r26, 0x00	; 0
    448a:	b0 40       	sbci	r27, 0x00	; 0
    448c:	80 93 c5 01 	sts	0x01C5, r24
    4490:	90 93 c6 01 	sts	0x01C6, r25
    4494:	a0 93 c7 01 	sts	0x01C7, r26
    4498:	b0 93 c8 01 	sts	0x01C8, r27
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
    449c:	80 91 9f 01 	lds	r24, 0x019F
    44a0:	90 91 a0 01 	lds	r25, 0x01A0
    44a4:	aa 27       	eor	r26, r26
    44a6:	97 fd       	sbrc	r25, 7
    44a8:	a0 95       	com	r26
    44aa:	ba 2f       	mov	r27, r26
    44ac:	bc 01       	movw	r22, r24
    44ae:	cd 01       	movw	r24, r26
    44b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    44b4:	7b 01       	movw	r14, r22
    44b6:	8c 01       	movw	r16, r24
    44b8:	80 91 c5 01 	lds	r24, 0x01C5
    44bc:	90 91 c6 01 	lds	r25, 0x01C6
    44c0:	a0 91 c7 01 	lds	r26, 0x01C7
    44c4:	b0 91 c8 01 	lds	r27, 0x01C8
    44c8:	20 91 c5 01 	lds	r18, 0x01C5
    44cc:	30 91 c6 01 	lds	r19, 0x01C6
    44d0:	40 91 c7 01 	lds	r20, 0x01C7
    44d4:	50 91 c8 01 	lds	r21, 0x01C8
    44d8:	bc 01       	movw	r22, r24
    44da:	cd 01       	movw	r24, r26
    44dc:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	bc 01       	movw	r22, r24
    44e6:	cd 01       	movw	r24, r26
    44e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	bc 01       	movw	r22, r24
    44f2:	cd 01       	movw	r24, r26
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	40 e8       	ldi	r20, 0x80	; 128
    44fa:	55 e4       	ldi	r21, 0x45	; 69
    44fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4500:	dc 01       	movw	r26, r24
    4502:	cb 01       	movw	r24, r22
    4504:	9c 01       	movw	r18, r24
    4506:	ad 01       	movw	r20, r26
    4508:	c8 01       	movw	r24, r16
    450a:	b7 01       	movw	r22, r14
    450c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	bc 01       	movw	r22, r24
    4516:	cd 01       	movw	r24, r26
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	55 e4       	ldi	r21, 0x45	; 69
    4520:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	bc 01       	movw	r22, r24
    452a:	cd 01       	movw	r24, r26
    452c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	80 93 ad 01 	sts	0x01AD, r24
    4538:	90 93 ae 01 	sts	0x01AE, r25
    453c:	a0 93 af 01 	sts	0x01AF, r26
    4540:	b0 93 b0 01 	sts	0x01B0, r27
	X2 = AC2 * B6 / (pow(2, 11));
    4544:	80 91 99 01 	lds	r24, 0x0199
    4548:	90 91 9a 01 	lds	r25, 0x019A
    454c:	aa 27       	eor	r26, r26
    454e:	97 fd       	sbrc	r25, 7
    4550:	a0 95       	com	r26
    4552:	ba 2f       	mov	r27, r26
    4554:	20 91 c5 01 	lds	r18, 0x01C5
    4558:	30 91 c6 01 	lds	r19, 0x01C6
    455c:	40 91 c7 01 	lds	r20, 0x01C7
    4560:	50 91 c8 01 	lds	r21, 0x01C8
    4564:	bc 01       	movw	r22, r24
    4566:	cd 01       	movw	r24, r26
    4568:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    456c:	dc 01       	movw	r26, r24
    456e:	cb 01       	movw	r24, r22
    4570:	bc 01       	movw	r22, r24
    4572:	cd 01       	movw	r24, r26
    4574:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4578:	dc 01       	movw	r26, r24
    457a:	cb 01       	movw	r24, r22
    457c:	bc 01       	movw	r22, r24
    457e:	cd 01       	movw	r24, r26
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	40 e0       	ldi	r20, 0x00	; 0
    4586:	55 e4       	ldi	r21, 0x45	; 69
    4588:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	80 93 b1 01 	sts	0x01B1, r24
    45a0:	90 93 b2 01 	sts	0x01B2, r25
    45a4:	a0 93 b3 01 	sts	0x01B3, r26
    45a8:	b0 93 b4 01 	sts	0x01B4, r27
	X3 = X1 + X2;
    45ac:	20 91 ad 01 	lds	r18, 0x01AD
    45b0:	30 91 ae 01 	lds	r19, 0x01AE
    45b4:	40 91 af 01 	lds	r20, 0x01AF
    45b8:	50 91 b0 01 	lds	r21, 0x01B0
    45bc:	80 91 b1 01 	lds	r24, 0x01B1
    45c0:	90 91 b2 01 	lds	r25, 0x01B2
    45c4:	a0 91 b3 01 	lds	r26, 0x01B3
    45c8:	b0 91 b4 01 	lds	r27, 0x01B4
    45cc:	82 0f       	add	r24, r18
    45ce:	93 1f       	adc	r25, r19
    45d0:	a4 1f       	adc	r26, r20
    45d2:	b5 1f       	adc	r27, r21
    45d4:	80 93 bd 01 	sts	0x01BD, r24
    45d8:	90 93 be 01 	sts	0x01BE, r25
    45dc:	a0 93 bf 01 	sts	0x01BF, r26
    45e0:	b0 93 c0 01 	sts	0x01C0, r27
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
    45e4:	80 91 97 01 	lds	r24, 0x0197
    45e8:	90 91 98 01 	lds	r25, 0x0198
    45ec:	88 0f       	add	r24, r24
    45ee:	99 1f       	adc	r25, r25
    45f0:	88 0f       	add	r24, r24
    45f2:	99 1f       	adc	r25, r25
    45f4:	9c 01       	movw	r18, r24
    45f6:	44 27       	eor	r20, r20
    45f8:	37 fd       	sbrc	r19, 7
    45fa:	40 95       	com	r20
    45fc:	54 2f       	mov	r21, r20
    45fe:	80 91 bd 01 	lds	r24, 0x01BD
    4602:	90 91 be 01 	lds	r25, 0x01BE
    4606:	a0 91 bf 01 	lds	r26, 0x01BF
    460a:	b0 91 c0 01 	lds	r27, 0x01C0
    460e:	82 0f       	add	r24, r18
    4610:	93 1f       	adc	r25, r19
    4612:	a4 1f       	adc	r26, r20
    4614:	b5 1f       	adc	r27, r21
    4616:	02 96       	adiw	r24, 0x02	; 2
    4618:	a1 1d       	adc	r26, r1
    461a:	b1 1d       	adc	r27, r1
    461c:	24 e0       	ldi	r18, 0x04	; 4
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	40 e0       	ldi	r20, 0x00	; 0
    4622:	50 e0       	ldi	r21, 0x00	; 0
    4624:	bc 01       	movw	r22, r24
    4626:	cd 01       	movw	r24, r26
    4628:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__divmodsi4>
    462c:	da 01       	movw	r26, r20
    462e:	c9 01       	movw	r24, r18
    4630:	80 93 c1 01 	sts	0x01C1, r24
    4634:	90 93 c2 01 	sts	0x01C2, r25
    4638:	a0 93 c3 01 	sts	0x01C3, r26
    463c:	b0 93 c4 01 	sts	0x01C4, r27
	X1 = AC3 * B6 / (pow(2, 13));
    4640:	80 91 9b 01 	lds	r24, 0x019B
    4644:	90 91 9c 01 	lds	r25, 0x019C
    4648:	aa 27       	eor	r26, r26
    464a:	97 fd       	sbrc	r25, 7
    464c:	a0 95       	com	r26
    464e:	ba 2f       	mov	r27, r26
    4650:	20 91 c5 01 	lds	r18, 0x01C5
    4654:	30 91 c6 01 	lds	r19, 0x01C6
    4658:	40 91 c7 01 	lds	r20, 0x01C7
    465c:	50 91 c8 01 	lds	r21, 0x01C8
    4660:	bc 01       	movw	r22, r24
    4662:	cd 01       	movw	r24, r26
    4664:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	bc 01       	movw	r22, r24
    466e:	cd 01       	movw	r24, r26
    4670:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	bc 01       	movw	r22, r24
    467a:	cd 01       	movw	r24, r26
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	40 e0       	ldi	r20, 0x00	; 0
    4682:	56 e4       	ldi	r21, 0x46	; 70
    4684:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4688:	dc 01       	movw	r26, r24
    468a:	cb 01       	movw	r24, r22
    468c:	bc 01       	movw	r22, r24
    468e:	cd 01       	movw	r24, r26
    4690:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4694:	dc 01       	movw	r26, r24
    4696:	cb 01       	movw	r24, r22
    4698:	80 93 ad 01 	sts	0x01AD, r24
    469c:	90 93 ae 01 	sts	0x01AE, r25
    46a0:	a0 93 af 01 	sts	0x01AF, r26
    46a4:	b0 93 b0 01 	sts	0x01B0, r27
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
    46a8:	80 91 9d 01 	lds	r24, 0x019D
    46ac:	90 91 9e 01 	lds	r25, 0x019E
    46b0:	aa 27       	eor	r26, r26
    46b2:	97 fd       	sbrc	r25, 7
    46b4:	a0 95       	com	r26
    46b6:	ba 2f       	mov	r27, r26
    46b8:	bc 01       	movw	r22, r24
    46ba:	cd 01       	movw	r24, r26
    46bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    46c0:	7b 01       	movw	r14, r22
    46c2:	8c 01       	movw	r16, r24
    46c4:	80 91 c5 01 	lds	r24, 0x01C5
    46c8:	90 91 c6 01 	lds	r25, 0x01C6
    46cc:	a0 91 c7 01 	lds	r26, 0x01C7
    46d0:	b0 91 c8 01 	lds	r27, 0x01C8
    46d4:	20 91 c5 01 	lds	r18, 0x01C5
    46d8:	30 91 c6 01 	lds	r19, 0x01C6
    46dc:	40 91 c7 01 	lds	r20, 0x01C7
    46e0:	50 91 c8 01 	lds	r21, 0x01C8
    46e4:	bc 01       	movw	r22, r24
    46e6:	cd 01       	movw	r24, r26
    46e8:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	bc 01       	movw	r22, r24
    46f2:	cd 01       	movw	r24, r26
    46f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    46f8:	dc 01       	movw	r26, r24
    46fa:	cb 01       	movw	r24, r22
    46fc:	bc 01       	movw	r22, r24
    46fe:	cd 01       	movw	r24, r26
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	40 e8       	ldi	r20, 0x80	; 128
    4706:	55 e4       	ldi	r21, 0x45	; 69
    4708:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    470c:	dc 01       	movw	r26, r24
    470e:	cb 01       	movw	r24, r22
    4710:	9c 01       	movw	r18, r24
    4712:	ad 01       	movw	r20, r26
    4714:	c8 01       	movw	r24, r16
    4716:	b7 01       	movw	r22, r14
    4718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e8       	ldi	r20, 0x80	; 128
    472a:	57 e4       	ldi	r21, 0x47	; 71
    472c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4730:	dc 01       	movw	r26, r24
    4732:	cb 01       	movw	r24, r22
    4734:	bc 01       	movw	r22, r24
    4736:	cd 01       	movw	r24, r26
    4738:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    473c:	dc 01       	movw	r26, r24
    473e:	cb 01       	movw	r24, r22
    4740:	80 93 b1 01 	sts	0x01B1, r24
    4744:	90 93 b2 01 	sts	0x01B2, r25
    4748:	a0 93 b3 01 	sts	0x01B3, r26
    474c:	b0 93 b4 01 	sts	0x01B4, r27
	X3 = ((X1 + X2) + 2) / (pow(2, 2));
    4750:	20 91 ad 01 	lds	r18, 0x01AD
    4754:	30 91 ae 01 	lds	r19, 0x01AE
    4758:	40 91 af 01 	lds	r20, 0x01AF
    475c:	50 91 b0 01 	lds	r21, 0x01B0
    4760:	80 91 b1 01 	lds	r24, 0x01B1
    4764:	90 91 b2 01 	lds	r25, 0x01B2
    4768:	a0 91 b3 01 	lds	r26, 0x01B3
    476c:	b0 91 b4 01 	lds	r27, 0x01B4
    4770:	82 0f       	add	r24, r18
    4772:	93 1f       	adc	r25, r19
    4774:	a4 1f       	adc	r26, r20
    4776:	b5 1f       	adc	r27, r21
    4778:	02 96       	adiw	r24, 0x02	; 2
    477a:	a1 1d       	adc	r26, r1
    477c:	b1 1d       	adc	r27, r1
    477e:	bc 01       	movw	r22, r24
    4780:	cd 01       	movw	r24, r26
    4782:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4786:	dc 01       	movw	r26, r24
    4788:	cb 01       	movw	r24, r22
    478a:	bc 01       	movw	r22, r24
    478c:	cd 01       	movw	r24, r26
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 e8       	ldi	r20, 0x80	; 128
    4794:	50 e4       	ldi	r21, 0x40	; 64
    4796:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	bc 01       	movw	r22, r24
    47a0:	cd 01       	movw	r24, r26
    47a2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	80 93 bd 01 	sts	0x01BD, r24
    47ae:	90 93 be 01 	sts	0x01BE, r25
    47b2:	a0 93 bf 01 	sts	0x01BF, r26
    47b6:	b0 93 c0 01 	sts	0x01C0, r27
	B4 = (AC4 * (uint32) (X3 + 32768)) / (pow(2, 15));
    47ba:	80 91 a7 01 	lds	r24, 0x01A7
    47be:	90 91 a8 01 	lds	r25, 0x01A8
    47c2:	7c 01       	movw	r14, r24
    47c4:	00 e0       	ldi	r16, 0x00	; 0
    47c6:	10 e0       	ldi	r17, 0x00	; 0
    47c8:	80 91 bd 01 	lds	r24, 0x01BD
    47cc:	90 91 be 01 	lds	r25, 0x01BE
    47d0:	a0 91 bf 01 	lds	r26, 0x01BF
    47d4:	b0 91 c0 01 	lds	r27, 0x01C0
    47d8:	80 50       	subi	r24, 0x00	; 0
    47da:	90 48       	sbci	r25, 0x80	; 128
    47dc:	af 4f       	sbci	r26, 0xFF	; 255
    47de:	bf 4f       	sbci	r27, 0xFF	; 255
    47e0:	9c 01       	movw	r18, r24
    47e2:	ad 01       	movw	r20, r26
    47e4:	c8 01       	movw	r24, r16
    47e6:	b7 01       	movw	r22, r14
    47e8:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	bc 01       	movw	r22, r24
    47f2:	cd 01       	movw	r24, r26
    47f4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	bc 01       	movw	r22, r24
    47fe:	cd 01       	movw	r24, r26
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	40 e0       	ldi	r20, 0x00	; 0
    4806:	57 e4       	ldi	r21, 0x47	; 71
    4808:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	bc 01       	movw	r22, r24
    4812:	cd 01       	movw	r24, r26
    4814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	80 93 d1 01 	sts	0x01D1, r24
    4820:	90 93 d2 01 	sts	0x01D2, r25
    4824:	a0 93 d3 01 	sts	0x01D3, r26
    4828:	b0 93 d4 01 	sts	0x01D4, r27
	B7 = ((uint32) UP - B3) * (50000 >> OSS);
    482c:	80 91 cd 01 	lds	r24, 0x01CD
    4830:	90 91 ce 01 	lds	r25, 0x01CE
    4834:	a0 91 cf 01 	lds	r26, 0x01CF
    4838:	b0 91 d0 01 	lds	r27, 0x01D0
    483c:	9c 01       	movw	r18, r24
    483e:	ad 01       	movw	r20, r26
    4840:	80 91 c1 01 	lds	r24, 0x01C1
    4844:	90 91 c2 01 	lds	r25, 0x01C2
    4848:	a0 91 c3 01 	lds	r26, 0x01C3
    484c:	b0 91 c4 01 	lds	r27, 0x01C4
    4850:	79 01       	movw	r14, r18
    4852:	8a 01       	movw	r16, r20
    4854:	e8 1a       	sub	r14, r24
    4856:	f9 0a       	sbc	r15, r25
    4858:	0a 0b       	sbc	r16, r26
    485a:	1b 0b       	sbc	r17, r27
    485c:	d8 01       	movw	r26, r16
    485e:	c7 01       	movw	r24, r14
    4860:	20 e5       	ldi	r18, 0x50	; 80
    4862:	33 ec       	ldi	r19, 0xC3	; 195
    4864:	40 e0       	ldi	r20, 0x00	; 0
    4866:	50 e0       	ldi	r21, 0x00	; 0
    4868:	bc 01       	movw	r22, r24
    486a:	cd 01       	movw	r24, r26
    486c:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	80 93 d5 01 	sts	0x01D5, r24
    4878:	90 93 d6 01 	sts	0x01D6, r25
    487c:	a0 93 d7 01 	sts	0x01D7, r26
    4880:	b0 93 d8 01 	sts	0x01D8, r27

	if (B7 < 0x80000000) {
    4884:	80 91 d5 01 	lds	r24, 0x01D5
    4888:	90 91 d6 01 	lds	r25, 0x01D6
    488c:	a0 91 d7 01 	lds	r26, 0x01D7
    4890:	b0 91 d8 01 	lds	r27, 0x01D8
    4894:	bb 23       	and	r27, r27
    4896:	1c f1       	brlt	.+70     	; 0x48de <BMP180_calculatePressure+0x5f0>
		P = (B7 * 2) / B4;
    4898:	80 91 d5 01 	lds	r24, 0x01D5
    489c:	90 91 d6 01 	lds	r25, 0x01D6
    48a0:	a0 91 d7 01 	lds	r26, 0x01D7
    48a4:	b0 91 d8 01 	lds	r27, 0x01D8
    48a8:	88 0f       	add	r24, r24
    48aa:	99 1f       	adc	r25, r25
    48ac:	aa 1f       	adc	r26, r26
    48ae:	bb 1f       	adc	r27, r27
    48b0:	20 91 d1 01 	lds	r18, 0x01D1
    48b4:	30 91 d2 01 	lds	r19, 0x01D2
    48b8:	40 91 d3 01 	lds	r20, 0x01D3
    48bc:	50 91 d4 01 	lds	r21, 0x01D4
    48c0:	bc 01       	movw	r22, r24
    48c2:	cd 01       	movw	r24, r26
    48c4:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__udivmodsi4>
    48c8:	da 01       	movw	r26, r20
    48ca:	c9 01       	movw	r24, r18
    48cc:	80 93 c9 01 	sts	0x01C9, r24
    48d0:	90 93 ca 01 	sts	0x01CA, r25
    48d4:	a0 93 cb 01 	sts	0x01CB, r26
    48d8:	b0 93 cc 01 	sts	0x01CC, r27
    48dc:	22 c0       	rjmp	.+68     	; 0x4922 <BMP180_calculatePressure+0x634>
	} else {
		P = (B7 / B4) * 2;
    48de:	80 91 d5 01 	lds	r24, 0x01D5
    48e2:	90 91 d6 01 	lds	r25, 0x01D6
    48e6:	a0 91 d7 01 	lds	r26, 0x01D7
    48ea:	b0 91 d8 01 	lds	r27, 0x01D8
    48ee:	20 91 d1 01 	lds	r18, 0x01D1
    48f2:	30 91 d2 01 	lds	r19, 0x01D2
    48f6:	40 91 d3 01 	lds	r20, 0x01D3
    48fa:	50 91 d4 01 	lds	r21, 0x01D4
    48fe:	bc 01       	movw	r22, r24
    4900:	cd 01       	movw	r24, r26
    4902:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <__udivmodsi4>
    4906:	da 01       	movw	r26, r20
    4908:	c9 01       	movw	r24, r18
    490a:	88 0f       	add	r24, r24
    490c:	99 1f       	adc	r25, r25
    490e:	aa 1f       	adc	r26, r26
    4910:	bb 1f       	adc	r27, r27
    4912:	80 93 c9 01 	sts	0x01C9, r24
    4916:	90 93 ca 01 	sts	0x01CA, r25
    491a:	a0 93 cb 01 	sts	0x01CB, r26
    491e:	b0 93 cc 01 	sts	0x01CC, r27
	}
	X1 = (P / (pow(2, 8))) * (P / (pow(2, 8)));
    4922:	80 91 c9 01 	lds	r24, 0x01C9
    4926:	90 91 ca 01 	lds	r25, 0x01CA
    492a:	a0 91 cb 01 	lds	r26, 0x01CB
    492e:	b0 91 cc 01 	lds	r27, 0x01CC
    4932:	bc 01       	movw	r22, r24
    4934:	cd 01       	movw	r24, r26
    4936:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    493a:	dc 01       	movw	r26, r24
    493c:	cb 01       	movw	r24, r22
    493e:	bc 01       	movw	r22, r24
    4940:	cd 01       	movw	r24, r26
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	40 e8       	ldi	r20, 0x80	; 128
    4948:	53 e4       	ldi	r21, 0x43	; 67
    494a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	7c 01       	movw	r14, r24
    4954:	8d 01       	movw	r16, r26
    4956:	80 91 c9 01 	lds	r24, 0x01C9
    495a:	90 91 ca 01 	lds	r25, 0x01CA
    495e:	a0 91 cb 01 	lds	r26, 0x01CB
    4962:	b0 91 cc 01 	lds	r27, 0x01CC
    4966:	bc 01       	movw	r22, r24
    4968:	cd 01       	movw	r24, r26
    496a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	bc 01       	movw	r22, r24
    4974:	cd 01       	movw	r24, r26
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e8       	ldi	r20, 0x80	; 128
    497c:	53 e4       	ldi	r21, 0x43	; 67
    497e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4982:	dc 01       	movw	r26, r24
    4984:	cb 01       	movw	r24, r22
    4986:	9c 01       	movw	r18, r24
    4988:	ad 01       	movw	r20, r26
    498a:	c8 01       	movw	r24, r16
    498c:	b7 01       	movw	r22, r14
    498e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4992:	dc 01       	movw	r26, r24
    4994:	cb 01       	movw	r24, r22
    4996:	bc 01       	movw	r22, r24
    4998:	cd 01       	movw	r24, r26
    499a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    499e:	dc 01       	movw	r26, r24
    49a0:	cb 01       	movw	r24, r22
    49a2:	80 93 ad 01 	sts	0x01AD, r24
    49a6:	90 93 ae 01 	sts	0x01AE, r25
    49aa:	a0 93 af 01 	sts	0x01AF, r26
    49ae:	b0 93 b0 01 	sts	0x01B0, r27
	X1 = (X1 * 3038) / (pow(2, 16));
    49b2:	80 91 ad 01 	lds	r24, 0x01AD
    49b6:	90 91 ae 01 	lds	r25, 0x01AE
    49ba:	a0 91 af 01 	lds	r26, 0x01AF
    49be:	b0 91 b0 01 	lds	r27, 0x01B0
    49c2:	2e ed       	ldi	r18, 0xDE	; 222
    49c4:	3b e0       	ldi	r19, 0x0B	; 11
    49c6:	40 e0       	ldi	r20, 0x00	; 0
    49c8:	50 e0       	ldi	r21, 0x00	; 0
    49ca:	bc 01       	movw	r22, r24
    49cc:	cd 01       	movw	r24, r26
    49ce:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	bc 01       	movw	r22, r24
    49d8:	cd 01       	movw	r24, r26
    49da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    49de:	dc 01       	movw	r26, r24
    49e0:	cb 01       	movw	r24, r22
    49e2:	bc 01       	movw	r22, r24
    49e4:	cd 01       	movw	r24, r26
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e8       	ldi	r20, 0x80	; 128
    49ec:	57 e4       	ldi	r21, 0x47	; 71
    49ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	80 93 ad 01 	sts	0x01AD, r24
    4a06:	90 93 ae 01 	sts	0x01AE, r25
    4a0a:	a0 93 af 01 	sts	0x01AF, r26
    4a0e:	b0 93 b0 01 	sts	0x01B0, r27
	X2 = (-7357 * P) / (pow(2, 16));
    4a12:	80 91 c9 01 	lds	r24, 0x01C9
    4a16:	90 91 ca 01 	lds	r25, 0x01CA
    4a1a:	a0 91 cb 01 	lds	r26, 0x01CB
    4a1e:	b0 91 cc 01 	lds	r27, 0x01CC
    4a22:	23 e4       	ldi	r18, 0x43	; 67
    4a24:	33 ee       	ldi	r19, 0xE3	; 227
    4a26:	4f ef       	ldi	r20, 0xFF	; 255
    4a28:	5f ef       	ldi	r21, 0xFF	; 255
    4a2a:	bc 01       	movw	r22, r24
    4a2c:	cd 01       	movw	r24, r26
    4a2e:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__mulsi3>
    4a32:	dc 01       	movw	r26, r24
    4a34:	cb 01       	movw	r24, r22
    4a36:	bc 01       	movw	r22, r24
    4a38:	cd 01       	movw	r24, r26
    4a3a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	bc 01       	movw	r22, r24
    4a44:	cd 01       	movw	r24, r26
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	40 e8       	ldi	r20, 0x80	; 128
    4a4c:	57 e4       	ldi	r21, 0x47	; 71
    4a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	bc 01       	movw	r22, r24
    4a58:	cd 01       	movw	r24, r26
    4a5a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	80 93 b1 01 	sts	0x01B1, r24
    4a66:	90 93 b2 01 	sts	0x01B2, r25
    4a6a:	a0 93 b3 01 	sts	0x01B3, r26
    4a6e:	b0 93 b4 01 	sts	0x01B4, r27
	P = P + (X1 + X2 + 3791) / (pow(2, 4));
    4a72:	80 91 c9 01 	lds	r24, 0x01C9
    4a76:	90 91 ca 01 	lds	r25, 0x01CA
    4a7a:	a0 91 cb 01 	lds	r26, 0x01CB
    4a7e:	b0 91 cc 01 	lds	r27, 0x01CC
    4a82:	bc 01       	movw	r22, r24
    4a84:	cd 01       	movw	r24, r26
    4a86:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4a8a:	7b 01       	movw	r14, r22
    4a8c:	8c 01       	movw	r16, r24
    4a8e:	20 91 ad 01 	lds	r18, 0x01AD
    4a92:	30 91 ae 01 	lds	r19, 0x01AE
    4a96:	40 91 af 01 	lds	r20, 0x01AF
    4a9a:	50 91 b0 01 	lds	r21, 0x01B0
    4a9e:	80 91 b1 01 	lds	r24, 0x01B1
    4aa2:	90 91 b2 01 	lds	r25, 0x01B2
    4aa6:	a0 91 b3 01 	lds	r26, 0x01B3
    4aaa:	b0 91 b4 01 	lds	r27, 0x01B4
    4aae:	82 0f       	add	r24, r18
    4ab0:	93 1f       	adc	r25, r19
    4ab2:	a4 1f       	adc	r26, r20
    4ab4:	b5 1f       	adc	r27, r21
    4ab6:	81 53       	subi	r24, 0x31	; 49
    4ab8:	91 4f       	sbci	r25, 0xF1	; 241
    4aba:	af 4f       	sbci	r26, 0xFF	; 255
    4abc:	bf 4f       	sbci	r27, 0xFF	; 255
    4abe:	bc 01       	movw	r22, r24
    4ac0:	cd 01       	movw	r24, r26
    4ac2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	bc 01       	movw	r22, r24
    4acc:	cd 01       	movw	r24, r26
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	40 e8       	ldi	r20, 0x80	; 128
    4ad4:	51 e4       	ldi	r21, 0x41	; 65
    4ad6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	9c 01       	movw	r18, r24
    4ae0:	ad 01       	movw	r20, r26
    4ae2:	c8 01       	movw	r24, r16
    4ae4:	b7 01       	movw	r22, r14
    4ae6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4aea:	dc 01       	movw	r26, r24
    4aec:	cb 01       	movw	r24, r22
    4aee:	bc 01       	movw	r22, r24
    4af0:	cd 01       	movw	r24, r26
    4af2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4af6:	dc 01       	movw	r26, r24
    4af8:	cb 01       	movw	r24, r22
    4afa:	80 93 c9 01 	sts	0x01C9, r24
    4afe:	90 93 ca 01 	sts	0x01CA, r25
    4b02:	a0 93 cb 01 	sts	0x01CB, r26
    4b06:	b0 93 cc 01 	sts	0x01CC, r27

	P = P / 100;
    4b0a:	80 91 c9 01 	lds	r24, 0x01C9
    4b0e:	90 91 ca 01 	lds	r25, 0x01CA
    4b12:	a0 91 cb 01 	lds	r26, 0x01CB
    4b16:	b0 91 cc 01 	lds	r27, 0x01CC
    4b1a:	24 e6       	ldi	r18, 0x64	; 100
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	40 e0       	ldi	r20, 0x00	; 0
    4b20:	50 e0       	ldi	r21, 0x00	; 0
    4b22:	bc 01       	movw	r22, r24
    4b24:	cd 01       	movw	r24, r26
    4b26:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <__divmodsi4>
    4b2a:	da 01       	movw	r26, r20
    4b2c:	c9 01       	movw	r24, r18
    4b2e:	80 93 c9 01 	sts	0x01C9, r24
    4b32:	90 93 ca 01 	sts	0x01CA, r25
    4b36:	a0 93 cb 01 	sts	0x01CB, r26
    4b3a:	b0 93 cc 01 	sts	0x01CC, r27

	return P;
    4b3e:	80 91 c9 01 	lds	r24, 0x01C9
    4b42:	90 91 ca 01 	lds	r25, 0x01CA
    4b46:	a0 91 cb 01 	lds	r26, 0x01CB
    4b4a:	b0 91 cc 01 	lds	r27, 0x01CC
}
    4b4e:	bc 01       	movw	r22, r24
    4b50:	cd 01       	movw	r24, r26
    4b52:	cf 91       	pop	r28
    4b54:	df 91       	pop	r29
    4b56:	1f 91       	pop	r17
    4b58:	0f 91       	pop	r16
    4b5a:	ff 90       	pop	r15
    4b5c:	ef 90       	pop	r14
    4b5e:	08 95       	ret

00004b60 <BMP180_calculate>:

void BMP180_calculate(tyreState * readings) {
    4b60:	df 93       	push	r29
    4b62:	cf 93       	push	r28
    4b64:	00 d0       	rcall	.+0      	; 0x4b66 <BMP180_calculate+0x6>
    4b66:	cd b7       	in	r28, 0x3d	; 61
    4b68:	de b7       	in	r29, 0x3e	; 62
    4b6a:	9a 83       	std	Y+2, r25	; 0x02
    4b6c:	89 83       	std	Y+1, r24	; 0x01
	readings->temperature = BMP180_calculateTemperature();
    4b6e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <BMP180_calculateTemperature>
    4b72:	dc 01       	movw	r26, r24
    4b74:	cb 01       	movw	r24, r22
    4b76:	e9 81       	ldd	r30, Y+1	; 0x01
    4b78:	fa 81       	ldd	r31, Y+2	; 0x02
    4b7a:	80 83       	st	Z, r24
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	a2 83       	std	Z+2, r26	; 0x02
    4b80:	b3 83       	std	Z+3, r27	; 0x03
	readings->pressure = BMP180_calculatePressure();
    4b82:	0e 94 77 21 	call	0x42ee	; 0x42ee <BMP180_calculatePressure>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    4b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    4b8e:	84 83       	std	Z+4, r24	; 0x04
    4b90:	95 83       	std	Z+5, r25	; 0x05
    4b92:	a6 83       	std	Z+6, r26	; 0x06
    4b94:	b7 83       	std	Z+7, r27	; 0x07
	readings->wheel = FRONT_LEFT;
    4b96:	e9 81       	ldd	r30, Y+1	; 0x01
    4b98:	fa 81       	ldd	r31, Y+2	; 0x02
    4b9a:	10 86       	std	Z+8, r1	; 0x08
}
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	cf 91       	pop	r28
    4ba2:	df 91       	pop	r29
    4ba4:	08 95       	ret

00004ba6 <BMP180_Start>:

void BMP180_Start(void) {
    4ba6:	df 93       	push	r29
    4ba8:	cf 93       	push	r28
    4baa:	cd b7       	in	r28, 0x3d	; 61
    4bac:	de b7       	in	r29, 0x3e	; 62
	BMP180_ReadCalb();
    4bae:	0e 94 50 18 	call	0x30a0	; 0x30a0 <BMP180_ReadCalb>
}
    4bb2:	cf 91       	pop	r28
    4bb4:	df 91       	pop	r29
    4bb6:	08 95       	ret

00004bb8 <delay>:

void delay(void){
    4bb8:	df 93       	push	r29
    4bba:	cf 93       	push	r28
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
    4bc0:	68 97       	sbiw	r28, 0x18	; 24
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	a0 e2       	ldi	r26, 0x20	; 32
    4bd2:	b1 e4       	ldi	r27, 0x41	; 65
    4bd4:	8d 8b       	std	Y+21, r24	; 0x15
    4bd6:	9e 8b       	std	Y+22, r25	; 0x16
    4bd8:	af 8b       	std	Y+23, r26	; 0x17
    4bda:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    4bde:	7e 89       	ldd	r23, Y+22	; 0x16
    4be0:	8f 89       	ldd	r24, Y+23	; 0x17
    4be2:	98 8d       	ldd	r25, Y+24	; 0x18
    4be4:	2b ea       	ldi	r18, 0xAB	; 171
    4be6:	3a ea       	ldi	r19, 0xAA	; 170
    4be8:	4a ea       	ldi	r20, 0xAA	; 170
    4bea:	50 e4       	ldi	r21, 0x40	; 64
    4bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	89 8b       	std	Y+17, r24	; 0x11
    4bf6:	9a 8b       	std	Y+18, r25	; 0x12
    4bf8:	ab 8b       	std	Y+19, r26	; 0x13
    4bfa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4bfc:	69 89       	ldd	r22, Y+17	; 0x11
    4bfe:	7a 89       	ldd	r23, Y+18	; 0x12
    4c00:	8b 89       	ldd	r24, Y+19	; 0x13
    4c02:	9c 89       	ldd	r25, Y+20	; 0x14
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	40 e8       	ldi	r20, 0x80	; 128
    4c0a:	5f e3       	ldi	r21, 0x3F	; 63
    4c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c10:	88 23       	and	r24, r24
    4c12:	1c f4       	brge	.+6      	; 0x4c1a <delay+0x62>
		__ticks = 1;
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	88 8b       	std	Y+16, r24	; 0x10
    4c18:	91 c0       	rjmp	.+290    	; 0x4d3c <delay+0x184>
	else if (__tmp > 255)
    4c1a:	69 89       	ldd	r22, Y+17	; 0x11
    4c1c:	7a 89       	ldd	r23, Y+18	; 0x12
    4c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    4c20:	9c 89       	ldd	r25, Y+20	; 0x14
    4c22:	20 e0       	ldi	r18, 0x00	; 0
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	4f e7       	ldi	r20, 0x7F	; 127
    4c28:	53 e4       	ldi	r21, 0x43	; 67
    4c2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c2e:	18 16       	cp	r1, r24
    4c30:	0c f0       	brlt	.+2      	; 0x4c34 <delay+0x7c>
    4c32:	7b c0       	rjmp	.+246    	; 0x4d2a <delay+0x172>
	{
		_delay_ms(__us / 1000.0);
    4c34:	6d 89       	ldd	r22, Y+21	; 0x15
    4c36:	7e 89       	ldd	r23, Y+22	; 0x16
    4c38:	8f 89       	ldd	r24, Y+23	; 0x17
    4c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4c3c:	20 e0       	ldi	r18, 0x00	; 0
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	4a e7       	ldi	r20, 0x7A	; 122
    4c42:	54 e4       	ldi	r21, 0x44	; 68
    4c44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	8c 87       	std	Y+12, r24	; 0x0c
    4c4e:	9d 87       	std	Y+13, r25	; 0x0d
    4c50:	ae 87       	std	Y+14, r26	; 0x0e
    4c52:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c54:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c56:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	4a e7       	ldi	r20, 0x7A	; 122
    4c62:	55 e4       	ldi	r21, 0x45	; 69
    4c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	88 87       	std	Y+8, r24	; 0x08
    4c6e:	99 87       	std	Y+9, r25	; 0x09
    4c70:	aa 87       	std	Y+10, r26	; 0x0a
    4c72:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4c74:	68 85       	ldd	r22, Y+8	; 0x08
    4c76:	79 85       	ldd	r23, Y+9	; 0x09
    4c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c7c:	20 e0       	ldi	r18, 0x00	; 0
    4c7e:	30 e0       	ldi	r19, 0x00	; 0
    4c80:	40 e8       	ldi	r20, 0x80	; 128
    4c82:	5f e3       	ldi	r21, 0x3F	; 63
    4c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c88:	88 23       	and	r24, r24
    4c8a:	2c f4       	brge	.+10     	; 0x4c96 <delay+0xde>
		__ticks = 1;
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	9f 83       	std	Y+7, r25	; 0x07
    4c92:	8e 83       	std	Y+6, r24	; 0x06
    4c94:	3f c0       	rjmp	.+126    	; 0x4d14 <delay+0x15c>
	else if (__tmp > 65535)
    4c96:	68 85       	ldd	r22, Y+8	; 0x08
    4c98:	79 85       	ldd	r23, Y+9	; 0x09
    4c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	3f ef       	ldi	r19, 0xFF	; 255
    4ca2:	4f e7       	ldi	r20, 0x7F	; 127
    4ca4:	57 e4       	ldi	r21, 0x47	; 71
    4ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4caa:	18 16       	cp	r1, r24
    4cac:	4c f5       	brge	.+82     	; 0x4d00 <delay+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cae:	6c 85       	ldd	r22, Y+12	; 0x0c
    4cb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    4cb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	40 e2       	ldi	r20, 0x20	; 32
    4cbc:	51 e4       	ldi	r21, 0x41	; 65
    4cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc2:	dc 01       	movw	r26, r24
    4cc4:	cb 01       	movw	r24, r22
    4cc6:	bc 01       	movw	r22, r24
    4cc8:	cd 01       	movw	r24, r26
    4cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cce:	dc 01       	movw	r26, r24
    4cd0:	cb 01       	movw	r24, r22
    4cd2:	9f 83       	std	Y+7, r25	; 0x07
    4cd4:	8e 83       	std	Y+6, r24	; 0x06
    4cd6:	0f c0       	rjmp	.+30     	; 0x4cf6 <delay+0x13e>
    4cd8:	80 e9       	ldi	r24, 0x90	; 144
    4cda:	91 e0       	ldi	r25, 0x01	; 1
    4cdc:	9d 83       	std	Y+5, r25	; 0x05
    4cde:	8c 83       	std	Y+4, r24	; 0x04
    4ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    4ce4:	01 97       	sbiw	r24, 0x01	; 1
    4ce6:	f1 f7       	brne	.-4      	; 0x4ce4 <delay+0x12c>
    4ce8:	9d 83       	std	Y+5, r25	; 0x05
    4cea:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cec:	8e 81       	ldd	r24, Y+6	; 0x06
    4cee:	9f 81       	ldd	r25, Y+7	; 0x07
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	9f 83       	std	Y+7, r25	; 0x07
    4cf4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    4cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    4cfa:	00 97       	sbiw	r24, 0x00	; 0
    4cfc:	69 f7       	brne	.-38     	; 0x4cd8 <delay+0x120>
    4cfe:	24 c0       	rjmp	.+72     	; 0x4d48 <delay+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d00:	68 85       	ldd	r22, Y+8	; 0x08
    4d02:	79 85       	ldd	r23, Y+9	; 0x09
    4d04:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d06:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d0c:	dc 01       	movw	r26, r24
    4d0e:	cb 01       	movw	r24, r22
    4d10:	9f 83       	std	Y+7, r25	; 0x07
    4d12:	8e 83       	std	Y+6, r24	; 0x06
    4d14:	8e 81       	ldd	r24, Y+6	; 0x06
    4d16:	9f 81       	ldd	r25, Y+7	; 0x07
    4d18:	9b 83       	std	Y+3, r25	; 0x03
    4d1a:	8a 83       	std	Y+2, r24	; 0x02
    4d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d20:	01 97       	sbiw	r24, 0x01	; 1
    4d22:	f1 f7       	brne	.-4      	; 0x4d20 <delay+0x168>
    4d24:	9b 83       	std	Y+3, r25	; 0x03
    4d26:	8a 83       	std	Y+2, r24	; 0x02
    4d28:	0f c0       	rjmp	.+30     	; 0x4d48 <delay+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4d2a:	69 89       	ldd	r22, Y+17	; 0x11
    4d2c:	7a 89       	ldd	r23, Y+18	; 0x12
    4d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d30:	9c 89       	ldd	r25, Y+20	; 0x14
    4d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	88 8b       	std	Y+16, r24	; 0x10
    4d3c:	88 89       	ldd	r24, Y+16	; 0x10
    4d3e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d40:	89 81       	ldd	r24, Y+1	; 0x01
    4d42:	8a 95       	dec	r24
    4d44:	f1 f7       	brne	.-4      	; 0x4d42 <delay+0x18a>
    4d46:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    4d48:	68 96       	adiw	r28, 0x18	; 24
    4d4a:	0f b6       	in	r0, 0x3f	; 63
    4d4c:	f8 94       	cli
    4d4e:	de bf       	out	0x3e, r29	; 62
    4d50:	0f be       	out	0x3f, r0	; 63
    4d52:	cd bf       	out	0x3d, r28	; 61
    4d54:	cf 91       	pop	r28
    4d56:	df 91       	pop	r29
    4d58:	08 95       	ret

00004d5a <__mulsi3>:
    4d5a:	62 9f       	mul	r22, r18
    4d5c:	d0 01       	movw	r26, r0
    4d5e:	73 9f       	mul	r23, r19
    4d60:	f0 01       	movw	r30, r0
    4d62:	82 9f       	mul	r24, r18
    4d64:	e0 0d       	add	r30, r0
    4d66:	f1 1d       	adc	r31, r1
    4d68:	64 9f       	mul	r22, r20
    4d6a:	e0 0d       	add	r30, r0
    4d6c:	f1 1d       	adc	r31, r1
    4d6e:	92 9f       	mul	r25, r18
    4d70:	f0 0d       	add	r31, r0
    4d72:	83 9f       	mul	r24, r19
    4d74:	f0 0d       	add	r31, r0
    4d76:	74 9f       	mul	r23, r20
    4d78:	f0 0d       	add	r31, r0
    4d7a:	65 9f       	mul	r22, r21
    4d7c:	f0 0d       	add	r31, r0
    4d7e:	99 27       	eor	r25, r25
    4d80:	72 9f       	mul	r23, r18
    4d82:	b0 0d       	add	r27, r0
    4d84:	e1 1d       	adc	r30, r1
    4d86:	f9 1f       	adc	r31, r25
    4d88:	63 9f       	mul	r22, r19
    4d8a:	b0 0d       	add	r27, r0
    4d8c:	e1 1d       	adc	r30, r1
    4d8e:	f9 1f       	adc	r31, r25
    4d90:	bd 01       	movw	r22, r26
    4d92:	cf 01       	movw	r24, r30
    4d94:	11 24       	eor	r1, r1
    4d96:	08 95       	ret

00004d98 <__udivmodsi4>:
    4d98:	a1 e2       	ldi	r26, 0x21	; 33
    4d9a:	1a 2e       	mov	r1, r26
    4d9c:	aa 1b       	sub	r26, r26
    4d9e:	bb 1b       	sub	r27, r27
    4da0:	fd 01       	movw	r30, r26
    4da2:	0d c0       	rjmp	.+26     	; 0x4dbe <__udivmodsi4_ep>

00004da4 <__udivmodsi4_loop>:
    4da4:	aa 1f       	adc	r26, r26
    4da6:	bb 1f       	adc	r27, r27
    4da8:	ee 1f       	adc	r30, r30
    4daa:	ff 1f       	adc	r31, r31
    4dac:	a2 17       	cp	r26, r18
    4dae:	b3 07       	cpc	r27, r19
    4db0:	e4 07       	cpc	r30, r20
    4db2:	f5 07       	cpc	r31, r21
    4db4:	20 f0       	brcs	.+8      	; 0x4dbe <__udivmodsi4_ep>
    4db6:	a2 1b       	sub	r26, r18
    4db8:	b3 0b       	sbc	r27, r19
    4dba:	e4 0b       	sbc	r30, r20
    4dbc:	f5 0b       	sbc	r31, r21

00004dbe <__udivmodsi4_ep>:
    4dbe:	66 1f       	adc	r22, r22
    4dc0:	77 1f       	adc	r23, r23
    4dc2:	88 1f       	adc	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	1a 94       	dec	r1
    4dc8:	69 f7       	brne	.-38     	; 0x4da4 <__udivmodsi4_loop>
    4dca:	60 95       	com	r22
    4dcc:	70 95       	com	r23
    4dce:	80 95       	com	r24
    4dd0:	90 95       	com	r25
    4dd2:	9b 01       	movw	r18, r22
    4dd4:	ac 01       	movw	r20, r24
    4dd6:	bd 01       	movw	r22, r26
    4dd8:	cf 01       	movw	r24, r30
    4dda:	08 95       	ret

00004ddc <__divmodsi4>:
    4ddc:	97 fb       	bst	r25, 7
    4dde:	09 2e       	mov	r0, r25
    4de0:	05 26       	eor	r0, r21
    4de2:	0e d0       	rcall	.+28     	; 0x4e00 <__divmodsi4_neg1>
    4de4:	57 fd       	sbrc	r21, 7
    4de6:	04 d0       	rcall	.+8      	; 0x4df0 <__divmodsi4_neg2>
    4de8:	d7 df       	rcall	.-82     	; 0x4d98 <__udivmodsi4>
    4dea:	0a d0       	rcall	.+20     	; 0x4e00 <__divmodsi4_neg1>
    4dec:	00 1c       	adc	r0, r0
    4dee:	38 f4       	brcc	.+14     	; 0x4dfe <__divmodsi4_exit>

00004df0 <__divmodsi4_neg2>:
    4df0:	50 95       	com	r21
    4df2:	40 95       	com	r20
    4df4:	30 95       	com	r19
    4df6:	21 95       	neg	r18
    4df8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dfa:	4f 4f       	sbci	r20, 0xFF	; 255
    4dfc:	5f 4f       	sbci	r21, 0xFF	; 255

00004dfe <__divmodsi4_exit>:
    4dfe:	08 95       	ret

00004e00 <__divmodsi4_neg1>:
    4e00:	f6 f7       	brtc	.-4      	; 0x4dfe <__divmodsi4_exit>
    4e02:	90 95       	com	r25
    4e04:	80 95       	com	r24
    4e06:	70 95       	com	r23
    4e08:	61 95       	neg	r22
    4e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e10:	08 95       	ret

00004e12 <__prologue_saves__>:
    4e12:	2f 92       	push	r2
    4e14:	3f 92       	push	r3
    4e16:	4f 92       	push	r4
    4e18:	5f 92       	push	r5
    4e1a:	6f 92       	push	r6
    4e1c:	7f 92       	push	r7
    4e1e:	8f 92       	push	r8
    4e20:	9f 92       	push	r9
    4e22:	af 92       	push	r10
    4e24:	bf 92       	push	r11
    4e26:	cf 92       	push	r12
    4e28:	df 92       	push	r13
    4e2a:	ef 92       	push	r14
    4e2c:	ff 92       	push	r15
    4e2e:	0f 93       	push	r16
    4e30:	1f 93       	push	r17
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	cd b7       	in	r28, 0x3d	; 61
    4e38:	de b7       	in	r29, 0x3e	; 62
    4e3a:	ca 1b       	sub	r28, r26
    4e3c:	db 0b       	sbc	r29, r27
    4e3e:	0f b6       	in	r0, 0x3f	; 63
    4e40:	f8 94       	cli
    4e42:	de bf       	out	0x3e, r29	; 62
    4e44:	0f be       	out	0x3f, r0	; 63
    4e46:	cd bf       	out	0x3d, r28	; 61
    4e48:	09 94       	ijmp

00004e4a <__epilogue_restores__>:
    4e4a:	2a 88       	ldd	r2, Y+18	; 0x12
    4e4c:	39 88       	ldd	r3, Y+17	; 0x11
    4e4e:	48 88       	ldd	r4, Y+16	; 0x10
    4e50:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e52:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e54:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e56:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e58:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e5c:	b9 84       	ldd	r11, Y+9	; 0x09
    4e5e:	c8 84       	ldd	r12, Y+8	; 0x08
    4e60:	df 80       	ldd	r13, Y+7	; 0x07
    4e62:	ee 80       	ldd	r14, Y+6	; 0x06
    4e64:	fd 80       	ldd	r15, Y+5	; 0x05
    4e66:	0c 81       	ldd	r16, Y+4	; 0x04
    4e68:	1b 81       	ldd	r17, Y+3	; 0x03
    4e6a:	aa 81       	ldd	r26, Y+2	; 0x02
    4e6c:	b9 81       	ldd	r27, Y+1	; 0x01
    4e6e:	ce 0f       	add	r28, r30
    4e70:	d1 1d       	adc	r29, r1
    4e72:	0f b6       	in	r0, 0x3f	; 63
    4e74:	f8 94       	cli
    4e76:	de bf       	out	0x3e, r29	; 62
    4e78:	0f be       	out	0x3f, r0	; 63
    4e7a:	cd bf       	out	0x3d, r28	; 61
    4e7c:	ed 01       	movw	r28, r26
    4e7e:	08 95       	ret

00004e80 <_exit>:
    4e80:	f8 94       	cli

00004e82 <__stop_program>:
    4e82:	ff cf       	rjmp	.-2      	; 0x4e82 <__stop_program>
