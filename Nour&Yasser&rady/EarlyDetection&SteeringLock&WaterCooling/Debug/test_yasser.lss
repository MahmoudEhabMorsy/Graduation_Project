
test_yasser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003f54  00003fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  00800168  00800168  000040f0  2**0
                  ALLOC
  3 .stab         0000360c  00000000  00000000  000040f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016cf  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00008f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000919f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000b7b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000cc7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000df8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000e16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000e473  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ee8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_4>
      14:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_9>
      28:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_10>
      2c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 3b       	cpi	r26, 0xBD	; 189
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e5       	ldi	r30, 0x54	; 84
      78:	ff e3       	ldi	r31, 0x3F	; 63
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 2f 10 	call	0x205e	; 0x205e <main>
      8a:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 99 1f 	jmp	0x3f32	; 0x3f32 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 96 1f 	jmp	0x3f2c	; 0x3f2c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TWI_init>:
 * 																		*
 * [Args]							*
 * [Return]															*
 *======================================================================*/

void TWI_init(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate Configuration */
#if BIT_RATE >= MINIMUM_BIT_RATE
	TWBR = BIT_RATE;
     ef2:	e0 e2       	ldi	r30, 0x20	; 32
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	88 e4       	ldi	r24, 0x48	; 72
     ef8:	80 83       	st	Z, r24
#else
#error "Invalid I2C bit rate configuration. Minimum bit rate allowed is 10."
#endif
	/* Prescaler Configuration */
#if PRESCALER_1 == PRESCALER
	CLEAR_BIT(TWSR, TWPS1);
     efa:	a1 e2       	ldi	r26, 0x21	; 33
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e2       	ldi	r30, 0x21	; 33
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWPS0);
     f08:	a1 e2       	ldi	r26, 0x21	; 33
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e1 e2       	ldi	r30, 0x21	; 33
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8c 93       	st	X, r24
#else
#error "Invalid I2C prescaler configuration"
#endif
	/* Slave Address Configuration */
#if SLAVE_ADDRESS >= MINIMUM_ADDRESS && SLAVE_ADDRESS <= MAXIMUM_ADDRESS
	TWAR = (SLAVE_ADDRESS << 1);
     f16:	e2 e2       	ldi	r30, 0x22	; 34
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	80 83       	st	Z, r24
#error "Invalid I2C slave address configuration (out of range)."
#endif
#if ENABLE_GENERAL_CALL == GENERAL_CALL
	SET_BIT(TWAR, TWGCE);
#elif DISABLE_GENERAL_CALL == GENERAL_CALL
	CLEAR_BIT(TWAR, TWGCE);
     f1e:	a2 e2       	ldi	r26, 0x22	; 34
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e2       	ldi	r30, 0x22	; 34
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
#else
#error "Invalid general call configuration"
#endif
	/* Enable I2C Peripheral */
	SET_BIT(TWCR, TWEN);
     f2c:	a6 e5       	ldi	r26, 0x56	; 86
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	8c 93       	st	X, r24
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <TWI_Start>:
 * 																		*
 * [Args]		uint8 slave_write_adress						*
 * [Return]															*
 *======================================================================*/

uint8 TWI_Start(uint8 slave_write_adress) {
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <TWI_Start+0x6>
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	84 ea       	ldi	r24, 0xA4	; 164
     f54:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <TWI_Start+0x16>
		;
	status = TWI_getStatus();
     f60:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f64:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	11 f0       	breq	.+4      	; 0xf70 <TWI_Start+0x30>
		return 0;
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <TWI_Start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     f70:	e3 e2       	ldi	r30, 0x23	; 35
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     f78:	e6 e5       	ldi	r30, 0x56	; 86
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	84 e8       	ldi	r24, 0x84	; 132
     f7e:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f80:	e6 e5       	ldi	r30, 0x56	; 86
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	dc f7       	brge	.-10     	; 0xf80 <TWI_Start+0x40>
		;
	status = TWI_getStatus();
     f8a:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f8e:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 31       	cpi	r24, 0x18	; 24
     f94:	19 f4       	brne	.+6      	; 0xf9c <TWI_Start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <TWI_Start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 32       	cpi	r24, 0x20	; 32
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <TWI_Start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <TWI_Start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TWI_Repeated_start>:
 * [Description]:	Function responsible for re-start the TWI communication.*
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
uint8 TWI_Repeated_start(uint8 slave_write_adress) {
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <TWI_Repeated_start+0x6>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	84 ea       	ldi	r24, 0xA4	; 164
     fce:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <TWI_Repeated_start+0x16>
		;
	status = TWI_getStatus();
     fda:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     fde:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_REP_START) /* Check weather start condition transmitted successfully or not? */
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	11 f0       	breq	.+4      	; 0xfea <TWI_Repeated_start+0x30>
		return 0;
     fe6:	1b 82       	std	Y+3, r1	; 0x03
     fe8:	1e c0       	rjmp	.+60     	; 0x1026 <TWI_Repeated_start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     fea:	e3 e2       	ldi	r30, 0x23	; 35
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     ffa:	e6 e5       	ldi	r30, 0x56	; 86
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 23       	and	r24, r24
    1002:	dc f7       	brge	.-10     	; 0xffa <TWI_Repeated_start+0x40>
		;
	status = TWI_getStatus();
    1004:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
    1008:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_R_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	19 f4       	brne	.+6      	; 0x1016 <TWI_Repeated_start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <TWI_Repeated_start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 32       	cpi	r24, 0x20	; 32
    101a:	19 f4       	brne	.+6      	; 0x1022 <TWI_Repeated_start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <TWI_Repeated_start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_Start_Wait>:
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <TWI_Start_Wait+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	84 ea       	ldi	r24, 0xA4	; 164
    1046:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	dc f7       	brge	.-10     	; 0x1048 <TWI_Start_Wait+0x14>
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    1052:	e1 e2       	ldi	r30, 0x21	; 33
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	79 f7       	brne	.-34     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* If no then continue with start loop again */
		TWDR = slave_write_address; /* If yes then write SLA+W in TWI data register */
    1062:	e3 e2       	ldi	r30, 0x23	; 35
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	80 83       	st	Z, r24
		TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	84 e8       	ldi	r24, 0x84	; 132
    1070:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1072:	e6 e5       	ldi	r30, 0x56	; 86
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 23       	and	r24, r24
    107a:	dc f7       	brge	.-10     	; 0x1072 <TWI_Start_Wait+0x3e>
			; /* Wait until TWI finish its current job (Write operation) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    107c:	e1 e2       	ldi	r30, 0x21	; 33
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	88 31       	cpi	r24, 0x18	; 24
    108a:	19 f0       	breq	.+6      	; 0x1092 <TWI_Start_Wait+0x5e>
		{
			TWI_Stop(); /* If not then generate stop condition */
    108c:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    1090:	d7 cf       	rjmp	.-82     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* continue with start loop again */
		}
		break; /* If yes then break loop */
	}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <TWI_Stop>:
 * [Description]:	Function responsible for stop the TWI communication *
 * 																*
 * [Args]		void											*
 * [Return]			void										*
 *======================================================================*/
void TWI_Stop(void) {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	84 e9       	ldi	r24, 0x94	; 148
    10aa:	80 83       	st	Z, r24
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TWI_WriteByte>:
 * [Description]:	Function responsible for sending 1 byte *
 * 																*
 * [Args]		uint8 data											*
 * [Return]			void										*
 *======================================================================*/
void TWI_WriteByte(uint8 data) {
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    10be:	e3 e2       	ldi	r30, 0x23	; 35
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    10c6:	e6 e5       	ldi	r30, 0x56	; 86
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	84 e8       	ldi	r24, 0x84	; 132
    10cc:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10ce:	e6 e5       	ldi	r30, 0x56	; 86
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 23       	and	r24, r24
    10d6:	dc f7       	brge	.-10     	; 0x10ce <TWI_WriteByte+0x1c>
		;
}
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TWI_ReadByteWithACK>:
 * [Description]:	Function responsible for reading 1 byte with ack *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithACK(void) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    10e8:	e6 e5       	ldi	r30, 0x56	; 86
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	84 ec       	ldi	r24, 0xC4	; 196
    10ee:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	dc f7       	brge	.-10     	; 0x10f0 <TWI_ReadByteWithACK+0x10>
		;
	/* Read Data */
	return TWDR;
    10fa:	e3 e2       	ldi	r30, 0x23	; 35
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <TWI_ReadByteWithNACK>:
 * [Description]:	Function responsible for reading 1 byte with NACK *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithNACK(void) {
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 e8       	ldi	r24, 0x84	; 132
    1114:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	dc f7       	brge	.-10     	; 0x1116 <TWI_ReadByteWithNACK+0x10>
		;
	/* Read Data */
	return TWDR;
    1120:	e3 e2       	ldi	r30, 0x23	; 35
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TWI_getStatus>:
 * [Description]:	FET STATUS from TWSR register *
 * 																*
 * [Args]													*
 * [Return]			uint8 status									*
 *======================================================================*/
uint8 TWI_getStatus(void) {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1136:	e1 e2       	ldi	r30, 0x21	; 33
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
}
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_11>:
/********************************************************/
/*                     ISRs                              */
/********************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1174:	80 91 68 01 	lds	r24, 0x0168
    1178:	90 91 69 01 	lds	r25, 0x0169
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	29 f0       	breq	.+10     	; 0x118a <__vector_11+0x40>
		(*g_Timer0CallBackPtr)();
    1180:	e0 91 68 01 	lds	r30, 0x0168
    1184:	f0 91 69 01 	lds	r31, 0x0169
    1188:	09 95       	icall
	}
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_10>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    11da:	80 91 68 01 	lds	r24, 0x0168
    11de:	90 91 69 01 	lds	r25, 0x0169
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <__vector_10+0x40>
		(*g_Timer0CallBackPtr)();
    11e6:	e0 91 68 01 	lds	r30, 0x0168
    11ea:	f0 91 69 01 	lds	r31, 0x0169
    11ee:	09 95       	icall
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_9>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	2f 93       	push	r18
    1222:	3f 93       	push	r19
    1224:	4f 93       	push	r20
    1226:	5f 93       	push	r21
    1228:	6f 93       	push	r22
    122a:	7f 93       	push	r23
    122c:	8f 93       	push	r24
    122e:	9f 93       	push	r25
    1230:	af 93       	push	r26
    1232:	bf 93       	push	r27
    1234:	ef 93       	push	r30
    1236:	ff 93       	push	r31
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1240:	80 91 6a 01 	lds	r24, 0x016A
    1244:	90 91 6b 01 	lds	r25, 0x016B
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	29 f0       	breq	.+10     	; 0x1256 <__vector_9+0x40>
		(*g_Timer1CallBackPtr)();
    124c:	e0 91 6a 01 	lds	r30, 0x016A
    1250:	f0 91 6b 01 	lds	r31, 0x016B
    1254:	09 95       	icall
	}
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    12a6:	80 91 6a 01 	lds	r24, 0x016A
    12aa:	90 91 6b 01 	lds	r25, 0x016B
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	29 f0       	breq	.+10     	; 0x12bc <__vector_7+0x40>
		(*g_Timer1CallBackPtr)();
    12b2:	e0 91 6a 01 	lds	r30, 0x016A
    12b6:	f0 91 6b 01 	lds	r31, 0x016B
    12ba:	09 95       	icall
	}
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_5>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    130c:	80 91 6c 01 	lds	r24, 0x016C
    1310:	90 91 6d 01 	lds	r25, 0x016D
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	29 f0       	breq	.+10     	; 0x1322 <__vector_5+0x40>
		(*g_Timer2CallBackPtr)();
    1318:	e0 91 6c 01 	lds	r30, 0x016C
    131c:	f0 91 6d 01 	lds	r31, 0x016D
    1320:	09 95       	icall
	}
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_4>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1372:	80 91 6c 01 	lds	r24, 0x016C
    1376:	90 91 6d 01 	lds	r25, 0x016D
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    137e:	e0 91 6c 01 	lds	r30, 0x016C
    1382:	f0 91 6d 01 	lds	r31, 0x016D
    1386:	09 95       	icall
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <Timer_init>:

/********************************************************/
/* Functions Implementation */
/********************************************************/

void Timer_init(const Timer_configuration *timer_config){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Timer_init+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	80 81       	ld	r24, Z
    13c2:	88 23       	and	r24, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <Timer_init+0x1a>
    13c6:	60 c0       	rjmp	.+192    	; 0x1488 <Timer_init+0xda>

		TCNT0 = timer_config->initialValue;
    13c8:	a2 e5       	ldi	r26, 0x52	; 82
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e9 81       	ldd	r30, Y+1	; 0x01
    13ce:	fa 81       	ldd	r31, Y+2	; 0x02
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	8c 93       	st	X, r24
		TCCR0 = 0;
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	90 81       	ld	r25, Z
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	89 2b       	or	r24, r25
    13ee:	8c 93       	st	X, r24

		if (timer_config->mode == Normal){
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	81 81       	ldd	r24, Z+1	; 0x01
    13f6:	88 23       	and	r24, r24
    13f8:	b1 f4       	brne	.+44     	; 0x1426 <Timer_init+0x78>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    13fa:	a3 e5       	ldi	r26, 0x53	; 83
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e5       	ldi	r30, 0x53	; 83
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    1416:	a8 e5       	ldi	r26, 0x58	; 88
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e5       	ldi	r30, 0x58	; 88
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	28 c0       	rjmp	.+80     	; 0x1476 <Timer_init+0xc8>

		}else if (timer_config->mode == CTC){
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	19 f5       	brne	.+70     	; 0x1476 <Timer_init+0xc8>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1430:	a3 e5       	ldi	r26, 0x53	; 83
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e3 e5       	ldi	r30, 0x53	; 83
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    143e:	a3 e5       	ldi	r26, 0x53	; 83
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e3 e5       	ldi	r30, 0x53	; 83
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    144c:	ac e5       	ldi	r26, 0x5C	; 92
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	84 81       	ldd	r24, Z+4	; 0x04
    1456:	95 81       	ldd	r25, Z+5	; 0x05
    1458:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    145a:	a9 e5       	ldi	r26, 0x59	; 89
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e9 e5       	ldi	r30, 0x59	; 89
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    1468:	a8 e5       	ldi	r26, 0x58	; 88
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e5       	ldi	r30, 0x58	; 88
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	87 81       	ldd	r24, Z+7	; 0x07
    147c:	90 85       	ldd	r25, Z+8	; 0x08
    147e:	90 93 69 01 	sts	0x0169, r25
    1482:	80 93 68 01 	sts	0x0168, r24
    1486:	c4 c0       	rjmp	.+392    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer1){
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	80 81       	ld	r24, Z
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <Timer_init+0xe6>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <Timer_init+0x1a6>
		TCCR1A =0;
    1494:	ef e4       	ldi	r30, 0x4F	; 79
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    149a:	af e4       	ldi	r26, 0x4F	; 79
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e4       	ldi	r30, 0x4F	; 79
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    14c2:	ac e4       	ldi	r26, 0x4C	; 76
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24

		if (timer_config->mode == Normal) {
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	81 81       	ldd	r24, Z+1	; 0x01
    14da:	88 23       	and	r24, r24
    14dc:	79 f4       	brne	.+30     	; 0x14fc <Timer_init+0x14e>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    14de:	a9 e5       	ldi	r26, 0x59	; 89
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e9 e5       	ldi	r30, 0x59	; 89
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    14ec:	a8 e5       	ldi	r26, 0x58	; 88
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e8 e5       	ldi	r30, 0x58	; 88
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
    14fa:	23 c0       	rjmp	.+70     	; 0x1542 <Timer_init+0x194>

		} else if (timer_config->mode == CTC) {
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	f1 f4       	brne	.+60     	; 0x1542 <Timer_init+0x194>
			SET_BIT(TCCR1B, WGM12);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    1514:	aa e4       	ldi	r26, 0x4A	; 74
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1526:	a9 e5       	ldi	r26, 0x59	; 89
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 61       	ori	r24, 0x10	; 16
    1532:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1534:	a8 e5       	ldi	r26, 0x58	; 88
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e5       	ldi	r30, 0x58	; 88
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	87 81       	ldd	r24, Z+7	; 0x07
    1548:	90 85       	ldd	r25, Z+8	; 0x08
    154a:	90 93 6b 01 	sts	0x016B, r25
    154e:	80 93 6a 01 	sts	0x016A, r24
    1552:	5e c0       	rjmp	.+188    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer2){
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	80 81       	ld	r24, Z
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	09 f0       	breq	.+2      	; 0x1560 <Timer_init+0x1b2>
    155e:	58 c0       	rjmp	.+176    	; 0x1610 <Timer_init+0x262>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    156e:	a4 e4       	ldi	r26, 0x44	; 68
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	8c 93       	st	X, r24
		TCCR2 = 0;
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	90 81       	ld	r25, Z
    158c:	e9 81       	ldd	r30, Y+1	; 0x01
    158e:	fa 81       	ldd	r31, Y+2	; 0x02
    1590:	86 81       	ldd	r24, Z+6	; 0x06
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24

		if (timer_config->mode == Normal) {
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	88 23       	and	r24, r24
    159e:	79 f4       	brne	.+30     	; 0x15be <Timer_init+0x210>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    15a0:	a9 e5       	ldi	r26, 0x59	; 89
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 64       	ori	r24, 0x40	; 64
    15ac:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    15ae:	a8 e5       	ldi	r26, 0x58	; 88
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e5       	ldi	r30, 0x58	; 88
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	8c 93       	st	X, r24
    15bc:	21 c0       	rjmp	.+66     	; 0x1600 <Timer_init+0x252>

		} else if (timer_config->mode == CTC) {
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	81 81       	ldd	r24, Z+1	; 0x01
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	e1 f4       	brne	.+56     	; 0x1600 <Timer_init+0x252>
			SET_BIT(TCCR0, WGM21);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    15d6:	a3 e4       	ldi	r26, 0x43	; 67
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	84 81       	ldd	r24, Z+4	; 0x04
    15e0:	95 81       	ldd	r25, Z+5	; 0x05
    15e2:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    15e4:	a9 e5       	ldi	r26, 0x59	; 89
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    15f2:	a8 e5       	ldi	r26, 0x58	; 88
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e5       	ldi	r30, 0x58	; 88
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    1600:	e9 81       	ldd	r30, Y+1	; 0x01
    1602:	fa 81       	ldd	r31, Y+2	; 0x02
    1604:	87 81       	ldd	r24, Z+7	; 0x07
    1606:	90 85       	ldd	r25, Z+8	; 0x08
    1608:	90 93 6d 01 	sts	0x016D, r25
    160c:	80 93 6c 01 	sts	0x016C, r24
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	88 23       	and	r24, r24
    162a:	e1 f4       	brne	.+56     	; 0x1664 <Timer_deInit+0x4a>
		TCCR0 = 0;
    162c:	e3 e5       	ldi	r30, 0x53	; 83
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    1632:	e2 e5       	ldi	r30, 0x52	; 82
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    1638:	ec e5       	ldi	r30, 0x5C	; 92
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    163e:	a9 e5       	ldi	r26, 0x59	; 89
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e9 e5       	ldi	r30, 0x59	; 89
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    164c:	a9 e5       	ldi	r26, 0x59	; 89
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e9 e5       	ldi	r30, 0x59	; 89
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8e 7f       	andi	r24, 0xFE	; 254
    1658:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    165a:	10 92 69 01 	sts	0x0169, r1
    165e:	10 92 68 01 	sts	0x0168, r1
    1662:	42 c0       	rjmp	.+132    	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer1){
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f5       	brne	.+66     	; 0x16ac <Timer_deInit+0x92>
		TCCR1A =0;
    166a:	ef e4       	ldi	r30, 0x4F	; 79
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
		TCNT1 = 0;
    1676:	ec e4       	ldi	r30, 0x4C	; 76
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	11 82       	std	Z+1, r1	; 0x01
    167c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    167e:	a9 e5       	ldi	r26, 0x59	; 89
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    168c:	ea e4       	ldi	r30, 0x4A	; 74
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    16a2:	10 92 6b 01 	sts	0x016B, r1
    16a6:	10 92 6a 01 	sts	0x016A, r1
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer2){
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	d9 f4       	brne	.+54     	; 0x16e8 <Timer_deInit+0xce>
		TCCR2 = 0;
    16b2:	e5 e4       	ldi	r30, 0x45	; 69
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    16b8:	e4 e4       	ldi	r30, 0x44	; 68
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    16be:	e3 e4       	ldi	r30, 0x43	; 67
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    16c4:	a9 e5       	ldi	r26, 0x59	; 89
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e9 e5       	ldi	r30, 0x59	; 89
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    16d2:	a9 e5       	ldi	r26, 0x59	; 89
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e9 e5       	ldi	r30, 0x59	; 89
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7b       	andi	r24, 0xBF	; 191
    16de:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    16e0:	10 92 6d 01 	sts	0x016D, r1
    16e4:	10 92 6c 01 	sts	0x016C, r1
	}
}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <DIO_setupPinDirection>:
 *      Author: MR.MAHMOUD
 */

#include"dio.h"
#include "../../CommonDef/common_macros.h"
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number, uint8 direction){
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <DIO_setupPinDirection+0x6>
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <DIO_setupPinDirection+0x8>
    16f8:	0f 92       	push	r0
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	6a 83       	std	Y+2, r22	; 0x02
    1702:	4b 83       	std	Y+3, r20	; 0x03
/*
 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	88 30       	cpi	r24, 0x08	; 8
    1708:	08 f0       	brcs	.+2      	; 0x170c <DIO_setupPinDirection+0x1c>
    170a:	d5 c0       	rjmp	.+426    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	84 30       	cpi	r24, 0x04	; 4
    1710:	08 f0       	brcs	.+2      	; 0x1714 <DIO_setupPinDirection+0x24>
    1712:	d1 c0       	rjmp	.+418    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3d 83       	std	Y+5, r19	; 0x05
    171c:	2c 83       	std	Y+4, r18	; 0x04
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <DIO_setupPinDirection+0x3a>
    1728:	43 c0       	rjmp	.+134    	; 0x17b0 <DIO_setupPinDirection+0xc0>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	2c f4       	brge	.+10     	; 0x173e <DIO_setupPinDirection+0x4e>
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	71 f0       	breq	.+28     	; 0x1758 <DIO_setupPinDirection+0x68>
    173c:	bc c0       	rjmp	.+376    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <DIO_setupPinDirection+0x5a>
    1748:	5f c0       	rjmp	.+190    	; 0x1808 <DIO_setupPinDirection+0x118>
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	9d 81       	ldd	r25, Y+5	; 0x05
    174e:	83 30       	cpi	r24, 0x03	; 3
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <DIO_setupPinDirection+0x66>
    1754:	85 c0       	rjmp	.+266    	; 0x1860 <DIO_setupPinDirection+0x170>
    1756:	af c0       	rjmp	.+350    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	a1 f4       	brne	.+40     	; 0x1786 <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA, pin_number);
    175e:	aa e3       	ldi	r26, 0x3A	; 58
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ea e3       	ldi	r30, 0x3A	; 58
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_setupPinDirection+0x8c>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_setupPinDirection+0x88>
    1780:	84 2b       	or	r24, r20
    1782:	8c 93       	st	X, r24
    1784:	98 c0       	rjmp	.+304    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
    1786:	aa e3       	ldi	r26, 0x3A	; 58
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	ea e3       	ldi	r30, 0x3A	; 58
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	48 2f       	mov	r20, r24
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	02 2e       	mov	r0, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <DIO_setupPinDirection+0xb4>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	0a 94       	dec	r0
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <DIO_setupPinDirection+0xb0>
    17a8:	80 95       	com	r24
    17aa:	84 23       	and	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	83 c0       	rjmp	.+262    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	a1 f4       	brne	.+40     	; 0x17de <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB, pin_number);
    17b6:	a7 e3       	ldi	r26, 0x37	; 55
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e7 e3       	ldi	r30, 0x37	; 55
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 2e       	mov	r0, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <DIO_setupPinDirection+0xe4>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <DIO_setupPinDirection+0xe0>
    17d8:	84 2b       	or	r24, r20
    17da:	8c 93       	st	X, r24
    17dc:	6c c0       	rjmp	.+216    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
    17de:	a7 e3       	ldi	r26, 0x37	; 55
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e7 e3       	ldi	r30, 0x37	; 55
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_setupPinDirection+0x10c>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_setupPinDirection+0x108>
    1800:	80 95       	com	r24
    1802:	84 23       	and	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	57 c0       	rjmp	.+174    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	a1 f4       	brne	.+40     	; 0x1836 <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC, pin_number);
    180e:	a4 e3       	ldi	r26, 0x34	; 52
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e4 e3       	ldi	r30, 0x34	; 52
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_setupPinDirection+0x13c>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_setupPinDirection+0x138>
    1830:	84 2b       	or	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	40 c0       	rjmp	.+128    	; 0x18b6 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
    1836:	a4 e3       	ldi	r26, 0x34	; 52
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e4 e3       	ldi	r30, 0x34	; 52
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_setupPinDirection+0x164>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_setupPinDirection+0x160>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
    185e:	2b c0       	rjmp	.+86     	; 0x18b6 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	a1 f4       	brne	.+40     	; 0x188e <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD, pin_number);
    1866:	a1 e3       	ldi	r26, 0x31	; 49
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e1 e3       	ldi	r30, 0x31	; 49
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_setupPinDirection+0x194>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_setupPinDirection+0x190>
    1888:	84 2b       	or	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	14 c0       	rjmp	.+40     	; 0x18b6 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
    188e:	a1 e3       	ldi	r26, 0x31	; 49
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e1 e3       	ldi	r30, 0x31	; 49
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	48 2f       	mov	r20, r24
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	02 2e       	mov	r0, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <DIO_setupPinDirection+0x1bc>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	0a 94       	dec	r0
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <DIO_setupPinDirection+0x1b8>
    18b0:	80 95       	com	r24
    18b2:	84 23       	and	r24, r20
    18b4:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <DIO_writePin>:
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value){
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <DIO_writePin+0x6>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <DIO_writePin+0x8>
    18ce:	0f 92       	push	r0
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	6a 83       	std	Y+2, r22	; 0x02
    18d8:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	88 30       	cpi	r24, 0x08	; 8
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <DIO_writePin+0x1c>
    18e0:	d5 c0       	rjmp	.+426    	; 0x1a8c <DIO_writePin+0x1c6>
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	84 30       	cpi	r24, 0x04	; 4
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <DIO_writePin+0x24>
    18e8:	d1 c0       	rjmp	.+418    	; 0x1a8c <DIO_writePin+0x1c6>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3d 83       	std	Y+5, r19	; 0x05
    18f2:	2c 83       	std	Y+4, r18	; 0x04
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <DIO_writePin+0x3a>
    18fe:	43 c0       	rjmp	.+134    	; 0x1986 <DIO_writePin+0xc0>
    1900:	2c 81       	ldd	r18, Y+4	; 0x04
    1902:	3d 81       	ldd	r19, Y+5	; 0x05
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	2c f4       	brge	.+10     	; 0x1914 <DIO_writePin+0x4e>
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	71 f0       	breq	.+28     	; 0x192e <DIO_writePin+0x68>
    1912:	bc c0       	rjmp	.+376    	; 0x1a8c <DIO_writePin+0x1c6>
    1914:	2c 81       	ldd	r18, Y+4	; 0x04
    1916:	3d 81       	ldd	r19, Y+5	; 0x05
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <DIO_writePin+0x5a>
    191e:	5f c0       	rjmp	.+190    	; 0x19de <DIO_writePin+0x118>
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	83 30       	cpi	r24, 0x03	; 3
    1926:	91 05       	cpc	r25, r1
    1928:	09 f4       	brne	.+2      	; 0x192c <DIO_writePin+0x66>
    192a:	85 c0       	rjmp	.+266    	; 0x1a36 <DIO_writePin+0x170>
    192c:	af c0       	rjmp	.+350    	; 0x1a8c <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	a1 f4       	brne	.+40     	; 0x195c <DIO_writePin+0x96>
			{
				SET_BIT(PORTA, pin_number);
    1934:	ab e3       	ldi	r26, 0x3B	; 59
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	eb e3       	ldi	r30, 0x3B	; 59
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_writePin+0x8c>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_writePin+0x88>
    1956:	84 2b       	or	r24, r20
    1958:	8c 93       	st	X, r24
    195a:	98 c0       	rjmp	.+304    	; 0x1a8c <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
    195c:	ab e3       	ldi	r26, 0x3B	; 59
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	eb e3       	ldi	r30, 0x3B	; 59
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <DIO_writePin+0xb4>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <DIO_writePin+0xb0>
    197e:	80 95       	com	r24
    1980:	84 23       	and	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	83 c0       	rjmp	.+262    	; 0x1a8c <DIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	a1 f4       	brne	.+40     	; 0x19b4 <DIO_writePin+0xee>
			{
				SET_BIT(PORTB, pin_number);
    198c:	a8 e3       	ldi	r26, 0x38	; 56
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e8 e3       	ldi	r30, 0x38	; 56
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_writePin+0xe4>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_writePin+0xe0>
    19ae:	84 2b       	or	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	6c c0       	rjmp	.+216    	; 0x1a8c <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
    19b4:	a8 e3       	ldi	r26, 0x38	; 56
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e8 e3       	ldi	r30, 0x38	; 56
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_writePin+0x10c>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_writePin+0x108>
    19d6:	80 95       	com	r24
    19d8:	84 23       	and	r24, r20
    19da:	8c 93       	st	X, r24
    19dc:	57 c0       	rjmp	.+174    	; 0x1a8c <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	a1 f4       	brne	.+40     	; 0x1a0c <DIO_writePin+0x146>
			{
				SET_BIT(PORTC, pin_number);
    19e4:	a5 e3       	ldi	r26, 0x35	; 53
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_writePin+0x13c>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_writePin+0x138>
    1a06:	84 2b       	or	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	40 c0       	rjmp	.+128    	; 0x1a8c <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
    1a0c:	a5 e3       	ldi	r26, 0x35	; 53
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e5 e3       	ldi	r30, 0x35	; 53
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 2e       	mov	r0, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <DIO_writePin+0x164>
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	0a 94       	dec	r0
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <DIO_writePin+0x160>
    1a2e:	80 95       	com	r24
    1a30:	84 23       	and	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	2b c0       	rjmp	.+86     	; 0x1a8c <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	a1 f4       	brne	.+40     	; 0x1a64 <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_number);
    1a3c:	a2 e3       	ldi	r26, 0x32	; 50
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e2 e3       	ldi	r30, 0x32	; 50
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_writePin+0x194>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_writePin+0x190>
    1a5e:	84 2b       	or	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	14 c0       	rjmp	.+40     	; 0x1a8c <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
    1a64:	a2 e3       	ldi	r26, 0x32	; 50
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e2 e3       	ldi	r30, 0x32	; 50
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_writePin+0x1bc>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_writePin+0x1b8>
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <DIO_readPin>:
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_readPin+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <DIO_readPin+0x8>
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1aae:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 30       	cpi	r24, 0x08	; 8
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <DIO_readPin+0x1c>
    1ab6:	84 c0       	rjmp	.+264    	; 0x1bc0 <DIO_readPin+0x124>
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <DIO_readPin+0x24>
    1abe:	80 c0       	rjmp	.+256    	; 0x1bc0 <DIO_readPin+0x124>
	
	}
	else
	{
		/* Read the pin value*/
		switch (port_number)
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3d 83       	std	Y+5, r19	; 0x05
    1ac8:	2c 83       	std	Y+4, r18	; 0x04
    1aca:	4c 81       	ldd	r20, Y+4	; 0x04
    1acc:	5d 81       	ldd	r21, Y+5	; 0x05
    1ace:	41 30       	cpi	r20, 0x01	; 1
    1ad0:	51 05       	cpc	r21, r1
    1ad2:	79 f1       	breq	.+94     	; 0x1b32 <DIO_readPin+0x96>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	91 05       	cpc	r25, r1
    1adc:	34 f4       	brge	.+12     	; 0x1aea <DIO_readPin+0x4e>
    1ade:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae2:	21 15       	cp	r18, r1
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	69 f0       	breq	.+26     	; 0x1b02 <DIO_readPin+0x66>
    1ae8:	6b c0       	rjmp	.+214    	; 0x1bc0 <DIO_readPin+0x124>
    1aea:	4c 81       	ldd	r20, Y+4	; 0x04
    1aec:	5d 81       	ldd	r21, Y+5	; 0x05
    1aee:	42 30       	cpi	r20, 0x02	; 2
    1af0:	51 05       	cpc	r21, r1
    1af2:	b9 f1       	breq	.+110    	; 0x1b62 <DIO_readPin+0xc6>
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	91 05       	cpc	r25, r1
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <DIO_readPin+0x64>
    1afe:	49 c0       	rjmp	.+146    	; 0x1b92 <DIO_readPin+0xf6>
    1b00:	5f c0       	rjmp	.+190    	; 0x1bc0 <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_number))
    1b02:	e9 e3       	ldi	r30, 0x39	; 57
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_readPin+0x7e>
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_readPin+0x7a>
    1b1e:	ca 01       	movw	r24, r20
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	90 70       	andi	r25, 0x00	; 0
    1b24:	88 23       	and	r24, r24
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	49 c0       	rjmp	.+146    	; 0x1bc0 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
    1b30:	47 c0       	rjmp	.+142    	; 0x1bc0 <DIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_number))
    1b32:	e6 e3       	ldi	r30, 0x36	; 54
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a9 01       	movw	r20, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <DIO_readPin+0xae>
    1b46:	55 95       	asr	r21
    1b48:	47 95       	ror	r20
    1b4a:	8a 95       	dec	r24
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <DIO_readPin+0xaa>
    1b4e:	ca 01       	movw	r24, r20
    1b50:	81 70       	andi	r24, 0x01	; 1
    1b52:	90 70       	andi	r25, 0x00	; 0
    1b54:	88 23       	and	r24, r24
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	31 c0       	rjmp	.+98     	; 0x1bc0 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b5e:	19 82       	std	Y+1, r1	; 0x01
    1b60:	2f c0       	rjmp	.+94     	; 0x1bc0 <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_number))
    1b62:	e3 e3       	ldi	r30, 0x33	; 51
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a9 01       	movw	r20, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <DIO_readPin+0xde>
    1b76:	55 95       	asr	r21
    1b78:	47 95       	ror	r20
    1b7a:	8a 95       	dec	r24
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <DIO_readPin+0xda>
    1b7e:	ca 01       	movw	r24, r20
    1b80:	81 70       	andi	r24, 0x01	; 1
    1b82:	90 70       	andi	r25, 0x00	; 0
    1b84:	88 23       	and	r24, r24
    1b86:	19 f0       	breq	.+6      	; 0x1b8e <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	19 c0       	rjmp	.+50     	; 0x1bc0 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b8e:	19 82       	std	Y+1, r1	; 0x01
    1b90:	17 c0       	rjmp	.+46     	; 0x1bc0 <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_number))
    1b92:	e0 e3       	ldi	r30, 0x30	; 48
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a9 01       	movw	r20, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_readPin+0x10e>
    1ba6:	55 95       	asr	r21
    1ba8:	47 95       	ror	r20
    1baa:	8a 95       	dec	r24
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_readPin+0x10a>
    1bae:	ca 01       	movw	r24, r20
    1bb0:	81 70       	andi	r24, 0x01	; 1
    1bb2:	90 70       	andi	r25, 0x00	; 0
    1bb4:	88 23       	and	r24, r24
    1bb6:	19 f0       	breq	.+6      	; 0x1bbe <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bbe:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <DIO_setupPortDirection>:
void DIO_setupPortDirection(uint8 port_number, GPIO_PortDirectionType direction)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <DIO_setupPortDirection+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <DIO_setupPortDirection+0x8>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_number >= NUM_OF_PORTS)
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	90 f5       	brcc	.+100    	; 0x1c4c <DIO_setupPortDirection+0x7a>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	3c 83       	std	Y+4, r19	; 0x04
    1bf0:	2b 83       	std	Y+3, r18	; 0x03
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	d1 f0       	breq	.+52     	; 0x1c30 <DIO_setupPortDirection+0x5e>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <DIO_setupPortDirection+0x3e>
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	61 f0       	breq	.+24     	; 0x1c26 <DIO_setupPortDirection+0x54>
    1c0e:	1e c0       	rjmp	.+60     	; 0x1c4c <DIO_setupPortDirection+0x7a>
    1c10:	2b 81       	ldd	r18, Y+3	; 0x03
    1c12:	3c 81       	ldd	r19, Y+4	; 0x04
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	81 f0       	breq	.+32     	; 0x1c3a <DIO_setupPortDirection+0x68>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	83 30       	cpi	r24, 0x03	; 3
    1c20:	91 05       	cpc	r25, r1
    1c22:	81 f0       	breq	.+32     	; 0x1c44 <DIO_setupPortDirection+0x72>
    1c24:	13 c0       	rjmp	.+38     	; 0x1c4c <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c26:	ea e3       	ldi	r30, 0x3A	; 58
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	80 83       	st	Z, r24
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <DIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c30:	e7 e3       	ldi	r30, 0x37	; 55
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	80 83       	st	Z, r24
    1c38:	09 c0       	rjmp	.+18     	; 0x1c4c <DIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c3a:	e4 e3       	ldi	r30, 0x34	; 52
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	80 83       	st	Z, r24
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <DIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c44:	e1 e3       	ldi	r30, 0x31	; 49
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_number, uint8 value)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <DIO_writePort+0x6>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <DIO_writePort+0x8>
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	90 f5       	brcc	.+100    	; 0x1cd4 <DIO_writePort+0x7a>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3c 83       	std	Y+4, r19	; 0x04
    1c78:	2b 83       	std	Y+3, r18	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	d1 f0       	breq	.+52     	; 0x1cb8 <DIO_writePort+0x5e>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <DIO_writePort+0x3e>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 f0       	breq	.+24     	; 0x1cae <DIO_writePort+0x54>
    1c96:	1e c0       	rjmp	.+60     	; 0x1cd4 <DIO_writePort+0x7a>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <DIO_writePort+0x68>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	81 f0       	breq	.+32     	; 0x1ccc <DIO_writePort+0x72>
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <DIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1cae:	eb e3       	ldi	r30, 0x3B	; 59
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <DIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cb8:	e8 e3       	ldi	r30, 0x38	; 56
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 83       	st	Z, r24
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <DIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cc2:	e5 e3       	ldi	r30, 0x35	; 53
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	80 83       	st	Z, r24
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <DIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ccc:	e2 e3       	ldi	r30, 0x32	; 50
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_number)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_readPort+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <DIO_readPort+0x8>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1cf0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	84 30       	cpi	r24, 0x04	; 4
    1cf6:	90 f5       	brcc	.+100    	; 0x1d5c <DIO_readPort+0x7a>
		
	}
	else
	{
		/* Read the port value*/
		switch (port_number)
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3c 83       	std	Y+4, r19	; 0x04
    1d00:	2b 83       	std	Y+3, r18	; 0x03
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	91 05       	cpc	r25, r1
    1d0a:	d1 f0       	breq	.+52     	; 0x1d40 <DIO_readPort+0x5e>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <DIO_readPort+0x3e>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <DIO_readPort+0x54>
    1d1e:	1e c0       	rjmp	.+60     	; 0x1d5c <DIO_readPort+0x7a>
    1d20:	2b 81       	ldd	r18, Y+3	; 0x03
    1d22:	3c 81       	ldd	r19, Y+4	; 0x04
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	81 f0       	breq	.+32     	; 0x1d4a <DIO_readPort+0x68>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	83 30       	cpi	r24, 0x03	; 3
    1d30:	91 05       	cpc	r25, r1
    1d32:	81 f0       	breq	.+32     	; 0x1d54 <DIO_readPort+0x72>
    1d34:	13 c0       	rjmp	.+38     	; 0x1d5c <DIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d36:	e9 e3       	ldi	r30, 0x39	; 57
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <DIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d40:	e6 e3       	ldi	r30, 0x36	; 54
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	09 c0       	rjmp	.+18     	; 0x1d5c <DIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d4a:	e3 e3       	ldi	r30, 0x33	; 51
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <DIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d54:	e0 e3       	ldi	r30, 0x30	; 48
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <Temp_state>:
STATE P_state = SAFE;
STATE T_state = SAFE;


void Temp_state(void)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
	if (g_readings.temperature >= TEMPERATURE_SEVERE)
    1d74:	80 91 6e 01 	lds	r24, 0x016E
    1d78:	90 91 6f 01 	lds	r25, 0x016F
    1d7c:	a0 91 70 01 	lds	r26, 0x0170
    1d80:	b0 91 71 01 	lds	r27, 0x0171
    1d84:	8d 32       	cpi	r24, 0x2D	; 45
    1d86:	91 05       	cpc	r25, r1
    1d88:	a1 05       	cpc	r26, r1
    1d8a:	b1 05       	cpc	r27, r1
    1d8c:	24 f0       	brlt	.+8      	; 0x1d96 <Temp_state+0x2a>
	{
		T_state = SEVERE;
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	80 93 7a 01 	sts	0x017A, r24
    1d94:	37 c0       	rjmp	.+110    	; 0x1e04 <Temp_state+0x98>
	}
	else if ((g_readings.temperature >= TEMPERATURE_MODERATE) && (g_readings.temperature < TEMPERATURE_SEVERE))
    1d96:	80 91 6e 01 	lds	r24, 0x016E
    1d9a:	90 91 6f 01 	lds	r25, 0x016F
    1d9e:	a0 91 70 01 	lds	r26, 0x0170
    1da2:	b0 91 71 01 	lds	r27, 0x0171
    1da6:	83 32       	cpi	r24, 0x23	; 35
    1da8:	91 05       	cpc	r25, r1
    1daa:	a1 05       	cpc	r26, r1
    1dac:	b1 05       	cpc	r27, r1
    1dae:	8c f0       	brlt	.+34     	; 0x1dd2 <Temp_state+0x66>
    1db0:	80 91 6e 01 	lds	r24, 0x016E
    1db4:	90 91 6f 01 	lds	r25, 0x016F
    1db8:	a0 91 70 01 	lds	r26, 0x0170
    1dbc:	b0 91 71 01 	lds	r27, 0x0171
    1dc0:	8d 32       	cpi	r24, 0x2D	; 45
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	a1 05       	cpc	r26, r1
    1dc6:	b1 05       	cpc	r27, r1
    1dc8:	24 f4       	brge	.+8      	; 0x1dd2 <Temp_state+0x66>
	{
		T_state = MODERATE;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 93 7a 01 	sts	0x017A, r24
    1dd0:	19 c0       	rjmp	.+50     	; 0x1e04 <Temp_state+0x98>
	}
	else if ((g_readings.temperature >= TEMPERATURE_SAFE) && (g_readings.temperature < TEMPERATURE_MODERATE))
    1dd2:	80 91 6e 01 	lds	r24, 0x016E
    1dd6:	90 91 6f 01 	lds	r25, 0x016F
    1dda:	a0 91 70 01 	lds	r26, 0x0170
    1dde:	b0 91 71 01 	lds	r27, 0x0171
    1de2:	bb 23       	and	r27, r27
    1de4:	7c f0       	brlt	.+30     	; 0x1e04 <Temp_state+0x98>
    1de6:	80 91 6e 01 	lds	r24, 0x016E
    1dea:	90 91 6f 01 	lds	r25, 0x016F
    1dee:	a0 91 70 01 	lds	r26, 0x0170
    1df2:	b0 91 71 01 	lds	r27, 0x0171
    1df6:	83 32       	cpi	r24, 0x23	; 35
    1df8:	91 05       	cpc	r25, r1
    1dfa:	a1 05       	cpc	r26, r1
    1dfc:	b1 05       	cpc	r27, r1
    1dfe:	14 f4       	brge	.+4      	; 0x1e04 <Temp_state+0x98>
	{
		T_state = SAFE;
    1e00:	10 92 7a 01 	sts	0x017A, r1
	}
}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <Press_state>:

void Press_state(void)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
	if (g_readings.pressure >= PRESSURE_SEVERE)
    1e12:	80 91 72 01 	lds	r24, 0x0172
    1e16:	90 91 73 01 	lds	r25, 0x0173
    1e1a:	a0 91 74 01 	lds	r26, 0x0174
    1e1e:	b0 91 75 01 	lds	r27, 0x0175
    1e22:	80 3a       	cpi	r24, 0xA0	; 160
    1e24:	26 e8       	ldi	r18, 0x86	; 134
    1e26:	92 07       	cpc	r25, r18
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	a2 07       	cpc	r26, r18
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	b2 07       	cpc	r27, r18
    1e30:	24 f0       	brlt	.+8      	; 0x1e3a <Press_state+0x30>
	{
		P_state = SEVERE;
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	80 93 79 01 	sts	0x0179, r24
    1e38:	46 c0       	rjmp	.+140    	; 0x1ec6 <Press_state+0xbc>
	}
	else if ((g_readings.pressure >= PRESSURE_MODERATE) && (g_readings.pressure < PRESSURE_SEVERE))
    1e3a:	80 91 72 01 	lds	r24, 0x0172
    1e3e:	90 91 73 01 	lds	r25, 0x0173
    1e42:	a0 91 74 01 	lds	r26, 0x0174
    1e46:	b0 91 75 01 	lds	r27, 0x0175
    1e4a:	80 31       	cpi	r24, 0x10	; 16
    1e4c:	27 e2       	ldi	r18, 0x27	; 39
    1e4e:	92 07       	cpc	r25, r18
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	a2 07       	cpc	r26, r18
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	b2 07       	cpc	r27, r18
    1e58:	a4 f0       	brlt	.+40     	; 0x1e82 <Press_state+0x78>
    1e5a:	80 91 72 01 	lds	r24, 0x0172
    1e5e:	90 91 73 01 	lds	r25, 0x0173
    1e62:	a0 91 74 01 	lds	r26, 0x0174
    1e66:	b0 91 75 01 	lds	r27, 0x0175
    1e6a:	80 3a       	cpi	r24, 0xA0	; 160
    1e6c:	26 e8       	ldi	r18, 0x86	; 134
    1e6e:	92 07       	cpc	r25, r18
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	a2 07       	cpc	r26, r18
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	b2 07       	cpc	r27, r18
    1e78:	24 f4       	brge	.+8      	; 0x1e82 <Press_state+0x78>
	{
		P_state = MODERATE;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	80 93 79 01 	sts	0x0179, r24
    1e80:	22 c0       	rjmp	.+68     	; 0x1ec6 <Press_state+0xbc>
	}
	else if ((g_readings.pressure >= PRESSURE_SAFE) && (g_readings.pressure < PRESSURE_MODERATE))
    1e82:	80 91 72 01 	lds	r24, 0x0172
    1e86:	90 91 73 01 	lds	r25, 0x0173
    1e8a:	a0 91 74 01 	lds	r26, 0x0174
    1e8e:	b0 91 75 01 	lds	r27, 0x0175
    1e92:	8c 32       	cpi	r24, 0x2C	; 44
    1e94:	21 e0       	ldi	r18, 0x01	; 1
    1e96:	92 07       	cpc	r25, r18
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	a2 07       	cpc	r26, r18
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	b2 07       	cpc	r27, r18
    1ea0:	94 f0       	brlt	.+36     	; 0x1ec6 <Press_state+0xbc>
    1ea2:	80 91 72 01 	lds	r24, 0x0172
    1ea6:	90 91 73 01 	lds	r25, 0x0173
    1eaa:	a0 91 74 01 	lds	r26, 0x0174
    1eae:	b0 91 75 01 	lds	r27, 0x0175
    1eb2:	80 31       	cpi	r24, 0x10	; 16
    1eb4:	27 e2       	ldi	r18, 0x27	; 39
    1eb6:	92 07       	cpc	r25, r18
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	a2 07       	cpc	r26, r18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	b2 07       	cpc	r27, r18
    1ec0:	14 f4       	brge	.+4      	; 0x1ec6 <Press_state+0xbc>
	{
		P_state = SAFE;
    1ec2:	10 92 79 01 	sts	0x0179, r1
	}
}
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <Action_severe>:

void Action_severe(void)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
	BUZZER_on();
    1ee0:	0e 94 a0 10 	call	0x2140	; 0x2140 <BUZZER_on>
	if (T_state == SEVERE || T_state == MODERATE)
    1ee4:	80 91 7a 01 	lds	r24, 0x017A
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	21 f0       	breq	.+8      	; 0x1ef4 <Action_severe+0x28>
    1eec:	80 91 7a 01 	lds	r24, 0x017A
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	19 f4       	brne	.+6      	; 0x1efa <Action_severe+0x2e>
	{
		WATERPUMP_on();
    1ef4:	0e 94 77 10 	call	0x20ee	; 0x20ee <WATERPUMP_on>
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <Action_severe+0x32>
	}
	else
	{
		WATERPUMP_off();
    1efa:	0e 94 83 10 	call	0x2106	; 0x2106 <WATERPUMP_off>
	}
	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_HIGH);
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	67 e0       	ldi	r22, 0x07	; 7
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f0e:	b0 e4       	ldi	r27, 0x40	; 64
    1f10:	8b 87       	std	Y+11, r24	; 0x0b
    1f12:	9c 87       	std	Y+12, r25	; 0x0c
    1f14:	ad 87       	std	Y+13, r26	; 0x0d
    1f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a e7       	ldi	r20, 0x7A	; 122
    1f26:	55 e4       	ldi	r21, 0x45	; 69
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8f 83       	std	Y+7, r24	; 0x07
    1f32:	98 87       	std	Y+8, r25	; 0x08
    1f34:	a9 87       	std	Y+9, r26	; 0x09
    1f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <Action_severe+0x8e>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <Action_severe+0x10c>
	else if (__tmp > 65535)
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <Action_severe+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <Action_severe+0xee>
    1f9c:	80 e9       	ldi	r24, 0x90	; 144
    1f9e:	91 e0       	ldi	r25, 0x01	; 1
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <Action_severe+0xdc>
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <Action_severe+0xd0>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <Action_severe+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc6:	78 85       	ldd	r23, Y+8	; 0x08
    1fc8:	89 85       	ldd	r24, Y+9	; 0x09
    1fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <Action_severe+0x118>
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_LOW);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	67 e0       	ldi	r22, 0x07	; 7
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    1ff6:	2e 96       	adiw	r28, 0x0e	; 14
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <Action_moderate>:

void Action_moderate(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    2010:	0e 94 a0 10 	call	0x2140	; 0x2140 <BUZZER_on>
	if (T_state == SEVERE || T_state == MODERATE)
    2014:	80 91 7a 01 	lds	r24, 0x017A
    2018:	82 30       	cpi	r24, 0x02	; 2
    201a:	21 f0       	breq	.+8      	; 0x2024 <Action_moderate+0x1c>
    201c:	80 91 7a 01 	lds	r24, 0x017A
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	19 f4       	brne	.+6      	; 0x202a <Action_moderate+0x22>
	{
		WATERPUMP_on();
    2024:	0e 94 77 10 	call	0x20ee	; 0x20ee <WATERPUMP_on>
    2028:	02 c0       	rjmp	.+4      	; 0x202e <Action_moderate+0x26>
	}
	else
	{
		WATERPUMP_off();
    202a:	0e 94 83 10 	call	0x2106	; 0x2106 <WATERPUMP_off>

	}
	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_LOW);
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	67 e0       	ldi	r22, 0x07	; 7
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <Action_safe>:

void Action_safe(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
	BUZZER_off();
    2046:	0e 94 ac 10 	call	0x2158	; 0x2158 <BUZZER_off>
	WATERPUMP_off();
    204a:	0e 94 83 10 	call	0x2106	; 0x2106 <WATERPUMP_off>
	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_LOW);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	67 e0       	ldi	r22, 0x07	; 7
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <main>:



int main()
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62

	TWI_init();
    2066:	0e 94 75 07 	call	0xeea	; 0xeea <TWI_init>

//	BUZZER_init();
//	WATERPUMP_init();

//	SREG |= (1<<7);
	BMP180_Start();
    206a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <BMP180_Start>
	DIO_setupPinDirection(SLS_FLAG_PORT, SLS_FLAG_PIN, PIN_OUTPUT);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	67 e0       	ldi	r22, 0x07	; 7
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <DIO_setupPinDirection>
//		_delay_ms(8000);
//		BUZZER_off();
//		_delay_ms(2000);
//		DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_LOW);

		Temp_state();
    2078:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <Temp_state>
		Press_state();
    207c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Press_state>

		if (P_state == SEVERE || T_state == SEVERE)
    2080:	80 91 79 01 	lds	r24, 0x0179
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	21 f0       	breq	.+8      	; 0x2090 <main+0x32>
    2088:	80 91 7a 01 	lds	r24, 0x017A
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	19 f4       	brne	.+6      	; 0x2096 <main+0x38>
		{
			Action_severe();
    2090:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Action_severe>
    2094:	f1 cf       	rjmp	.-30     	; 0x2078 <main+0x1a>
		}
		else if (P_state == MODERATE || T_state == MODERATE)
    2096:	80 91 79 01 	lds	r24, 0x0179
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	21 f0       	breq	.+8      	; 0x20a6 <main+0x48>
    209e:	80 91 7a 01 	lds	r24, 0x017A
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	19 f4       	brne	.+6      	; 0x20ac <main+0x4e>
		{
			Action_moderate();
    20a6:	0e 94 04 10 	call	0x2008	; 0x2008 <Action_moderate>
    20aa:	e6 cf       	rjmp	.-52     	; 0x2078 <main+0x1a>
		}
		else if (P_state == SAFE || T_state == SAFE)
    20ac:	80 91 79 01 	lds	r24, 0x0179
    20b0:	88 23       	and	r24, r24
    20b2:	21 f0       	breq	.+8      	; 0x20bc <main+0x5e>
    20b4:	80 91 7a 01 	lds	r24, 0x017A
    20b8:	88 23       	and	r24, r24
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <main+0x64>
		{
			Action_safe();
    20bc:	0e 94 1f 10 	call	0x203e	; 0x203e <Action_safe>
    20c0:	db cf       	rjmp	.-74     	; 0x2078 <main+0x1a>
		}
		else
		{
			BUZZER_off();
    20c2:	0e 94 ac 10 	call	0x2158	; 0x2158 <BUZZER_off>
			WATERPUMP_off();
    20c6:	0e 94 83 10 	call	0x2106	; 0x2106 <WATERPUMP_off>
    20ca:	d6 cf       	rjmp	.-84     	; 0x2078 <main+0x1a>

000020cc <WATERPUMP_init>:

#include "../../MCAL/DIO/dio.h"
#include "../../ECUAL/WATERPUMP/waterpump.h"

void WATERPUMP_init(void)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <WATERPUMP_on>:

void WATERPUMP_on(void)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <WATERPUMP_off>:

void WATERPUMP_off(void)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <BUZZER_init>:

#include "../../MCAL/DIO/dio.h"
#include "buzzer.h"

void BUZZER_init(void)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	66 e0       	ldi	r22, 0x06	; 6
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <DIO_setupPinDirection>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	66 e0       	ldi	r22, 0x06	; 6
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <BUZZER_on>:

void BUZZER_on(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	66 e0       	ldi	r22, 0x06	; 6
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <BUZZER_off>:

void BUZZER_off(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	66 e0       	ldi	r22, 0x06	; 6
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_writePin>
}
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <BMP180_ReadCalb>:
/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;
void delay(void);
void BMP180_ReadCalb(void) {
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	c2 59       	subi	r28, 0x92	; 146
    217e:	d0 40       	sbci	r29, 0x00	; 0
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61

	uint8_t Callib_Data[22] = { 0 };
    218a:	ce 01       	movw	r24, r28
    218c:	83 58       	subi	r24, 0x83	; 131
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	26 e1       	ldi	r18, 0x16	; 22
    2192:	fc 01       	movw	r30, r24
    2194:	df 01       	movw	r26, r30
    2196:	82 2f       	mov	r24, r18
    2198:	1d 92       	st	X+, r1
    219a:	8a 95       	dec	r24
    219c:	e9 f7       	brne	.-6      	; 0x2198 <BMP180_ReadCalb+0x28>
	uint16_t Callib_Start = 0xAA;
    219e:	fe 01       	movw	r30, r28
    21a0:	e5 58       	subi	r30, 0x85	; 133
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	8a ea       	ldi	r24, 0xAA	; 170
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	91 83       	std	Z+1, r25	; 0x01
    21aa:	80 83       	st	Z, r24

	for (int i = 0; i < 22; i++) {
    21ac:	fe 01       	movw	r30, r28
    21ae:	e7 58       	subi	r30, 0x87	; 135
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	11 82       	std	Z+1, r1	; 0x01
    21b4:	10 82       	st	Z, r1
    21b6:	d9 c4       	rjmp	.+2482   	; 0x2b6a <BMP180_ReadCalb+0x9fa>
		TWI_Start_Wait(BMP180_ADDRESS_W);// To write
    21b8:	8e ee       	ldi	r24, 0xEE	; 238
    21ba:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
    21be:	fe 01       	movw	r30, r28
    21c0:	eb 58       	subi	r30, 0x8B	; 139
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e2       	ldi	r26, 0x20	; 32
    21ca:	b1 e4       	ldi	r27, 0x41	; 65
    21cc:	80 83       	st	Z, r24
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	a2 83       	std	Z+2, r26	; 0x02
    21d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21d4:	8e 01       	movw	r16, r28
    21d6:	0f 58       	subi	r16, 0x8F	; 143
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	eb 58       	subi	r30, 0x8B	; 139
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	2b ea       	ldi	r18, 0xAB	; 171
    21ea:	3a ea       	ldi	r19, 0xAA	; 170
    21ec:	4a ea       	ldi	r20, 0xAA	; 170
    21ee:	50 e4       	ldi	r21, 0x40	; 64
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	f8 01       	movw	r30, r16
    21fa:	80 83       	st	Z, r24
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	a2 83       	std	Z+2, r26	; 0x02
    2200:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2202:	fe 01       	movw	r30, r28
    2204:	ef 58       	subi	r30, 0x8F	; 143
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e8       	ldi	r20, 0x80	; 128
    2216:	5f e3       	ldi	r21, 0x3F	; 63
    2218:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221c:	88 23       	and	r24, r24
    221e:	34 f4       	brge	.+12     	; 0x222c <BMP180_ReadCalb+0xbc>
		__ticks = 1;
    2220:	fe 01       	movw	r30, r28
    2222:	e0 59       	subi	r30, 0x90	; 144
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 83       	st	Z, r24
    222a:	e0 c0       	rjmp	.+448    	; 0x23ec <BMP180_ReadCalb+0x27c>
	else if (__tmp > 255)
    222c:	fe 01       	movw	r30, r28
    222e:	ef 58       	subi	r30, 0x8F	; 143
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4f e7       	ldi	r20, 0x7F	; 127
    2240:	53 e4       	ldi	r21, 0x43	; 67
    2242:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2246:	18 16       	cp	r1, r24
    2248:	0c f0       	brlt	.+2      	; 0x224c <BMP180_ReadCalb+0xdc>
    224a:	c0 c0       	rjmp	.+384    	; 0x23cc <BMP180_ReadCalb+0x25c>
	{
		_delay_ms(__us / 1000.0);
    224c:	fe 01       	movw	r30, r28
    224e:	eb 58       	subi	r30, 0x8B	; 139
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a e7       	ldi	r20, 0x7A	; 122
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	fe 01       	movw	r30, r28
    226c:	e4 59       	subi	r30, 0x94	; 148
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 83       	st	Z, r24
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	a2 83       	std	Z+2, r26	; 0x02
    2276:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	8e 01       	movw	r16, r28
    227a:	08 59       	subi	r16, 0x98	; 152
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	fe 01       	movw	r30, r28
    2280:	e4 59       	subi	r30, 0x94	; 148
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	55 e4       	ldi	r21, 0x45	; 69
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	f8 01       	movw	r30, r16
    229e:	80 83       	st	Z, r24
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	a2 83       	std	Z+2, r26	; 0x02
    22a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a6:	fe 01       	movw	r30, r28
    22a8:	e8 59       	subi	r30, 0x98	; 152
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	44 f4       	brge	.+16     	; 0x22d4 <BMP180_ReadCalb+0x164>
		__ticks = 1;
    22c4:	fe 01       	movw	r30, r28
    22c6:	ea 59       	subi	r30, 0x9A	; 154
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	64 c0       	rjmp	.+200    	; 0x239c <BMP180_ReadCalb+0x22c>
	else if (__tmp > 65535)
    22d4:	fe 01       	movw	r30, r28
    22d6:	e8 59       	subi	r30, 0x98	; 152
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	0c f0       	brlt	.+2      	; 0x22f4 <BMP180_ReadCalb+0x184>
    22f2:	43 c0       	rjmp	.+134    	; 0x237a <BMP180_ReadCalb+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	fe 01       	movw	r30, r28
    22f6:	e4 59       	subi	r30, 0x94	; 148
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8e 01       	movw	r16, r28
    2314:	0a 59       	subi	r16, 0x9A	; 154
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	f8 01       	movw	r30, r16
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	1f c0       	rjmp	.+62     	; 0x236a <BMP180_ReadCalb+0x1fa>
    232c:	fe 01       	movw	r30, r28
    232e:	ec 59       	subi	r30, 0x9C	; 156
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 e9       	ldi	r24, 0x90	; 144
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	fe 01       	movw	r30, r28
    233c:	ec 59       	subi	r30, 0x9C	; 156
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <BMP180_ReadCalb+0x1d4>
    2348:	fe 01       	movw	r30, r28
    234a:	ec 59       	subi	r30, 0x9C	; 156
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	de 01       	movw	r26, r28
    2354:	aa 59       	subi	r26, 0x9A	; 154
    2356:	bf 4f       	sbci	r27, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	ea 59       	subi	r30, 0x9A	; 154
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	9c 93       	st	X, r25
    2368:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	fe 01       	movw	r30, r28
    236c:	ea 59       	subi	r30, 0x9A	; 154
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	d1 f6       	brne	.-76     	; 0x232c <BMP180_ReadCalb+0x1bc>
    2378:	4b c0       	rjmp	.+150    	; 0x2410 <BMP180_ReadCalb+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	8e 01       	movw	r16, r28
    237c:	0a 59       	subi	r16, 0x9A	; 154
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	fe 01       	movw	r30, r28
    2382:	e8 59       	subi	r30, 0x98	; 152
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	de 01       	movw	r26, r28
    239e:	ae 59       	subi	r26, 0x9E	; 158
    23a0:	bf 4f       	sbci	r27, 0xFF	; 255
    23a2:	fe 01       	movw	r30, r28
    23a4:	ea 59       	subi	r30, 0x9A	; 154
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	9c 93       	st	X, r25
    23b0:	8e 93       	st	-X, r24
    23b2:	fe 01       	movw	r30, r28
    23b4:	ee 59       	subi	r30, 0x9E	; 158
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <BMP180_ReadCalb+0x24c>
    23c0:	fe 01       	movw	r30, r28
    23c2:	ee 59       	subi	r30, 0x9E	; 158
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
    23ca:	22 c0       	rjmp	.+68     	; 0x2410 <BMP180_ReadCalb+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23cc:	8e 01       	movw	r16, r28
    23ce:	00 59       	subi	r16, 0x90	; 144
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	fe 01       	movw	r30, r28
    23d4:	ef 58       	subi	r30, 0x8F	; 143
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	f8 01       	movw	r30, r16
    23ea:	80 83       	st	Z, r24
    23ec:	de 01       	movw	r26, r28
    23ee:	af 59       	subi	r26, 0x9F	; 159
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e0 59       	subi	r30, 0x90	; 144
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23fc:	fe 01       	movw	r30, r28
    23fe:	ef 59       	subi	r30, 0x9F	; 159
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	8a 95       	dec	r24
    2406:	f1 f7       	brne	.-4      	; 0x2404 <BMP180_ReadCalb+0x294>
    2408:	fe 01       	movw	r30, r28
    240a:	ef 59       	subi	r30, 0x9F	; 159
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_WriteByte(Callib_Start + i);
    2410:	fe 01       	movw	r30, r28
    2412:	e5 58       	subi	r30, 0x85	; 133
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	90 81       	ld	r25, Z
    2418:	fe 01       	movw	r30, r28
    241a:	e7 58       	subi	r30, 0x87	; 135
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	89 0f       	add	r24, r25
    2422:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
    2426:	fe 01       	movw	r30, r28
    2428:	e3 5a       	subi	r30, 0xA3	; 163
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	a0 e2       	ldi	r26, 0x20	; 32
    2432:	b1 e4       	ldi	r27, 0x41	; 65
    2434:	80 83       	st	Z, r24
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	a2 83       	std	Z+2, r26	; 0x02
    243a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    243c:	8e 01       	movw	r16, r28
    243e:	07 5a       	subi	r16, 0xA7	; 167
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	fe 01       	movw	r30, r28
    2444:	e3 5a       	subi	r30, 0xA3	; 163
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	2b ea       	ldi	r18, 0xAB	; 171
    2452:	3a ea       	ldi	r19, 0xAA	; 170
    2454:	4a ea       	ldi	r20, 0xAA	; 170
    2456:	50 e4       	ldi	r21, 0x40	; 64
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	f8 01       	movw	r30, r16
    2462:	80 83       	st	Z, r24
    2464:	91 83       	std	Z+1, r25	; 0x01
    2466:	a2 83       	std	Z+2, r26	; 0x02
    2468:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    246a:	fe 01       	movw	r30, r28
    246c:	e7 5a       	subi	r30, 0xA7	; 167
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e8       	ldi	r20, 0x80	; 128
    247e:	5f e3       	ldi	r21, 0x3F	; 63
    2480:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2484:	88 23       	and	r24, r24
    2486:	34 f4       	brge	.+12     	; 0x2494 <BMP180_ReadCalb+0x324>
		__ticks = 1;
    2488:	fe 01       	movw	r30, r28
    248a:	e8 5a       	subi	r30, 0xA8	; 168
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	80 83       	st	Z, r24
    2492:	e0 c0       	rjmp	.+448    	; 0x2654 <BMP180_ReadCalb+0x4e4>
	else if (__tmp > 255)
    2494:	fe 01       	movw	r30, r28
    2496:	e7 5a       	subi	r30, 0xA7	; 167
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	60 81       	ld	r22, Z
    249c:	71 81       	ldd	r23, Z+1	; 0x01
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	53 e4       	ldi	r21, 0x43	; 67
    24aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	0c f0       	brlt	.+2      	; 0x24b4 <BMP180_ReadCalb+0x344>
    24b2:	c0 c0       	rjmp	.+384    	; 0x2634 <BMP180_ReadCalb+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    24b4:	fe 01       	movw	r30, r28
    24b6:	e3 5a       	subi	r30, 0xA3	; 163
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a e7       	ldi	r20, 0x7A	; 122
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	fe 01       	movw	r30, r28
    24d4:	ec 5a       	subi	r30, 0xAC	; 172
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 83       	st	Z, r24
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	a2 83       	std	Z+2, r26	; 0x02
    24de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	8e 01       	movw	r16, r28
    24e2:	00 5b       	subi	r16, 0xB0	; 176
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	fe 01       	movw	r30, r28
    24e8:	ec 5a       	subi	r30, 0xAC	; 172
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4a e7       	ldi	r20, 0x7A	; 122
    24fa:	55 e4       	ldi	r21, 0x45	; 69
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	f8 01       	movw	r30, r16
    2506:	80 83       	st	Z, r24
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	a2 83       	std	Z+2, r26	; 0x02
    250c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250e:	fe 01       	movw	r30, r28
    2510:	e0 5b       	subi	r30, 0xB0	; 176
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	44 f4       	brge	.+16     	; 0x253c <BMP180_ReadCalb+0x3cc>
		__ticks = 1;
    252c:	fe 01       	movw	r30, r28
    252e:	e2 5b       	subi	r30, 0xB2	; 178
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
    253a:	64 c0       	rjmp	.+200    	; 0x2604 <BMP180_ReadCalb+0x494>
	else if (__tmp > 65535)
    253c:	fe 01       	movw	r30, r28
    253e:	e0 5b       	subi	r30, 0xB0	; 176
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	0c f0       	brlt	.+2      	; 0x255c <BMP180_ReadCalb+0x3ec>
    255a:	43 c0       	rjmp	.+134    	; 0x25e2 <BMP180_ReadCalb+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	fe 01       	movw	r30, r28
    255e:	ec 5a       	subi	r30, 0xAC	; 172
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	60 81       	ld	r22, Z
    2564:	71 81       	ldd	r23, Z+1	; 0x01
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	8e 01       	movw	r16, r28
    257c:	02 5b       	subi	r16, 0xB2	; 178
    257e:	1f 4f       	sbci	r17, 0xFF	; 255
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	f8 01       	movw	r30, r16
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
    2592:	1f c0       	rjmp	.+62     	; 0x25d2 <BMP180_ReadCalb+0x462>
    2594:	fe 01       	movw	r30, r28
    2596:	e4 5b       	subi	r30, 0xB4	; 180
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 e9       	ldi	r24, 0x90	; 144
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a2:	fe 01       	movw	r30, r28
    25a4:	e4 5b       	subi	r30, 0xB4	; 180
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <BMP180_ReadCalb+0x43c>
    25b0:	fe 01       	movw	r30, r28
    25b2:	e4 5b       	subi	r30, 0xB4	; 180
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	de 01       	movw	r26, r28
    25bc:	a2 5b       	subi	r26, 0xB2	; 178
    25be:	bf 4f       	sbci	r27, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	e2 5b       	subi	r30, 0xB2	; 178
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	9c 93       	st	X, r25
    25d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	fe 01       	movw	r30, r28
    25d4:	e2 5b       	subi	r30, 0xB2	; 178
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	d1 f6       	brne	.-76     	; 0x2594 <BMP180_ReadCalb+0x424>
    25e0:	4b c0       	rjmp	.+150    	; 0x2678 <BMP180_ReadCalb+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	8e 01       	movw	r16, r28
    25e4:	02 5b       	subi	r16, 0xB2	; 178
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	e0 5b       	subi	r30, 0xB0	; 176
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	f8 01       	movw	r30, r16
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	de 01       	movw	r26, r28
    2606:	a6 5b       	subi	r26, 0xB6	; 182
    2608:	bf 4f       	sbci	r27, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	e2 5b       	subi	r30, 0xB2	; 178
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	9c 93       	st	X, r25
    2618:	8e 93       	st	-X, r24
    261a:	fe 01       	movw	r30, r28
    261c:	e6 5b       	subi	r30, 0xB6	; 182
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <BMP180_ReadCalb+0x4b4>
    2628:	fe 01       	movw	r30, r28
    262a:	e6 5b       	subi	r30, 0xB6	; 182
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	22 c0       	rjmp	.+68     	; 0x2678 <BMP180_ReadCalb+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2634:	8e 01       	movw	r16, r28
    2636:	08 5a       	subi	r16, 0xA8	; 168
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	fe 01       	movw	r30, r28
    263c:	e7 5a       	subi	r30, 0xA7	; 167
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	f8 01       	movw	r30, r16
    2652:	80 83       	st	Z, r24
    2654:	de 01       	movw	r26, r28
    2656:	a7 5b       	subi	r26, 0xB7	; 183
    2658:	bf 4f       	sbci	r27, 0xFF	; 255
    265a:	fe 01       	movw	r30, r28
    265c:	e8 5a       	subi	r30, 0xA8	; 168
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2664:	fe 01       	movw	r30, r28
    2666:	e7 5b       	subi	r30, 0xB7	; 183
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	8a 95       	dec	r24
    266e:	f1 f7       	brne	.-4      	; 0x266c <BMP180_ReadCalb+0x4fc>
    2670:	fe 01       	movw	r30, r28
    2672:	e7 5b       	subi	r30, 0xB7	; 183
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_Repeated_start(BMP180_ADDRESS_R);	// To read
    2678:	8f ee       	ldi	r24, 0xEF	; 239
    267a:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
    267e:	fe 01       	movw	r30, r28
    2680:	eb 5b       	subi	r30, 0xBB	; 187
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a0 e2       	ldi	r26, 0x20	; 32
    268a:	b1 e4       	ldi	r27, 0x41	; 65
    268c:	80 83       	st	Z, r24
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	a2 83       	std	Z+2, r26	; 0x02
    2692:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2694:	8e 01       	movw	r16, r28
    2696:	0f 5b       	subi	r16, 0xBF	; 191
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	fe 01       	movw	r30, r28
    269c:	eb 5b       	subi	r30, 0xBB	; 187
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	2b ea       	ldi	r18, 0xAB	; 171
    26aa:	3a ea       	ldi	r19, 0xAA	; 170
    26ac:	4a ea       	ldi	r20, 0xAA	; 170
    26ae:	50 e4       	ldi	r21, 0x40	; 64
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	f8 01       	movw	r30, r16
    26ba:	80 83       	st	Z, r24
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	a2 83       	std	Z+2, r26	; 0x02
    26c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c2:	fe 01       	movw	r30, r28
    26c4:	ef 5b       	subi	r30, 0xBF	; 191
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26dc:	88 23       	and	r24, r24
    26de:	34 f4       	brge	.+12     	; 0x26ec <BMP180_ReadCalb+0x57c>
		__ticks = 1;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	fe 01       	movw	r30, r28
    26e4:	e0 5c       	subi	r30, 0xC0	; 192
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 83       	st	Z, r24
    26ea:	9d c0       	rjmp	.+314    	; 0x2826 <BMP180_ReadCalb+0x6b6>
	else if (__tmp > 255)
    26ec:	fe 01       	movw	r30, r28
    26ee:	ef 5b       	subi	r30, 0xBF	; 191
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	53 e4       	ldi	r21, 0x43	; 67
    2702:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	0c f0       	brlt	.+2      	; 0x270c <BMP180_ReadCalb+0x59c>
    270a:	7e c0       	rjmp	.+252    	; 0x2808 <BMP180_ReadCalb+0x698>
	{
		_delay_ms(__us / 1000.0);
    270c:	fe 01       	movw	r30, r28
    270e:	eb 5b       	subi	r30, 0xBB	; 187
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a e7       	ldi	r20, 0x7A	; 122
    2720:	54 e4       	ldi	r21, 0x44	; 68
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8c af       	std	Y+60, r24	; 0x3c
    272c:	9d af       	std	Y+61, r25	; 0x3d
    272e:	ae af       	std	Y+62, r26	; 0x3e
    2730:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2732:	6c ad       	ldd	r22, Y+60	; 0x3c
    2734:	7d ad       	ldd	r23, Y+61	; 0x3d
    2736:	8e ad       	ldd	r24, Y+62	; 0x3e
    2738:	9f ad       	ldd	r25, Y+63	; 0x3f
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a e7       	ldi	r20, 0x7A	; 122
    2740:	55 e4       	ldi	r21, 0x45	; 69
    2742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	88 af       	std	Y+56, r24	; 0x38
    274c:	99 af       	std	Y+57, r25	; 0x39
    274e:	aa af       	std	Y+58, r26	; 0x3a
    2750:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2752:	68 ad       	ldd	r22, Y+56	; 0x38
    2754:	79 ad       	ldd	r23, Y+57	; 0x39
    2756:	8a ad       	ldd	r24, Y+58	; 0x3a
    2758:	9b ad       	ldd	r25, Y+59	; 0x3b
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2766:	88 23       	and	r24, r24
    2768:	2c f4       	brge	.+10     	; 0x2774 <BMP180_ReadCalb+0x604>
		__ticks = 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9f ab       	std	Y+55, r25	; 0x37
    2770:	8e ab       	std	Y+54, r24	; 0x36
    2772:	3f c0       	rjmp	.+126    	; 0x27f2 <BMP180_ReadCalb+0x682>
	else if (__tmp > 65535)
    2774:	68 ad       	ldd	r22, Y+56	; 0x38
    2776:	79 ad       	ldd	r23, Y+57	; 0x39
    2778:	8a ad       	ldd	r24, Y+58	; 0x3a
    277a:	9b ad       	ldd	r25, Y+59	; 0x3b
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	3f ef       	ldi	r19, 0xFF	; 255
    2780:	4f e7       	ldi	r20, 0x7F	; 127
    2782:	57 e4       	ldi	r21, 0x47	; 71
    2784:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2788:	18 16       	cp	r1, r24
    278a:	4c f5       	brge	.+82     	; 0x27de <BMP180_ReadCalb+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	6c ad       	ldd	r22, Y+60	; 0x3c
    278e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2790:	8e ad       	ldd	r24, Y+62	; 0x3e
    2792:	9f ad       	ldd	r25, Y+63	; 0x3f
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e2       	ldi	r20, 0x20	; 32
    279a:	51 e4       	ldi	r21, 0x41	; 65
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9f ab       	std	Y+55, r25	; 0x37
    27b2:	8e ab       	std	Y+54, r24	; 0x36
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <BMP180_ReadCalb+0x664>
    27b6:	80 e9       	ldi	r24, 0x90	; 144
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	9d ab       	std	Y+53, r25	; 0x35
    27bc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27be:	8c a9       	ldd	r24, Y+52	; 0x34
    27c0:	9d a9       	ldd	r25, Y+53	; 0x35
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <BMP180_ReadCalb+0x652>
    27c6:	9d ab       	std	Y+53, r25	; 0x35
    27c8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ca:	8e a9       	ldd	r24, Y+54	; 0x36
    27cc:	9f a9       	ldd	r25, Y+55	; 0x37
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	9f ab       	std	Y+55, r25	; 0x37
    27d2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d4:	8e a9       	ldd	r24, Y+54	; 0x36
    27d6:	9f a9       	ldd	r25, Y+55	; 0x37
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	69 f7       	brne	.-38     	; 0x27b6 <BMP180_ReadCalb+0x646>
    27dc:	2d c0       	rjmp	.+90     	; 0x2838 <BMP180_ReadCalb+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	68 ad       	ldd	r22, Y+56	; 0x38
    27e0:	79 ad       	ldd	r23, Y+57	; 0x39
    27e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    27e4:	9b ad       	ldd	r25, Y+59	; 0x3b
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9f ab       	std	Y+55, r25	; 0x37
    27f0:	8e ab       	std	Y+54, r24	; 0x36
    27f2:	8e a9       	ldd	r24, Y+54	; 0x36
    27f4:	9f a9       	ldd	r25, Y+55	; 0x37
    27f6:	9b ab       	std	Y+51, r25	; 0x33
    27f8:	8a ab       	std	Y+50, r24	; 0x32
    27fa:	8a a9       	ldd	r24, Y+50	; 0x32
    27fc:	9b a9       	ldd	r25, Y+51	; 0x33
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <BMP180_ReadCalb+0x68e>
    2802:	9b ab       	std	Y+51, r25	; 0x33
    2804:	8a ab       	std	Y+50, r24	; 0x32
    2806:	18 c0       	rjmp	.+48     	; 0x2838 <BMP180_ReadCalb+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2808:	fe 01       	movw	r30, r28
    280a:	ef 5b       	subi	r30, 0xBF	; 191
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	fe 01       	movw	r30, r28
    2820:	e0 5c       	subi	r30, 0xC0	; 192
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 83       	st	Z, r24
    2826:	fe 01       	movw	r30, r28
    2828:	e0 5c       	subi	r30, 0xC0	; 192
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2830:	89 a9       	ldd	r24, Y+49	; 0x31
    2832:	8a 95       	dec	r24
    2834:	f1 f7       	brne	.-4      	; 0x2832 <BMP180_ReadCalb+0x6c2>
    2836:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		Callib_Data[i] = TWI_ReadByteWithNACK();
    2838:	fe 01       	movw	r30, r28
    283a:	e7 58       	subi	r30, 0x87	; 135
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	00 81       	ld	r16, Z
    2840:	11 81       	ldd	r17, Z+1	; 0x01
    2842:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    2846:	28 2f       	mov	r18, r24
    2848:	ce 01       	movw	r24, r28
    284a:	83 58       	subi	r24, 0x83	; 131
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	fc 01       	movw	r30, r24
    2850:	e0 0f       	add	r30, r16
    2852:	f1 1f       	adc	r31, r17
    2854:	20 83       	st	Z, r18
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e2       	ldi	r26, 0x20	; 32
    285c:	b1 e4       	ldi	r27, 0x41	; 65
    285e:	8d a7       	std	Y+45, r24	; 0x2d
    2860:	9e a7       	std	Y+46, r25	; 0x2e
    2862:	af a7       	std	Y+47, r26	; 0x2f
    2864:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2866:	6d a5       	ldd	r22, Y+45	; 0x2d
    2868:	7e a5       	ldd	r23, Y+46	; 0x2e
    286a:	8f a5       	ldd	r24, Y+47	; 0x2f
    286c:	98 a9       	ldd	r25, Y+48	; 0x30
    286e:	2b ea       	ldi	r18, 0xAB	; 171
    2870:	3a ea       	ldi	r19, 0xAA	; 170
    2872:	4a ea       	ldi	r20, 0xAA	; 170
    2874:	50 e4       	ldi	r21, 0x40	; 64
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	89 a7       	std	Y+41, r24	; 0x29
    2880:	9a a7       	std	Y+42, r25	; 0x2a
    2882:	ab a7       	std	Y+43, r26	; 0x2b
    2884:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2886:	69 a5       	ldd	r22, Y+41	; 0x29
    2888:	7a a5       	ldd	r23, Y+42	; 0x2a
    288a:	8b a5       	ldd	r24, Y+43	; 0x2b
    288c:	9c a5       	ldd	r25, Y+44	; 0x2c
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	1c f4       	brge	.+6      	; 0x28a4 <BMP180_ReadCalb+0x734>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	88 a7       	std	Y+40, r24	; 0x28
    28a2:	91 c0       	rjmp	.+290    	; 0x29c6 <BMP180_ReadCalb+0x856>
	else if (__tmp > 255)
    28a4:	69 a5       	ldd	r22, Y+41	; 0x29
    28a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    28a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	53 e4       	ldi	r21, 0x43	; 67
    28b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	0c f0       	brlt	.+2      	; 0x28be <BMP180_ReadCalb+0x74e>
    28bc:	7b c0       	rjmp	.+246    	; 0x29b4 <BMP180_ReadCalb+0x844>
	{
		_delay_ms(__us / 1000.0);
    28be:	6d a5       	ldd	r22, Y+45	; 0x2d
    28c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    28c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c4:	98 a9       	ldd	r25, Y+48	; 0x30
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4a e7       	ldi	r20, 0x7A	; 122
    28cc:	54 e4       	ldi	r21, 0x44	; 68
    28ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8c a3       	std	Y+36, r24	; 0x24
    28d8:	9d a3       	std	Y+37, r25	; 0x25
    28da:	ae a3       	std	Y+38, r26	; 0x26
    28dc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6c a1       	ldd	r22, Y+36	; 0x24
    28e0:	7d a1       	ldd	r23, Y+37	; 0x25
    28e2:	8e a1       	ldd	r24, Y+38	; 0x26
    28e4:	9f a1       	ldd	r25, Y+39	; 0x27
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a e7       	ldi	r20, 0x7A	; 122
    28ec:	55 e4       	ldi	r21, 0x45	; 69
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	88 a3       	std	Y+32, r24	; 0x20
    28f8:	99 a3       	std	Y+33, r25	; 0x21
    28fa:	aa a3       	std	Y+34, r26	; 0x22
    28fc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    28fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2900:	79 a1       	ldd	r23, Y+33	; 0x21
    2902:	8a a1       	ldd	r24, Y+34	; 0x22
    2904:	9b a1       	ldd	r25, Y+35	; 0x23
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <BMP180_ReadCalb+0x7b0>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9f 8f       	std	Y+31, r25	; 0x1f
    291c:	8e 8f       	std	Y+30, r24	; 0x1e
    291e:	3f c0       	rjmp	.+126    	; 0x299e <BMP180_ReadCalb+0x82e>
	else if (__tmp > 65535)
    2920:	68 a1       	ldd	r22, Y+32	; 0x20
    2922:	79 a1       	ldd	r23, Y+33	; 0x21
    2924:	8a a1       	ldd	r24, Y+34	; 0x22
    2926:	9b a1       	ldd	r25, Y+35	; 0x23
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <BMP180_ReadCalb+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6c a1       	ldd	r22, Y+36	; 0x24
    293a:	7d a1       	ldd	r23, Y+37	; 0x25
    293c:	8e a1       	ldd	r24, Y+38	; 0x26
    293e:	9f a1       	ldd	r25, Y+39	; 0x27
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9f 8f       	std	Y+31, r25	; 0x1f
    295e:	8e 8f       	std	Y+30, r24	; 0x1e
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <BMP180_ReadCalb+0x810>
    2962:	80 e9       	ldi	r24, 0x90	; 144
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	9d 8f       	std	Y+29, r25	; 0x1d
    2968:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    296a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    296c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <BMP180_ReadCalb+0x7fe>
    2972:	9d 8f       	std	Y+29, r25	; 0x1d
    2974:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2978:	9f 8d       	ldd	r25, Y+31	; 0x1f
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9f 8f       	std	Y+31, r25	; 0x1f
    297e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2982:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <BMP180_ReadCalb+0x7f2>
    2988:	24 c0       	rjmp	.+72     	; 0x29d2 <BMP180_ReadCalb+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	68 a1       	ldd	r22, Y+32	; 0x20
    298c:	79 a1       	ldd	r23, Y+33	; 0x21
    298e:	8a a1       	ldd	r24, Y+34	; 0x22
    2990:	9b a1       	ldd	r25, Y+35	; 0x23
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9f 8f       	std	Y+31, r25	; 0x1f
    299c:	8e 8f       	std	Y+30, r24	; 0x1e
    299e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29a2:	9b 8f       	std	Y+27, r25	; 0x1b
    29a4:	8a 8f       	std	Y+26, r24	; 0x1a
    29a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <BMP180_ReadCalb+0x83a>
    29ae:	9b 8f       	std	Y+27, r25	; 0x1b
    29b0:	8a 8f       	std	Y+26, r24	; 0x1a
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <BMP180_ReadCalb+0x862>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29b4:	69 a5       	ldd	r22, Y+41	; 0x29
    29b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    29b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	88 a7       	std	Y+40, r24	; 0x28
    29c6:	88 a5       	ldd	r24, Y+40	; 0x28
    29c8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29ca:	89 8d       	ldd	r24, Y+25	; 0x19
    29cc:	8a 95       	dec	r24
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <BMP180_ReadCalb+0x85c>
    29d0:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		TWI_Stop();
    29d2:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a0 e2       	ldi	r26, 0x20	; 32
    29dc:	b1 e4       	ldi	r27, 0x41	; 65
    29de:	8d 8b       	std	Y+21, r24	; 0x15
    29e0:	9e 8b       	std	Y+22, r25	; 0x16
    29e2:	af 8b       	std	Y+23, r26	; 0x17
    29e4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29e6:	6d 89       	ldd	r22, Y+21	; 0x15
    29e8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ea:	8f 89       	ldd	r24, Y+23	; 0x17
    29ec:	98 8d       	ldd	r25, Y+24	; 0x18
    29ee:	2b ea       	ldi	r18, 0xAB	; 171
    29f0:	3a ea       	ldi	r19, 0xAA	; 170
    29f2:	4a ea       	ldi	r20, 0xAA	; 170
    29f4:	50 e4       	ldi	r21, 0x40	; 64
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	89 8b       	std	Y+17, r24	; 0x11
    2a00:	9a 8b       	std	Y+18, r25	; 0x12
    2a02:	ab 8b       	std	Y+19, r26	; 0x13
    2a04:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a06:	69 89       	ldd	r22, Y+17	; 0x11
    2a08:	7a 89       	ldd	r23, Y+18	; 0x12
    2a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	1c f4       	brge	.+6      	; 0x2a24 <BMP180_ReadCalb+0x8b4>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	88 8b       	std	Y+16, r24	; 0x10
    2a22:	91 c0       	rjmp	.+290    	; 0x2b46 <BMP180_ReadCalb+0x9d6>
	else if (__tmp > 255)
    2a24:	69 89       	ldd	r22, Y+17	; 0x11
    2a26:	7a 89       	ldd	r23, Y+18	; 0x12
    2a28:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4f e7       	ldi	r20, 0x7F	; 127
    2a32:	53 e4       	ldi	r21, 0x43	; 67
    2a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a38:	18 16       	cp	r1, r24
    2a3a:	0c f0       	brlt	.+2      	; 0x2a3e <BMP180_ReadCalb+0x8ce>
    2a3c:	7b c0       	rjmp	.+246    	; 0x2b34 <BMP180_ReadCalb+0x9c4>
	{
		_delay_ms(__us / 1000.0);
    2a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a40:	7e 89       	ldd	r23, Y+22	; 0x16
    2a42:	8f 89       	ldd	r24, Y+23	; 0x17
    2a44:	98 8d       	ldd	r25, Y+24	; 0x18
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4a e7       	ldi	r20, 0x7A	; 122
    2a4c:	54 e4       	ldi	r21, 0x44	; 68
    2a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	8c 87       	std	Y+12, r24	; 0x0c
    2a58:	9d 87       	std	Y+13, r25	; 0x0d
    2a5a:	ae 87       	std	Y+14, r26	; 0x0e
    2a5c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a60:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a62:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a64:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a e7       	ldi	r20, 0x7A	; 122
    2a6c:	55 e4       	ldi	r21, 0x45	; 69
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	88 87       	std	Y+8, r24	; 0x08
    2a78:	99 87       	std	Y+9, r25	; 0x09
    2a7a:	aa 87       	std	Y+10, r26	; 0x0a
    2a7c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a7e:	68 85       	ldd	r22, Y+8	; 0x08
    2a80:	79 85       	ldd	r23, Y+9	; 0x09
    2a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <BMP180_ReadCalb+0x930>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9f 83       	std	Y+7, r25	; 0x07
    2a9c:	8e 83       	std	Y+6, r24	; 0x06
    2a9e:	3f c0       	rjmp	.+126    	; 0x2b1e <BMP180_ReadCalb+0x9ae>
	else if (__tmp > 65535)
    2aa0:	68 85       	ldd	r22, Y+8	; 0x08
    2aa2:	79 85       	ldd	r23, Y+9	; 0x09
    2aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	4c f5       	brge	.+82     	; 0x2b0a <BMP180_ReadCalb+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aba:	7d 85       	ldd	r23, Y+13	; 0x0d
    2abc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2abe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9f 83       	std	Y+7, r25	; 0x07
    2ade:	8e 83       	std	Y+6, r24	; 0x06
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <BMP180_ReadCalb+0x990>
    2ae2:	80 e9       	ldi	r24, 0x90	; 144
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	9d 83       	std	Y+5, r25	; 0x05
    2ae8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	9d 81       	ldd	r25, Y+5	; 0x05
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <BMP180_ReadCalb+0x97e>
    2af2:	9d 83       	std	Y+5, r25	; 0x05
    2af4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	9f 81       	ldd	r25, Y+7	; 0x07
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9f 83       	std	Y+7, r25	; 0x07
    2afe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b00:	8e 81       	ldd	r24, Y+6	; 0x06
    2b02:	9f 81       	ldd	r25, Y+7	; 0x07
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <BMP180_ReadCalb+0x972>
    2b08:	24 c0       	rjmp	.+72     	; 0x2b52 <BMP180_ReadCalb+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	68 85       	ldd	r22, Y+8	; 0x08
    2b0c:	79 85       	ldd	r23, Y+9	; 0x09
    2b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9f 83       	std	Y+7, r25	; 0x07
    2b1c:	8e 83       	std	Y+6, r24	; 0x06
    2b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b20:	9f 81       	ldd	r25, Y+7	; 0x07
    2b22:	9b 83       	std	Y+3, r25	; 0x03
    2b24:	8a 83       	std	Y+2, r24	; 0x02
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <BMP180_ReadCalb+0x9ba>
    2b2e:	9b 83       	std	Y+3, r25	; 0x03
    2b30:	8a 83       	std	Y+2, r24	; 0x02
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <BMP180_ReadCalb+0x9e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b34:	69 89       	ldd	r22, Y+17	; 0x11
    2b36:	7a 89       	ldd	r23, Y+18	; 0x12
    2b38:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	88 8b       	std	Y+16, r24	; 0x10
    2b46:	88 89       	ldd	r24, Y+16	; 0x10
    2b48:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	8a 95       	dec	r24
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <BMP180_ReadCalb+0x9dc>
    2b50:	89 83       	std	Y+1, r24	; 0x01
void BMP180_ReadCalb(void) {

	uint8_t Callib_Data[22] = { 0 };
	uint16_t Callib_Start = 0xAA;

	for (int i = 0; i < 22; i++) {
    2b52:	de 01       	movw	r26, r28
    2b54:	a7 58       	subi	r26, 0x87	; 135
    2b56:	bf 4f       	sbci	r27, 0xFF	; 255
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e7 58       	subi	r30, 0x87	; 135
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	01 96       	adiw	r24, 0x01	; 1
    2b64:	11 96       	adiw	r26, 0x01	; 1
    2b66:	9c 93       	st	X, r25
    2b68:	8e 93       	st	-X, r24
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e7 58       	subi	r30, 0x87	; 135
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	91 81       	ldd	r25, Z+1	; 0x01
    2b74:	86 31       	cpi	r24, 0x16	; 22
    2b76:	91 05       	cpc	r25, r1
    2b78:	0c f4       	brge	.+2      	; 0x2b7c <BMP180_ReadCalb+0xa0c>
    2b7a:	1e cb       	rjmp	.-2500   	; 0x21b8 <BMP180_ReadCalb+0x48>
		_delay_us(10);
		TWI_Stop();
		_delay_us(10);
	}

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e3 58       	subi	r30, 0x83	; 131
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	38 2f       	mov	r19, r24
    2b8a:	22 27       	eor	r18, r18
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e3 58       	subi	r30, 0x83	; 131
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	81 81       	ldd	r24, Z+1	; 0x01
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	82 2b       	or	r24, r18
    2b9a:	93 2b       	or	r25, r19
    2b9c:	90 93 7c 01 	sts	0x017C, r25
    2ba0:	80 93 7b 01 	sts	0x017B, r24
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e3 58       	subi	r30, 0x83	; 131
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	88 2f       	mov	r24, r24
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	38 2f       	mov	r19, r24
    2bb2:	22 27       	eor	r18, r18
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e3 58       	subi	r30, 0x83	; 131
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	83 81       	ldd	r24, Z+3	; 0x03
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	82 2b       	or	r24, r18
    2bc2:	93 2b       	or	r25, r19
    2bc4:	90 93 7e 01 	sts	0x017E, r25
    2bc8:	80 93 7d 01 	sts	0x017D, r24
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e3 58       	subi	r30, 0x83	; 131
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	84 81       	ldd	r24, Z+4	; 0x04
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	38 2f       	mov	r19, r24
    2bda:	22 27       	eor	r18, r18
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e3 58       	subi	r30, 0x83	; 131
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	85 81       	ldd	r24, Z+5	; 0x05
    2be4:	88 2f       	mov	r24, r24
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	82 2b       	or	r24, r18
    2bea:	93 2b       	or	r25, r19
    2bec:	90 93 80 01 	sts	0x0180, r25
    2bf0:	80 93 7f 01 	sts	0x017F, r24
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e3 58       	subi	r30, 0x83	; 131
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	86 81       	ldd	r24, Z+6	; 0x06
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	38 2f       	mov	r19, r24
    2c02:	22 27       	eor	r18, r18
    2c04:	fe 01       	movw	r30, r28
    2c06:	e3 58       	subi	r30, 0x83	; 131
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	87 81       	ldd	r24, Z+7	; 0x07
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	82 2b       	or	r24, r18
    2c12:	93 2b       	or	r25, r19
    2c14:	90 93 8c 01 	sts	0x018C, r25
    2c18:	80 93 8b 01 	sts	0x018B, r24
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e3 58       	subi	r30, 0x83	; 131
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 85       	ldd	r24, Z+8	; 0x08
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	38 2f       	mov	r19, r24
    2c2a:	22 27       	eor	r18, r18
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e3 58       	subi	r30, 0x83	; 131
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	81 85       	ldd	r24, Z+9	; 0x09
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	82 2b       	or	r24, r18
    2c3a:	93 2b       	or	r25, r19
    2c3c:	90 93 8e 01 	sts	0x018E, r25
    2c40:	80 93 8d 01 	sts	0x018D, r24
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
    2c44:	fe 01       	movw	r30, r28
    2c46:	e3 58       	subi	r30, 0x83	; 131
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	82 85       	ldd	r24, Z+10	; 0x0a
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	38 2f       	mov	r19, r24
    2c52:	22 27       	eor	r18, r18
    2c54:	fe 01       	movw	r30, r28
    2c56:	e3 58       	subi	r30, 0x83	; 131
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	83 85       	ldd	r24, Z+11	; 0x0b
    2c5c:	88 2f       	mov	r24, r24
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	82 2b       	or	r24, r18
    2c62:	93 2b       	or	r25, r19
    2c64:	90 93 90 01 	sts	0x0190, r25
    2c68:	80 93 8f 01 	sts	0x018F, r24
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e3 58       	subi	r30, 0x83	; 131
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	84 85       	ldd	r24, Z+12	; 0x0c
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	38 2f       	mov	r19, r24
    2c7a:	22 27       	eor	r18, r18
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e3 58       	subi	r30, 0x83	; 131
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	85 85       	ldd	r24, Z+13	; 0x0d
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	82 2b       	or	r24, r18
    2c8a:	93 2b       	or	r25, r19
    2c8c:	90 93 82 01 	sts	0x0182, r25
    2c90:	80 93 81 01 	sts	0x0181, r24
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
    2c94:	fe 01       	movw	r30, r28
    2c96:	e3 58       	subi	r30, 0x83	; 131
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	86 85       	ldd	r24, Z+14	; 0x0e
    2c9c:	88 2f       	mov	r24, r24
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	38 2f       	mov	r19, r24
    2ca2:	22 27       	eor	r18, r18
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e3 58       	subi	r30, 0x83	; 131
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	87 85       	ldd	r24, Z+15	; 0x0f
    2cac:	88 2f       	mov	r24, r24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	82 2b       	or	r24, r18
    2cb2:	93 2b       	or	r25, r19
    2cb4:	90 93 84 01 	sts	0x0184, r25
    2cb8:	80 93 83 01 	sts	0x0183, r24
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e3 58       	subi	r30, 0x83	; 131
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 89       	ldd	r24, Z+16	; 0x10
    2cc4:	88 2f       	mov	r24, r24
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	38 2f       	mov	r19, r24
    2cca:	22 27       	eor	r18, r18
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e3 58       	subi	r30, 0x83	; 131
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	81 89       	ldd	r24, Z+17	; 0x11
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	82 2b       	or	r24, r18
    2cda:	93 2b       	or	r25, r19
    2cdc:	90 93 86 01 	sts	0x0186, r25
    2ce0:	80 93 85 01 	sts	0x0185, r24
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	e3 58       	subi	r30, 0x83	; 131
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	82 89       	ldd	r24, Z+18	; 0x12
    2cec:	88 2f       	mov	r24, r24
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	38 2f       	mov	r19, r24
    2cf2:	22 27       	eor	r18, r18
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e3 58       	subi	r30, 0x83	; 131
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	83 89       	ldd	r24, Z+19	; 0x13
    2cfc:	88 2f       	mov	r24, r24
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	82 2b       	or	r24, r18
    2d02:	93 2b       	or	r25, r19
    2d04:	90 93 88 01 	sts	0x0188, r25
    2d08:	80 93 87 01 	sts	0x0187, r24
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e3 58       	subi	r30, 0x83	; 131
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	84 89       	ldd	r24, Z+20	; 0x14
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	38 2f       	mov	r19, r24
    2d1a:	22 27       	eor	r18, r18
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e3 58       	subi	r30, 0x83	; 131
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	85 89       	ldd	r24, Z+21	; 0x15
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	82 2b       	or	r24, r18
    2d2a:	93 2b       	or	r25, r19
    2d2c:	90 93 8a 01 	sts	0x018A, r25
    2d30:	80 93 89 01 	sts	0x0189, r24

}
    2d34:	ce 56       	subi	r28, 0x6E	; 110
    2d36:	df 4f       	sbci	r29, 0xFF	; 255
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	08 95       	ret

00002d4c <Get_UP>:

uint32 Get_UP(void) {
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	66 97       	sbiw	r28, 0x16	; 22
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
	// calculate the value to write to the BMP180 control register based on the oversampling setting
	uint8 datatowrite = 0x34 + (OSS << 6);
    2d60:	84 e3       	ldi	r24, 0x34	; 52
    2d62:	8b 8b       	std	Y+19, r24	; 0x13
	// array to store the raw pressure data
	uint8 Pressure_RAW[3] = { 0 };
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	fe 01       	movw	r30, r28
    2d68:	74 96       	adiw	r30, 0x14	; 20
    2d6a:	df 01       	movw	r26, r30
    2d6c:	98 2f       	mov	r25, r24
    2d6e:	1d 92       	st	X+, r1
    2d70:	9a 95       	dec	r25
    2d72:	e9 f7       	brne	.-6      	; 0x2d6e <Get_UP+0x22>

	uint32 data = 0;
    2d74:	1f 86       	std	Y+15, r1	; 0x0f
    2d76:	18 8a       	std	Y+16, r1	; 0x10
    2d78:	19 8a       	std	Y+17, r1	; 0x11
    2d7a:	1a 8a       	std	Y+18, r1	; 0x12

	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    2d7c:	8e ee       	ldi	r24, 0xEE	; 238
    2d7e:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    2d82:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// send the address of the BMP180 control register to initiate the pressure measurement
	TWI_WriteByte(0xF4);
    2d86:	84 ef       	ldi	r24, 0xF4	; 244
    2d88:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    2d8c:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// send the value calculated above to start the measurement with the selected oversampling setting
	TWI_WriteByte(datatowrite);
    2d90:	8b 89       	ldd	r24, Y+19	; 0x13
    2d92:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    2d96:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    2d9a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 ea       	ldi	r26, 0xA0	; 160
    2da4:	b0 e4       	ldi	r27, 0x40	; 64
    2da6:	8b 87       	std	Y+11, r24	; 0x0b
    2da8:	9c 87       	std	Y+12, r25	; 0x0c
    2daa:	ad 87       	std	Y+13, r26	; 0x0d
    2dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4a e7       	ldi	r20, 0x7A	; 122
    2dbc:	55 e4       	ldi	r21, 0x45	; 69
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	8f 83       	std	Y+7, r24	; 0x07
    2dc8:	98 87       	std	Y+8, r25	; 0x08
    2dca:	a9 87       	std	Y+9, r26	; 0x09
    2dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dce:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd0:	78 85       	ldd	r23, Y+8	; 0x08
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <Get_UP+0xa4>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	3f c0       	rjmp	.+126    	; 0x2e6e <Get_UP+0x122>
	else if (__tmp > 65535)
    2df0:	6f 81       	ldd	r22, Y+7	; 0x07
    2df2:	78 85       	ldd	r23, Y+8	; 0x08
    2df4:	89 85       	ldd	r24, Y+9	; 0x09
    2df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	3f ef       	ldi	r19, 0xFF	; 255
    2dfc:	4f e7       	ldi	r20, 0x7F	; 127
    2dfe:	57 e4       	ldi	r21, 0x47	; 71
    2e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e04:	18 16       	cp	r1, r24
    2e06:	4c f5       	brge	.+82     	; 0x2e5a <Get_UP+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e2       	ldi	r20, 0x20	; 32
    2e16:	51 e4       	ldi	r21, 0x41	; 65
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	0f c0       	rjmp	.+30     	; 0x2e50 <Get_UP+0x104>
    2e32:	80 e9       	ldi	r24, 0x90	; 144
    2e34:	91 e0       	ldi	r25, 0x01	; 1
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <Get_UP+0xf2>
    2e42:	9c 83       	std	Y+4, r25	; 0x04
    2e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e50:	8d 81       	ldd	r24, Y+5	; 0x05
    2e52:	9e 81       	ldd	r25, Y+6	; 0x06
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <Get_UP+0xe6>
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <Get_UP+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5c:	78 85       	ldd	r23, Y+8	; 0x08
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e 83       	std	Y+6, r25	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <Get_UP+0x12e>
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01



	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    2e82:	8e ee       	ldi	r24, 0xEE	; 238
    2e84:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    2e88:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_WriteByte(0xF6);
    2e8c:	86 ef       	ldi	r24, 0xF6	; 246
    2e8e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    2e92:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    2e96:	8f ee       	ldi	r24, 0xEF	; 239
    2e98:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    2e9c:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	Pressure_RAW[0] = TWI_ReadByteWithNACK();
    2ea0:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    2ea4:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    2ea6:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Stop();
    2eaa:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    2eae:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    2eb2:	8e ee       	ldi	r24, 0xEE	; 238
    2eb4:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    2eb8:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_WriteByte(0xF7);
    2ebc:	87 ef       	ldi	r24, 0xF7	; 247
    2ebe:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    2ec2:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    2ec6:	8f ee       	ldi	r24, 0xEF	; 239
    2ec8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    2ecc:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	Pressure_RAW[1] = TWI_ReadByteWithNACK();
    2ed0:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    2ed4:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    2ed6:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Stop();
    2eda:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    2ede:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// read the LSB of the raw pressure data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    2ee2:	8e ee       	ldi	r24, 0xEE	; 238
    2ee4:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    2ee8:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_WriteByte(0xF8);
    2eec:	88 ef       	ldi	r24, 0xF8	; 248
    2eee:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    2ef2:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    2ef6:	8f ee       	ldi	r24, 0xEF	; 239
    2ef8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    2efc:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	Pressure_RAW[2] = TWI_ReadByteWithNACK();
    2f00:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    2f04:	8e 8b       	std	Y+22, r24	; 0x16
	delay();
    2f06:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Stop();
    2f0a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	// combine the raw pressure data into a single 24-bit value and shift it right to adjust for the oversampling setting

	data |= ((uint32_t) Pressure_RAW[0] << 16);
    2f0e:	8c 89       	ldd	r24, Y+20	; 0x14
    2f10:	88 2f       	mov	r24, r24
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 e0       	ldi	r26, 0x00	; 0
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	ac 01       	movw	r20, r24
    2f1a:	33 27       	eor	r19, r19
    2f1c:	22 27       	eor	r18, r18
    2f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f20:	98 89       	ldd	r25, Y+16	; 0x10
    2f22:	a9 89       	ldd	r26, Y+17	; 0x11
    2f24:	ba 89       	ldd	r27, Y+18	; 0x12
    2f26:	82 2b       	or	r24, r18
    2f28:	93 2b       	or	r25, r19
    2f2a:	a4 2b       	or	r26, r20
    2f2c:	b5 2b       	or	r27, r21
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f
    2f30:	98 8b       	std	Y+16, r25	; 0x10
    2f32:	a9 8b       	std	Y+17, r26	; 0x11
    2f34:	ba 8b       	std	Y+18, r27	; 0x12
	data |= ((uint32_t) Pressure_RAW[1] << 8);
    2f36:	8d 89       	ldd	r24, Y+21	; 0x15
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e0       	ldi	r26, 0x00	; 0
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	22 27       	eor	r18, r18
    2f42:	38 2f       	mov	r19, r24
    2f44:	49 2f       	mov	r20, r25
    2f46:	5a 2f       	mov	r21, r26
    2f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4a:	98 89       	ldd	r25, Y+16	; 0x10
    2f4c:	a9 89       	ldd	r26, Y+17	; 0x11
    2f4e:	ba 89       	ldd	r27, Y+18	; 0x12
    2f50:	82 2b       	or	r24, r18
    2f52:	93 2b       	or	r25, r19
    2f54:	a4 2b       	or	r26, r20
    2f56:	b5 2b       	or	r27, r21
    2f58:	8f 87       	std	Y+15, r24	; 0x0f
    2f5a:	98 8b       	std	Y+16, r25	; 0x10
    2f5c:	a9 8b       	std	Y+17, r26	; 0x11
    2f5e:	ba 8b       	std	Y+18, r27	; 0x12
	data |= (uint32_t) Pressure_RAW[2];
    2f60:	8e 89       	ldd	r24, Y+22	; 0x16
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6c:	98 89       	ldd	r25, Y+16	; 0x10
    2f6e:	a9 89       	ldd	r26, Y+17	; 0x11
    2f70:	ba 89       	ldd	r27, Y+18	; 0x12
    2f72:	82 2b       	or	r24, r18
    2f74:	93 2b       	or	r25, r19
    2f76:	a4 2b       	or	r26, r20
    2f78:	b5 2b       	or	r27, r21
    2f7a:	8f 87       	std	Y+15, r24	; 0x0f
    2f7c:	98 8b       	std	Y+16, r25	; 0x10
    2f7e:	a9 8b       	std	Y+17, r26	; 0x11
    2f80:	ba 8b       	std	Y+18, r27	; 0x12
	data = data >> (8 - OSS);
    2f82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f84:	98 89       	ldd	r25, Y+16	; 0x10
    2f86:	a9 89       	ldd	r26, Y+17	; 0x11
    2f88:	ba 89       	ldd	r27, Y+18	; 0x12
    2f8a:	89 2f       	mov	r24, r25
    2f8c:	9a 2f       	mov	r25, r26
    2f8e:	ab 2f       	mov	r26, r27
    2f90:	bb 27       	eor	r27, r27
    2f92:	8f 87       	std	Y+15, r24	; 0x0f
    2f94:	98 8b       	std	Y+16, r25	; 0x10
    2f96:	a9 8b       	std	Y+17, r26	; 0x11
    2f98:	ba 8b       	std	Y+18, r27	; 0x12
	//division by 2 power (8-oss which is in datasheet (0,1))

	return data;
    2f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f9c:	98 89       	ldd	r25, Y+16	; 0x10
    2f9e:	a9 89       	ldd	r26, Y+17	; 0x11
    2fa0:	ba 89       	ldd	r27, Y+18	; 0x12
}
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	cd 01       	movw	r24, r26
    2fa6:	66 96       	adiw	r28, 0x16	; 22
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	08 95       	ret

00002fb8 <Get_UT>:

uint32 Get_UT(void) {
    2fb8:	df 93       	push	r29
    2fba:	cf 93       	push	r28
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	65 97       	sbiw	r28, 0x15	; 21
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
	uint32 data = 0;
    2fcc:	18 8a       	std	Y+16, r1	; 0x10
    2fce:	19 8a       	std	Y+17, r1	; 0x11
    2fd0:	1a 8a       	std	Y+18, r1	; 0x12
    2fd2:	1b 8a       	std	Y+19, r1	; 0x13

	uint8 datatowrite = 0x2E;
    2fd4:	8e e2       	ldi	r24, 0x2E	; 46
    2fd6:	8f 87       	std	Y+15, r24	; 0x0f
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = { 0 };
    2fd8:	1d 8a       	std	Y+21, r1	; 0x15
    2fda:	1c 8a       	std	Y+20, r1	; 0x14
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    2fdc:	8e ee       	ldi	r24, 0xEE	; 238
    2fde:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    2fe2:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    2fe6:	84 ef       	ldi	r24, 0xF4	; 244
    2fe8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    2fec:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// send the value calculated above to start the measurement
	TWI_WriteByte(datatowrite);
    2ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    2ff6:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    2ffa:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a0 ea       	ldi	r26, 0xA0	; 160
    3004:	b0 e4       	ldi	r27, 0x40	; 64
    3006:	8b 87       	std	Y+11, r24	; 0x0b
    3008:	9c 87       	std	Y+12, r25	; 0x0c
    300a:	ad 87       	std	Y+13, r26	; 0x0d
    300c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3010:	7c 85       	ldd	r23, Y+12	; 0x0c
    3012:	8d 85       	ldd	r24, Y+13	; 0x0d
    3014:	9e 85       	ldd	r25, Y+14	; 0x0e
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	4a e7       	ldi	r20, 0x7A	; 122
    301c:	55 e4       	ldi	r21, 0x45	; 69
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	8f 83       	std	Y+7, r24	; 0x07
    3028:	98 87       	std	Y+8, r25	; 0x08
    302a:	a9 87       	std	Y+9, r26	; 0x09
    302c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    302e:	6f 81       	ldd	r22, Y+7	; 0x07
    3030:	78 85       	ldd	r23, Y+8	; 0x08
    3032:	89 85       	ldd	r24, Y+9	; 0x09
    3034:	9a 85       	ldd	r25, Y+10	; 0x0a
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e8       	ldi	r20, 0x80	; 128
    303c:	5f e3       	ldi	r21, 0x3F	; 63
    303e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3042:	88 23       	and	r24, r24
    3044:	2c f4       	brge	.+10     	; 0x3050 <Get_UT+0x98>
		__ticks = 1;
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
    304e:	3f c0       	rjmp	.+126    	; 0x30ce <Get_UT+0x116>
	else if (__tmp > 65535)
    3050:	6f 81       	ldd	r22, Y+7	; 0x07
    3052:	78 85       	ldd	r23, Y+8	; 0x08
    3054:	89 85       	ldd	r24, Y+9	; 0x09
    3056:	9a 85       	ldd	r25, Y+10	; 0x0a
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	3f ef       	ldi	r19, 0xFF	; 255
    305c:	4f e7       	ldi	r20, 0x7F	; 127
    305e:	57 e4       	ldi	r21, 0x47	; 71
    3060:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3064:	18 16       	cp	r1, r24
    3066:	4c f5       	brge	.+82     	; 0x30ba <Get_UT+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3068:	6b 85       	ldd	r22, Y+11	; 0x0b
    306a:	7c 85       	ldd	r23, Y+12	; 0x0c
    306c:	8d 85       	ldd	r24, Y+13	; 0x0d
    306e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e2       	ldi	r20, 0x20	; 32
    3076:	51 e4       	ldi	r21, 0x41	; 65
    3078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	bc 01       	movw	r22, r24
    3082:	cd 01       	movw	r24, r26
    3084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
    3090:	0f c0       	rjmp	.+30     	; 0x30b0 <Get_UT+0xf8>
    3092:	80 e9       	ldi	r24, 0x90	; 144
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	9c 83       	std	Y+4, r25	; 0x04
    3098:	8b 83       	std	Y+3, r24	; 0x03
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	f1 f7       	brne	.-4      	; 0x309e <Get_UT+0xe6>
    30a2:	9c 83       	std	Y+4, r25	; 0x04
    30a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
    30a8:	9e 81       	ldd	r25, Y+6	; 0x06
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	9e 83       	std	Y+6, r25	; 0x06
    30ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b0:	8d 81       	ldd	r24, Y+5	; 0x05
    30b2:	9e 81       	ldd	r25, Y+6	; 0x06
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	69 f7       	brne	.-38     	; 0x3092 <Get_UT+0xda>
    30b8:	14 c0       	rjmp	.+40     	; 0x30e2 <Get_UT+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ba:	6f 81       	ldd	r22, Y+7	; 0x07
    30bc:	78 85       	ldd	r23, Y+8	; 0x08
    30be:	89 85       	ldd	r24, Y+9	; 0x09
    30c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	9e 83       	std	Y+6, r25	; 0x06
    30cc:	8d 83       	std	Y+5, r24	; 0x05
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	9a 83       	std	Y+2, r25	; 0x02
    30d4:	89 83       	std	Y+1, r24	; 0x01
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	f1 f7       	brne	.-4      	; 0x30da <Get_UT+0x122>
    30de:	9a 83       	std	Y+2, r25	; 0x02
    30e0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw temperature data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    30e2:	8e ee       	ldi	r24, 0xEE	; 238
    30e4:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    30e8:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_WriteByte(0xF6);
    30ec:	86 ef       	ldi	r24, 0xF6	; 246
    30ee:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    30f2:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    30f6:	8f ee       	ldi	r24, 0xEF	; 239
    30f8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    30fc:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	Temperature_RAW[0] = TWI_ReadByteWithNACK();
    3100:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3104:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    3106:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Stop();
    310a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    310e:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	// read the LSB of the raw temperature data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3112:	8e ee       	ldi	r24, 0xEE	; 238
    3114:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3118:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_WriteByte(0xF7);
    311c:	87 ef       	ldi	r24, 0xF7	; 247
    311e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3122:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3126:	8f ee       	ldi	r24, 0xEF	; 239
    3128:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    312c:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	Temperature_RAW[1] = TWI_ReadByteWithNACK();
    3130:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3134:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    3136:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <delay>
	TWI_Stop();
    313a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	data |= ((uint32_t) Temperature_RAW[0] << 8);
    313e:	8c 89       	ldd	r24, Y+20	; 0x14
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a0 e0       	ldi	r26, 0x00	; 0
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	22 27       	eor	r18, r18
    314a:	38 2f       	mov	r19, r24
    314c:	49 2f       	mov	r20, r25
    314e:	5a 2f       	mov	r21, r26
    3150:	88 89       	ldd	r24, Y+16	; 0x10
    3152:	99 89       	ldd	r25, Y+17	; 0x11
    3154:	aa 89       	ldd	r26, Y+18	; 0x12
    3156:	bb 89       	ldd	r27, Y+19	; 0x13
    3158:	82 2b       	or	r24, r18
    315a:	93 2b       	or	r25, r19
    315c:	a4 2b       	or	r26, r20
    315e:	b5 2b       	or	r27, r21
    3160:	88 8b       	std	Y+16, r24	; 0x10
    3162:	99 8b       	std	Y+17, r25	; 0x11
    3164:	aa 8b       	std	Y+18, r26	; 0x12
    3166:	bb 8b       	std	Y+19, r27	; 0x13
	data |= (uint32_t) Temperature_RAW[1];
    3168:	8d 89       	ldd	r24, Y+21	; 0x15
    316a:	28 2f       	mov	r18, r24
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	88 89       	ldd	r24, Y+16	; 0x10
    3174:	99 89       	ldd	r25, Y+17	; 0x11
    3176:	aa 89       	ldd	r26, Y+18	; 0x12
    3178:	bb 89       	ldd	r27, Y+19	; 0x13
    317a:	82 2b       	or	r24, r18
    317c:	93 2b       	or	r25, r19
    317e:	a4 2b       	or	r26, r20
    3180:	b5 2b       	or	r27, r21
    3182:	88 8b       	std	Y+16, r24	; 0x10
    3184:	99 8b       	std	Y+17, r25	; 0x11
    3186:	aa 8b       	std	Y+18, r26	; 0x12
    3188:	bb 8b       	std	Y+19, r27	; 0x13
	return data;
    318a:	88 89       	ldd	r24, Y+16	; 0x10
    318c:	99 89       	ldd	r25, Y+17	; 0x11
    318e:	aa 89       	ldd	r26, Y+18	; 0x12
    3190:	bb 89       	ldd	r27, Y+19	; 0x13
}
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	65 96       	adiw	r28, 0x15	; 21
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <BMP180_calculateTemperature>:

sint32 BMP180_calculateTemperature(void) {
    31a8:	ef 92       	push	r14
    31aa:	ff 92       	push	r15
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <BMP180_calculateTemperature+0xe>
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <BMP180_calculateTemperature+0x10>
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62

	float32 temperature = 0;
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	9a 83       	std	Y+2, r25	; 0x02
    31c8:	ab 83       	std	Y+3, r26	; 0x03
    31ca:	bc 83       	std	Y+4, r27	; 0x04

	UT = Get_UT();
    31cc:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <Get_UT>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	80 93 9d 01 	sts	0x019D, r24
    31d8:	90 93 9e 01 	sts	0x019E, r25
    31dc:	a0 93 9f 01 	sts	0x019F, r26
    31e0:	b0 93 a0 01 	sts	0x01A0, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    31e4:	20 91 9d 01 	lds	r18, 0x019D
    31e8:	30 91 9e 01 	lds	r19, 0x019E
    31ec:	40 91 9f 01 	lds	r20, 0x019F
    31f0:	50 91 a0 01 	lds	r21, 0x01A0
    31f4:	80 91 8f 01 	lds	r24, 0x018F
    31f8:	90 91 90 01 	lds	r25, 0x0190
    31fc:	cc 01       	movw	r24, r24
    31fe:	a0 e0       	ldi	r26, 0x00	; 0
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	79 01       	movw	r14, r18
    3204:	8a 01       	movw	r16, r20
    3206:	e8 1a       	sub	r14, r24
    3208:	f9 0a       	sbc	r15, r25
    320a:	0a 0b       	sbc	r16, r26
    320c:	1b 0b       	sbc	r17, r27
    320e:	d8 01       	movw	r26, r16
    3210:	c7 01       	movw	r24, r14
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    321a:	7b 01       	movw	r14, r22
    321c:	8c 01       	movw	r16, r24
    321e:	80 91 8d 01 	lds	r24, 0x018D
    3222:	90 91 8e 01 	lds	r25, 0x018E
    3226:	cc 01       	movw	r24, r24
    3228:	a0 e0       	ldi	r26, 0x00	; 0
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	57 e4       	ldi	r21, 0x47	; 71
    3244:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	9c 01       	movw	r18, r24
    324e:	ad 01       	movw	r20, r26
    3250:	c8 01       	movw	r24, r16
    3252:	b7 01       	movw	r22, r14
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	80 93 91 01 	sts	0x0191, r24
    326c:	90 93 92 01 	sts	0x0192, r25
    3270:	a0 93 93 01 	sts	0x0193, r26
    3274:	b0 93 94 01 	sts	0x0194, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    3278:	80 91 87 01 	lds	r24, 0x0187
    327c:	90 91 88 01 	lds	r25, 0x0188
    3280:	aa 27       	eor	r26, r26
    3282:	97 fd       	sbrc	r25, 7
    3284:	a0 95       	com	r26
    3286:	ba 2f       	mov	r27, r26
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e0       	ldi	r20, 0x00	; 0
    329e:	55 e4       	ldi	r21, 0x45	; 69
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	7c 01       	movw	r14, r24
    32aa:	8d 01       	movw	r16, r26
    32ac:	80 91 89 01 	lds	r24, 0x0189
    32b0:	90 91 8a 01 	lds	r25, 0x018A
    32b4:	9c 01       	movw	r18, r24
    32b6:	44 27       	eor	r20, r20
    32b8:	37 fd       	sbrc	r19, 7
    32ba:	40 95       	com	r20
    32bc:	54 2f       	mov	r21, r20
    32be:	80 91 91 01 	lds	r24, 0x0191
    32c2:	90 91 92 01 	lds	r25, 0x0192
    32c6:	a0 91 93 01 	lds	r26, 0x0193
    32ca:	b0 91 94 01 	lds	r27, 0x0194
    32ce:	82 0f       	add	r24, r18
    32d0:	93 1f       	adc	r25, r19
    32d2:	a4 1f       	adc	r26, r20
    32d4:	b5 1f       	adc	r27, r21
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    32de:	9b 01       	movw	r18, r22
    32e0:	ac 01       	movw	r20, r24
    32e2:	c8 01       	movw	r24, r16
    32e4:	b7 01       	movw	r22, r14
    32e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	bc 01       	movw	r22, r24
    32f0:	cd 01       	movw	r24, r26
    32f2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	80 93 95 01 	sts	0x0195, r24
    32fe:	90 93 96 01 	sts	0x0196, r25
    3302:	a0 93 97 01 	sts	0x0197, r26
    3306:	b0 93 98 01 	sts	0x0198, r27
       	B5 = X1 + X2;
    330a:	20 91 91 01 	lds	r18, 0x0191
    330e:	30 91 92 01 	lds	r19, 0x0192
    3312:	40 91 93 01 	lds	r20, 0x0193
    3316:	50 91 94 01 	lds	r21, 0x0194
    331a:	80 91 95 01 	lds	r24, 0x0195
    331e:	90 91 96 01 	lds	r25, 0x0196
    3322:	a0 91 97 01 	lds	r26, 0x0197
    3326:	b0 91 98 01 	lds	r27, 0x0198
    332a:	82 0f       	add	r24, r18
    332c:	93 1f       	adc	r25, r19
    332e:	a4 1f       	adc	r26, r20
    3330:	b5 1f       	adc	r27, r21
    3332:	80 93 99 01 	sts	0x0199, r24
    3336:	90 93 9a 01 	sts	0x019A, r25
    333a:	a0 93 9b 01 	sts	0x019B, r26
    333e:	b0 93 9c 01 	sts	0x019C, r27
	temperature = (B5 + 8) / (pow(2, 4));
    3342:	80 91 99 01 	lds	r24, 0x0199
    3346:	90 91 9a 01 	lds	r25, 0x019A
    334a:	a0 91 9b 01 	lds	r26, 0x019B
    334e:	b0 91 9c 01 	lds	r27, 0x019C
    3352:	08 96       	adiw	r24, 0x08	; 8
    3354:	a1 1d       	adc	r26, r1
    3356:	b1 1d       	adc	r27, r1
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	bc 01       	movw	r22, r24
    3366:	cd 01       	movw	r24, r26
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	89 83       	std	Y+1, r24	; 0x01
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	ab 83       	std	Y+3, r26	; 0x03
    337e:	bc 83       	std	Y+4, r27	; 0x04
	return temperature / 10.0;
    3380:	69 81       	ldd	r22, Y+1	; 0x01
    3382:	7a 81       	ldd	r23, Y+2	; 0x02
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e2       	ldi	r20, 0x20	; 32
    338e:	51 e4       	ldi	r21, 0x41	; 65
    3390:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	bc 01       	movw	r22, r24
    339a:	cd 01       	movw	r24, r26
    339c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
}
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	ff 90       	pop	r15
    33ba:	ef 90       	pop	r14
    33bc:	08 95       	ret

000033be <BMP180_calculatePressure>:

sint32 BMP180_calculatePressure(void) {
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
	UP = Get_UP();
    33ce:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <Get_UP>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	80 93 b1 01 	sts	0x01B1, r24
    33da:	90 93 b2 01 	sts	0x01B2, r25
    33de:	a0 93 b3 01 	sts	0x01B3, r26
    33e2:	b0 93 b4 01 	sts	0x01B4, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    33e6:	20 91 9d 01 	lds	r18, 0x019D
    33ea:	30 91 9e 01 	lds	r19, 0x019E
    33ee:	40 91 9f 01 	lds	r20, 0x019F
    33f2:	50 91 a0 01 	lds	r21, 0x01A0
    33f6:	80 91 8f 01 	lds	r24, 0x018F
    33fa:	90 91 90 01 	lds	r25, 0x0190
    33fe:	cc 01       	movw	r24, r24
    3400:	a0 e0       	ldi	r26, 0x00	; 0
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	79 01       	movw	r14, r18
    3406:	8a 01       	movw	r16, r20
    3408:	e8 1a       	sub	r14, r24
    340a:	f9 0a       	sbc	r15, r25
    340c:	0a 0b       	sbc	r16, r26
    340e:	1b 0b       	sbc	r17, r27
    3410:	d8 01       	movw	r26, r16
    3412:	c7 01       	movw	r24, r14
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    341c:	7b 01       	movw	r14, r22
    341e:	8c 01       	movw	r16, r24
    3420:	80 91 8d 01 	lds	r24, 0x018D
    3424:	90 91 8e 01 	lds	r25, 0x018E
    3428:	cc 01       	movw	r24, r24
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	bc 01       	movw	r22, r24
    343c:	cd 01       	movw	r24, r26
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e0       	ldi	r20, 0x00	; 0
    3444:	57 e4       	ldi	r21, 0x47	; 71
    3446:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9c 01       	movw	r18, r24
    3450:	ad 01       	movw	r20, r26
    3452:	c8 01       	movw	r24, r16
    3454:	b7 01       	movw	r22, r14
    3456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	80 93 91 01 	sts	0x0191, r24
    346e:	90 93 92 01 	sts	0x0192, r25
    3472:	a0 93 93 01 	sts	0x0193, r26
    3476:	b0 93 94 01 	sts	0x0194, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    347a:	80 91 87 01 	lds	r24, 0x0187
    347e:	90 91 88 01 	lds	r25, 0x0188
    3482:	aa 27       	eor	r26, r26
    3484:	97 fd       	sbrc	r25, 7
    3486:	a0 95       	com	r26
    3488:	ba 2f       	mov	r27, r26
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	55 e4       	ldi	r21, 0x45	; 69
    34a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	7c 01       	movw	r14, r24
    34ac:	8d 01       	movw	r16, r26
    34ae:	80 91 89 01 	lds	r24, 0x0189
    34b2:	90 91 8a 01 	lds	r25, 0x018A
    34b6:	9c 01       	movw	r18, r24
    34b8:	44 27       	eor	r20, r20
    34ba:	37 fd       	sbrc	r19, 7
    34bc:	40 95       	com	r20
    34be:	54 2f       	mov	r21, r20
    34c0:	80 91 91 01 	lds	r24, 0x0191
    34c4:	90 91 92 01 	lds	r25, 0x0192
    34c8:	a0 91 93 01 	lds	r26, 0x0193
    34cc:	b0 91 94 01 	lds	r27, 0x0194
    34d0:	82 0f       	add	r24, r18
    34d2:	93 1f       	adc	r25, r19
    34d4:	a4 1f       	adc	r26, r20
    34d6:	b5 1f       	adc	r27, r21
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    34e0:	9b 01       	movw	r18, r22
    34e2:	ac 01       	movw	r20, r24
    34e4:	c8 01       	movw	r24, r16
    34e6:	b7 01       	movw	r22, r14
    34e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	80 93 95 01 	sts	0x0195, r24
    3500:	90 93 96 01 	sts	0x0196, r25
    3504:	a0 93 97 01 	sts	0x0197, r26
    3508:	b0 93 98 01 	sts	0x0198, r27
	B5 = X1 + X2;
    350c:	20 91 91 01 	lds	r18, 0x0191
    3510:	30 91 92 01 	lds	r19, 0x0192
    3514:	40 91 93 01 	lds	r20, 0x0193
    3518:	50 91 94 01 	lds	r21, 0x0194
    351c:	80 91 95 01 	lds	r24, 0x0195
    3520:	90 91 96 01 	lds	r25, 0x0196
    3524:	a0 91 97 01 	lds	r26, 0x0197
    3528:	b0 91 98 01 	lds	r27, 0x0198
    352c:	82 0f       	add	r24, r18
    352e:	93 1f       	adc	r25, r19
    3530:	a4 1f       	adc	r26, r20
    3532:	b5 1f       	adc	r27, r21
    3534:	80 93 99 01 	sts	0x0199, r24
    3538:	90 93 9a 01 	sts	0x019A, r25
    353c:	a0 93 9b 01 	sts	0x019B, r26
    3540:	b0 93 9c 01 	sts	0x019C, r27
	B6 = B5 - 4000;
    3544:	80 91 99 01 	lds	r24, 0x0199
    3548:	90 91 9a 01 	lds	r25, 0x019A
    354c:	a0 91 9b 01 	lds	r26, 0x019B
    3550:	b0 91 9c 01 	lds	r27, 0x019C
    3554:	80 5a       	subi	r24, 0xA0	; 160
    3556:	9f 40       	sbci	r25, 0x0F	; 15
    3558:	a0 40       	sbci	r26, 0x00	; 0
    355a:	b0 40       	sbci	r27, 0x00	; 0
    355c:	80 93 a9 01 	sts	0x01A9, r24
    3560:	90 93 aa 01 	sts	0x01AA, r25
    3564:	a0 93 ab 01 	sts	0x01AB, r26
    3568:	b0 93 ac 01 	sts	0x01AC, r27
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
    356c:	80 91 83 01 	lds	r24, 0x0183
    3570:	90 91 84 01 	lds	r25, 0x0184
    3574:	aa 27       	eor	r26, r26
    3576:	97 fd       	sbrc	r25, 7
    3578:	a0 95       	com	r26
    357a:	ba 2f       	mov	r27, r26
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3584:	7b 01       	movw	r14, r22
    3586:	8c 01       	movw	r16, r24
    3588:	80 91 a9 01 	lds	r24, 0x01A9
    358c:	90 91 aa 01 	lds	r25, 0x01AA
    3590:	a0 91 ab 01 	lds	r26, 0x01AB
    3594:	b0 91 ac 01 	lds	r27, 0x01AC
    3598:	20 91 a9 01 	lds	r18, 0x01A9
    359c:	30 91 aa 01 	lds	r19, 0x01AA
    35a0:	40 91 ab 01 	lds	r20, 0x01AB
    35a4:	50 91 ac 01 	lds	r21, 0x01AC
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	bc 01       	movw	r22, r24
    35b6:	cd 01       	movw	r24, r26
    35b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	bc 01       	movw	r22, r24
    35c2:	cd 01       	movw	r24, r26
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	55 e4       	ldi	r21, 0x45	; 69
    35cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9c 01       	movw	r18, r24
    35d6:	ad 01       	movw	r20, r26
    35d8:	c8 01       	movw	r24, r16
    35da:	b7 01       	movw	r22, r14
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	55 e4       	ldi	r21, 0x45	; 69
    35f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35f4:	dc 01       	movw	r26, r24
    35f6:	cb 01       	movw	r24, r22
    35f8:	bc 01       	movw	r22, r24
    35fa:	cd 01       	movw	r24, r26
    35fc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	80 93 91 01 	sts	0x0191, r24
    3608:	90 93 92 01 	sts	0x0192, r25
    360c:	a0 93 93 01 	sts	0x0193, r26
    3610:	b0 93 94 01 	sts	0x0194, r27
	X2 = AC2 * B6 / (pow(2, 11));
    3614:	80 91 7d 01 	lds	r24, 0x017D
    3618:	90 91 7e 01 	lds	r25, 0x017E
    361c:	aa 27       	eor	r26, r26
    361e:	97 fd       	sbrc	r25, 7
    3620:	a0 95       	com	r26
    3622:	ba 2f       	mov	r27, r26
    3624:	20 91 a9 01 	lds	r18, 0x01A9
    3628:	30 91 aa 01 	lds	r19, 0x01AA
    362c:	40 91 ab 01 	lds	r20, 0x01AB
    3630:	50 91 ac 01 	lds	r21, 0x01AC
    3634:	bc 01       	movw	r22, r24
    3636:	cd 01       	movw	r24, r26
    3638:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	bc 01       	movw	r22, r24
    3642:	cd 01       	movw	r24, r26
    3644:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	bc 01       	movw	r22, r24
    364e:	cd 01       	movw	r24, r26
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e0       	ldi	r20, 0x00	; 0
    3656:	55 e4       	ldi	r21, 0x45	; 69
    3658:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	bc 01       	movw	r22, r24
    3662:	cd 01       	movw	r24, r26
    3664:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	80 93 95 01 	sts	0x0195, r24
    3670:	90 93 96 01 	sts	0x0196, r25
    3674:	a0 93 97 01 	sts	0x0197, r26
    3678:	b0 93 98 01 	sts	0x0198, r27
	X3 = X1 + X2;
    367c:	20 91 91 01 	lds	r18, 0x0191
    3680:	30 91 92 01 	lds	r19, 0x0192
    3684:	40 91 93 01 	lds	r20, 0x0193
    3688:	50 91 94 01 	lds	r21, 0x0194
    368c:	80 91 95 01 	lds	r24, 0x0195
    3690:	90 91 96 01 	lds	r25, 0x0196
    3694:	a0 91 97 01 	lds	r26, 0x0197
    3698:	b0 91 98 01 	lds	r27, 0x0198
    369c:	82 0f       	add	r24, r18
    369e:	93 1f       	adc	r25, r19
    36a0:	a4 1f       	adc	r26, r20
    36a2:	b5 1f       	adc	r27, r21
    36a4:	80 93 a1 01 	sts	0x01A1, r24
    36a8:	90 93 a2 01 	sts	0x01A2, r25
    36ac:	a0 93 a3 01 	sts	0x01A3, r26
    36b0:	b0 93 a4 01 	sts	0x01A4, r27
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
    36b4:	80 91 7b 01 	lds	r24, 0x017B
    36b8:	90 91 7c 01 	lds	r25, 0x017C
    36bc:	88 0f       	add	r24, r24
    36be:	99 1f       	adc	r25, r25
    36c0:	88 0f       	add	r24, r24
    36c2:	99 1f       	adc	r25, r25
    36c4:	9c 01       	movw	r18, r24
    36c6:	44 27       	eor	r20, r20
    36c8:	37 fd       	sbrc	r19, 7
    36ca:	40 95       	com	r20
    36cc:	54 2f       	mov	r21, r20
    36ce:	80 91 a1 01 	lds	r24, 0x01A1
    36d2:	90 91 a2 01 	lds	r25, 0x01A2
    36d6:	a0 91 a3 01 	lds	r26, 0x01A3
    36da:	b0 91 a4 01 	lds	r27, 0x01A4
    36de:	82 0f       	add	r24, r18
    36e0:	93 1f       	adc	r25, r19
    36e2:	a4 1f       	adc	r26, r20
    36e4:	b5 1f       	adc	r27, r21
    36e6:	02 96       	adiw	r24, 0x02	; 2
    36e8:	a1 1d       	adc	r26, r1
    36ea:	b1 1d       	adc	r27, r1
    36ec:	24 e0       	ldi	r18, 0x04	; 4
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodsi4>
    36fc:	da 01       	movw	r26, r20
    36fe:	c9 01       	movw	r24, r18
    3700:	80 93 a5 01 	sts	0x01A5, r24
    3704:	90 93 a6 01 	sts	0x01A6, r25
    3708:	a0 93 a7 01 	sts	0x01A7, r26
    370c:	b0 93 a8 01 	sts	0x01A8, r27
	X1 = AC3 * B6 / (pow(2, 13));
    3710:	80 91 7f 01 	lds	r24, 0x017F
    3714:	90 91 80 01 	lds	r25, 0x0180
    3718:	aa 27       	eor	r26, r26
    371a:	97 fd       	sbrc	r25, 7
    371c:	a0 95       	com	r26
    371e:	ba 2f       	mov	r27, r26
    3720:	20 91 a9 01 	lds	r18, 0x01A9
    3724:	30 91 aa 01 	lds	r19, 0x01AA
    3728:	40 91 ab 01 	lds	r20, 0x01AB
    372c:	50 91 ac 01 	lds	r21, 0x01AC
    3730:	bc 01       	movw	r22, r24
    3732:	cd 01       	movw	r24, r26
    3734:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e0       	ldi	r20, 0x00	; 0
    3752:	56 e4       	ldi	r21, 0x46	; 70
    3754:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	bc 01       	movw	r22, r24
    375e:	cd 01       	movw	r24, r26
    3760:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	80 93 91 01 	sts	0x0191, r24
    376c:	90 93 92 01 	sts	0x0192, r25
    3770:	a0 93 93 01 	sts	0x0193, r26
    3774:	b0 93 94 01 	sts	0x0194, r27
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
    3778:	80 91 81 01 	lds	r24, 0x0181
    377c:	90 91 82 01 	lds	r25, 0x0182
    3780:	aa 27       	eor	r26, r26
    3782:	97 fd       	sbrc	r25, 7
    3784:	a0 95       	com	r26
    3786:	ba 2f       	mov	r27, r26
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3790:	7b 01       	movw	r14, r22
    3792:	8c 01       	movw	r16, r24
    3794:	80 91 a9 01 	lds	r24, 0x01A9
    3798:	90 91 aa 01 	lds	r25, 0x01AA
    379c:	a0 91 ab 01 	lds	r26, 0x01AB
    37a0:	b0 91 ac 01 	lds	r27, 0x01AC
    37a4:	20 91 a9 01 	lds	r18, 0x01A9
    37a8:	30 91 aa 01 	lds	r19, 0x01AA
    37ac:	40 91 ab 01 	lds	r20, 0x01AB
    37b0:	50 91 ac 01 	lds	r21, 0x01AC
    37b4:	bc 01       	movw	r22, r24
    37b6:	cd 01       	movw	r24, r26
    37b8:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	bc 01       	movw	r22, r24
    37c2:	cd 01       	movw	r24, r26
    37c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	bc 01       	movw	r22, r24
    37ce:	cd 01       	movw	r24, r26
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	40 e8       	ldi	r20, 0x80	; 128
    37d6:	55 e4       	ldi	r21, 0x45	; 69
    37d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9c 01       	movw	r18, r24
    37e2:	ad 01       	movw	r20, r26
    37e4:	c8 01       	movw	r24, r16
    37e6:	b7 01       	movw	r22, r14
    37e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e8       	ldi	r20, 0x80	; 128
    37fa:	57 e4       	ldi	r21, 0x47	; 71
    37fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	bc 01       	movw	r22, r24
    3806:	cd 01       	movw	r24, r26
    3808:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	80 93 95 01 	sts	0x0195, r24
    3814:	90 93 96 01 	sts	0x0196, r25
    3818:	a0 93 97 01 	sts	0x0197, r26
    381c:	b0 93 98 01 	sts	0x0198, r27
	X3 = ((X1 + X2) + 2) / (pow(2, 2));
    3820:	20 91 91 01 	lds	r18, 0x0191
    3824:	30 91 92 01 	lds	r19, 0x0192
    3828:	40 91 93 01 	lds	r20, 0x0193
    382c:	50 91 94 01 	lds	r21, 0x0194
    3830:	80 91 95 01 	lds	r24, 0x0195
    3834:	90 91 96 01 	lds	r25, 0x0196
    3838:	a0 91 97 01 	lds	r26, 0x0197
    383c:	b0 91 98 01 	lds	r27, 0x0198
    3840:	82 0f       	add	r24, r18
    3842:	93 1f       	adc	r25, r19
    3844:	a4 1f       	adc	r26, r20
    3846:	b5 1f       	adc	r27, r21
    3848:	02 96       	adiw	r24, 0x02	; 2
    384a:	a1 1d       	adc	r26, r1
    384c:	b1 1d       	adc	r27, r1
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	40 e8       	ldi	r20, 0x80	; 128
    3864:	50 e4       	ldi	r21, 0x40	; 64
    3866:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	bc 01       	movw	r22, r24
    3870:	cd 01       	movw	r24, r26
    3872:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	80 93 a1 01 	sts	0x01A1, r24
    387e:	90 93 a2 01 	sts	0x01A2, r25
    3882:	a0 93 a3 01 	sts	0x01A3, r26
    3886:	b0 93 a4 01 	sts	0x01A4, r27
	B4 = (AC4 * (uint32) (X3 + 32768)) / (pow(2, 15));
    388a:	80 91 8b 01 	lds	r24, 0x018B
    388e:	90 91 8c 01 	lds	r25, 0x018C
    3892:	7c 01       	movw	r14, r24
    3894:	00 e0       	ldi	r16, 0x00	; 0
    3896:	10 e0       	ldi	r17, 0x00	; 0
    3898:	80 91 a1 01 	lds	r24, 0x01A1
    389c:	90 91 a2 01 	lds	r25, 0x01A2
    38a0:	a0 91 a3 01 	lds	r26, 0x01A3
    38a4:	b0 91 a4 01 	lds	r27, 0x01A4
    38a8:	80 50       	subi	r24, 0x00	; 0
    38aa:	90 48       	sbci	r25, 0x80	; 128
    38ac:	af 4f       	sbci	r26, 0xFF	; 255
    38ae:	bf 4f       	sbci	r27, 0xFF	; 255
    38b0:	9c 01       	movw	r18, r24
    38b2:	ad 01       	movw	r20, r26
    38b4:	c8 01       	movw	r24, r16
    38b6:	b7 01       	movw	r22, r14
    38b8:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	bc 01       	movw	r22, r24
    38c2:	cd 01       	movw	r24, r26
    38c4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e0       	ldi	r20, 0x00	; 0
    38d6:	57 e4       	ldi	r21, 0x47	; 71
    38d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	bc 01       	movw	r22, r24
    38e2:	cd 01       	movw	r24, r26
    38e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	80 93 b5 01 	sts	0x01B5, r24
    38f0:	90 93 b6 01 	sts	0x01B6, r25
    38f4:	a0 93 b7 01 	sts	0x01B7, r26
    38f8:	b0 93 b8 01 	sts	0x01B8, r27
	B7 = ((uint32) UP - B3) * (50000 >> OSS);
    38fc:	80 91 b1 01 	lds	r24, 0x01B1
    3900:	90 91 b2 01 	lds	r25, 0x01B2
    3904:	a0 91 b3 01 	lds	r26, 0x01B3
    3908:	b0 91 b4 01 	lds	r27, 0x01B4
    390c:	9c 01       	movw	r18, r24
    390e:	ad 01       	movw	r20, r26
    3910:	80 91 a5 01 	lds	r24, 0x01A5
    3914:	90 91 a6 01 	lds	r25, 0x01A6
    3918:	a0 91 a7 01 	lds	r26, 0x01A7
    391c:	b0 91 a8 01 	lds	r27, 0x01A8
    3920:	79 01       	movw	r14, r18
    3922:	8a 01       	movw	r16, r20
    3924:	e8 1a       	sub	r14, r24
    3926:	f9 0a       	sbc	r15, r25
    3928:	0a 0b       	sbc	r16, r26
    392a:	1b 0b       	sbc	r17, r27
    392c:	d8 01       	movw	r26, r16
    392e:	c7 01       	movw	r24, r14
    3930:	20 e5       	ldi	r18, 0x50	; 80
    3932:	33 ec       	ldi	r19, 0xC3	; 195
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	50 e0       	ldi	r21, 0x00	; 0
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	80 93 b9 01 	sts	0x01B9, r24
    3948:	90 93 ba 01 	sts	0x01BA, r25
    394c:	a0 93 bb 01 	sts	0x01BB, r26
    3950:	b0 93 bc 01 	sts	0x01BC, r27

	if (B7 < 0x80000000) {
    3954:	80 91 b9 01 	lds	r24, 0x01B9
    3958:	90 91 ba 01 	lds	r25, 0x01BA
    395c:	a0 91 bb 01 	lds	r26, 0x01BB
    3960:	b0 91 bc 01 	lds	r27, 0x01BC
    3964:	bb 23       	and	r27, r27
    3966:	1c f1       	brlt	.+70     	; 0x39ae <BMP180_calculatePressure+0x5f0>
		P = (B7 * 2) / B4;
    3968:	80 91 b9 01 	lds	r24, 0x01B9
    396c:	90 91 ba 01 	lds	r25, 0x01BA
    3970:	a0 91 bb 01 	lds	r26, 0x01BB
    3974:	b0 91 bc 01 	lds	r27, 0x01BC
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	aa 1f       	adc	r26, r26
    397e:	bb 1f       	adc	r27, r27
    3980:	20 91 b5 01 	lds	r18, 0x01B5
    3984:	30 91 b6 01 	lds	r19, 0x01B6
    3988:	40 91 b7 01 	lds	r20, 0x01B7
    398c:	50 91 b8 01 	lds	r21, 0x01B8
    3990:	bc 01       	movw	r22, r24
    3992:	cd 01       	movw	r24, r26
    3994:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__udivmodsi4>
    3998:	da 01       	movw	r26, r20
    399a:	c9 01       	movw	r24, r18
    399c:	80 93 ad 01 	sts	0x01AD, r24
    39a0:	90 93 ae 01 	sts	0x01AE, r25
    39a4:	a0 93 af 01 	sts	0x01AF, r26
    39a8:	b0 93 b0 01 	sts	0x01B0, r27
    39ac:	22 c0       	rjmp	.+68     	; 0x39f2 <BMP180_calculatePressure+0x634>
	} else {
		P = (B7 / B4) * 2;
    39ae:	80 91 b9 01 	lds	r24, 0x01B9
    39b2:	90 91 ba 01 	lds	r25, 0x01BA
    39b6:	a0 91 bb 01 	lds	r26, 0x01BB
    39ba:	b0 91 bc 01 	lds	r27, 0x01BC
    39be:	20 91 b5 01 	lds	r18, 0x01B5
    39c2:	30 91 b6 01 	lds	r19, 0x01B6
    39c6:	40 91 b7 01 	lds	r20, 0x01B7
    39ca:	50 91 b8 01 	lds	r21, 0x01B8
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__udivmodsi4>
    39d6:	da 01       	movw	r26, r20
    39d8:	c9 01       	movw	r24, r18
    39da:	88 0f       	add	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	aa 1f       	adc	r26, r26
    39e0:	bb 1f       	adc	r27, r27
    39e2:	80 93 ad 01 	sts	0x01AD, r24
    39e6:	90 93 ae 01 	sts	0x01AE, r25
    39ea:	a0 93 af 01 	sts	0x01AF, r26
    39ee:	b0 93 b0 01 	sts	0x01B0, r27
	}
	X1 = (P / (pow(2, 8))) * (P / (pow(2, 8)));
    39f2:	80 91 ad 01 	lds	r24, 0x01AD
    39f6:	90 91 ae 01 	lds	r25, 0x01AE
    39fa:	a0 91 af 01 	lds	r26, 0x01AF
    39fe:	b0 91 b0 01 	lds	r27, 0x01B0
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	bc 01       	movw	r22, r24
    3a10:	cd 01       	movw	r24, r26
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e8       	ldi	r20, 0x80	; 128
    3a18:	53 e4       	ldi	r21, 0x43	; 67
    3a1a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	7c 01       	movw	r14, r24
    3a24:	8d 01       	movw	r16, r26
    3a26:	80 91 ad 01 	lds	r24, 0x01AD
    3a2a:	90 91 ae 01 	lds	r25, 0x01AE
    3a2e:	a0 91 af 01 	lds	r26, 0x01AF
    3a32:	b0 91 b0 01 	lds	r27, 0x01B0
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e8       	ldi	r20, 0x80	; 128
    3a4c:	53 e4       	ldi	r21, 0x43	; 67
    3a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9c 01       	movw	r18, r24
    3a58:	ad 01       	movw	r20, r26
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	80 93 91 01 	sts	0x0191, r24
    3a76:	90 93 92 01 	sts	0x0192, r25
    3a7a:	a0 93 93 01 	sts	0x0193, r26
    3a7e:	b0 93 94 01 	sts	0x0194, r27
	X1 = (X1 * 3038) / (pow(2, 16));
    3a82:	80 91 91 01 	lds	r24, 0x0191
    3a86:	90 91 92 01 	lds	r25, 0x0192
    3a8a:	a0 91 93 01 	lds	r26, 0x0193
    3a8e:	b0 91 94 01 	lds	r27, 0x0194
    3a92:	2e ed       	ldi	r18, 0xDE	; 222
    3a94:	3b e0       	ldi	r19, 0x0B	; 11
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    3a98:	50 e0       	ldi	r21, 0x00	; 0
    3a9a:	bc 01       	movw	r22, r24
    3a9c:	cd 01       	movw	r24, r26
    3a9e:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	bc 01       	movw	r22, r24
    3aa8:	cd 01       	movw	r24, r26
    3aaa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3aae:	dc 01       	movw	r26, r24
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	bc 01       	movw	r22, r24
    3ab4:	cd 01       	movw	r24, r26
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	40 e8       	ldi	r20, 0x80	; 128
    3abc:	57 e4       	ldi	r21, 0x47	; 71
    3abe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	80 93 91 01 	sts	0x0191, r24
    3ad6:	90 93 92 01 	sts	0x0192, r25
    3ada:	a0 93 93 01 	sts	0x0193, r26
    3ade:	b0 93 94 01 	sts	0x0194, r27
	X2 = (-7357 * P) / (pow(2, 16));
    3ae2:	80 91 ad 01 	lds	r24, 0x01AD
    3ae6:	90 91 ae 01 	lds	r25, 0x01AE
    3aea:	a0 91 af 01 	lds	r26, 0x01AF
    3aee:	b0 91 b0 01 	lds	r27, 0x01B0
    3af2:	23 e4       	ldi	r18, 0x43	; 67
    3af4:	33 ee       	ldi	r19, 0xE3	; 227
    3af6:	4f ef       	ldi	r20, 0xFF	; 255
    3af8:	5f ef       	ldi	r21, 0xFF	; 255
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	bc 01       	movw	r22, r24
    3b08:	cd 01       	movw	r24, r26
    3b0a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	bc 01       	movw	r22, r24
    3b14:	cd 01       	movw	r24, r26
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e8       	ldi	r20, 0x80	; 128
    3b1c:	57 e4       	ldi	r21, 0x47	; 71
    3b1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	bc 01       	movw	r22, r24
    3b28:	cd 01       	movw	r24, r26
    3b2a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	80 93 95 01 	sts	0x0195, r24
    3b36:	90 93 96 01 	sts	0x0196, r25
    3b3a:	a0 93 97 01 	sts	0x0197, r26
    3b3e:	b0 93 98 01 	sts	0x0198, r27
	P = P + (X1 + X2 + 3791) / (pow(2, 4));
    3b42:	80 91 ad 01 	lds	r24, 0x01AD
    3b46:	90 91 ae 01 	lds	r25, 0x01AE
    3b4a:	a0 91 af 01 	lds	r26, 0x01AF
    3b4e:	b0 91 b0 01 	lds	r27, 0x01B0
    3b52:	bc 01       	movw	r22, r24
    3b54:	cd 01       	movw	r24, r26
    3b56:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3b5a:	7b 01       	movw	r14, r22
    3b5c:	8c 01       	movw	r16, r24
    3b5e:	20 91 91 01 	lds	r18, 0x0191
    3b62:	30 91 92 01 	lds	r19, 0x0192
    3b66:	40 91 93 01 	lds	r20, 0x0193
    3b6a:	50 91 94 01 	lds	r21, 0x0194
    3b6e:	80 91 95 01 	lds	r24, 0x0195
    3b72:	90 91 96 01 	lds	r25, 0x0196
    3b76:	a0 91 97 01 	lds	r26, 0x0197
    3b7a:	b0 91 98 01 	lds	r27, 0x0198
    3b7e:	82 0f       	add	r24, r18
    3b80:	93 1f       	adc	r25, r19
    3b82:	a4 1f       	adc	r26, r20
    3b84:	b5 1f       	adc	r27, r21
    3b86:	81 53       	subi	r24, 0x31	; 49
    3b88:	91 4f       	sbci	r25, 0xF1	; 241
    3b8a:	af 4f       	sbci	r26, 0xFF	; 255
    3b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	9c 01       	movw	r18, r24
    3bb0:	ad 01       	movw	r20, r26
    3bb2:	c8 01       	movw	r24, r16
    3bb4:	b7 01       	movw	r22, r14
    3bb6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	80 93 ad 01 	sts	0x01AD, r24
    3bce:	90 93 ae 01 	sts	0x01AE, r25
    3bd2:	a0 93 af 01 	sts	0x01AF, r26
    3bd6:	b0 93 b0 01 	sts	0x01B0, r27

	P = P / 100;
    3bda:	80 91 ad 01 	lds	r24, 0x01AD
    3bde:	90 91 ae 01 	lds	r25, 0x01AE
    3be2:	a0 91 af 01 	lds	r26, 0x01AF
    3be6:	b0 91 b0 01 	lds	r27, 0x01B0
    3bea:	24 e6       	ldi	r18, 0x64	; 100
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e0       	ldi	r20, 0x00	; 0
    3bf0:	50 e0       	ldi	r21, 0x00	; 0
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__divmodsi4>
    3bfa:	da 01       	movw	r26, r20
    3bfc:	c9 01       	movw	r24, r18
    3bfe:	80 93 ad 01 	sts	0x01AD, r24
    3c02:	90 93 ae 01 	sts	0x01AE, r25
    3c06:	a0 93 af 01 	sts	0x01AF, r26
    3c0a:	b0 93 b0 01 	sts	0x01B0, r27

	return P;
    3c0e:	80 91 ad 01 	lds	r24, 0x01AD
    3c12:	90 91 ae 01 	lds	r25, 0x01AE
    3c16:	a0 91 af 01 	lds	r26, 0x01AF
    3c1a:	b0 91 b0 01 	lds	r27, 0x01B0
}
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	1f 91       	pop	r17
    3c28:	0f 91       	pop	r16
    3c2a:	ff 90       	pop	r15
    3c2c:	ef 90       	pop	r14
    3c2e:	08 95       	ret

00003c30 <BMP180_calculate>:

void BMP180_calculate(tyreState * readings) {
    3c30:	df 93       	push	r29
    3c32:	cf 93       	push	r28
    3c34:	00 d0       	rcall	.+0      	; 0x3c36 <BMP180_calculate+0x6>
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	89 83       	std	Y+1, r24	; 0x01
	readings->temperature = BMP180_calculateTemperature();
    3c3e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <BMP180_calculateTemperature>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	e9 81       	ldd	r30, Y+1	; 0x01
    3c48:	fa 81       	ldd	r31, Y+2	; 0x02
    3c4a:	80 83       	st	Z, r24
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	a2 83       	std	Z+2, r26	; 0x02
    3c50:	b3 83       	std	Z+3, r27	; 0x03
	readings->pressure = BMP180_calculatePressure();
    3c52:	0e 94 df 19 	call	0x33be	; 0x33be <BMP180_calculatePressure>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c5e:	84 83       	std	Z+4, r24	; 0x04
    3c60:	95 83       	std	Z+5, r25	; 0x05
    3c62:	a6 83       	std	Z+6, r26	; 0x06
    3c64:	b7 83       	std	Z+7, r27	; 0x07
	readings->wheel = FRONT_LEFT;
    3c66:	e9 81       	ldd	r30, Y+1	; 0x01
    3c68:	fa 81       	ldd	r31, Y+2	; 0x02
    3c6a:	10 86       	std	Z+8, r1	; 0x08
}
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <BMP180_Start>:

void BMP180_Start(void) {
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
	BMP180_ReadCalb();
    3c7e:	0e 94 b8 10 	call	0x2170	; 0x2170 <BMP180_ReadCalb>
}
    3c82:	cf 91       	pop	r28
    3c84:	df 91       	pop	r29
    3c86:	08 95       	ret

00003c88 <delay>:

void delay(void){
    3c88:	df 93       	push	r29
    3c8a:	cf 93       	push	r28
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	68 97       	sbiw	r28, 0x18	; 24
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	a0 e2       	ldi	r26, 0x20	; 32
    3ca2:	b1 e4       	ldi	r27, 0x41	; 65
    3ca4:	8d 8b       	std	Y+21, r24	; 0x15
    3ca6:	9e 8b       	std	Y+22, r25	; 0x16
    3ca8:	af 8b       	std	Y+23, r26	; 0x17
    3caa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3cac:	6d 89       	ldd	r22, Y+21	; 0x15
    3cae:	7e 89       	ldd	r23, Y+22	; 0x16
    3cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb4:	2b ea       	ldi	r18, 0xAB	; 171
    3cb6:	3a ea       	ldi	r19, 0xAA	; 170
    3cb8:	4a ea       	ldi	r20, 0xAA	; 170
    3cba:	50 e4       	ldi	r21, 0x40	; 64
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	89 8b       	std	Y+17, r24	; 0x11
    3cc6:	9a 8b       	std	Y+18, r25	; 0x12
    3cc8:	ab 8b       	std	Y+19, r26	; 0x13
    3cca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3ccc:	69 89       	ldd	r22, Y+17	; 0x11
    3cce:	7a 89       	ldd	r23, Y+18	; 0x12
    3cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e8       	ldi	r20, 0x80	; 128
    3cda:	5f e3       	ldi	r21, 0x3F	; 63
    3cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce0:	88 23       	and	r24, r24
    3ce2:	1c f4       	brge	.+6      	; 0x3cea <delay+0x62>
		__ticks = 1;
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	88 8b       	std	Y+16, r24	; 0x10
    3ce8:	91 c0       	rjmp	.+290    	; 0x3e0c <delay+0x184>
	else if (__tmp > 255)
    3cea:	69 89       	ldd	r22, Y+17	; 0x11
    3cec:	7a 89       	ldd	r23, Y+18	; 0x12
    3cee:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	4f e7       	ldi	r20, 0x7F	; 127
    3cf8:	53 e4       	ldi	r21, 0x43	; 67
    3cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cfe:	18 16       	cp	r1, r24
    3d00:	0c f0       	brlt	.+2      	; 0x3d04 <delay+0x7c>
    3d02:	7b c0       	rjmp	.+246    	; 0x3dfa <delay+0x172>
	{
		_delay_ms(__us / 1000.0);
    3d04:	6d 89       	ldd	r22, Y+21	; 0x15
    3d06:	7e 89       	ldd	r23, Y+22	; 0x16
    3d08:	8f 89       	ldd	r24, Y+23	; 0x17
    3d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	4a e7       	ldi	r20, 0x7A	; 122
    3d12:	54 e4       	ldi	r21, 0x44	; 68
    3d14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	8c 87       	std	Y+12, r24	; 0x0c
    3d1e:	9d 87       	std	Y+13, r25	; 0x0d
    3d20:	ae 87       	std	Y+14, r26	; 0x0e
    3d22:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d24:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d26:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d28:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	4a e7       	ldi	r20, 0x7A	; 122
    3d32:	55 e4       	ldi	r21, 0x45	; 69
    3d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	88 87       	std	Y+8, r24	; 0x08
    3d3e:	99 87       	std	Y+9, r25	; 0x09
    3d40:	aa 87       	std	Y+10, r26	; 0x0a
    3d42:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d44:	68 85       	ldd	r22, Y+8	; 0x08
    3d46:	79 85       	ldd	r23, Y+9	; 0x09
    3d48:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	40 e8       	ldi	r20, 0x80	; 128
    3d52:	5f e3       	ldi	r21, 0x3F	; 63
    3d54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d58:	88 23       	and	r24, r24
    3d5a:	2c f4       	brge	.+10     	; 0x3d66 <delay+0xde>
		__ticks = 1;
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	9f 83       	std	Y+7, r25	; 0x07
    3d62:	8e 83       	std	Y+6, r24	; 0x06
    3d64:	3f c0       	rjmp	.+126    	; 0x3de4 <delay+0x15c>
	else if (__tmp > 65535)
    3d66:	68 85       	ldd	r22, Y+8	; 0x08
    3d68:	79 85       	ldd	r23, Y+9	; 0x09
    3d6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	3f ef       	ldi	r19, 0xFF	; 255
    3d72:	4f e7       	ldi	r20, 0x7F	; 127
    3d74:	57 e4       	ldi	r21, 0x47	; 71
    3d76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d7a:	18 16       	cp	r1, r24
    3d7c:	4c f5       	brge	.+82     	; 0x3dd0 <delay+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d80:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d82:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d84:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	40 e2       	ldi	r20, 0x20	; 32
    3d8c:	51 e4       	ldi	r21, 0x41	; 65
    3d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	bc 01       	movw	r22, r24
    3d98:	cd 01       	movw	r24, r26
    3d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	9f 83       	std	Y+7, r25	; 0x07
    3da4:	8e 83       	std	Y+6, r24	; 0x06
    3da6:	0f c0       	rjmp	.+30     	; 0x3dc6 <delay+0x13e>
    3da8:	80 e9       	ldi	r24, 0x90	; 144
    3daa:	91 e0       	ldi	r25, 0x01	; 1
    3dac:	9d 83       	std	Y+5, r25	; 0x05
    3dae:	8c 83       	std	Y+4, r24	; 0x04
    3db0:	8c 81       	ldd	r24, Y+4	; 0x04
    3db2:	9d 81       	ldd	r25, Y+5	; 0x05
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	f1 f7       	brne	.-4      	; 0x3db4 <delay+0x12c>
    3db8:	9d 83       	std	Y+5, r25	; 0x05
    3dba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    3dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    3dc0:	01 97       	sbiw	r24, 0x01	; 1
    3dc2:	9f 83       	std	Y+7, r25	; 0x07
    3dc4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    3dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dca:	00 97       	sbiw	r24, 0x00	; 0
    3dcc:	69 f7       	brne	.-38     	; 0x3da8 <delay+0x120>
    3dce:	24 c0       	rjmp	.+72     	; 0x3e18 <delay+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd0:	68 85       	ldd	r22, Y+8	; 0x08
    3dd2:	79 85       	ldd	r23, Y+9	; 0x09
    3dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	9f 83       	std	Y+7, r25	; 0x07
    3de2:	8e 83       	std	Y+6, r24	; 0x06
    3de4:	8e 81       	ldd	r24, Y+6	; 0x06
    3de6:	9f 81       	ldd	r25, Y+7	; 0x07
    3de8:	9b 83       	std	Y+3, r25	; 0x03
    3dea:	8a 83       	std	Y+2, r24	; 0x02
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	9b 81       	ldd	r25, Y+3	; 0x03
    3df0:	01 97       	sbiw	r24, 0x01	; 1
    3df2:	f1 f7       	brne	.-4      	; 0x3df0 <delay+0x168>
    3df4:	9b 83       	std	Y+3, r25	; 0x03
    3df6:	8a 83       	std	Y+2, r24	; 0x02
    3df8:	0f c0       	rjmp	.+30     	; 0x3e18 <delay+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dfa:	69 89       	ldd	r22, Y+17	; 0x11
    3dfc:	7a 89       	ldd	r23, Y+18	; 0x12
    3dfe:	8b 89       	ldd	r24, Y+19	; 0x13
    3e00:	9c 89       	ldd	r25, Y+20	; 0x14
    3e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e06:	dc 01       	movw	r26, r24
    3e08:	cb 01       	movw	r24, r22
    3e0a:	88 8b       	std	Y+16, r24	; 0x10
    3e0c:	88 89       	ldd	r24, Y+16	; 0x10
    3e0e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	8a 95       	dec	r24
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <delay+0x18a>
    3e16:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    3e18:	68 96       	adiw	r28, 0x18	; 24
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	f8 94       	cli
    3e1e:	de bf       	out	0x3e, r29	; 62
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	cd bf       	out	0x3d, r28	; 61
    3e24:	cf 91       	pop	r28
    3e26:	df 91       	pop	r29
    3e28:	08 95       	ret

00003e2a <__mulsi3>:
    3e2a:	62 9f       	mul	r22, r18
    3e2c:	d0 01       	movw	r26, r0
    3e2e:	73 9f       	mul	r23, r19
    3e30:	f0 01       	movw	r30, r0
    3e32:	82 9f       	mul	r24, r18
    3e34:	e0 0d       	add	r30, r0
    3e36:	f1 1d       	adc	r31, r1
    3e38:	64 9f       	mul	r22, r20
    3e3a:	e0 0d       	add	r30, r0
    3e3c:	f1 1d       	adc	r31, r1
    3e3e:	92 9f       	mul	r25, r18
    3e40:	f0 0d       	add	r31, r0
    3e42:	83 9f       	mul	r24, r19
    3e44:	f0 0d       	add	r31, r0
    3e46:	74 9f       	mul	r23, r20
    3e48:	f0 0d       	add	r31, r0
    3e4a:	65 9f       	mul	r22, r21
    3e4c:	f0 0d       	add	r31, r0
    3e4e:	99 27       	eor	r25, r25
    3e50:	72 9f       	mul	r23, r18
    3e52:	b0 0d       	add	r27, r0
    3e54:	e1 1d       	adc	r30, r1
    3e56:	f9 1f       	adc	r31, r25
    3e58:	63 9f       	mul	r22, r19
    3e5a:	b0 0d       	add	r27, r0
    3e5c:	e1 1d       	adc	r30, r1
    3e5e:	f9 1f       	adc	r31, r25
    3e60:	bd 01       	movw	r22, r26
    3e62:	cf 01       	movw	r24, r30
    3e64:	11 24       	eor	r1, r1
    3e66:	08 95       	ret

00003e68 <__udivmodsi4>:
    3e68:	a1 e2       	ldi	r26, 0x21	; 33
    3e6a:	1a 2e       	mov	r1, r26
    3e6c:	aa 1b       	sub	r26, r26
    3e6e:	bb 1b       	sub	r27, r27
    3e70:	fd 01       	movw	r30, r26
    3e72:	0d c0       	rjmp	.+26     	; 0x3e8e <__udivmodsi4_ep>

00003e74 <__udivmodsi4_loop>:
    3e74:	aa 1f       	adc	r26, r26
    3e76:	bb 1f       	adc	r27, r27
    3e78:	ee 1f       	adc	r30, r30
    3e7a:	ff 1f       	adc	r31, r31
    3e7c:	a2 17       	cp	r26, r18
    3e7e:	b3 07       	cpc	r27, r19
    3e80:	e4 07       	cpc	r30, r20
    3e82:	f5 07       	cpc	r31, r21
    3e84:	20 f0       	brcs	.+8      	; 0x3e8e <__udivmodsi4_ep>
    3e86:	a2 1b       	sub	r26, r18
    3e88:	b3 0b       	sbc	r27, r19
    3e8a:	e4 0b       	sbc	r30, r20
    3e8c:	f5 0b       	sbc	r31, r21

00003e8e <__udivmodsi4_ep>:
    3e8e:	66 1f       	adc	r22, r22
    3e90:	77 1f       	adc	r23, r23
    3e92:	88 1f       	adc	r24, r24
    3e94:	99 1f       	adc	r25, r25
    3e96:	1a 94       	dec	r1
    3e98:	69 f7       	brne	.-38     	; 0x3e74 <__udivmodsi4_loop>
    3e9a:	60 95       	com	r22
    3e9c:	70 95       	com	r23
    3e9e:	80 95       	com	r24
    3ea0:	90 95       	com	r25
    3ea2:	9b 01       	movw	r18, r22
    3ea4:	ac 01       	movw	r20, r24
    3ea6:	bd 01       	movw	r22, r26
    3ea8:	cf 01       	movw	r24, r30
    3eaa:	08 95       	ret

00003eac <__divmodsi4>:
    3eac:	97 fb       	bst	r25, 7
    3eae:	09 2e       	mov	r0, r25
    3eb0:	05 26       	eor	r0, r21
    3eb2:	0e d0       	rcall	.+28     	; 0x3ed0 <__divmodsi4_neg1>
    3eb4:	57 fd       	sbrc	r21, 7
    3eb6:	04 d0       	rcall	.+8      	; 0x3ec0 <__divmodsi4_neg2>
    3eb8:	d7 df       	rcall	.-82     	; 0x3e68 <__udivmodsi4>
    3eba:	0a d0       	rcall	.+20     	; 0x3ed0 <__divmodsi4_neg1>
    3ebc:	00 1c       	adc	r0, r0
    3ebe:	38 f4       	brcc	.+14     	; 0x3ece <__divmodsi4_exit>

00003ec0 <__divmodsi4_neg2>:
    3ec0:	50 95       	com	r21
    3ec2:	40 95       	com	r20
    3ec4:	30 95       	com	r19
    3ec6:	21 95       	neg	r18
    3ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eca:	4f 4f       	sbci	r20, 0xFF	; 255
    3ecc:	5f 4f       	sbci	r21, 0xFF	; 255

00003ece <__divmodsi4_exit>:
    3ece:	08 95       	ret

00003ed0 <__divmodsi4_neg1>:
    3ed0:	f6 f7       	brtc	.-4      	; 0x3ece <__divmodsi4_exit>
    3ed2:	90 95       	com	r25
    3ed4:	80 95       	com	r24
    3ed6:	70 95       	com	r23
    3ed8:	61 95       	neg	r22
    3eda:	7f 4f       	sbci	r23, 0xFF	; 255
    3edc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ede:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee0:	08 95       	ret

00003ee2 <__prologue_saves__>:
    3ee2:	2f 92       	push	r2
    3ee4:	3f 92       	push	r3
    3ee6:	4f 92       	push	r4
    3ee8:	5f 92       	push	r5
    3eea:	6f 92       	push	r6
    3eec:	7f 92       	push	r7
    3eee:	8f 92       	push	r8
    3ef0:	9f 92       	push	r9
    3ef2:	af 92       	push	r10
    3ef4:	bf 92       	push	r11
    3ef6:	cf 92       	push	r12
    3ef8:	df 92       	push	r13
    3efa:	ef 92       	push	r14
    3efc:	ff 92       	push	r15
    3efe:	0f 93       	push	r16
    3f00:	1f 93       	push	r17
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	ca 1b       	sub	r28, r26
    3f0c:	db 0b       	sbc	r29, r27
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	09 94       	ijmp

00003f1a <__epilogue_restores__>:
    3f1a:	2a 88       	ldd	r2, Y+18	; 0x12
    3f1c:	39 88       	ldd	r3, Y+17	; 0x11
    3f1e:	48 88       	ldd	r4, Y+16	; 0x10
    3f20:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f22:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f24:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f26:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f28:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f2c:	b9 84       	ldd	r11, Y+9	; 0x09
    3f2e:	c8 84       	ldd	r12, Y+8	; 0x08
    3f30:	df 80       	ldd	r13, Y+7	; 0x07
    3f32:	ee 80       	ldd	r14, Y+6	; 0x06
    3f34:	fd 80       	ldd	r15, Y+5	; 0x05
    3f36:	0c 81       	ldd	r16, Y+4	; 0x04
    3f38:	1b 81       	ldd	r17, Y+3	; 0x03
    3f3a:	aa 81       	ldd	r26, Y+2	; 0x02
    3f3c:	b9 81       	ldd	r27, Y+1	; 0x01
    3f3e:	ce 0f       	add	r28, r30
    3f40:	d1 1d       	adc	r29, r1
    3f42:	0f b6       	in	r0, 0x3f	; 63
    3f44:	f8 94       	cli
    3f46:	de bf       	out	0x3e, r29	; 62
    3f48:	0f be       	out	0x3f, r0	; 63
    3f4a:	cd bf       	out	0x3d, r28	; 61
    3f4c:	ed 01       	movw	r28, r26
    3f4e:	08 95       	ret

00003f50 <_exit>:
    3f50:	f8 94       	cli

00003f52 <__stop_program>:
    3f52:	ff cf       	rjmp	.-2      	; 0x3f52 <__stop_program>
