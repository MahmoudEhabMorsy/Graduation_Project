
mainsys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  00005f62  00005ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  008001d2  008001d2  00006168  2**0
                  ALLOC
  3 .stab         000055f8  00000000  00000000  00006168  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000234b  00000000  00000000  0000b760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000daab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000dc6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000de7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00010491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001195f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00012e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00013153  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_4>
      14:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_5>
      18:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_6>
      1c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_9>
      28:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_10>
      2c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	ff e5       	ldi	r31, 0x5F	; 95
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 33       	cpi	r26, 0x38	; 56
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2f 12 	call	0x245e	; 0x245e <main>
      8a:	0c 94 af 2f 	jmp	0x5f5e	; 0x5f5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ec       	ldi	r26, 0xC0	; 192
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 2f 	jmp	0x5e7e	; 0x5e7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 2f 	jmp	0x5eb6	; 0x5eb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 2f 	jmp	0x5e7e	; 0x5e7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 2f 	jmp	0x5eb6	; 0x5eb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ec       	ldi	r24, 0xC0	; 192
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 2f 	jmp	0x5e9e	; 0x5e9e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ec       	ldi	r22, 0xC0	; 192
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 57 2f 	jmp	0x5eae	; 0x5eae <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3f 2f 	jmp	0x5e7e	; 0x5e7e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5b 2f 	jmp	0x5eb6	; 0x5eb6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3f 2f 	jmp	0x5e7e	; 0x5e7e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5b 2f 	jmp	0x5eb6	; 0x5eb6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3f 2f 	jmp	0x5e7e	; 0x5e7e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5b 2f 	jmp	0x5eb6	; 0x5eb6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3c 2f 	jmp	0x5e78	; 0x5e78 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 58 2f 	jmp	0x5eb0	; 0x5eb0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 43 2f 	jmp	0x5e86	; 0x5e86 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 5f 2f 	jmp	0x5ebe	; 0x5ebe <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 57 2f 	jmp	0x5eae	; 0x5eae <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 53       	subi	r30, 0x38	; 56
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TWI_init>:
 * 																		*
 * [Args]							*
 * [Return]															*
 *======================================================================*/

void TWI_init(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate Configuration */
#if BIT_RATE >= MINIMUM_BIT_RATE
	TWBR = BIT_RATE;
     ef2:	e0 e2       	ldi	r30, 0x20	; 32
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	88 e4       	ldi	r24, 0x48	; 72
     ef8:	80 83       	st	Z, r24
#else
#error "Invalid I2C bit rate configuration. Minimum bit rate allowed is 10."
#endif
	/* Prescaler Configuration */
#if PRESCALER_1 == PRESCALER
	CLEAR_BIT(TWSR, TWPS1);
     efa:	a1 e2       	ldi	r26, 0x21	; 33
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e2       	ldi	r30, 0x21	; 33
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWPS0);
     f08:	a1 e2       	ldi	r26, 0x21	; 33
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e1 e2       	ldi	r30, 0x21	; 33
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8c 93       	st	X, r24
#else
#error "Invalid I2C prescaler configuration"
#endif
	/* Slave Address Configuration */
#if SLAVE_ADDRESS >= MINIMUM_ADDRESS && SLAVE_ADDRESS <= MAXIMUM_ADDRESS
	TWAR = (SLAVE_ADDRESS << 1);
     f16:	e2 e2       	ldi	r30, 0x22	; 34
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	80 83       	st	Z, r24
#error "Invalid I2C slave address configuration (out of range)."
#endif
#if ENABLE_GENERAL_CALL == GENERAL_CALL
	SET_BIT(TWAR, TWGCE);
#elif DISABLE_GENERAL_CALL == GENERAL_CALL
	CLEAR_BIT(TWAR, TWGCE);
     f1e:	a2 e2       	ldi	r26, 0x22	; 34
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e2       	ldi	r30, 0x22	; 34
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
#else
#error "Invalid general call configuration"
#endif
	/* Enable I2C Peripheral */
	SET_BIT(TWCR, TWEN);
     f2c:	a6 e5       	ldi	r26, 0x56	; 86
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	8c 93       	st	X, r24
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <TWI_Start>:
 * 																		*
 * [Args]		uint8 slave_write_adress						*
 * [Return]															*
 *======================================================================*/

uint8 TWI_Start(uint8 slave_write_adress) {
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <TWI_Start+0x6>
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	84 ea       	ldi	r24, 0xA4	; 164
     f54:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <TWI_Start+0x16>
		;
	status = TWI_getStatus();
     f60:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f64:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	11 f0       	breq	.+4      	; 0xf70 <TWI_Start+0x30>
		return 0;
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <TWI_Start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     f70:	e3 e2       	ldi	r30, 0x23	; 35
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     f78:	e6 e5       	ldi	r30, 0x56	; 86
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	84 e8       	ldi	r24, 0x84	; 132
     f7e:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f80:	e6 e5       	ldi	r30, 0x56	; 86
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	dc f7       	brge	.-10     	; 0xf80 <TWI_Start+0x40>
		;
	status = TWI_getStatus();
     f8a:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f8e:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 31       	cpi	r24, 0x18	; 24
     f94:	19 f4       	brne	.+6      	; 0xf9c <TWI_Start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <TWI_Start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 32       	cpi	r24, 0x20	; 32
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <TWI_Start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <TWI_Start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TWI_Repeated_start>:
 * [Description]:	Function responsible for re-start the TWI communication.*
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
uint8 TWI_Repeated_start(uint8 slave_write_adress) {
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <TWI_Repeated_start+0x6>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	84 ea       	ldi	r24, 0xA4	; 164
     fce:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <TWI_Repeated_start+0x16>
		;
	status = TWI_getStatus();
     fda:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     fde:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_REP_START) /* Check weather start condition transmitted successfully or not? */
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	11 f0       	breq	.+4      	; 0xfea <TWI_Repeated_start+0x30>
		return 0;
     fe6:	1b 82       	std	Y+3, r1	; 0x03
     fe8:	1e c0       	rjmp	.+60     	; 0x1026 <TWI_Repeated_start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     fea:	e3 e2       	ldi	r30, 0x23	; 35
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     ffa:	e6 e5       	ldi	r30, 0x56	; 86
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 23       	and	r24, r24
    1002:	dc f7       	brge	.-10     	; 0xffa <TWI_Repeated_start+0x40>
		;
	status = TWI_getStatus();
    1004:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
    1008:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_R_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	19 f4       	brne	.+6      	; 0x1016 <TWI_Repeated_start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <TWI_Repeated_start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 32       	cpi	r24, 0x20	; 32
    101a:	19 f4       	brne	.+6      	; 0x1022 <TWI_Repeated_start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <TWI_Repeated_start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_Start_Wait>:
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <TWI_Start_Wait+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	84 ea       	ldi	r24, 0xA4	; 164
    1046:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	dc f7       	brge	.-10     	; 0x1048 <TWI_Start_Wait+0x14>
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    1052:	e1 e2       	ldi	r30, 0x21	; 33
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	79 f7       	brne	.-34     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* If no then continue with start loop again */
		TWDR = slave_write_address; /* If yes then write SLA+W in TWI data register */
    1062:	e3 e2       	ldi	r30, 0x23	; 35
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	80 83       	st	Z, r24
		TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	84 e8       	ldi	r24, 0x84	; 132
    1070:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1072:	e6 e5       	ldi	r30, 0x56	; 86
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 23       	and	r24, r24
    107a:	dc f7       	brge	.-10     	; 0x1072 <TWI_Start_Wait+0x3e>
			; /* Wait until TWI finish its current job (Write operation) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    107c:	e1 e2       	ldi	r30, 0x21	; 33
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	88 31       	cpi	r24, 0x18	; 24
    108a:	19 f0       	breq	.+6      	; 0x1092 <TWI_Start_Wait+0x5e>
		{
			TWI_Stop(); /* If not then generate stop condition */
    108c:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    1090:	d7 cf       	rjmp	.-82     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* continue with start loop again */
		}
		break; /* If yes then break loop */
	}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <TWI_Stop>:
 * [Description]:	Function responsible for stop the TWI communication *
 * 																*
 * [Args]		void											*
 * [Return]			void										*
 *======================================================================*/
void TWI_Stop(void) {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	84 e9       	ldi	r24, 0x94	; 148
    10aa:	80 83       	st	Z, r24
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TWI_WriteByte>:
 * [Description]:	Function responsible for sending 1 byte *
 * 																*
 * [Args]		uint8 data											*
 * [Return]			void										*
 *======================================================================*/
void TWI_WriteByte(uint8 data) {
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    10be:	e3 e2       	ldi	r30, 0x23	; 35
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    10c6:	e6 e5       	ldi	r30, 0x56	; 86
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	84 e8       	ldi	r24, 0x84	; 132
    10cc:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10ce:	e6 e5       	ldi	r30, 0x56	; 86
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 23       	and	r24, r24
    10d6:	dc f7       	brge	.-10     	; 0x10ce <TWI_WriteByte+0x1c>
		;
}
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TWI_ReadByteWithACK>:
 * [Description]:	Function responsible for reading 1 byte with ack *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithACK(void) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    10e8:	e6 e5       	ldi	r30, 0x56	; 86
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	84 ec       	ldi	r24, 0xC4	; 196
    10ee:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	dc f7       	brge	.-10     	; 0x10f0 <TWI_ReadByteWithACK+0x10>
		;
	/* Read Data */
	return TWDR;
    10fa:	e3 e2       	ldi	r30, 0x23	; 35
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <TWI_ReadByteWithNACK>:
 * [Description]:	Function responsible for reading 1 byte with NACK *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithNACK(void) {
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 e8       	ldi	r24, 0x84	; 132
    1114:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	dc f7       	brge	.-10     	; 0x1116 <TWI_ReadByteWithNACK+0x10>
		;
	/* Read Data */
	return TWDR;
    1120:	e3 e2       	ldi	r30, 0x23	; 35
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TWI_getStatus>:
 * [Description]:	FET STATUS from TWSR register *
 * 																*
 * [Args]													*
 * [Return]			uint8 status									*
 *======================================================================*/
uint8 TWI_getStatus(void) {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1136:	e1 e2       	ldi	r30, 0x21	; 33
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
}
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_11>:
/********************************************************/
/*                     ISRs                              */
/********************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1174:	80 91 d2 01 	lds	r24, 0x01D2
    1178:	90 91 d3 01 	lds	r25, 0x01D3
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	29 f0       	breq	.+10     	; 0x118a <__vector_11+0x40>
		(*g_Timer0CallBackPtr)();
    1180:	e0 91 d2 01 	lds	r30, 0x01D2
    1184:	f0 91 d3 01 	lds	r31, 0x01D3
    1188:	09 95       	icall
	}
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_10>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    11da:	80 91 d2 01 	lds	r24, 0x01D2
    11de:	90 91 d3 01 	lds	r25, 0x01D3
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <__vector_10+0x40>
		(*g_Timer0CallBackPtr)();
    11e6:	e0 91 d2 01 	lds	r30, 0x01D2
    11ea:	f0 91 d3 01 	lds	r31, 0x01D3
    11ee:	09 95       	icall
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_9>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	2f 93       	push	r18
    1222:	3f 93       	push	r19
    1224:	4f 93       	push	r20
    1226:	5f 93       	push	r21
    1228:	6f 93       	push	r22
    122a:	7f 93       	push	r23
    122c:	8f 93       	push	r24
    122e:	9f 93       	push	r25
    1230:	af 93       	push	r26
    1232:	bf 93       	push	r27
    1234:	ef 93       	push	r30
    1236:	ff 93       	push	r31
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1240:	80 91 d4 01 	lds	r24, 0x01D4
    1244:	90 91 d5 01 	lds	r25, 0x01D5
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	29 f0       	breq	.+10     	; 0x1256 <__vector_9+0x40>
		(*g_Timer1CallBackPtr)();
    124c:	e0 91 d4 01 	lds	r30, 0x01D4
    1250:	f0 91 d5 01 	lds	r31, 0x01D5
    1254:	09 95       	icall
	}
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    12a6:	80 91 d4 01 	lds	r24, 0x01D4
    12aa:	90 91 d5 01 	lds	r25, 0x01D5
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	29 f0       	breq	.+10     	; 0x12bc <__vector_7+0x40>
		(*g_Timer1CallBackPtr)();
    12b2:	e0 91 d4 01 	lds	r30, 0x01D4
    12b6:	f0 91 d5 01 	lds	r31, 0x01D5
    12ba:	09 95       	icall
	}
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_5>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    130c:	80 91 d6 01 	lds	r24, 0x01D6
    1310:	90 91 d7 01 	lds	r25, 0x01D7
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	29 f0       	breq	.+10     	; 0x1322 <__vector_5+0x40>
		(*g_Timer2CallBackPtr)();
    1318:	e0 91 d6 01 	lds	r30, 0x01D6
    131c:	f0 91 d7 01 	lds	r31, 0x01D7
    1320:	09 95       	icall
	}
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_4>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1372:	80 91 d6 01 	lds	r24, 0x01D6
    1376:	90 91 d7 01 	lds	r25, 0x01D7
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    137e:	e0 91 d6 01 	lds	r30, 0x01D6
    1382:	f0 91 d7 01 	lds	r31, 0x01D7
    1386:	09 95       	icall
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <Timer_init>:

/********************************************************/
/* Functions Implementation */
/********************************************************/

void Timer_init(const Timer_configuration *timer_config){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Timer_init+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	80 81       	ld	r24, Z
    13c2:	88 23       	and	r24, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <Timer_init+0x1a>
    13c6:	60 c0       	rjmp	.+192    	; 0x1488 <Timer_init+0xda>

		TCNT0 = timer_config->initialValue;
    13c8:	a2 e5       	ldi	r26, 0x52	; 82
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e9 81       	ldd	r30, Y+1	; 0x01
    13ce:	fa 81       	ldd	r31, Y+2	; 0x02
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	8c 93       	st	X, r24
		TCCR0 = 0;
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	90 81       	ld	r25, Z
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	89 2b       	or	r24, r25
    13ee:	8c 93       	st	X, r24

		if (timer_config->mode == Normal){
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	81 81       	ldd	r24, Z+1	; 0x01
    13f6:	88 23       	and	r24, r24
    13f8:	b1 f4       	brne	.+44     	; 0x1426 <Timer_init+0x78>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    13fa:	a3 e5       	ldi	r26, 0x53	; 83
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e5       	ldi	r30, 0x53	; 83
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    1416:	a8 e5       	ldi	r26, 0x58	; 88
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e5       	ldi	r30, 0x58	; 88
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	28 c0       	rjmp	.+80     	; 0x1476 <Timer_init+0xc8>

		}else if (timer_config->mode == CTC){
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	19 f5       	brne	.+70     	; 0x1476 <Timer_init+0xc8>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1430:	a3 e5       	ldi	r26, 0x53	; 83
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e3 e5       	ldi	r30, 0x53	; 83
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    143e:	a3 e5       	ldi	r26, 0x53	; 83
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e3 e5       	ldi	r30, 0x53	; 83
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    144c:	ac e5       	ldi	r26, 0x5C	; 92
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	84 81       	ldd	r24, Z+4	; 0x04
    1456:	95 81       	ldd	r25, Z+5	; 0x05
    1458:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    145a:	a9 e5       	ldi	r26, 0x59	; 89
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e9 e5       	ldi	r30, 0x59	; 89
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    1468:	a8 e5       	ldi	r26, 0x58	; 88
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e5       	ldi	r30, 0x58	; 88
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	87 81       	ldd	r24, Z+7	; 0x07
    147c:	90 85       	ldd	r25, Z+8	; 0x08
    147e:	90 93 d3 01 	sts	0x01D3, r25
    1482:	80 93 d2 01 	sts	0x01D2, r24
    1486:	c4 c0       	rjmp	.+392    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer1){
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	80 81       	ld	r24, Z
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <Timer_init+0xe6>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <Timer_init+0x1a6>
		TCCR1A =0;
    1494:	ef e4       	ldi	r30, 0x4F	; 79
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    149a:	af e4       	ldi	r26, 0x4F	; 79
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e4       	ldi	r30, 0x4F	; 79
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    14c2:	ac e4       	ldi	r26, 0x4C	; 76
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24

		if (timer_config->mode == Normal) {
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	81 81       	ldd	r24, Z+1	; 0x01
    14da:	88 23       	and	r24, r24
    14dc:	79 f4       	brne	.+30     	; 0x14fc <Timer_init+0x14e>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    14de:	a9 e5       	ldi	r26, 0x59	; 89
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e9 e5       	ldi	r30, 0x59	; 89
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    14ec:	a8 e5       	ldi	r26, 0x58	; 88
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e8 e5       	ldi	r30, 0x58	; 88
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
    14fa:	23 c0       	rjmp	.+70     	; 0x1542 <Timer_init+0x194>

		} else if (timer_config->mode == CTC) {
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	f1 f4       	brne	.+60     	; 0x1542 <Timer_init+0x194>
			SET_BIT(TCCR1B, WGM12);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    1514:	aa e4       	ldi	r26, 0x4A	; 74
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1526:	a9 e5       	ldi	r26, 0x59	; 89
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 61       	ori	r24, 0x10	; 16
    1532:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1534:	a8 e5       	ldi	r26, 0x58	; 88
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e5       	ldi	r30, 0x58	; 88
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	87 81       	ldd	r24, Z+7	; 0x07
    1548:	90 85       	ldd	r25, Z+8	; 0x08
    154a:	90 93 d5 01 	sts	0x01D5, r25
    154e:	80 93 d4 01 	sts	0x01D4, r24
    1552:	5e c0       	rjmp	.+188    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer2){
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	80 81       	ld	r24, Z
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	09 f0       	breq	.+2      	; 0x1560 <Timer_init+0x1b2>
    155e:	58 c0       	rjmp	.+176    	; 0x1610 <Timer_init+0x262>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    156e:	a4 e4       	ldi	r26, 0x44	; 68
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	8c 93       	st	X, r24
		TCCR2 = 0;
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	90 81       	ld	r25, Z
    158c:	e9 81       	ldd	r30, Y+1	; 0x01
    158e:	fa 81       	ldd	r31, Y+2	; 0x02
    1590:	86 81       	ldd	r24, Z+6	; 0x06
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24

		if (timer_config->mode == Normal) {
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	88 23       	and	r24, r24
    159e:	79 f4       	brne	.+30     	; 0x15be <Timer_init+0x210>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    15a0:	a9 e5       	ldi	r26, 0x59	; 89
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 64       	ori	r24, 0x40	; 64
    15ac:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    15ae:	a8 e5       	ldi	r26, 0x58	; 88
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e5       	ldi	r30, 0x58	; 88
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	8c 93       	st	X, r24
    15bc:	21 c0       	rjmp	.+66     	; 0x1600 <Timer_init+0x252>

		} else if (timer_config->mode == CTC) {
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	81 81       	ldd	r24, Z+1	; 0x01
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	e1 f4       	brne	.+56     	; 0x1600 <Timer_init+0x252>
			SET_BIT(TCCR0, WGM21);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    15d6:	a3 e4       	ldi	r26, 0x43	; 67
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	84 81       	ldd	r24, Z+4	; 0x04
    15e0:	95 81       	ldd	r25, Z+5	; 0x05
    15e2:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    15e4:	a9 e5       	ldi	r26, 0x59	; 89
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    15f2:	a8 e5       	ldi	r26, 0x58	; 88
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e5       	ldi	r30, 0x58	; 88
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    1600:	e9 81       	ldd	r30, Y+1	; 0x01
    1602:	fa 81       	ldd	r31, Y+2	; 0x02
    1604:	87 81       	ldd	r24, Z+7	; 0x07
    1606:	90 85       	ldd	r25, Z+8	; 0x08
    1608:	90 93 d7 01 	sts	0x01D7, r25
    160c:	80 93 d6 01 	sts	0x01D6, r24
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	88 23       	and	r24, r24
    162a:	e1 f4       	brne	.+56     	; 0x1664 <Timer_deInit+0x4a>
		TCCR0 = 0;
    162c:	e3 e5       	ldi	r30, 0x53	; 83
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    1632:	e2 e5       	ldi	r30, 0x52	; 82
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    1638:	ec e5       	ldi	r30, 0x5C	; 92
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    163e:	a9 e5       	ldi	r26, 0x59	; 89
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e9 e5       	ldi	r30, 0x59	; 89
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    164c:	a9 e5       	ldi	r26, 0x59	; 89
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e9 e5       	ldi	r30, 0x59	; 89
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8e 7f       	andi	r24, 0xFE	; 254
    1658:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    165a:	10 92 d3 01 	sts	0x01D3, r1
    165e:	10 92 d2 01 	sts	0x01D2, r1
    1662:	42 c0       	rjmp	.+132    	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer1){
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f5       	brne	.+66     	; 0x16ac <Timer_deInit+0x92>
		TCCR1A =0;
    166a:	ef e4       	ldi	r30, 0x4F	; 79
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
		TCNT1 = 0;
    1676:	ec e4       	ldi	r30, 0x4C	; 76
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	11 82       	std	Z+1, r1	; 0x01
    167c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    167e:	a9 e5       	ldi	r26, 0x59	; 89
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    168c:	ea e4       	ldi	r30, 0x4A	; 74
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    16a2:	10 92 d5 01 	sts	0x01D5, r1
    16a6:	10 92 d4 01 	sts	0x01D4, r1
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer2){
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	d9 f4       	brne	.+54     	; 0x16e8 <Timer_deInit+0xce>
		TCCR2 = 0;
    16b2:	e5 e4       	ldi	r30, 0x45	; 69
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    16b8:	e4 e4       	ldi	r30, 0x44	; 68
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    16be:	e3 e4       	ldi	r30, 0x43	; 67
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    16c4:	a9 e5       	ldi	r26, 0x59	; 89
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e9 e5       	ldi	r30, 0x59	; 89
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    16d2:	a9 e5       	ldi	r26, 0x59	; 89
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e9 e5       	ldi	r30, 0x59	; 89
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7b       	andi	r24, 0xBF	; 191
    16de:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    16e0:	10 92 d7 01 	sts	0x01D7, r1
    16e4:	10 92 d6 01 	sts	0x01D6, r1
	}
}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	2f 93       	push	r18
    16fc:	3f 93       	push	r19
    16fe:	4f 93       	push	r20
    1700:	5f 93       	push	r21
    1702:	6f 93       	push	r22
    1704:	7f 93       	push	r23
    1706:	8f 93       	push	r24
    1708:	9f 93       	push	r25
    170a:	af 93       	push	r26
    170c:	bf 93       	push	r27
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    171a:	80 91 d8 01 	lds	r24, 0x01D8
    171e:	90 91 d9 01 	lds	r25, 0x01D9
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	29 f0       	breq	.+10     	; 0x1730 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1726:	e0 91 d8 01 	lds	r30, 0x01D8
    172a:	f0 91 d9 01 	lds	r31, 0x01D9
    172e:	09 95       	icall
	}
}
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <Icu_init+0x6>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B = (1<<ICES1)|(1<<CS11); //start by catching the rising edge & no prescaler
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	82 e4       	ldi	r24, 0x42	; 66
    176a:	80 83       	st	Z, r24
	TCNT1  = 0;
    176c:	ec e4       	ldi	r30, 0x4C	; 76
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	11 82       	std	Z+1, r1	; 0x01
    1772:	10 82       	st	Z, r1
	ICR1   = 0;
    1774:	e6 e4       	ldi	r30, 0x46	; 70
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	11 82       	std	Z+1, r1	; 0x01
    177a:	10 82       	st	Z, r1
	TIMSK |= (1<<TICIE1);
    177c:	a9 e5       	ldi	r26, 0x59	; 89
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e9 e5       	ldi	r30, 0x59	; 89
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 62       	ori	r24, 0x20	; 32
    1788:	8c 93       	st	X, r24

	/* Configure ICP1/PD6 as i/p pin */
	//DDRD &= ~(1<<PD6);
	CLEAR_BIT(DDRB,6);
    178a:	a7 e3       	ldi	r26, 0x37	; 55
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e7 e3       	ldi	r30, 0x37	; 55
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 7b       	andi	r24, 0xBF	; 191
    1796:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1798:	ef e4       	ldi	r30, 0x4F	; 79
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8c e0       	ldi	r24, 0x0C	; 12
    179e:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->clock));
    17a0:	ae e4       	ldi	r26, 0x4E	; 78
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ee e4       	ldi	r30, 0x4E	; 78
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	98 2f       	mov	r25, r24
    17ac:	98 7f       	andi	r25, 0xF8	; 248
    17ae:	e9 81       	ldd	r30, Y+1	; 0x01
    17b0:	fa 81       	ldd	r31, Y+2	; 0x02
    17b2:	80 81       	ld	r24, Z
    17b4:	89 2b       	or	r24, r25
    17b6:	8c 93       	st	X, r24
	/*
    * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    17b8:	ae e4       	ldi	r26, 0x4E	; 78
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ee e4       	ldi	r30, 0x4E	; 78
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	2f 7b       	andi	r18, 0xBF	; 191
    17c6:	e9 81       	ldd	r30, Y+1	; 0x01
    17c8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ca:	81 81       	ldd	r24, Z+1	; 0x01
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	00 24       	eor	r0, r0
    17d2:	96 95       	lsr	r25
    17d4:	87 95       	ror	r24
    17d6:	07 94       	ror	r0
    17d8:	96 95       	lsr	r25
    17da:	87 95       	ror	r24
    17dc:	07 94       	ror	r0
    17de:	98 2f       	mov	r25, r24
    17e0:	80 2d       	mov	r24, r0
    17e2:	82 2b       	or	r24, r18
    17e4:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    17e6:	ec e4       	ldi	r30, 0x4C	; 76
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	11 82       	std	Z+1, r1	; 0x01
    17ec:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    17ee:	e6 e4       	ldi	r30, 0x46	; 70
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	11 82       	std	Z+1, r1	; 0x01
    17f4:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    17f6:	a9 e5       	ldi	r26, 0x59	; 89
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 e5       	ldi	r30, 0x59	; 89
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 62       	ori	r24, 0x20	; 32
    1802:	8c 93       	st	X, r24
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <Icu_setCallBack+0x6>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	90 93 d9 01 	sts	0x01D9, r25
    1824:	80 93 d8 01 	sts	0x01D8, r24
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <Icu_setEdgeDetectionType>:

/*
* Description: Function to set the required edge detection.
*/
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    183e:	ae e4       	ldi	r26, 0x4E	; 78
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ee e4       	ldi	r30, 0x4E	; 78
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	2f 7b       	andi	r18, 0xBF	; 191
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	00 24       	eor	r0, r0
    1854:	96 95       	lsr	r25
    1856:	87 95       	ror	r24
    1858:	07 94       	ror	r0
    185a:	96 95       	lsr	r25
    185c:	87 95       	ror	r24
    185e:	07 94       	ror	r0
    1860:	98 2f       	mov	r25, r24
    1862:	80 2d       	mov	r24, r0
    1864:	82 2b       	or	r24, r18
    1866:	8c 93       	st	X, r24
}
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <Icu_getInputCaptureValue>:
/*
* Description: Function to get the Timer1 Value when the input is captured
*              The value stored at Input Capture Register ICR1
*/
uint16 Icu_getInputCaptureValue(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1878:	e6 e4       	ldi	r30, 0x46	; 70
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <Icu_clearTimerValue>:

/*
* Description: Function to clear the Timer1 Value to start count from ZERO
*/
void Icu_clearTimerValue(void)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    188e:	ec e4       	ldi	r30, 0x4C	; 76
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	11 82       	std	Z+1, r1	; 0x01
    1894:	10 82       	st	Z, r1
}
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <Icu_DeInit>:

/*
* Description: Function to disable the Timer1 to stop the ICU Driver
*/
void Icu_DeInit(void)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    18a4:	ef e4       	ldi	r30, 0x4F	; 79
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	10 82       	st	Z, r1
	TCCR1B = 0;
    18aa:	ee e4       	ldi	r30, 0x4E	; 78
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	10 82       	st	Z, r1
	TCNT1 = 0;
    18b0:	ec e4       	ldi	r30, 0x4C	; 76
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	11 82       	std	Z+1, r1	; 0x01
    18b6:	10 82       	st	Z, r1
	ICR1 = 0;
    18b8:	e6 e4       	ldi	r30, 0x46	; 70
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	11 82       	std	Z+1, r1	; 0x01
    18be:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    18c0:	a9 e5       	ldi	r26, 0x59	; 89
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e9 e5       	ldi	r30, 0x59	; 89
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7d       	andi	r24, 0xDF	; 223
    18cc:	8c 93       	st	X, r24
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <DIO_setupPinDirection>:
 *      Author: MR.MAHMOUD
 */

#include"dio.h"
#include "../../CommonDef/common_macros.h"
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number, uint8 direction){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <DIO_setupPinDirection+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <DIO_setupPinDirection+0x8>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	6a 83       	std	Y+2, r22	; 0x02
    18e6:	4b 83       	std	Y+3, r20	; 0x03
/*
 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 30       	cpi	r24, 0x08	; 8
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <DIO_setupPinDirection+0x1c>
    18ee:	d5 c0       	rjmp	.+426    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <DIO_setupPinDirection+0x24>
    18f6:	d1 c0       	rjmp	.+418    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3d 83       	std	Y+5, r19	; 0x05
    1900:	2c 83       	std	Y+4, r18	; 0x04
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <DIO_setupPinDirection+0x3a>
    190c:	43 c0       	rjmp	.+134    	; 0x1994 <DIO_setupPinDirection+0xc0>
    190e:	2c 81       	ldd	r18, Y+4	; 0x04
    1910:	3d 81       	ldd	r19, Y+5	; 0x05
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	2c f4       	brge	.+10     	; 0x1922 <DIO_setupPinDirection+0x4e>
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	9d 81       	ldd	r25, Y+5	; 0x05
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	71 f0       	breq	.+28     	; 0x193c <DIO_setupPinDirection+0x68>
    1920:	bc c0       	rjmp	.+376    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
    1922:	2c 81       	ldd	r18, Y+4	; 0x04
    1924:	3d 81       	ldd	r19, Y+5	; 0x05
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	31 05       	cpc	r19, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <DIO_setupPinDirection+0x5a>
    192c:	5f c0       	rjmp	.+190    	; 0x19ec <DIO_setupPinDirection+0x118>
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	91 05       	cpc	r25, r1
    1936:	09 f4       	brne	.+2      	; 0x193a <DIO_setupPinDirection+0x66>
    1938:	85 c0       	rjmp	.+266    	; 0x1a44 <DIO_setupPinDirection+0x170>
    193a:	af c0       	rjmp	.+350    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	a1 f4       	brne	.+40     	; 0x196a <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA, pin_number);
    1942:	aa e3       	ldi	r26, 0x3A	; 58
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ea e3       	ldi	r30, 0x3A	; 58
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_setupPinDirection+0x8c>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_setupPinDirection+0x88>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	98 c0       	rjmp	.+304    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
    196a:	aa e3       	ldi	r26, 0x3A	; 58
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ea e3       	ldi	r30, 0x3A	; 58
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <DIO_setupPinDirection+0xb4>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <DIO_setupPinDirection+0xb0>
    198c:	80 95       	com	r24
    198e:	84 23       	and	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	83 c0       	rjmp	.+262    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	a1 f4       	brne	.+40     	; 0x19c2 <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB, pin_number);
    199a:	a7 e3       	ldi	r26, 0x37	; 55
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e7 e3       	ldi	r30, 0x37	; 55
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_setupPinDirection+0xe4>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <DIO_setupPinDirection+0xe0>
    19bc:	84 2b       	or	r24, r20
    19be:	8c 93       	st	X, r24
    19c0:	6c c0       	rjmp	.+216    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
    19c2:	a7 e3       	ldi	r26, 0x37	; 55
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 e3       	ldi	r30, 0x37	; 55
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 2e       	mov	r0, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <DIO_setupPinDirection+0x10c>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	0a 94       	dec	r0
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <DIO_setupPinDirection+0x108>
    19e4:	80 95       	com	r24
    19e6:	84 23       	and	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	57 c0       	rjmp	.+174    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	a1 f4       	brne	.+40     	; 0x1a1a <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC, pin_number);
    19f2:	a4 e3       	ldi	r26, 0x34	; 52
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e4 e3       	ldi	r30, 0x34	; 52
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_setupPinDirection+0x13c>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_setupPinDirection+0x138>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	40 c0       	rjmp	.+128    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
    1a1a:	a4 e3       	ldi	r26, 0x34	; 52
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e4 e3       	ldi	r30, 0x34	; 52
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_setupPinDirection+0x164>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_setupPinDirection+0x160>
    1a3c:	80 95       	com	r24
    1a3e:	84 23       	and	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	2b c0       	rjmp	.+86     	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	a1 f4       	brne	.+40     	; 0x1a72 <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD, pin_number);
    1a4a:	a1 e3       	ldi	r26, 0x31	; 49
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e1 e3       	ldi	r30, 0x31	; 49
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <DIO_setupPinDirection+0x194>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <DIO_setupPinDirection+0x190>
    1a6c:	84 2b       	or	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
    1a72:	a1 e3       	ldi	r26, 0x31	; 49
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e1 e3       	ldi	r30, 0x31	; 49
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_setupPinDirection+0x1bc>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_setupPinDirection+0x1b8>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <DIO_writePin>:
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value){
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <DIO_writePin+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_writePin+0x8>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	6a 83       	std	Y+2, r22	; 0x02
    1abc:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	88 30       	cpi	r24, 0x08	; 8
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <DIO_writePin+0x1c>
    1ac4:	d5 c0       	rjmp	.+426    	; 0x1c70 <DIO_writePin+0x1c6>
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <DIO_writePin+0x24>
    1acc:	d1 c0       	rjmp	.+418    	; 0x1c70 <DIO_writePin+0x1c6>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3d 83       	std	Y+5, r19	; 0x05
    1ad6:	2c 83       	std	Y+4, r18	; 0x04
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	9d 81       	ldd	r25, Y+5	; 0x05
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <DIO_writePin+0x3a>
    1ae2:	43 c0       	rjmp	.+134    	; 0x1b6a <DIO_writePin+0xc0>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <DIO_writePin+0x4e>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	71 f0       	breq	.+28     	; 0x1b12 <DIO_writePin+0x68>
    1af6:	bc c0       	rjmp	.+376    	; 0x1c70 <DIO_writePin+0x1c6>
    1af8:	2c 81       	ldd	r18, Y+4	; 0x04
    1afa:	3d 81       	ldd	r19, Y+5	; 0x05
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <DIO_writePin+0x5a>
    1b02:	5f c0       	rjmp	.+190    	; 0x1bc2 <DIO_writePin+0x118>
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <DIO_writePin+0x66>
    1b0e:	85 c0       	rjmp	.+266    	; 0x1c1a <DIO_writePin+0x170>
    1b10:	af c0       	rjmp	.+350    	; 0x1c70 <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	a1 f4       	brne	.+40     	; 0x1b40 <DIO_writePin+0x96>
			{
				SET_BIT(PORTA, pin_number);
    1b18:	ab e3       	ldi	r26, 0x3B	; 59
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_writePin+0x8c>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_writePin+0x88>
    1b3a:	84 2b       	or	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	98 c0       	rjmp	.+304    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
    1b40:	ab e3       	ldi	r26, 0x3B	; 59
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e3       	ldi	r30, 0x3B	; 59
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <DIO_writePin+0xb4>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <DIO_writePin+0xb0>
    1b62:	80 95       	com	r24
    1b64:	84 23       	and	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	83 c0       	rjmp	.+262    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	a1 f4       	brne	.+40     	; 0x1b98 <DIO_writePin+0xee>
			{
				SET_BIT(PORTB, pin_number);
    1b70:	a8 e3       	ldi	r26, 0x38	; 56
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e8 e3       	ldi	r30, 0x38	; 56
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_writePin+0xe4>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_writePin+0xe0>
    1b92:	84 2b       	or	r24, r20
    1b94:	8c 93       	st	X, r24
    1b96:	6c c0       	rjmp	.+216    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
    1b98:	a8 e3       	ldi	r26, 0x38	; 56
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e8 e3       	ldi	r30, 0x38	; 56
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_writePin+0x10c>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <DIO_writePin+0x108>
    1bba:	80 95       	com	r24
    1bbc:	84 23       	and	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	57 c0       	rjmp	.+174    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	a1 f4       	brne	.+40     	; 0x1bf0 <DIO_writePin+0x146>
			{
				SET_BIT(PORTC, pin_number);
    1bc8:	a5 e3       	ldi	r26, 0x35	; 53
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e5 e3       	ldi	r30, 0x35	; 53
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <DIO_writePin+0x13c>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <DIO_writePin+0x138>
    1bea:	84 2b       	or	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	40 c0       	rjmp	.+128    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
    1bf0:	a5 e3       	ldi	r26, 0x35	; 53
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e3       	ldi	r30, 0x35	; 53
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_writePin+0x164>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_writePin+0x160>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	2b c0       	rjmp	.+86     	; 0x1c70 <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	a1 f4       	brne	.+40     	; 0x1c48 <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_number);
    1c20:	a2 e3       	ldi	r26, 0x32	; 50
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e2 e3       	ldi	r30, 0x32	; 50
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_writePin+0x194>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_writePin+0x190>
    1c42:	84 2b       	or	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
    1c48:	a2 e3       	ldi	r26, 0x32	; 50
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e2 e3       	ldi	r30, 0x32	; 50
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_writePin+0x1bc>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_writePin+0x1b8>
    1c6a:	80 95       	com	r24
    1c6c:	84 23       	and	r24, r20
    1c6e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <DIO_readPin>:
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_readPin+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <DIO_readPin+0x8>
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c92:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <DIO_readPin+0x1c>
    1c9a:	84 c0       	rjmp	.+264    	; 0x1da4 <DIO_readPin+0x124>
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	84 30       	cpi	r24, 0x04	; 4
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <DIO_readPin+0x24>
    1ca2:	80 c0       	rjmp	.+256    	; 0x1da4 <DIO_readPin+0x124>
	
	}
	else
	{
		/* Read the pin value*/
		switch (port_number)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	3d 83       	std	Y+5, r19	; 0x05
    1cac:	2c 83       	std	Y+4, r18	; 0x04
    1cae:	4c 81       	ldd	r20, Y+4	; 0x04
    1cb0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cb2:	41 30       	cpi	r20, 0x01	; 1
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	79 f1       	breq	.+94     	; 0x1d16 <DIO_readPin+0x96>
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	34 f4       	brge	.+12     	; 0x1cce <DIO_readPin+0x4e>
    1cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc6:	21 15       	cp	r18, r1
    1cc8:	31 05       	cpc	r19, r1
    1cca:	69 f0       	breq	.+26     	; 0x1ce6 <DIO_readPin+0x66>
    1ccc:	6b c0       	rjmp	.+214    	; 0x1da4 <DIO_readPin+0x124>
    1cce:	4c 81       	ldd	r20, Y+4	; 0x04
    1cd0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cd2:	42 30       	cpi	r20, 0x02	; 2
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	b9 f1       	breq	.+110    	; 0x1d46 <DIO_readPin+0xc6>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <DIO_readPin+0x64>
    1ce2:	49 c0       	rjmp	.+146    	; 0x1d76 <DIO_readPin+0xf6>
    1ce4:	5f c0       	rjmp	.+190    	; 0x1da4 <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_number))
    1ce6:	e9 e3       	ldi	r30, 0x39	; 57
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_readPin+0x7e>
    1cfa:	55 95       	asr	r21
    1cfc:	47 95       	ror	r20
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_readPin+0x7a>
    1d02:	ca 01       	movw	r24, r20
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	88 23       	and	r24, r24
    1d0a:	19 f0       	breq	.+6      	; 0x1d12 <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	49 c0       	rjmp	.+146    	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d12:	19 82       	std	Y+1, r1	; 0x01
    1d14:	47 c0       	rjmp	.+142    	; 0x1da4 <DIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_number))
    1d16:	e6 e3       	ldi	r30, 0x36	; 54
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a9 01       	movw	r20, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_readPin+0xae>
    1d2a:	55 95       	asr	r21
    1d2c:	47 95       	ror	r20
    1d2e:	8a 95       	dec	r24
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_readPin+0xaa>
    1d32:	ca 01       	movw	r24, r20
    1d34:	81 70       	andi	r24, 0x01	; 1
    1d36:	90 70       	andi	r25, 0x00	; 0
    1d38:	88 23       	and	r24, r24
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	31 c0       	rjmp	.+98     	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	2f c0       	rjmp	.+94     	; 0x1da4 <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_number))
    1d46:	e3 e3       	ldi	r30, 0x33	; 51
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a9 01       	movw	r20, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_readPin+0xde>
    1d5a:	55 95       	asr	r21
    1d5c:	47 95       	ror	r20
    1d5e:	8a 95       	dec	r24
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_readPin+0xda>
    1d62:	ca 01       	movw	r24, r20
    1d64:	81 70       	andi	r24, 0x01	; 1
    1d66:	90 70       	andi	r25, 0x00	; 0
    1d68:	88 23       	and	r24, r24
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	19 c0       	rjmp	.+50     	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	17 c0       	rjmp	.+46     	; 0x1da4 <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_number))
    1d76:	e0 e3       	ldi	r30, 0x30	; 48
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a9 01       	movw	r20, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <DIO_readPin+0x10e>
    1d8a:	55 95       	asr	r21
    1d8c:	47 95       	ror	r20
    1d8e:	8a 95       	dec	r24
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <DIO_readPin+0x10a>
    1d92:	ca 01       	movw	r24, r20
    1d94:	81 70       	andi	r24, 0x01	; 1
    1d96:	90 70       	andi	r25, 0x00	; 0
    1d98:	88 23       	and	r24, r24
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1da2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <DIO_setupPortDirection>:
void DIO_setupPortDirection(uint8 port_number, GPIO_PortDirectionType direction)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <DIO_setupPortDirection+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <DIO_setupPortDirection+0x8>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_number >= NUM_OF_PORTS)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	84 30       	cpi	r24, 0x04	; 4
    1dca:	90 f5       	brcc	.+100    	; 0x1e30 <DIO_setupPortDirection+0x7a>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3c 83       	std	Y+4, r19	; 0x04
    1dd4:	2b 83       	std	Y+3, r18	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	d1 f0       	breq	.+52     	; 0x1e14 <DIO_setupPortDirection+0x5e>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <DIO_setupPortDirection+0x3e>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <DIO_setupPortDirection+0x54>
    1df2:	1e c0       	rjmp	.+60     	; 0x1e30 <DIO_setupPortDirection+0x7a>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <DIO_setupPortDirection+0x68>
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <DIO_setupPortDirection+0x72>
    1e08:	13 c0       	rjmp	.+38     	; 0x1e30 <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e0a:	ea e3       	ldi	r30, 0x3A	; 58
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	80 83       	st	Z, r24
    1e12:	0e c0       	rjmp	.+28     	; 0x1e30 <DIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e14:	e7 e3       	ldi	r30, 0x37	; 55
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	80 83       	st	Z, r24
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <DIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e1e:	e4 e3       	ldi	r30, 0x34	; 52
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	80 83       	st	Z, r24
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <DIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e28:	e1 e3       	ldi	r30, 0x31	; 49
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_number, uint8 value)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <DIO_writePort+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <DIO_writePort+0x8>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	90 f5       	brcc	.+100    	; 0x1eb8 <DIO_writePort+0x7a>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	3c 83       	std	Y+4, r19	; 0x04
    1e5c:	2b 83       	std	Y+3, r18	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	d1 f0       	breq	.+52     	; 0x1e9c <DIO_writePort+0x5e>
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <DIO_writePort+0x3e>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <DIO_writePort+0x54>
    1e7a:	1e c0       	rjmp	.+60     	; 0x1eb8 <DIO_writePort+0x7a>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	81 f0       	breq	.+32     	; 0x1ea6 <DIO_writePort+0x68>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	81 f0       	breq	.+32     	; 0x1eb0 <DIO_writePort+0x72>
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <DIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e92:	eb e3       	ldi	r30, 0x3B	; 59
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	80 83       	st	Z, r24
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <DIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e9c:	e8 e3       	ldi	r30, 0x38	; 56
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	80 83       	st	Z, r24
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <DIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ea6:	e5 e3       	ldi	r30, 0x35	; 53
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <DIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1eb0:	e2 e3       	ldi	r30, 0x32	; 50
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_number)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <DIO_readPort+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <DIO_readPort+0x8>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ed4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	90 f5       	brcc	.+100    	; 0x1f40 <DIO_readPort+0x7a>
		
	}
	else
	{
		/* Read the port value*/
		switch (port_number)
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	3c 83       	std	Y+4, r19	; 0x04
    1ee4:	2b 83       	std	Y+3, r18	; 0x03
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	d1 f0       	breq	.+52     	; 0x1f24 <DIO_readPort+0x5e>
    1ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <DIO_readPort+0x3e>
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <DIO_readPort+0x54>
    1f02:	1e c0       	rjmp	.+60     	; 0x1f40 <DIO_readPort+0x7a>
    1f04:	2b 81       	ldd	r18, Y+3	; 0x03
    1f06:	3c 81       	ldd	r19, Y+4	; 0x04
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <DIO_readPort+0x68>
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	83 30       	cpi	r24, 0x03	; 3
    1f14:	91 05       	cpc	r25, r1
    1f16:	81 f0       	breq	.+32     	; 0x1f38 <DIO_readPort+0x72>
    1f18:	13 c0       	rjmp	.+38     	; 0x1f40 <DIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f1a:	e9 e3       	ldi	r30, 0x39	; 57
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <DIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f24:	e6 e3       	ldi	r30, 0x36	; 54
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	09 c0       	rjmp	.+18     	; 0x1f40 <DIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f2e:	e3 e3       	ldi	r30, 0x33	; 51
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <DIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f38:	e0 e3       	ldi	r30, 0x30	; 48
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <APP_displayPress>:
STATE P_state = SAFE;
STATE T_state = SAFE;


void APP_displayPress(uint32 pressure)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <APP_displayPress+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <APP_displayPress+0x8>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	69 83       	std	Y+1, r22	; 0x01
    1f5e:	7a 83       	std	Y+2, r23	; 0x02
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(0,8);
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	68 e0       	ldi	r22, 0x08	; 8
    1f68:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_moveCursor>
	if ((10000 <= pressure) || (0 > pressure))
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	ab 81       	ldd	r26, Y+3	; 0x03
    1f72:	bc 81       	ldd	r27, Y+4	; 0x04
    1f74:	80 31       	cpi	r24, 0x10	; 16
    1f76:	27 e2       	ldi	r18, 0x27	; 39
    1f78:	92 07       	cpc	r25, r18
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	a2 07       	cpc	r26, r18
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	b2 07       	cpc	r27, r18
    1f82:	48 f0       	brcs	.+18     	; 0x1f96 <APP_displayPress+0x46>
	{
		LCD_displayString("ERR");
    1f84:	80 e6       	ldi	r24, 0x60	; 96
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
		LCD_displayString(" ");
    1f8c:	84 e6       	ldi	r24, 0x64	; 100
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
    1f94:	67 c0       	rjmp	.+206    	; 0x2064 <APP_displayPress+0x114>
	}
	else if((1000 <= pressure) && (10000 > pressure))
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f9e:	88 3e       	cpi	r24, 0xE8	; 232
    1fa0:	23 e0       	ldi	r18, 0x03	; 3
    1fa2:	92 07       	cpc	r25, r18
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	a2 07       	cpc	r26, r18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	b2 07       	cpc	r27, r18
    1fac:	88 f0       	brcs	.+34     	; 0x1fd0 <APP_displayPress+0x80>
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	ab 81       	ldd	r26, Y+3	; 0x03
    1fb4:	bc 81       	ldd	r27, Y+4	; 0x04
    1fb6:	80 31       	cpi	r24, 0x10	; 16
    1fb8:	27 e2       	ldi	r18, 0x27	; 39
    1fba:	92 07       	cpc	r25, r18
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	a2 07       	cpc	r26, r18
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	b2 07       	cpc	r27, r18
    1fc4:	28 f4       	brcc	.+10     	; 0x1fd0 <APP_displayPress+0x80>
	{
		LCD_intgerToString(pressure);
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
    1fce:	4a c0       	rjmp	.+148    	; 0x2064 <APP_displayPress+0x114>
	}
	else if((100 <= pressure) && (1000 > pressure))
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fd6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fd8:	84 36       	cpi	r24, 0x64	; 100
    1fda:	91 05       	cpc	r25, r1
    1fdc:	a1 05       	cpc	r26, r1
    1fde:	b1 05       	cpc	r27, r1
    1fe0:	a8 f0       	brcs	.+42     	; 0x200c <APP_displayPress+0xbc>
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	ab 81       	ldd	r26, Y+3	; 0x03
    1fe8:	bc 81       	ldd	r27, Y+4	; 0x04
    1fea:	88 3e       	cpi	r24, 0xE8	; 232
    1fec:	23 e0       	ldi	r18, 0x03	; 3
    1fee:	92 07       	cpc	r25, r18
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	a2 07       	cpc	r26, r18
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	b2 07       	cpc	r27, r18
    1ff8:	48 f4       	brcc	.+18     	; 0x200c <APP_displayPress+0xbc>
	{
		LCD_intgerToString(pressure);
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString(" ");
    2002:	84 e6       	ldi	r24, 0x64	; 100
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
    200a:	2c c0       	rjmp	.+88     	; 0x2064 <APP_displayPress+0x114>
	}
	else if((10 <= pressure) && (100 > pressure))
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	ab 81       	ldd	r26, Y+3	; 0x03
    2012:	bc 81       	ldd	r27, Y+4	; 0x04
    2014:	8a 30       	cpi	r24, 0x0A	; 10
    2016:	91 05       	cpc	r25, r1
    2018:	a1 05       	cpc	r26, r1
    201a:	b1 05       	cpc	r27, r1
    201c:	90 f0       	brcs	.+36     	; 0x2042 <APP_displayPress+0xf2>
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	ab 81       	ldd	r26, Y+3	; 0x03
    2024:	bc 81       	ldd	r27, Y+4	; 0x04
    2026:	84 36       	cpi	r24, 0x64	; 100
    2028:	91 05       	cpc	r25, r1
    202a:	a1 05       	cpc	r26, r1
    202c:	b1 05       	cpc	r27, r1
    202e:	48 f4       	brcc	.+18     	; 0x2042 <APP_displayPress+0xf2>
	{
		LCD_intgerToString(pressure);
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString("  ");
    2038:	86 e6       	ldi	r24, 0x66	; 102
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
    2040:	11 c0       	rjmp	.+34     	; 0x2064 <APP_displayPress+0x114>
	}
	else if((0 <= pressure) && (10 > pressure))
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	ab 81       	ldd	r26, Y+3	; 0x03
    2048:	bc 81       	ldd	r27, Y+4	; 0x04
    204a:	8a 30       	cpi	r24, 0x0A	; 10
    204c:	91 05       	cpc	r25, r1
    204e:	a1 05       	cpc	r26, r1
    2050:	b1 05       	cpc	r27, r1
    2052:	40 f4       	brcc	.+16     	; 0x2064 <APP_displayPress+0x114>
	{
		LCD_intgerToString(pressure);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString("   ");
    205c:	89 e6       	ldi	r24, 0x69	; 105
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
	}
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <LCD_displayRPM>:



void LCD_displayRPM(uint32 rpm)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <LCD_displayRPM+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <LCD_displayRPM+0x8>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	69 83       	std	Y+1, r22	; 0x01
    2080:	7a 83       	std	Y+2, r23	; 0x02
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(2,7);
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	67 e0       	ldi	r22, 0x07	; 7
    208a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_moveCursor>
	if(100000 <= rpm)
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	ab 81       	ldd	r26, Y+3	; 0x03
    2094:	bc 81       	ldd	r27, Y+4	; 0x04
    2096:	80 3a       	cpi	r24, 0xA0	; 160
    2098:	26 e8       	ldi	r18, 0x86	; 134
    209a:	92 07       	cpc	r25, r18
    209c:	21 e0       	ldi	r18, 0x01	; 1
    209e:	a2 07       	cpc	r26, r18
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	b2 07       	cpc	r27, r18
    20a4:	28 f0       	brcs	.+10     	; 0x20b0 <LCD_displayRPM+0x3e>
	{
		LCD_intgerToString(rpm);
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
    20ae:	8b c0       	rjmp	.+278    	; 0x21c6 <LCD_displayRPM+0x154>
	}
	else if((10000 <= rpm) && (100000 > rpm))
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	ab 81       	ldd	r26, Y+3	; 0x03
    20b6:	bc 81       	ldd	r27, Y+4	; 0x04
    20b8:	80 31       	cpi	r24, 0x10	; 16
    20ba:	27 e2       	ldi	r18, 0x27	; 39
    20bc:	92 07       	cpc	r25, r18
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	a2 07       	cpc	r26, r18
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	b2 07       	cpc	r27, r18
    20c6:	a0 f0       	brcs	.+40     	; 0x20f0 <LCD_displayRPM+0x7e>
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	ab 81       	ldd	r26, Y+3	; 0x03
    20ce:	bc 81       	ldd	r27, Y+4	; 0x04
    20d0:	80 3a       	cpi	r24, 0xA0	; 160
    20d2:	26 e8       	ldi	r18, 0x86	; 134
    20d4:	92 07       	cpc	r25, r18
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	a2 07       	cpc	r26, r18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	b2 07       	cpc	r27, r18
    20de:	40 f4       	brcc	.+16     	; 0x20f0 <LCD_displayRPM+0x7e>
	{
		LCD_intgerToString(rpm);
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayCharacter(' ');
    20e8:	80 e2       	ldi	r24, 0x20	; 32
    20ea:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_displayCharacter>
    20ee:	6b c0       	rjmp	.+214    	; 0x21c6 <LCD_displayRPM+0x154>
	}
	else if((1000 <= rpm) && (10000 > rpm))
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	ab 81       	ldd	r26, Y+3	; 0x03
    20f6:	bc 81       	ldd	r27, Y+4	; 0x04
    20f8:	88 3e       	cpi	r24, 0xE8	; 232
    20fa:	23 e0       	ldi	r18, 0x03	; 3
    20fc:	92 07       	cpc	r25, r18
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	a2 07       	cpc	r26, r18
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	b2 07       	cpc	r27, r18
    2106:	a8 f0       	brcs	.+42     	; 0x2132 <LCD_displayRPM+0xc0>
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	ab 81       	ldd	r26, Y+3	; 0x03
    210e:	bc 81       	ldd	r27, Y+4	; 0x04
    2110:	80 31       	cpi	r24, 0x10	; 16
    2112:	27 e2       	ldi	r18, 0x27	; 39
    2114:	92 07       	cpc	r25, r18
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	a2 07       	cpc	r26, r18
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	b2 07       	cpc	r27, r18
    211e:	48 f4       	brcc	.+18     	; 0x2132 <LCD_displayRPM+0xc0>
	{
		LCD_intgerToString(rpm);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString("  ");
    2128:	86 e6       	ldi	r24, 0x66	; 102
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
    2130:	4a c0       	rjmp	.+148    	; 0x21c6 <LCD_displayRPM+0x154>
	}
	else if((100 <= rpm) && (1000 > rpm))
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	ab 81       	ldd	r26, Y+3	; 0x03
    2138:	bc 81       	ldd	r27, Y+4	; 0x04
    213a:	84 36       	cpi	r24, 0x64	; 100
    213c:	91 05       	cpc	r25, r1
    213e:	a1 05       	cpc	r26, r1
    2140:	b1 05       	cpc	r27, r1
    2142:	a8 f0       	brcs	.+42     	; 0x216e <LCD_displayRPM+0xfc>
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	ab 81       	ldd	r26, Y+3	; 0x03
    214a:	bc 81       	ldd	r27, Y+4	; 0x04
    214c:	88 3e       	cpi	r24, 0xE8	; 232
    214e:	23 e0       	ldi	r18, 0x03	; 3
    2150:	92 07       	cpc	r25, r18
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	a2 07       	cpc	r26, r18
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	b2 07       	cpc	r27, r18
    215a:	48 f4       	brcc	.+18     	; 0x216e <LCD_displayRPM+0xfc>
	{
		LCD_intgerToString(rpm);
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString("   ");
    2164:	89 e6       	ldi	r24, 0x69	; 105
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
    216c:	2c c0       	rjmp	.+88     	; 0x21c6 <LCD_displayRPM+0x154>
	}
	else if((10 <= rpm) && (100 > rpm))
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	ab 81       	ldd	r26, Y+3	; 0x03
    2174:	bc 81       	ldd	r27, Y+4	; 0x04
    2176:	8a 30       	cpi	r24, 0x0A	; 10
    2178:	91 05       	cpc	r25, r1
    217a:	a1 05       	cpc	r26, r1
    217c:	b1 05       	cpc	r27, r1
    217e:	90 f0       	brcs	.+36     	; 0x21a4 <LCD_displayRPM+0x132>
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	ab 81       	ldd	r26, Y+3	; 0x03
    2186:	bc 81       	ldd	r27, Y+4	; 0x04
    2188:	84 36       	cpi	r24, 0x64	; 100
    218a:	91 05       	cpc	r25, r1
    218c:	a1 05       	cpc	r26, r1
    218e:	b1 05       	cpc	r27, r1
    2190:	48 f4       	brcc	.+18     	; 0x21a4 <LCD_displayRPM+0x132>
	{
		LCD_intgerToString(rpm);
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString("    ");
    219a:	8d e6       	ldi	r24, 0x6D	; 109
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
    21a2:	11 c0       	rjmp	.+34     	; 0x21c6 <LCD_displayRPM+0x154>
	}
	else if((0 <= rpm) && (10 > rpm))
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	ab 81       	ldd	r26, Y+3	; 0x03
    21aa:	bc 81       	ldd	r27, Y+4	; 0x04
    21ac:	8a 30       	cpi	r24, 0x0A	; 10
    21ae:	91 05       	cpc	r25, r1
    21b0:	a1 05       	cpc	r26, r1
    21b2:	b1 05       	cpc	r27, r1
    21b4:	40 f4       	brcc	.+16     	; 0x21c6 <LCD_displayRPM+0x154>
	{
		LCD_intgerToString(rpm);
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ba:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString("     ");
    21be:	82 e7       	ldi	r24, 0x72	; 114
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
	}
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <APP_displayTemp>:



void APP_displayTemp(uint32 temperature)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <APP_displayTemp+0x6>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <APP_displayTemp+0x8>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	69 83       	std	Y+1, r22	; 0x01
    21e2:	7a 83       	std	Y+2, r23	; 0x02
    21e4:	8b 83       	std	Y+3, r24	; 0x03
    21e6:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(1,7);
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	67 e0       	ldi	r22, 0x07	; 7
    21ec:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_moveCursor>
	if ((1000 <= temperature) || (0 > temperature))
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	ab 81       	ldd	r26, Y+3	; 0x03
    21f6:	bc 81       	ldd	r27, Y+4	; 0x04
    21f8:	88 3e       	cpi	r24, 0xE8	; 232
    21fa:	23 e0       	ldi	r18, 0x03	; 3
    21fc:	92 07       	cpc	r25, r18
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	a2 07       	cpc	r26, r18
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	b2 07       	cpc	r27, r18
    2206:	28 f0       	brcs	.+10     	; 0x2212 <APP_displayTemp+0x3e>
	{
		LCD_intgerToString(temperature);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
    2210:	3a c0       	rjmp	.+116    	; 0x2286 <APP_displayTemp+0xb2>
	}
	else if(100 <= temperature)
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	ab 81       	ldd	r26, Y+3	; 0x03
    2218:	bc 81       	ldd	r27, Y+4	; 0x04
    221a:	84 36       	cpi	r24, 0x64	; 100
    221c:	91 05       	cpc	r25, r1
    221e:	a1 05       	cpc	r26, r1
    2220:	b1 05       	cpc	r27, r1
    2222:	28 f0       	brcs	.+10     	; 0x222e <APP_displayTemp+0x5a>
	{
		LCD_intgerToString(temperature);
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
    222c:	2c c0       	rjmp	.+88     	; 0x2286 <APP_displayTemp+0xb2>
	}
	else if((10 <= temperature) && (100 > temperature))
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	ab 81       	ldd	r26, Y+3	; 0x03
    2234:	bc 81       	ldd	r27, Y+4	; 0x04
    2236:	8a 30       	cpi	r24, 0x0A	; 10
    2238:	91 05       	cpc	r25, r1
    223a:	a1 05       	cpc	r26, r1
    223c:	b1 05       	cpc	r27, r1
    223e:	90 f0       	brcs	.+36     	; 0x2264 <APP_displayTemp+0x90>
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	ab 81       	ldd	r26, Y+3	; 0x03
    2246:	bc 81       	ldd	r27, Y+4	; 0x04
    2248:	84 36       	cpi	r24, 0x64	; 100
    224a:	91 05       	cpc	r25, r1
    224c:	a1 05       	cpc	r26, r1
    224e:	b1 05       	cpc	r27, r1
    2250:	48 f4       	brcc	.+18     	; 0x2264 <APP_displayTemp+0x90>
	{
		LCD_intgerToString(temperature);
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString(" ");
    225a:	84 e6       	ldi	r24, 0x64	; 100
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
    2262:	11 c0       	rjmp	.+34     	; 0x2286 <APP_displayTemp+0xb2>
	}
	else if((0 <= temperature) && (10 > temperature))
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	ab 81       	ldd	r26, Y+3	; 0x03
    226a:	bc 81       	ldd	r27, Y+4	; 0x04
    226c:	8a 30       	cpi	r24, 0x0A	; 10
    226e:	91 05       	cpc	r25, r1
    2270:	a1 05       	cpc	r26, r1
    2272:	b1 05       	cpc	r27, r1
    2274:	40 f4       	brcc	.+16     	; 0x2286 <APP_displayTemp+0xb2>
	{
		LCD_intgerToString(temperature);
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayString("  ");
    227e:	86 e6       	ldi	r24, 0x66	; 102
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
	}
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <Temp_state>:




void Temp_state(void)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	if (g_temperature >= TEMPERATURE_SEVERE)
    229c:	80 91 da 01 	lds	r24, 0x01DA
    22a0:	90 91 db 01 	lds	r25, 0x01DB
    22a4:	a0 91 dc 01 	lds	r26, 0x01DC
    22a8:	b0 91 dd 01 	lds	r27, 0x01DD
    22ac:	8d 32       	cpi	r24, 0x2D	; 45
    22ae:	91 05       	cpc	r25, r1
    22b0:	a1 05       	cpc	r26, r1
    22b2:	b1 05       	cpc	r27, r1
    22b4:	20 f0       	brcs	.+8      	; 0x22be <Temp_state+0x2a>
	{
		T_state = SEVERE;
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	80 93 e5 01 	sts	0x01E5, r24
    22bc:	2d c0       	rjmp	.+90     	; 0x2318 <Temp_state+0x84>
	}
	else if ((g_temperature >= TEMPERATURE_MODERATE) && (g_temperature < TEMPERATURE_SEVERE))
    22be:	80 91 da 01 	lds	r24, 0x01DA
    22c2:	90 91 db 01 	lds	r25, 0x01DB
    22c6:	a0 91 dc 01 	lds	r26, 0x01DC
    22ca:	b0 91 dd 01 	lds	r27, 0x01DD
    22ce:	8c 31       	cpi	r24, 0x1C	; 28
    22d0:	91 05       	cpc	r25, r1
    22d2:	a1 05       	cpc	r26, r1
    22d4:	b1 05       	cpc	r27, r1
    22d6:	88 f0       	brcs	.+34     	; 0x22fa <Temp_state+0x66>
    22d8:	80 91 da 01 	lds	r24, 0x01DA
    22dc:	90 91 db 01 	lds	r25, 0x01DB
    22e0:	a0 91 dc 01 	lds	r26, 0x01DC
    22e4:	b0 91 dd 01 	lds	r27, 0x01DD
    22e8:	8d 32       	cpi	r24, 0x2D	; 45
    22ea:	91 05       	cpc	r25, r1
    22ec:	a1 05       	cpc	r26, r1
    22ee:	b1 05       	cpc	r27, r1
    22f0:	20 f4       	brcc	.+8      	; 0x22fa <Temp_state+0x66>
	{
		T_state = MODERATE;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 e5 01 	sts	0x01E5, r24
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <Temp_state+0x84>
	}
	else if ((g_temperature >= TEMPERATURE_SAFE) && (g_temperature < TEMPERATURE_MODERATE))
    22fa:	80 91 da 01 	lds	r24, 0x01DA
    22fe:	90 91 db 01 	lds	r25, 0x01DB
    2302:	a0 91 dc 01 	lds	r26, 0x01DC
    2306:	b0 91 dd 01 	lds	r27, 0x01DD
    230a:	8c 31       	cpi	r24, 0x1C	; 28
    230c:	91 05       	cpc	r25, r1
    230e:	a1 05       	cpc	r26, r1
    2310:	b1 05       	cpc	r27, r1
    2312:	10 f4       	brcc	.+4      	; 0x2318 <Temp_state+0x84>
	{
		T_state = SAFE;
    2314:	10 92 e5 01 	sts	0x01E5, r1
	}
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <Press_state>:

void Press_state(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	if (g_pressure >= PRESSURE_SEVERE)
    2326:	80 91 de 01 	lds	r24, 0x01DE
    232a:	90 91 df 01 	lds	r25, 0x01DF
    232e:	a0 91 e0 01 	lds	r26, 0x01E0
    2332:	b0 91 e1 01 	lds	r27, 0x01E1
    2336:	80 3a       	cpi	r24, 0xA0	; 160
    2338:	26 e8       	ldi	r18, 0x86	; 134
    233a:	92 07       	cpc	r25, r18
    233c:	21 e0       	ldi	r18, 0x01	; 1
    233e:	a2 07       	cpc	r26, r18
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	b2 07       	cpc	r27, r18
    2344:	20 f0       	brcs	.+8      	; 0x234e <Press_state+0x30>
	{
		P_state = SEVERE;
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	80 93 e4 01 	sts	0x01E4, r24
    234c:	46 c0       	rjmp	.+140    	; 0x23da <Press_state+0xbc>
	}
	else if ((g_pressure >= PRESSURE_MODERATE) && (g_pressure < PRESSURE_SEVERE))
    234e:	80 91 de 01 	lds	r24, 0x01DE
    2352:	90 91 df 01 	lds	r25, 0x01DF
    2356:	a0 91 e0 01 	lds	r26, 0x01E0
    235a:	b0 91 e1 01 	lds	r27, 0x01E1
    235e:	80 31       	cpi	r24, 0x10	; 16
    2360:	27 e2       	ldi	r18, 0x27	; 39
    2362:	92 07       	cpc	r25, r18
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	a2 07       	cpc	r26, r18
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	b2 07       	cpc	r27, r18
    236c:	a0 f0       	brcs	.+40     	; 0x2396 <Press_state+0x78>
    236e:	80 91 de 01 	lds	r24, 0x01DE
    2372:	90 91 df 01 	lds	r25, 0x01DF
    2376:	a0 91 e0 01 	lds	r26, 0x01E0
    237a:	b0 91 e1 01 	lds	r27, 0x01E1
    237e:	80 3a       	cpi	r24, 0xA0	; 160
    2380:	26 e8       	ldi	r18, 0x86	; 134
    2382:	92 07       	cpc	r25, r18
    2384:	21 e0       	ldi	r18, 0x01	; 1
    2386:	a2 07       	cpc	r26, r18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	b2 07       	cpc	r27, r18
    238c:	20 f4       	brcc	.+8      	; 0x2396 <Press_state+0x78>
	{
		P_state = MODERATE;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	80 93 e4 01 	sts	0x01E4, r24
    2394:	22 c0       	rjmp	.+68     	; 0x23da <Press_state+0xbc>
	}
	else if ((g_pressure >= PRESSURE_SAFE) && (g_pressure < PRESSURE_MODERATE))
    2396:	80 91 de 01 	lds	r24, 0x01DE
    239a:	90 91 df 01 	lds	r25, 0x01DF
    239e:	a0 91 e0 01 	lds	r26, 0x01E0
    23a2:	b0 91 e1 01 	lds	r27, 0x01E1
    23a6:	8c 32       	cpi	r24, 0x2C	; 44
    23a8:	21 e0       	ldi	r18, 0x01	; 1
    23aa:	92 07       	cpc	r25, r18
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	a2 07       	cpc	r26, r18
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	b2 07       	cpc	r27, r18
    23b4:	90 f0       	brcs	.+36     	; 0x23da <Press_state+0xbc>
    23b6:	80 91 de 01 	lds	r24, 0x01DE
    23ba:	90 91 df 01 	lds	r25, 0x01DF
    23be:	a0 91 e0 01 	lds	r26, 0x01E0
    23c2:	b0 91 e1 01 	lds	r27, 0x01E1
    23c6:	80 31       	cpi	r24, 0x10	; 16
    23c8:	27 e2       	ldi	r18, 0x27	; 39
    23ca:	92 07       	cpc	r25, r18
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	a2 07       	cpc	r26, r18
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	b2 07       	cpc	r27, r18
    23d4:	10 f4       	brcc	.+4      	; 0x23da <Press_state+0xbc>
	{
		P_state = SAFE;
    23d6:	10 92 e4 01 	sts	0x01E4, r1
	}
}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <Action_severe>:

void Action_severe(void)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    23e8:	0e 94 85 20 	call	0x410a	; 0x410a <BUZZER_on>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_HIGH);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	67 e0       	ldi	r22, 0x07	; 7
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_displayStringRowColumn(3,10,"FLAG ON");
    23f6:	28 e7       	ldi	r18, 0x78	; 120
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	6a e0       	ldi	r22, 0x0A	; 10
    23fe:	a9 01       	movw	r20, r18
    2400:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <Action_moderate>:

void Action_moderate(void)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    2412:	0e 94 85 20 	call	0x410a	; 0x410a <BUZZER_on>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_LOW);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	67 e0       	ldi	r22, 0x07	; 7
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_displayStringRowColumn(3,10,"FLAG OFF");
    2420:	20 e8       	ldi	r18, 0x80	; 128
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	83 e0       	ldi	r24, 0x03	; 3
    2426:	6a e0       	ldi	r22, 0x0A	; 10
    2428:	a9 01       	movw	r20, r18
    242a:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
}
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <Action_safe>:

void Action_safe(void)
{
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
	BUZZER_off();
    243c:	0e 94 91 20 	call	0x4122	; 0x4122 <BUZZER_off>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_LOW);
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	67 e0       	ldi	r22, 0x07	; 7
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_displayStringRowColumn(3,10,"FLAG OFF");
    244a:	20 e8       	ldi	r18, 0x80	; 128
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	6a e0       	ldi	r22, 0x0A	; 10
    2452:	a9 01       	movw	r20, r18
    2454:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <main>:


int main()
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	6e 97       	sbiw	r28, 0x1e	; 30
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    2472:	af e5       	ldi	r26, 0x5F	; 95
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ef e5       	ldi	r30, 0x5F	; 95
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	80 68       	ori	r24, 0x80	; 128
    247e:	8c 93       	st	X, r24

	uint16 LCD_distance; 		/*distance shown on the //LCD screen*/
	Ultrasonic_init(); /*initializing Ultrasonic*/
    2480:	0e 94 c2 14 	call	0x2984	; 0x2984 <Ultrasonic_init>
	TWI_init();
    2484:	0e 94 75 07 	call	0xeea	; 0xeea <TWI_init>
	BMP180_Start();
    2488:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <BMP180_Start>
	//	WSS_Init();
	DIO_setupPinDirection(PORTA_ID, PIN1_ID, PIN_OUTPUT);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW);
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_init();
    24a0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_init>
	BUZZER_init();
    24a4:	0e 94 74 20 	call	0x40e8	; 0x40e8 <BUZZER_init>
	WATERPUMP_init();
    24a8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <WATERPUMP_init>
	DIO_setupPinDirection(SLL_FLAG_PORT, SLL_FLAG_PIN, PIN_OUTPUT);
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	67 e0       	ldi	r22, 0x07	; 7
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

	LCD_displayStringRowColumn(0,0,"Press = ");
    24b6:	29 e8       	ldi	r18, 0x89	; 137
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	a9 01       	movw	r20, r18
    24c0:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,13,"hPa");
    24c4:	22 e9       	ldi	r18, 0x92	; 146
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	6d e0       	ldi	r22, 0x0D	; 13
    24cc:	a9 01       	movw	r20, r18
    24ce:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Temp = ");
    24d2:	26 e9       	ldi	r18, 0x96	; 150
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	a9 01       	movw	r20, r18
    24dc:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,11,"C");
    24e0:	2e e9       	ldi	r18, 0x9E	; 158
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	6b e0       	ldi	r22, 0x0B	; 11
    24e8:	a9 01       	movw	r20, r18
    24ea:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,0,"Distance= ");
    24ee:	20 ea       	ldi	r18, 0xA0	; 160
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	a9 01       	movw	r20, r18
    24f8:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,15,"cm");
    24fc:	2b ea       	ldi	r18, 0xAB	; 171
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	6f e0       	ldi	r22, 0x0F	; 15
    2504:	a9 01       	movw	r20, r18
    2506:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>


	while (1)
	{
		LCD_distance=Ultrasonic_readDistance(); /*storing the measured distance*/
    250a:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <Ultrasonic_readDistance>
    250e:	9e 8f       	std	Y+30, r25	; 0x1e
    2510:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_moveCursor(2, 11);
    2512:	82 e0       	ldi	r24, 0x02	; 2
    2514:	6b e0       	ldi	r22, 0x0B	; 11
    2516:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_moveCursor>
		if(LCD_distance>=100)                  /*//LCD handling*/
    251a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    251e:	84 36       	cpi	r24, 0x64	; 100
    2520:	91 05       	cpc	r25, r1
    2522:	28 f0       	brcs	.+10     	; 0x252e <main+0xd0>
		LCD_intgerToString(LCD_distance);
    2524:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2526:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2528:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
    252c:	07 c0       	rjmp	.+14     	; 0x253c <main+0xde>
		else{
		LCD_intgerToString(LCD_distance);
    252e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2530:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2532:	0e 94 47 20 	call	0x408e	; 0x408e <LCD_intgerToString>
		LCD_displayCharacter(' ');
    2536:	80 e2       	ldi	r24, 0x20	; 32
    2538:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_displayCharacter>
		}
		g_temperature = BMP180_calculateTemperature();
    253c:	0e 94 b9 28 	call	0x5172	; 0x5172 <BMP180_calculateTemperature>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	80 93 da 01 	sts	0x01DA, r24
    2548:	90 93 db 01 	sts	0x01DB, r25
    254c:	a0 93 dc 01 	sts	0x01DC, r26
    2550:	b0 93 dd 01 	sts	0x01DD, r27
		g_pressure = BMP180_calculatePressure();
    2554:	0e 94 c4 29 	call	0x5388	; 0x5388 <BMP180_calculatePressure>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	80 93 de 01 	sts	0x01DE, r24
    2560:	90 93 df 01 	sts	0x01DF, r25
    2564:	a0 93 e0 01 	sts	0x01E0, r26
    2568:	b0 93 e1 01 	sts	0x01E1, r27
		//g_rpm = WSS_getRPM();
		APP_displayTemp(g_temperature);
    256c:	80 91 da 01 	lds	r24, 0x01DA
    2570:	90 91 db 01 	lds	r25, 0x01DB
    2574:	a0 91 dc 01 	lds	r26, 0x01DC
    2578:	b0 91 dd 01 	lds	r27, 0x01DD
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <APP_displayTemp>
		APP_displayPress(g_pressure);
    2584:	80 91 de 01 	lds	r24, 0x01DE
    2588:	90 91 df 01 	lds	r25, 0x01DF
    258c:	a0 91 e0 01 	lds	r26, 0x01E0
    2590:	b0 91 e1 01 	lds	r27, 0x01E1
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <APP_displayPress>

		Temp_state();
    259c:	0e 94 4a 11 	call	0x2294	; 0x2294 <Temp_state>
		Press_state();
    25a0:	0e 94 8f 11 	call	0x231e	; 0x231e <Press_state>

		WATERPUMP_on();
    25a4:	0e 94 85 14 	call	0x290a	; 0x290a <WATERPUMP_on>
		LCD_displayStringRowColumn(3,0,"PUMP ON ");
    25a8:	2e ea       	ldi	r18, 0xAE	; 174
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	a9 01       	movw	r20, r18
    25b2:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	aa e7       	ldi	r26, 0x7A	; 122
    25bc:	b4 e4       	ldi	r27, 0x44	; 68
    25be:	89 8f       	std	Y+25, r24	; 0x19
    25c0:	9a 8f       	std	Y+26, r25	; 0x1a
    25c2:	ab 8f       	std	Y+27, r26	; 0x1b
    25c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	69 8d       	ldd	r22, Y+25	; 0x19
    25c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a e7       	ldi	r20, 0x7A	; 122
    25d4:	55 e4       	ldi	r21, 0x45	; 69
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8d 8b       	std	Y+21, r24	; 0x15
    25e0:	9e 8b       	std	Y+22, r25	; 0x16
    25e2:	af 8b       	std	Y+23, r26	; 0x17
    25e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25e6:	6d 89       	ldd	r22, Y+21	; 0x15
    25e8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ea:	8f 89       	ldd	r24, Y+23	; 0x17
    25ec:	98 8d       	ldd	r25, Y+24	; 0x18
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <main+0x1aa>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <main+0x228>
	else if (__tmp > 65535)
    2608:	6d 89       	ldd	r22, Y+21	; 0x15
    260a:	7e 89       	ldd	r23, Y+22	; 0x16
    260c:	8f 89       	ldd	r24, Y+23	; 0x17
    260e:	98 8d       	ldd	r25, Y+24	; 0x18
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <main+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	69 8d       	ldd	r22, Y+25	; 0x19
    2622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <main+0x20a>
    264a:	80 e9       	ldi	r24, 0x90	; 144
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	9a 8b       	std	Y+18, r25	; 0x12
    2650:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2652:	89 89       	ldd	r24, Y+17	; 0x11
    2654:	9a 89       	ldd	r25, Y+18	; 0x12
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <main+0x1f8>
    265a:	9a 8b       	std	Y+18, r25	; 0x12
    265c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	8b 89       	ldd	r24, Y+19	; 0x13
    2660:	9c 89       	ldd	r25, Y+20	; 0x14
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9c 8b       	std	Y+20, r25	; 0x14
    2666:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	8b 89       	ldd	r24, Y+19	; 0x13
    266a:	9c 89       	ldd	r25, Y+20	; 0x14
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <main+0x1ec>
    2670:	14 c0       	rjmp	.+40     	; 0x269a <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	6d 89       	ldd	r22, Y+21	; 0x15
    2674:	7e 89       	ldd	r23, Y+22	; 0x16
    2676:	8f 89       	ldd	r24, Y+23	; 0x17
    2678:	98 8d       	ldd	r25, Y+24	; 0x18
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9c 8b       	std	Y+20, r25	; 0x14
    2684:	8b 8b       	std	Y+19, r24	; 0x13
    2686:	8b 89       	ldd	r24, Y+19	; 0x13
    2688:	9c 89       	ldd	r25, Y+20	; 0x14
    268a:	98 8b       	std	Y+16, r25	; 0x10
    268c:	8f 87       	std	Y+15, r24	; 0x0f
    268e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2690:	98 89       	ldd	r25, Y+16	; 0x10
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <main+0x234>
    2696:	98 8b       	std	Y+16, r25	; 0x10
    2698:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		WATERPUMP_off();
    269a:	0e 94 91 14 	call	0x2922	; 0x2922 <WATERPUMP_off>
		LCD_displayStringRowColumn(3,0,"PUMP OFF");
    269e:	27 eb       	ldi	r18, 0xB7	; 183
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	a9 01       	movw	r20, r18
    26a8:	0e 94 2e 20 	call	0x405c	; 0x405c <LCD_displayStringRowColumn>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	aa e7       	ldi	r26, 0x7A	; 122
    26b2:	b5 e4       	ldi	r27, 0x45	; 69
    26b4:	8b 87       	std	Y+11, r24	; 0x0b
    26b6:	9c 87       	std	Y+12, r25	; 0x0c
    26b8:	ad 87       	std	Y+13, r26	; 0x0d
    26ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a e7       	ldi	r20, 0x7A	; 122
    26ca:	55 e4       	ldi	r21, 0x45	; 69
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	8f 83       	std	Y+7, r24	; 0x07
    26d6:	98 87       	std	Y+8, r25	; 0x08
    26d8:	a9 87       	std	Y+9, r26	; 0x09
    26da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	2c f4       	brge	.+10     	; 0x26fe <main+0x2a0>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <main+0x31e>
	else if (__tmp > 65535)
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	4c f5       	brge	.+82     	; 0x2768 <main+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2716:	6b 85       	ldd	r22, Y+11	; 0x0b
    2718:	7c 85       	ldd	r23, Y+12	; 0x0c
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	0f c0       	rjmp	.+30     	; 0x275e <main+0x300>
    2740:	80 e9       	ldi	r24, 0x90	; 144
    2742:	91 e0       	ldi	r25, 0x01	; 1
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <main+0x2ee>
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	9e 83       	std	Y+6, r25	; 0x06
    275c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <main+0x2e2>
    2766:	d1 ce       	rjmp	.-606    	; 0x250a <main+0xac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <main+0x32a>
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	bc ce       	rjmp	.-648    	; 0x250a <main+0xac>

00002792 <__vector_1>:
/*------------------------------------------------------------------------------
 |                          ISR's Definitions                                  |
 ------------------------------------------------------------------------------*/

/* ISR for INT0 external interrupt triggered by WSS */
ISR(INT0_vect) {
    2792:	1f 92       	push	r1
    2794:	0f 92       	push	r0
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	0f 92       	push	r0
    279a:	11 24       	eor	r1, r1
    279c:	8f 93       	push	r24
    279e:	9f 93       	push	r25
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
	/* checks on the flag if flag = 1 the one second must be elapsed */
	if (g_oneSecFlag == 1) {
    27a8:	80 91 e8 01 	lds	r24, 0x01E8
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	79 f4       	brne	.+30     	; 0x27ce <__vector_1+0x3c>
		/* Store number of wheel pulses in one second */
		g_pulsesPerSecond = g_revolutions;
    27b0:	80 91 e6 01 	lds	r24, 0x01E6
    27b4:	90 91 e7 01 	lds	r25, 0x01E7
    27b8:	90 93 ea 01 	sts	0x01EA, r25
    27bc:	80 93 e9 01 	sts	0x01E9, r24

		/* Reset one second flag of the timer */
		g_oneSecFlag = 0;
    27c0:	10 92 e8 01 	sts	0x01E8, r1

		/* Reset the number of revolutions of the wheel */
		g_revolutions = 0;
    27c4:	10 92 e7 01 	sts	0x01E7, r1
    27c8:	10 92 e6 01 	sts	0x01E6, r1
    27cc:	0d c0       	rjmp	.+26     	; 0x27e8 <__vector_1+0x56>
	}
	/* if flag not equal to one then continue counting revolutions */
	else if (g_oneSecFlag == 0) {
    27ce:	80 91 e8 01 	lds	r24, 0x01E8
    27d2:	88 23       	and	r24, r24
    27d4:	49 f4       	brne	.+18     	; 0x27e8 <__vector_1+0x56>
		g_revolutions++;
    27d6:	80 91 e6 01 	lds	r24, 0x01E6
    27da:	90 91 e7 01 	lds	r25, 0x01E7
    27de:	01 96       	adiw	r24, 0x01	; 1
    27e0:	90 93 e7 01 	sts	0x01E7, r25
    27e4:	80 93 e6 01 	sts	0x01E6, r24
	}
}
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	9f 91       	pop	r25
    27ee:	8f 91       	pop	r24
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	0f 90       	pop	r0
    27f6:	1f 90       	pop	r1
    27f8:	18 95       	reti

000027fa <INT0_Init>:
 * 					for WSS. 											*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void INT0_Init(void) {
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
	/* Set the direction of external interrupt 0 to be input */
	DIO_setupPinDirection(INT0_PORT_ID, INT0_PIN_ID, PIN_INPUT);
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	62 e0       	ldi	r22, 0x02	; 2
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

	/************************** MCUCR Description **************************
	 * ISC00:01	= 1	The rising edge of INT0 generates an interrupt request
	 ***********************************************************************/
	MCUCR |= (1 << ISC01) | (1 << ISC00);
    280c:	a5 e5       	ldi	r26, 0x55	; 85
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e5 e5       	ldi	r30, 0x55	; 85
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	83 60       	ori	r24, 0x03	; 3
    2818:	8c 93       	st	X, r24

	/************************** GICR Description **************************
	 * INT0	= 1	External Interrupt Request 0 Enable
	 **********************************************************************/
	GICR |= (1 << INT0);
    281a:	ab e5       	ldi	r26, 0x5B	; 91
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	eb e5       	ldi	r30, 0x5B	; 91
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	80 68       	ori	r24, 0x80	; 128
    2826:	8c 93       	st	X, r24

	//SREG |= (1<<7);
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <WSS_timeCounter>:
 * 					to set one second timer flag 						*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void WSS_timeCounter(void) {
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	/* Set one second timer flag */
	g_oneSecFlag = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	80 93 e8 01 	sts	0x01E8, r24
}
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <WSS_Init>:
 * [Description]:	Function to initialize WSS module.				 	*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void WSS_Init(void) {
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	2e 97       	sbiw	r28, 0x0e	; 14
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
	/* Timer configuration struct specifying which Timer, mode of
	 * operation, initial count value, compare value (corresponding
	 * to one second), prescaler value, and ISR */
	Timer_configuration Config =
			{ Timer1, CTC, 0, 15625, 1024, WSS_timeCounter };
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	9b 87       	std	Y+11, r25	; 0x0b
    285c:	8a 87       	std	Y+10, r24	; 0x0a
    285e:	e8 ec       	ldi	r30, 0xC8	; 200
    2860:	f1 e0       	ldi	r31, 0x01	; 1
    2862:	fd 87       	std	Y+13, r31	; 0x0d
    2864:	ec 87       	std	Y+12, r30	; 0x0c
    2866:	f9 e0       	ldi	r31, 0x09	; 9
    2868:	fe 87       	std	Y+14, r31	; 0x0e
    286a:	ec 85       	ldd	r30, Y+12	; 0x0c
    286c:	fd 85       	ldd	r31, Y+13	; 0x0d
    286e:	00 80       	ld	r0, Z
    2870:	8c 85       	ldd	r24, Y+12	; 0x0c
    2872:	9d 85       	ldd	r25, Y+13	; 0x0d
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	9d 87       	std	Y+13, r25	; 0x0d
    2878:	8c 87       	std	Y+12, r24	; 0x0c
    287a:	ea 85       	ldd	r30, Y+10	; 0x0a
    287c:	fb 85       	ldd	r31, Y+11	; 0x0b
    287e:	00 82       	st	Z, r0
    2880:	8a 85       	ldd	r24, Y+10	; 0x0a
    2882:	9b 85       	ldd	r25, Y+11	; 0x0b
    2884:	01 96       	adiw	r24, 0x01	; 1
    2886:	9b 87       	std	Y+11, r25	; 0x0b
    2888:	8a 87       	std	Y+10, r24	; 0x0a
    288a:	9e 85       	ldd	r25, Y+14	; 0x0e
    288c:	91 50       	subi	r25, 0x01	; 1
    288e:	9e 87       	std	Y+14, r25	; 0x0e
    2890:	ee 85       	ldd	r30, Y+14	; 0x0e
    2892:	ee 23       	and	r30, r30
    2894:	51 f7       	brne	.-44     	; 0x286a <WSS_Init+0x28>

	INT0_Init();
    2896:	0e 94 fd 13 	call	0x27fa	; 0x27fa <INT0_Init>
}
    289a:	2e 96       	adiw	r28, 0x0e	; 14
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <WSS_getRPM>:
 * 					which means RPM										*
 * 																		*
 * [Args]			void												*
 * [Return]			RPM value											*
 *======================================================================*/
uint16 WSS_getRPM(void) {
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <WSS_getRPM+0x6>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
	uint16 rpm = 0;
    28b6:	1a 82       	std	Y+2, r1	; 0x02
    28b8:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate wheel speed in pulses per minute */
	rpm = g_pulsesPerSecond * 60;
    28ba:	20 91 e9 01 	lds	r18, 0x01E9
    28be:	30 91 ea 01 	lds	r19, 0x01EA
    28c2:	8c e3       	ldi	r24, 0x3C	; 60
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	ac 01       	movw	r20, r24
    28c8:	24 9f       	mul	r18, r20
    28ca:	c0 01       	movw	r24, r0
    28cc:	25 9f       	mul	r18, r21
    28ce:	90 0d       	add	r25, r0
    28d0:	34 9f       	mul	r19, r20
    28d2:	90 0d       	add	r25, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01

	/* Convert pulses per minute to RPM */
	rpm = rpm / PULSEPERREVOLUTION;

	return rpm;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <WATERPUMP_init>:

#include "../../MCAL/DIO/dio.h"
#include "../../ECUAL/WATERPUMP/waterpump.h"

void WATERPUMP_init(void)
{
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <WATERPUMP_on>:

void WATERPUMP_on(void)
{
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <WATERPUMP_off>:

void WATERPUMP_off(void)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <Ultrasonic_edgeProcessing>:
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_edgeProcessing(void)

{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
		g_edgeCount++;
    2942:	80 91 eb 01 	lds	r24, 0x01EB
    2946:	8f 5f       	subi	r24, 0xFF	; 255
    2948:	80 93 eb 01 	sts	0x01EB, r24
		if(g_edgeCount == 1)
    294c:	80 91 eb 01 	lds	r24, 0x01EB
    2950:	81 30       	cpi	r24, 0x01	; 1
    2952:	31 f4       	brne	.+12     	; 0x2960 <Ultrasonic_edgeProcessing+0x26>
		{
			/*
			 * Clear the timer counter register to start measurements from the
			 * first detected rising edge
			 */
			Icu_clearTimerValue();
    2954:	0e 94 43 0c 	call	0x1886	; 0x1886 <Icu_clearTimerValue>
			/* Detect falling edge */
			Icu_setEdgeDetectionType(FALLING);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	0e 94 19 0c 	call	0x1832	; 0x1832 <Icu_setEdgeDetectionType>
    295e:	0f c0       	rjmp	.+30     	; 0x297e <Ultrasonic_edgeProcessing+0x44>
		}
		else if(g_edgeCount == 2)
    2960:	80 91 eb 01 	lds	r24, 0x01EB
    2964:	82 30       	cpi	r24, 0x02	; 2
    2966:	59 f4       	brne	.+22     	; 0x297e <Ultrasonic_edgeProcessing+0x44>
		{
			/* storing the value of the 'ICR1' register in the g_timerValue variable where it's global *
		 	* as it will be used again in another function which is called "ULTRASONIC_readDistance". */

			g_timeHigh = Icu_getInputCaptureValue();
    2968:	0e 94 38 0c 	call	0x1870	; 0x1870 <Icu_getInputCaptureValue>
    296c:	90 93 ed 01 	sts	0x01ED, r25
    2970:	80 93 ec 01 	sts	0x01EC, r24
			/* Detect rising edge */


			Icu_setEdgeDetectionType(RISING);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	0e 94 19 0c 	call	0x1832	; 0x1832 <Icu_setEdgeDetectionType>
			g_edgeCount=0;
    297a:	10 92 eb 01 	sts	0x01EB, r1
		}


}
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <Ultrasonic_init>:
 *
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_init(void)
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	00 d0       	rcall	.+0      	; 0x298a <Ultrasonic_init+0x6>
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	8a 83       	std	Y+2, r24	; 0x02
	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    2996:	8d e9       	ldi	r24, 0x9D	; 157
    2998:	94 e1       	ldi	r25, 0x14	; 20
    299a:	0e 94 07 0c 	call	0x180e	; 0x180e <Icu_setCallBack>
	/* Initialize the ICU driver */
	Icu_init(&Icu_Config);
    299e:	ce 01       	movw	r24, r28
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	0e 94 ab 0b 	call	0x1756	; 0x1756 <Icu_init>
	/*setup the direction of the trigger pin as output pin through the DIO driver*/
	DIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	65 e0       	ldi	r22, 0x05	; 5
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	/*disabling trigger pin*/
	DIO_writePin(PORTB_ID,PIN5_ID,LOGIC_LOW);
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	65 e0       	ldi	r22, 0x05	; 5
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>

}
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <Ultrasonic_Trigger>:
 * [Description]   : Send the Trigger pulse to the ultrasonic
 *
 * [Args]          : NONE
 *******************************************************************************/
void Ultrasonic_Trigger(void)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    29cc:	2e 97       	sbiw	r28, 0x0e	; 14
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
	DIO_writePin(PORTB_ID,PIN5_ID,1);
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	65 e0       	ldi	r22, 0x05	; 5
    29dc:	41 e0       	ldi	r20, 0x01	; 1
    29de:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    29e2:	8a e9       	ldi	r24, 0x9A	; 154
    29e4:	99 e9       	ldi	r25, 0x99	; 153
    29e6:	a9 e1       	ldi	r26, 0x19	; 25
    29e8:	be e3       	ldi	r27, 0x3E	; 62
    29ea:	8b 87       	std	Y+11, r24	; 0x0b
    29ec:	9c 87       	std	Y+12, r25	; 0x0c
    29ee:	ad 87       	std	Y+13, r26	; 0x0d
    29f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	4a e7       	ldi	r20, 0x7A	; 122
    2a00:	55 e4       	ldi	r21, 0x45	; 69
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	8f 83       	std	Y+7, r24	; 0x07
    2a0c:	98 87       	std	Y+8, r25	; 0x08
    2a0e:	a9 87       	std	Y+9, r26	; 0x09
    2a10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a12:	6f 81       	ldd	r22, Y+7	; 0x07
    2a14:	78 85       	ldd	r23, Y+8	; 0x08
    2a16:	89 85       	ldd	r24, Y+9	; 0x09
    2a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e8       	ldi	r20, 0x80	; 128
    2a20:	5f e3       	ldi	r21, 0x3F	; 63
    2a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a26:	88 23       	and	r24, r24
    2a28:	2c f4       	brge	.+10     	; 0x2a34 <Ultrasonic_Trigger+0x70>
		__ticks = 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9e 83       	std	Y+6, r25	; 0x06
    2a30:	8d 83       	std	Y+5, r24	; 0x05
    2a32:	3f c0       	rjmp	.+126    	; 0x2ab2 <Ultrasonic_Trigger+0xee>
	else if (__tmp > 65535)
    2a34:	6f 81       	ldd	r22, Y+7	; 0x07
    2a36:	78 85       	ldd	r23, Y+8	; 0x08
    2a38:	89 85       	ldd	r24, Y+9	; 0x09
    2a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	3f ef       	ldi	r19, 0xFF	; 255
    2a40:	4f e7       	ldi	r20, 0x7F	; 127
    2a42:	57 e4       	ldi	r21, 0x47	; 71
    2a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a48:	18 16       	cp	r1, r24
    2a4a:	4c f5       	brge	.+82     	; 0x2a9e <Ultrasonic_Trigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	51 e4       	ldi	r21, 0x41	; 65
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
    2a74:	0f c0       	rjmp	.+30     	; 0x2a94 <Ultrasonic_Trigger+0xd0>
    2a76:	80 e9       	ldi	r24, 0x90	; 144
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	9c 83       	std	Y+4, r25	; 0x04
    2a7c:	8b 83       	std	Y+3, r24	; 0x03
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	9c 81       	ldd	r25, Y+4	; 0x04
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <Ultrasonic_Trigger+0xbe>
    2a86:	9c 83       	std	Y+4, r25	; 0x04
    2a88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a94:	8d 81       	ldd	r24, Y+5	; 0x05
    2a96:	9e 81       	ldd	r25, Y+6	; 0x06
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	69 f7       	brne	.-38     	; 0x2a76 <Ultrasonic_Trigger+0xb2>
    2a9c:	14 c0       	rjmp	.+40     	; 0x2ac6 <Ultrasonic_Trigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa0:	78 85       	ldd	r23, Y+8	; 0x08
    2aa2:	89 85       	ldd	r24, Y+9	; 0x09
    2aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	9a 83       	std	Y+2, r25	; 0x02
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	9a 81       	ldd	r25, Y+2	; 0x02
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <Ultrasonic_Trigger+0xfa>
    2ac2:	9a 83       	std	Y+2, r25	; 0x02
    2ac4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(0.15);
	DIO_writePin(PORTB_ID,PIN5_ID,0);
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	65 e0       	ldi	r22, 0x05	; 5
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>

}
    2ad0:	2e 96       	adiw	r28, 0x0e	; 14
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <Ultrasonic_readDistance>:
 * [Returns]       : Distance (The measured distance in Centimeter).
 * [NOTE]          : The calculated distance will be updated when use another prescaler and CPU freq
 *******************************************************************************/

uint16 Ultrasonic_readDistance(void)
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <Ultrasonic_readDistance+0x6>
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	static uint32 distance;
	/*for calibrating the reading due to ultrasonic tolerance*/
	static uint32 distance_calibration;

	/*enabling triggering*/
	Ultrasonic_Trigger();
    2aec:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <Ultrasonic_Trigger>
				 in this case i will work with no prescaler so prescaler=1
				 distance is divided by 2 because it is distance of going and return back*/

	/******** distance =(g_timeHigh*0.01715)*(Prescaler/FCPU)+1  ***********/

	 distance = (g_timeHigh*0.01715)/2+1;
    2af0:	80 91 ec 01 	lds	r24, 0x01EC
    2af4:	90 91 ed 01 	lds	r25, 0x01ED
    2af8:	cc 01       	movw	r24, r24
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	28 e2       	ldi	r18, 0x28	; 40
    2b10:	3e e7       	ldi	r19, 0x7E	; 126
    2b12:	4c e8       	ldi	r20, 0x8C	; 140
    2b14:	5c e3       	ldi	r21, 0x3C	; 60
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	50 e4       	ldi	r21, 0x40	; 64
    2b2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e8       	ldi	r20, 0x80	; 128
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	80 93 f2 01 	sts	0x01F2, r24
    2b56:	90 93 f3 01 	sts	0x01F3, r25
    2b5a:	a0 93 f4 01 	sts	0x01F4, r26
    2b5e:	b0 93 f5 01 	sts	0x01F5, r27
	 /* (+1) because of ultrasonic tolerence*/
	 /*Also for calibration*/

	 if(distance>=342){
    2b62:	80 91 f2 01 	lds	r24, 0x01F2
    2b66:	90 91 f3 01 	lds	r25, 0x01F3
    2b6a:	a0 91 f4 01 	lds	r26, 0x01F4
    2b6e:	b0 91 f5 01 	lds	r27, 0x01F5
    2b72:	86 35       	cpi	r24, 0x56	; 86
    2b74:	21 e0       	ldi	r18, 0x01	; 1
    2b76:	92 07       	cpc	r25, r18
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	a2 07       	cpc	r26, r18
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	b2 07       	cpc	r27, r18
    2b80:	f0 f0       	brcs	.+60     	; 0x2bbe <Ultrasonic_readDistance+0xdc>
	 		distance_calibration=distance+2;
    2b82:	80 91 f2 01 	lds	r24, 0x01F2
    2b86:	90 91 f3 01 	lds	r25, 0x01F3
    2b8a:	a0 91 f4 01 	lds	r26, 0x01F4
    2b8e:	b0 91 f5 01 	lds	r27, 0x01F5
    2b92:	02 96       	adiw	r24, 0x02	; 2
    2b94:	a1 1d       	adc	r26, r1
    2b96:	b1 1d       	adc	r27, r1
    2b98:	80 93 ee 01 	sts	0x01EE, r24
    2b9c:	90 93 ef 01 	sts	0x01EF, r25
    2ba0:	a0 93 f0 01 	sts	0x01F0, r26
    2ba4:	b0 93 f1 01 	sts	0x01F1, r27
	 		return distance_calibration;
    2ba8:	80 91 ee 01 	lds	r24, 0x01EE
    2bac:	90 91 ef 01 	lds	r25, 0x01EF
    2bb0:	a0 91 f0 01 	lds	r26, 0x01F0
    2bb4:	b0 91 f1 01 	lds	r27, 0x01F1
    2bb8:	9a 83       	std	Y+2, r25	; 0x02
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	35 c0       	rjmp	.+106    	; 0x2c28 <Ultrasonic_readDistance+0x146>
	 	}
	 	else if(distance>=154){
    2bbe:	80 91 f2 01 	lds	r24, 0x01F2
    2bc2:	90 91 f3 01 	lds	r25, 0x01F3
    2bc6:	a0 91 f4 01 	lds	r26, 0x01F4
    2bca:	b0 91 f5 01 	lds	r27, 0x01F5
    2bce:	8a 39       	cpi	r24, 0x9A	; 154
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	a1 05       	cpc	r26, r1
    2bd4:	b1 05       	cpc	r27, r1
    2bd6:	f0 f0       	brcs	.+60     	; 0x2c14 <Ultrasonic_readDistance+0x132>
	 		distance_calibration=distance+1;
    2bd8:	80 91 f2 01 	lds	r24, 0x01F2
    2bdc:	90 91 f3 01 	lds	r25, 0x01F3
    2be0:	a0 91 f4 01 	lds	r26, 0x01F4
    2be4:	b0 91 f5 01 	lds	r27, 0x01F5
    2be8:	01 96       	adiw	r24, 0x01	; 1
    2bea:	a1 1d       	adc	r26, r1
    2bec:	b1 1d       	adc	r27, r1
    2bee:	80 93 ee 01 	sts	0x01EE, r24
    2bf2:	90 93 ef 01 	sts	0x01EF, r25
    2bf6:	a0 93 f0 01 	sts	0x01F0, r26
    2bfa:	b0 93 f1 01 	sts	0x01F1, r27
	 		return distance_calibration;
    2bfe:	80 91 ee 01 	lds	r24, 0x01EE
    2c02:	90 91 ef 01 	lds	r25, 0x01EF
    2c06:	a0 91 f0 01 	lds	r26, 0x01F0
    2c0a:	b0 91 f1 01 	lds	r27, 0x01F1
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	0a c0       	rjmp	.+20     	; 0x2c28 <Ultrasonic_readDistance+0x146>
	 	}

	 	else{
	 	return distance;}
    2c14:	80 91 f2 01 	lds	r24, 0x01F2
    2c18:	90 91 f3 01 	lds	r25, 0x01F3
    2c1c:	a0 91 f4 01 	lds	r26, 0x01F4
    2c20:	b0 91 f5 01 	lds	r27, 0x01F5
    2c24:	9a 83       	std	Y+2, r25	; 0x02
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	9a 81       	ldd	r25, Y+2	; 0x02

	 	return 1;



}
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the DIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	2e 97       	sbiw	r28, 0x0e	; 14
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	DIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	63 e0       	ldi	r22, 0x03	; 3
    2c4e:	41 e0       	ldi	r20, 0x01	; 1
    2c50:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	62 e0       	ldi	r22, 0x02	; 2
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	a0 ea       	ldi	r26, 0xA0	; 160
    2c64:	b1 e4       	ldi	r27, 0x41	; 65
    2c66:	8b 87       	std	Y+11, r24	; 0x0b
    2c68:	9c 87       	std	Y+12, r25	; 0x0c
    2c6a:	ad 87       	std	Y+13, r26	; 0x0d
    2c6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a e7       	ldi	r20, 0x7A	; 122
    2c7c:	55 e4       	ldi	r21, 0x45	; 69
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8f 83       	std	Y+7, r24	; 0x07
    2c88:	98 87       	std	Y+8, r25	; 0x08
    2c8a:	a9 87       	std	Y+9, r26	; 0x09
    2c8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c90:	78 85       	ldd	r23, Y+8	; 0x08
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca2:	88 23       	and	r24, r24
    2ca4:	2c f4       	brge	.+10     	; 0x2cb0 <LCD_init+0x7a>
		__ticks = 1;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	3f c0       	rjmp	.+126    	; 0x2d2e <LCD_init+0xf8>
	else if (__tmp > 65535)
    2cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb2:	78 85       	ldd	r23, Y+8	; 0x08
    2cb4:	89 85       	ldd	r24, Y+9	; 0x09
    2cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc4:	18 16       	cp	r1, r24
    2cc6:	4c f5       	brge	.+82     	; 0x2d1a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <LCD_init+0xda>
    2cf2:	80 e9       	ldi	r24, 0x90	; 144
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	9c 83       	std	Y+4, r25	; 0x04
    2cf8:	8b 83       	std	Y+3, r24	; 0x03
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_init+0xc8>
    2d02:	9c 83       	std	Y+4, r25	; 0x04
    2d04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	8d 81       	ldd	r24, Y+5	; 0x05
    2d12:	9e 81       	ldd	r25, Y+6	; 0x06
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	69 f7       	brne	.-38     	; 0x2cf2 <LCD_init+0xbc>
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1c:	78 85       	ldd	r23, Y+8	; 0x08
    2d1e:	89 85       	ldd	r24, Y+9	; 0x09
    2d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	9a 83       	std	Y+2, r25	; 0x02
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <LCD_init+0x104>
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	61 e0       	ldi	r22, 0x01	; 1
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	62 e0       	ldi	r22, 0x02	; 2
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	64 e0       	ldi	r22, 0x04	; 4
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2d6a:	83 e3       	ldi	r24, 0x33	; 51
    2d6c:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2d70:	82 e3       	ldi	r24, 0x32	; 50
    2d72:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2d76:	88 e2       	ldi	r24, 0x28	; 40
    2d78:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2d7c:	8c e0       	ldi	r24, 0x0C	; 12
    2d7e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <LCD_sendCommand>
}
    2d88:	2e 96       	adiw	r28, 0x0e	; 14
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	c3 56       	subi	r28, 0x63	; 99
    2da8:	d0 40       	sbci	r29, 0x00	; 0
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	fe 01       	movw	r30, r28
    2db6:	ed 59       	subi	r30, 0x9D	; 157
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	63 e0       	ldi	r22, 0x03	; 3
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e1 5a       	subi	r30, 0xA1	; 161
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	a0 e8       	ldi	r26, 0x80	; 128
    2dd2:	bf e3       	ldi	r27, 0x3F	; 63
    2dd4:	80 83       	st	Z, r24
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	a2 83       	std	Z+2, r26	; 0x02
    2dda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ddc:	8e 01       	movw	r16, r28
    2dde:	05 5a       	subi	r16, 0xA5	; 165
    2de0:	1f 4f       	sbci	r17, 0xFF	; 255
    2de2:	fe 01       	movw	r30, r28
    2de4:	e1 5a       	subi	r30, 0xA1	; 161
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	60 81       	ld	r22, Z
    2dea:	71 81       	ldd	r23, Z+1	; 0x01
    2dec:	82 81       	ldd	r24, Z+2	; 0x02
    2dee:	93 81       	ldd	r25, Z+3	; 0x03
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4a e7       	ldi	r20, 0x7A	; 122
    2df6:	55 e4       	ldi	r21, 0x45	; 69
    2df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	f8 01       	movw	r30, r16
    2e02:	80 83       	st	Z, r24
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	a2 83       	std	Z+2, r26	; 0x02
    2e08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e5 5a       	subi	r30, 0xA5	; 165
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	44 f4       	brge	.+16     	; 0x2e38 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e7 5a       	subi	r30, 0xA7	; 167
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
    2e36:	64 c0       	rjmp	.+200    	; 0x2f00 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 5a       	subi	r30, 0xA5	; 165
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	0c f0       	brlt	.+2      	; 0x2e58 <LCD_sendCommand+0xbe>
    2e56:	43 c0       	rjmp	.+134    	; 0x2ede <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e1 5a       	subi	r30, 0xA1	; 161
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e2       	ldi	r20, 0x20	; 32
    2e6c:	51 e4       	ldi	r21, 0x41	; 65
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	8e 01       	movw	r16, r28
    2e78:	07 5a       	subi	r16, 0xA7	; 167
    2e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	f8 01       	movw	r30, r16
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	80 83       	st	Z, r24
    2e8e:	1f c0       	rjmp	.+62     	; 0x2ece <LCD_sendCommand+0x134>
    2e90:	fe 01       	movw	r30, r28
    2e92:	e9 5a       	subi	r30, 0xA9	; 169
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 e9       	ldi	r24, 0x90	; 144
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e9 5a       	subi	r30, 0xA9	; 169
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 81       	ld	r24, Z
    2ea6:	91 81       	ldd	r25, Z+1	; 0x01
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <LCD_sendCommand+0x10e>
    2eac:	fe 01       	movw	r30, r28
    2eae:	e9 5a       	subi	r30, 0xA9	; 169
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	de 01       	movw	r26, r28
    2eb8:	a7 5a       	subi	r26, 0xA7	; 167
    2eba:	bf 4f       	sbci	r27, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e7 5a       	subi	r30, 0xA7	; 167
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	11 96       	adiw	r26, 0x01	; 1
    2eca:	9c 93       	st	X, r25
    2ecc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e7 5a       	subi	r30, 0xA7	; 167
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	91 81       	ldd	r25, Z+1	; 0x01
    2ed8:	00 97       	sbiw	r24, 0x00	; 0
    2eda:	d1 f6       	brne	.-76     	; 0x2e90 <LCD_sendCommand+0xf6>
    2edc:	27 c0       	rjmp	.+78     	; 0x2f2c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ede:	8e 01       	movw	r16, r28
    2ee0:	07 5a       	subi	r16, 0xA7	; 167
    2ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e5 5a       	subi	r30, 0xA5	; 165
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	60 81       	ld	r22, Z
    2eec:	71 81       	ldd	r23, Z+1	; 0x01
    2eee:	82 81       	ldd	r24, Z+2	; 0x02
    2ef0:	93 81       	ldd	r25, Z+3	; 0x03
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	f8 01       	movw	r30, r16
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
    2f00:	de 01       	movw	r26, r28
    2f02:	ab 5a       	subi	r26, 0xAB	; 171
    2f04:	bf 4f       	sbci	r27, 0xFF	; 255
    2f06:	fe 01       	movw	r30, r28
    2f08:	e7 5a       	subi	r30, 0xA7	; 167
    2f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	8d 93       	st	X+, r24
    2f12:	9c 93       	st	X, r25
    2f14:	fe 01       	movw	r30, r28
    2f16:	eb 5a       	subi	r30, 0xAB	; 171
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 81       	ld	r24, Z
    2f1c:	91 81       	ldd	r25, Z+1	; 0x01
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <LCD_sendCommand+0x184>
    2f22:	fe 01       	movw	r30, r28
    2f24:	eb 5a       	subi	r30, 0xAB	; 171
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
    2f30:	41 e0       	ldi	r20, 0x01	; 1
    2f32:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    2f36:	fe 01       	movw	r30, r28
    2f38:	ef 5a       	subi	r30, 0xAF	; 175
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	a0 e8       	ldi	r26, 0x80	; 128
    2f42:	bf e3       	ldi	r27, 0x3F	; 63
    2f44:	80 83       	st	Z, r24
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	a2 83       	std	Z+2, r26	; 0x02
    2f4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4c:	8e 01       	movw	r16, r28
    2f4e:	03 5b       	subi	r16, 0xB3	; 179
    2f50:	1f 4f       	sbci	r17, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	ef 5a       	subi	r30, 0xAF	; 175
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4a e7       	ldi	r20, 0x7A	; 122
    2f66:	55 e4       	ldi	r21, 0x45	; 69
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	f8 01       	movw	r30, r16
    2f72:	80 83       	st	Z, r24
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	a2 83       	std	Z+2, r26	; 0x02
    2f78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e3 5b       	subi	r30, 0xB3	; 179
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e8       	ldi	r20, 0x80	; 128
    2f8e:	5f e3       	ldi	r21, 0x3F	; 63
    2f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	44 f4       	brge	.+16     	; 0x2fa8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e5 5b       	subi	r30, 0xB5	; 181
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	80 83       	st	Z, r24
    2fa6:	64 c0       	rjmp	.+200    	; 0x3070 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e3 5b       	subi	r30, 0xB3	; 179
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	60 81       	ld	r22, Z
    2fb0:	71 81       	ldd	r23, Z+1	; 0x01
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	3f ef       	ldi	r19, 0xFF	; 255
    2fba:	4f e7       	ldi	r20, 0x7F	; 127
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc2:	18 16       	cp	r1, r24
    2fc4:	0c f0       	brlt	.+2      	; 0x2fc8 <LCD_sendCommand+0x22e>
    2fc6:	43 c0       	rjmp	.+134    	; 0x304e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ef 5a       	subi	r30, 0xAF	; 175
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	51 e4       	ldi	r21, 0x41	; 65
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8e 01       	movw	r16, r28
    2fe8:	05 5b       	subi	r16, 0xB5	; 181
    2fea:	1f 4f       	sbci	r17, 0xFF	; 255
    2fec:	bc 01       	movw	r22, r24
    2fee:	cd 01       	movw	r24, r26
    2ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	91 83       	std	Z+1, r25	; 0x01
    2ffc:	80 83       	st	Z, r24
    2ffe:	1f c0       	rjmp	.+62     	; 0x303e <LCD_sendCommand+0x2a4>
    3000:	fe 01       	movw	r30, r28
    3002:	e7 5b       	subi	r30, 0xB7	; 183
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	80 e9       	ldi	r24, 0x90	; 144
    3008:	91 e0       	ldi	r25, 0x01	; 1
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
    300e:	fe 01       	movw	r30, r28
    3010:	e7 5b       	subi	r30, 0xB7	; 183
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	91 81       	ldd	r25, Z+1	; 0x01
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <LCD_sendCommand+0x27e>
    301c:	fe 01       	movw	r30, r28
    301e:	e7 5b       	subi	r30, 0xB7	; 183
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3026:	de 01       	movw	r26, r28
    3028:	a5 5b       	subi	r26, 0xB5	; 181
    302a:	bf 4f       	sbci	r27, 0xFF	; 255
    302c:	fe 01       	movw	r30, r28
    302e:	e5 5b       	subi	r30, 0xB5	; 181
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	11 96       	adiw	r26, 0x01	; 1
    303a:	9c 93       	st	X, r25
    303c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303e:	fe 01       	movw	r30, r28
    3040:	e5 5b       	subi	r30, 0xB5	; 181
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	80 81       	ld	r24, Z
    3046:	91 81       	ldd	r25, Z+1	; 0x01
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	d1 f6       	brne	.-76     	; 0x3000 <LCD_sendCommand+0x266>
    304c:	27 c0       	rjmp	.+78     	; 0x309c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304e:	8e 01       	movw	r16, r28
    3050:	05 5b       	subi	r16, 0xB5	; 181
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e3 5b       	subi	r30, 0xB3	; 179
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	60 81       	ld	r22, Z
    305c:	71 81       	ldd	r23, Z+1	; 0x01
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	93 81       	ldd	r25, Z+3	; 0x03
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	f8 01       	movw	r30, r16
    306c:	91 83       	std	Z+1, r25	; 0x01
    306e:	80 83       	st	Z, r24
    3070:	de 01       	movw	r26, r28
    3072:	a9 5b       	subi	r26, 0xB9	; 185
    3074:	bf 4f       	sbci	r27, 0xFF	; 255
    3076:	fe 01       	movw	r30, r28
    3078:	e5 5b       	subi	r30, 0xB5	; 181
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 81       	ld	r24, Z
    307e:	91 81       	ldd	r25, Z+1	; 0x01
    3080:	8d 93       	st	X+, r24
    3082:	9c 93       	st	X, r25
    3084:	fe 01       	movw	r30, r28
    3086:	e9 5b       	subi	r30, 0xB9	; 185
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <LCD_sendCommand+0x2f4>
    3092:	fe 01       	movw	r30, r28
    3094:	e9 5b       	subi	r30, 0xB9	; 185
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    309c:	fe 01       	movw	r30, r28
    309e:	ed 59       	subi	r30, 0x9D	; 157
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	80 71       	andi	r24, 0x10	; 16
    30aa:	90 70       	andi	r25, 0x00	; 0
    30ac:	95 95       	asr	r25
    30ae:	87 95       	ror	r24
    30b0:	95 95       	asr	r25
    30b2:	87 95       	ror	r24
    30b4:	95 95       	asr	r25
    30b6:	87 95       	ror	r24
    30b8:	95 95       	asr	r25
    30ba:	87 95       	ror	r24
    30bc:	98 2f       	mov	r25, r24
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	60 e0       	ldi	r22, 0x00	; 0
    30c2:	49 2f       	mov	r20, r25
    30c4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    30c8:	fe 01       	movw	r30, r28
    30ca:	ed 59       	subi	r30, 0x9D	; 157
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	88 2f       	mov	r24, r24
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	80 72       	andi	r24, 0x20	; 32
    30d6:	90 70       	andi	r25, 0x00	; 0
    30d8:	95 95       	asr	r25
    30da:	87 95       	ror	r24
    30dc:	95 95       	asr	r25
    30de:	87 95       	ror	r24
    30e0:	95 95       	asr	r25
    30e2:	87 95       	ror	r24
    30e4:	95 95       	asr	r25
    30e6:	87 95       	ror	r24
    30e8:	95 95       	asr	r25
    30ea:	87 95       	ror	r24
    30ec:	98 2f       	mov	r25, r24
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	61 e0       	ldi	r22, 0x01	; 1
    30f2:	49 2f       	mov	r20, r25
    30f4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    30f8:	fe 01       	movw	r30, r28
    30fa:	ed 59       	subi	r30, 0x9D	; 157
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 81       	ld	r24, Z
    3100:	88 2f       	mov	r24, r24
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	80 74       	andi	r24, 0x40	; 64
    3106:	90 70       	andi	r25, 0x00	; 0
    3108:	08 2e       	mov	r0, r24
    310a:	89 2f       	mov	r24, r25
    310c:	00 0c       	add	r0, r0
    310e:	88 1f       	adc	r24, r24
    3110:	99 0b       	sbc	r25, r25
    3112:	00 0c       	add	r0, r0
    3114:	88 1f       	adc	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	98 2f       	mov	r25, r24
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	62 e0       	ldi	r22, 0x02	; 2
    311e:	49 2f       	mov	r20, r25
    3120:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    3124:	fe 01       	movw	r30, r28
    3126:	ed 59       	subi	r30, 0x9D	; 157
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	98 2f       	mov	r25, r24
    312e:	99 1f       	adc	r25, r25
    3130:	99 27       	eor	r25, r25
    3132:	99 1f       	adc	r25, r25
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	64 e0       	ldi	r22, 0x04	; 4
    3138:	49 2f       	mov	r20, r25
    313a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    313e:	fe 01       	movw	r30, r28
    3140:	ed 5b       	subi	r30, 0xBD	; 189
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	a0 e8       	ldi	r26, 0x80	; 128
    314a:	bf e3       	ldi	r27, 0x3F	; 63
    314c:	80 83       	st	Z, r24
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	a2 83       	std	Z+2, r26	; 0x02
    3152:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3154:	8e 01       	movw	r16, r28
    3156:	01 5c       	subi	r16, 0xC1	; 193
    3158:	1f 4f       	sbci	r17, 0xFF	; 255
    315a:	fe 01       	movw	r30, r28
    315c:	ed 5b       	subi	r30, 0xBD	; 189
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	60 81       	ld	r22, Z
    3162:	71 81       	ldd	r23, Z+1	; 0x01
    3164:	82 81       	ldd	r24, Z+2	; 0x02
    3166:	93 81       	ldd	r25, Z+3	; 0x03
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a e7       	ldi	r20, 0x7A	; 122
    316e:	55 e4       	ldi	r21, 0x45	; 69
    3170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	f8 01       	movw	r30, r16
    317a:	80 83       	st	Z, r24
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	a2 83       	std	Z+2, r26	; 0x02
    3180:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3182:	fe 01       	movw	r30, r28
    3184:	ff 96       	adiw	r30, 0x3f	; 63
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e8       	ldi	r20, 0x80	; 128
    3194:	5f e3       	ldi	r21, 0x3F	; 63
    3196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    319a:	88 23       	and	r24, r24
    319c:	2c f4       	brge	.+10     	; 0x31a8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	9e af       	std	Y+62, r25	; 0x3e
    31a4:	8d af       	std	Y+61, r24	; 0x3d
    31a6:	46 c0       	rjmp	.+140    	; 0x3234 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    31a8:	fe 01       	movw	r30, r28
    31aa:	ff 96       	adiw	r30, 0x3f	; 63
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	3f ef       	ldi	r19, 0xFF	; 255
    31b8:	4f e7       	ldi	r20, 0x7F	; 127
    31ba:	57 e4       	ldi	r21, 0x47	; 71
    31bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c0:	18 16       	cp	r1, r24
    31c2:	64 f5       	brge	.+88     	; 0x321c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c4:	fe 01       	movw	r30, r28
    31c6:	ed 5b       	subi	r30, 0xBD	; 189
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	60 81       	ld	r22, Z
    31cc:	71 81       	ldd	r23, Z+1	; 0x01
    31ce:	82 81       	ldd	r24, Z+2	; 0x02
    31d0:	93 81       	ldd	r25, Z+3	; 0x03
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e2       	ldi	r20, 0x20	; 32
    31d8:	51 e4       	ldi	r21, 0x41	; 65
    31da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	bc 01       	movw	r22, r24
    31e4:	cd 01       	movw	r24, r26
    31e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9e af       	std	Y+62, r25	; 0x3e
    31f0:	8d af       	std	Y+61, r24	; 0x3d
    31f2:	0f c0       	rjmp	.+30     	; 0x3212 <LCD_sendCommand+0x478>
    31f4:	80 e9       	ldi	r24, 0x90	; 144
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	9c af       	std	Y+60, r25	; 0x3c
    31fa:	8b af       	std	Y+59, r24	; 0x3b
    31fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    31fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <LCD_sendCommand+0x466>
    3204:	9c af       	std	Y+60, r25	; 0x3c
    3206:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3208:	8d ad       	ldd	r24, Y+61	; 0x3d
    320a:	9e ad       	ldd	r25, Y+62	; 0x3e
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	9e af       	std	Y+62, r25	; 0x3e
    3210:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3212:	8d ad       	ldd	r24, Y+61	; 0x3d
    3214:	9e ad       	ldd	r25, Y+62	; 0x3e
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	69 f7       	brne	.-38     	; 0x31f4 <LCD_sendCommand+0x45a>
    321a:	16 c0       	rjmp	.+44     	; 0x3248 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321c:	fe 01       	movw	r30, r28
    321e:	ff 96       	adiw	r30, 0x3f	; 63
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	9e af       	std	Y+62, r25	; 0x3e
    3232:	8d af       	std	Y+61, r24	; 0x3d
    3234:	8d ad       	ldd	r24, Y+61	; 0x3d
    3236:	9e ad       	ldd	r25, Y+62	; 0x3e
    3238:	9a af       	std	Y+58, r25	; 0x3a
    323a:	89 af       	std	Y+57, r24	; 0x39
    323c:	89 ad       	ldd	r24, Y+57	; 0x39
    323e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	f1 f7       	brne	.-4      	; 0x3240 <LCD_sendCommand+0x4a6>
    3244:	9a af       	std	Y+58, r25	; 0x3a
    3246:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	62 e0       	ldi	r22, 0x02	; 2
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	a0 e8       	ldi	r26, 0x80	; 128
    3258:	bf e3       	ldi	r27, 0x3F	; 63
    325a:	8d ab       	std	Y+53, r24	; 0x35
    325c:	9e ab       	std	Y+54, r25	; 0x36
    325e:	af ab       	std	Y+55, r26	; 0x37
    3260:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3262:	6d a9       	ldd	r22, Y+53	; 0x35
    3264:	7e a9       	ldd	r23, Y+54	; 0x36
    3266:	8f a9       	ldd	r24, Y+55	; 0x37
    3268:	98 ad       	ldd	r25, Y+56	; 0x38
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	4a e7       	ldi	r20, 0x7A	; 122
    3270:	55 e4       	ldi	r21, 0x45	; 69
    3272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	89 ab       	std	Y+49, r24	; 0x31
    327c:	9a ab       	std	Y+50, r25	; 0x32
    327e:	ab ab       	std	Y+51, r26	; 0x33
    3280:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3282:	69 a9       	ldd	r22, Y+49	; 0x31
    3284:	7a a9       	ldd	r23, Y+50	; 0x32
    3286:	8b a9       	ldd	r24, Y+51	; 0x33
    3288:	9c a9       	ldd	r25, Y+52	; 0x34
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e8       	ldi	r20, 0x80	; 128
    3290:	5f e3       	ldi	r21, 0x3F	; 63
    3292:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3296:	88 23       	and	r24, r24
    3298:	2c f4       	brge	.+10     	; 0x32a4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	98 ab       	std	Y+48, r25	; 0x30
    32a0:	8f a7       	std	Y+47, r24	; 0x2f
    32a2:	3f c0       	rjmp	.+126    	; 0x3322 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    32a4:	69 a9       	ldd	r22, Y+49	; 0x31
    32a6:	7a a9       	ldd	r23, Y+50	; 0x32
    32a8:	8b a9       	ldd	r24, Y+51	; 0x33
    32aa:	9c a9       	ldd	r25, Y+52	; 0x34
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	3f ef       	ldi	r19, 0xFF	; 255
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	57 e4       	ldi	r21, 0x47	; 71
    32b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b8:	18 16       	cp	r1, r24
    32ba:	4c f5       	brge	.+82     	; 0x330e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32bc:	6d a9       	ldd	r22, Y+53	; 0x35
    32be:	7e a9       	ldd	r23, Y+54	; 0x36
    32c0:	8f a9       	ldd	r24, Y+55	; 0x37
    32c2:	98 ad       	ldd	r25, Y+56	; 0x38
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e2       	ldi	r20, 0x20	; 32
    32ca:	51 e4       	ldi	r21, 0x41	; 65
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	bc 01       	movw	r22, r24
    32d6:	cd 01       	movw	r24, r26
    32d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	98 ab       	std	Y+48, r25	; 0x30
    32e2:	8f a7       	std	Y+47, r24	; 0x2f
    32e4:	0f c0       	rjmp	.+30     	; 0x3304 <LCD_sendCommand+0x56a>
    32e6:	80 e9       	ldi	r24, 0x90	; 144
    32e8:	91 e0       	ldi	r25, 0x01	; 1
    32ea:	9e a7       	std	Y+46, r25	; 0x2e
    32ec:	8d a7       	std	Y+45, r24	; 0x2d
    32ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    32f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <LCD_sendCommand+0x558>
    32f6:	9e a7       	std	Y+46, r25	; 0x2e
    32f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    32fc:	98 a9       	ldd	r25, Y+48	; 0x30
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	98 ab       	std	Y+48, r25	; 0x30
    3302:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3304:	8f a5       	ldd	r24, Y+47	; 0x2f
    3306:	98 a9       	ldd	r25, Y+48	; 0x30
    3308:	00 97       	sbiw	r24, 0x00	; 0
    330a:	69 f7       	brne	.-38     	; 0x32e6 <LCD_sendCommand+0x54c>
    330c:	14 c0       	rjmp	.+40     	; 0x3336 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330e:	69 a9       	ldd	r22, Y+49	; 0x31
    3310:	7a a9       	ldd	r23, Y+50	; 0x32
    3312:	8b a9       	ldd	r24, Y+51	; 0x33
    3314:	9c a9       	ldd	r25, Y+52	; 0x34
    3316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	98 ab       	std	Y+48, r25	; 0x30
    3320:	8f a7       	std	Y+47, r24	; 0x2f
    3322:	8f a5       	ldd	r24, Y+47	; 0x2f
    3324:	98 a9       	ldd	r25, Y+48	; 0x30
    3326:	9c a7       	std	Y+44, r25	; 0x2c
    3328:	8b a7       	std	Y+43, r24	; 0x2b
    332a:	8b a5       	ldd	r24, Y+43	; 0x2b
    332c:	9c a5       	ldd	r25, Y+44	; 0x2c
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	f1 f7       	brne	.-4      	; 0x332e <LCD_sendCommand+0x594>
    3332:	9c a7       	std	Y+44, r25	; 0x2c
    3334:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	62 e0       	ldi	r22, 0x02	; 2
    333a:	41 e0       	ldi	r20, 0x01	; 1
    333c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	a0 e8       	ldi	r26, 0x80	; 128
    3346:	bf e3       	ldi	r27, 0x3F	; 63
    3348:	8f a3       	std	Y+39, r24	; 0x27
    334a:	98 a7       	std	Y+40, r25	; 0x28
    334c:	a9 a7       	std	Y+41, r26	; 0x29
    334e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3350:	6f a1       	ldd	r22, Y+39	; 0x27
    3352:	78 a5       	ldd	r23, Y+40	; 0x28
    3354:	89 a5       	ldd	r24, Y+41	; 0x29
    3356:	9a a5       	ldd	r25, Y+42	; 0x2a
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	4a e7       	ldi	r20, 0x7A	; 122
    335e:	55 e4       	ldi	r21, 0x45	; 69
    3360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	8b a3       	std	Y+35, r24	; 0x23
    336a:	9c a3       	std	Y+36, r25	; 0x24
    336c:	ad a3       	std	Y+37, r26	; 0x25
    336e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3370:	6b a1       	ldd	r22, Y+35	; 0x23
    3372:	7c a1       	ldd	r23, Y+36	; 0x24
    3374:	8d a1       	ldd	r24, Y+37	; 0x25
    3376:	9e a1       	ldd	r25, Y+38	; 0x26
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e8       	ldi	r20, 0x80	; 128
    337e:	5f e3       	ldi	r21, 0x3F	; 63
    3380:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3384:	88 23       	and	r24, r24
    3386:	2c f4       	brge	.+10     	; 0x3392 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	9a a3       	std	Y+34, r25	; 0x22
    338e:	89 a3       	std	Y+33, r24	; 0x21
    3390:	3f c0       	rjmp	.+126    	; 0x3410 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3392:	6b a1       	ldd	r22, Y+35	; 0x23
    3394:	7c a1       	ldd	r23, Y+36	; 0x24
    3396:	8d a1       	ldd	r24, Y+37	; 0x25
    3398:	9e a1       	ldd	r25, Y+38	; 0x26
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	3f ef       	ldi	r19, 0xFF	; 255
    339e:	4f e7       	ldi	r20, 0x7F	; 127
    33a0:	57 e4       	ldi	r21, 0x47	; 71
    33a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a6:	18 16       	cp	r1, r24
    33a8:	4c f5       	brge	.+82     	; 0x33fc <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33aa:	6f a1       	ldd	r22, Y+39	; 0x27
    33ac:	78 a5       	ldd	r23, Y+40	; 0x28
    33ae:	89 a5       	ldd	r24, Y+41	; 0x29
    33b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e2       	ldi	r20, 0x20	; 32
    33b8:	51 e4       	ldi	r21, 0x41	; 65
    33ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	bc 01       	movw	r22, r24
    33c4:	cd 01       	movw	r24, r26
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	9a a3       	std	Y+34, r25	; 0x22
    33d0:	89 a3       	std	Y+33, r24	; 0x21
    33d2:	0f c0       	rjmp	.+30     	; 0x33f2 <LCD_sendCommand+0x658>
    33d4:	80 e9       	ldi	r24, 0x90	; 144
    33d6:	91 e0       	ldi	r25, 0x01	; 1
    33d8:	98 a3       	std	Y+32, r25	; 0x20
    33da:	8f 8f       	std	Y+31, r24	; 0x1f
    33dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33de:	98 a1       	ldd	r25, Y+32	; 0x20
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <LCD_sendCommand+0x646>
    33e4:	98 a3       	std	Y+32, r25	; 0x20
    33e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e8:	89 a1       	ldd	r24, Y+33	; 0x21
    33ea:	9a a1       	ldd	r25, Y+34	; 0x22
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	9a a3       	std	Y+34, r25	; 0x22
    33f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f2:	89 a1       	ldd	r24, Y+33	; 0x21
    33f4:	9a a1       	ldd	r25, Y+34	; 0x22
    33f6:	00 97       	sbiw	r24, 0x00	; 0
    33f8:	69 f7       	brne	.-38     	; 0x33d4 <LCD_sendCommand+0x63a>
    33fa:	14 c0       	rjmp	.+40     	; 0x3424 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fc:	6b a1       	ldd	r22, Y+35	; 0x23
    33fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3400:	8d a1       	ldd	r24, Y+37	; 0x25
    3402:	9e a1       	ldd	r25, Y+38	; 0x26
    3404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	9a a3       	std	Y+34, r25	; 0x22
    340e:	89 a3       	std	Y+33, r24	; 0x21
    3410:	89 a1       	ldd	r24, Y+33	; 0x21
    3412:	9a a1       	ldd	r25, Y+34	; 0x22
    3414:	9e 8f       	std	Y+30, r25	; 0x1e
    3416:	8d 8f       	std	Y+29, r24	; 0x1d
    3418:	8d 8d       	ldd	r24, Y+29	; 0x1d
    341a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <LCD_sendCommand+0x682>
    3420:	9e 8f       	std	Y+30, r25	; 0x1e
    3422:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    3424:	fe 01       	movw	r30, r28
    3426:	ed 59       	subi	r30, 0x9D	; 157
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 81       	ld	r24, Z
    342c:	98 2f       	mov	r25, r24
    342e:	91 70       	andi	r25, 0x01	; 1
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	49 2f       	mov	r20, r25
    3436:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    343a:	fe 01       	movw	r30, r28
    343c:	ed 59       	subi	r30, 0x9D	; 157
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	80 81       	ld	r24, Z
    3442:	88 2f       	mov	r24, r24
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	82 70       	andi	r24, 0x02	; 2
    3448:	90 70       	andi	r25, 0x00	; 0
    344a:	95 95       	asr	r25
    344c:	87 95       	ror	r24
    344e:	98 2f       	mov	r25, r24
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	61 e0       	ldi	r22, 0x01	; 1
    3454:	49 2f       	mov	r20, r25
    3456:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    345a:	fe 01       	movw	r30, r28
    345c:	ed 59       	subi	r30, 0x9D	; 157
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	80 81       	ld	r24, Z
    3462:	88 2f       	mov	r24, r24
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	84 70       	andi	r24, 0x04	; 4
    3468:	90 70       	andi	r25, 0x00	; 0
    346a:	95 95       	asr	r25
    346c:	87 95       	ror	r24
    346e:	95 95       	asr	r25
    3470:	87 95       	ror	r24
    3472:	98 2f       	mov	r25, r24
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	62 e0       	ldi	r22, 0x02	; 2
    3478:	49 2f       	mov	r20, r25
    347a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    347e:	fe 01       	movw	r30, r28
    3480:	ed 59       	subi	r30, 0x9D	; 157
    3482:	ff 4f       	sbci	r31, 0xFF	; 255
    3484:	80 81       	ld	r24, Z
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	88 70       	andi	r24, 0x08	; 8
    348c:	90 70       	andi	r25, 0x00	; 0
    348e:	95 95       	asr	r25
    3490:	87 95       	ror	r24
    3492:	95 95       	asr	r25
    3494:	87 95       	ror	r24
    3496:	95 95       	asr	r25
    3498:	87 95       	ror	r24
    349a:	98 2f       	mov	r25, r24
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	64 e0       	ldi	r22, 0x04	; 4
    34a0:	49 2f       	mov	r20, r25
    34a2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	a0 e8       	ldi	r26, 0x80	; 128
    34ac:	bf e3       	ldi	r27, 0x3F	; 63
    34ae:	89 8f       	std	Y+25, r24	; 0x19
    34b0:	9a 8f       	std	Y+26, r25	; 0x1a
    34b2:	ab 8f       	std	Y+27, r26	; 0x1b
    34b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b6:	69 8d       	ldd	r22, Y+25	; 0x19
    34b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	4a e7       	ldi	r20, 0x7A	; 122
    34c4:	55 e4       	ldi	r21, 0x45	; 69
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	8d 8b       	std	Y+21, r24	; 0x15
    34d0:	9e 8b       	std	Y+22, r25	; 0x16
    34d2:	af 8b       	std	Y+23, r26	; 0x17
    34d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34d6:	6d 89       	ldd	r22, Y+21	; 0x15
    34d8:	7e 89       	ldd	r23, Y+22	; 0x16
    34da:	8f 89       	ldd	r24, Y+23	; 0x17
    34dc:	98 8d       	ldd	r25, Y+24	; 0x18
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e8       	ldi	r20, 0x80	; 128
    34e4:	5f e3       	ldi	r21, 0x3F	; 63
    34e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <LCD_sendCommand+0x75e>
		__ticks = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	9c 8b       	std	Y+20, r25	; 0x14
    34f4:	8b 8b       	std	Y+19, r24	; 0x13
    34f6:	3f c0       	rjmp	.+126    	; 0x3576 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    34f8:	6d 89       	ldd	r22, Y+21	; 0x15
    34fa:	7e 89       	ldd	r23, Y+22	; 0x16
    34fc:	8f 89       	ldd	r24, Y+23	; 0x17
    34fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	3f ef       	ldi	r19, 0xFF	; 255
    3504:	4f e7       	ldi	r20, 0x7F	; 127
    3506:	57 e4       	ldi	r21, 0x47	; 71
    3508:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    350c:	18 16       	cp	r1, r24
    350e:	4c f5       	brge	.+82     	; 0x3562 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3510:	69 8d       	ldd	r22, Y+25	; 0x19
    3512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	51 e4       	ldi	r21, 0x41	; 65
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9c 8b       	std	Y+20, r25	; 0x14
    3536:	8b 8b       	std	Y+19, r24	; 0x13
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <LCD_sendCommand+0x7be>
    353a:	80 e9       	ldi	r24, 0x90	; 144
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	9a 8b       	std	Y+18, r25	; 0x12
    3540:	89 8b       	std	Y+17, r24	; 0x11
    3542:	89 89       	ldd	r24, Y+17	; 0x11
    3544:	9a 89       	ldd	r25, Y+18	; 0x12
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <LCD_sendCommand+0x7ac>
    354a:	9a 8b       	std	Y+18, r25	; 0x12
    354c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	8b 89       	ldd	r24, Y+19	; 0x13
    3550:	9c 89       	ldd	r25, Y+20	; 0x14
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9c 8b       	std	Y+20, r25	; 0x14
    3556:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	8b 89       	ldd	r24, Y+19	; 0x13
    355a:	9c 89       	ldd	r25, Y+20	; 0x14
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	69 f7       	brne	.-38     	; 0x353a <LCD_sendCommand+0x7a0>
    3560:	14 c0       	rjmp	.+40     	; 0x358a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	6d 89       	ldd	r22, Y+21	; 0x15
    3564:	7e 89       	ldd	r23, Y+22	; 0x16
    3566:	8f 89       	ldd	r24, Y+23	; 0x17
    3568:	98 8d       	ldd	r25, Y+24	; 0x18
    356a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9c 8b       	std	Y+20, r25	; 0x14
    3574:	8b 8b       	std	Y+19, r24	; 0x13
    3576:	8b 89       	ldd	r24, Y+19	; 0x13
    3578:	9c 89       	ldd	r25, Y+20	; 0x14
    357a:	98 8b       	std	Y+16, r25	; 0x10
    357c:	8f 87       	std	Y+15, r24	; 0x0f
    357e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3580:	98 89       	ldd	r25, Y+16	; 0x10
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <LCD_sendCommand+0x7e8>
    3586:	98 8b       	std	Y+16, r25	; 0x10
    3588:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	62 e0       	ldi	r22, 0x02	; 2
    358e:	40 e0       	ldi	r20, 0x00	; 0
    3590:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	a0 e8       	ldi	r26, 0x80	; 128
    359a:	bf e3       	ldi	r27, 0x3F	; 63
    359c:	8b 87       	std	Y+11, r24	; 0x0b
    359e:	9c 87       	std	Y+12, r25	; 0x0c
    35a0:	ad 87       	std	Y+13, r26	; 0x0d
    35a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	4a e7       	ldi	r20, 0x7A	; 122
    35b2:	55 e4       	ldi	r21, 0x45	; 69
    35b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	8f 83       	std	Y+7, r24	; 0x07
    35be:	98 87       	std	Y+8, r25	; 0x08
    35c0:	a9 87       	std	Y+9, r26	; 0x09
    35c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35c4:	6f 81       	ldd	r22, Y+7	; 0x07
    35c6:	78 85       	ldd	r23, Y+8	; 0x08
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e8       	ldi	r20, 0x80	; 128
    35d2:	5f e3       	ldi	r21, 0x3F	; 63
    35d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d8:	88 23       	and	r24, r24
    35da:	2c f4       	brge	.+10     	; 0x35e6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	9e 83       	std	Y+6, r25	; 0x06
    35e2:	8d 83       	std	Y+5, r24	; 0x05
    35e4:	3f c0       	rjmp	.+126    	; 0x3664 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	3f ef       	ldi	r19, 0xFF	; 255
    35f2:	4f e7       	ldi	r20, 0x7F	; 127
    35f4:	57 e4       	ldi	r21, 0x47	; 71
    35f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35fa:	18 16       	cp	r1, r24
    35fc:	4c f5       	brge	.+82     	; 0x3650 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3600:	7c 85       	ldd	r23, Y+12	; 0x0c
    3602:	8d 85       	ldd	r24, Y+13	; 0x0d
    3604:	9e 85       	ldd	r25, Y+14	; 0x0e
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e2       	ldi	r20, 0x20	; 32
    360c:	51 e4       	ldi	r21, 0x41	; 65
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
    3626:	0f c0       	rjmp	.+30     	; 0x3646 <LCD_sendCommand+0x8ac>
    3628:	80 e9       	ldi	r24, 0x90	; 144
    362a:	91 e0       	ldi	r25, 0x01	; 1
    362c:	9c 83       	std	Y+4, r25	; 0x04
    362e:	8b 83       	std	Y+3, r24	; 0x03
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	9c 81       	ldd	r25, Y+4	; 0x04
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <LCD_sendCommand+0x89a>
    3638:	9c 83       	std	Y+4, r25	; 0x04
    363a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363c:	8d 81       	ldd	r24, Y+5	; 0x05
    363e:	9e 81       	ldd	r25, Y+6	; 0x06
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	9e 83       	std	Y+6, r25	; 0x06
    3644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3646:	8d 81       	ldd	r24, Y+5	; 0x05
    3648:	9e 81       	ldd	r25, Y+6	; 0x06
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	69 f7       	brne	.-38     	; 0x3628 <LCD_sendCommand+0x88e>
    364e:	14 c0       	rjmp	.+40     	; 0x3678 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3650:	6f 81       	ldd	r22, Y+7	; 0x07
    3652:	78 85       	ldd	r23, Y+8	; 0x08
    3654:	89 85       	ldd	r24, Y+9	; 0x09
    3656:	9a 85       	ldd	r25, Y+10	; 0x0a
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	89 83       	std	Y+1, r24	; 0x01
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	9a 81       	ldd	r25, Y+2	; 0x02
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <LCD_sendCommand+0x8d6>
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3678:	cd 59       	subi	r28, 0x9D	; 157
    367a:	df 4f       	sbci	r29, 0xFF	; 255
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	08 95       	ret

00003690 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3690:	0f 93       	push	r16
    3692:	1f 93       	push	r17
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	c3 56       	subi	r28, 0x63	; 99
    369e:	d0 40       	sbci	r29, 0x00	; 0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	fe 01       	movw	r30, r28
    36ac:	ed 59       	subi	r30, 0x9D	; 157
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	63 e0       	ldi	r22, 0x03	; 3
    36b6:	41 e0       	ldi	r20, 0x01	; 1
    36b8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    36bc:	fe 01       	movw	r30, r28
    36be:	e1 5a       	subi	r30, 0xA1	; 161
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	a0 e8       	ldi	r26, 0x80	; 128
    36c8:	bf e3       	ldi	r27, 0x3F	; 63
    36ca:	80 83       	st	Z, r24
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	a2 83       	std	Z+2, r26	; 0x02
    36d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d2:	8e 01       	movw	r16, r28
    36d4:	05 5a       	subi	r16, 0xA5	; 165
    36d6:	1f 4f       	sbci	r17, 0xFF	; 255
    36d8:	fe 01       	movw	r30, r28
    36da:	e1 5a       	subi	r30, 0xA1	; 161
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	4a e7       	ldi	r20, 0x7A	; 122
    36ec:	55 e4       	ldi	r21, 0x45	; 69
    36ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	f8 01       	movw	r30, r16
    36f8:	80 83       	st	Z, r24
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	a2 83       	std	Z+2, r26	; 0x02
    36fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3700:	fe 01       	movw	r30, r28
    3702:	e5 5a       	subi	r30, 0xA5	; 165
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	60 81       	ld	r22, Z
    3708:	71 81       	ldd	r23, Z+1	; 0x01
    370a:	82 81       	ldd	r24, Z+2	; 0x02
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e8       	ldi	r20, 0x80	; 128
    3714:	5f e3       	ldi	r21, 0x3F	; 63
    3716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371a:	88 23       	and	r24, r24
    371c:	44 f4       	brge	.+16     	; 0x372e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    371e:	fe 01       	movw	r30, r28
    3720:	e7 5a       	subi	r30, 0xA7	; 167
    3722:	ff 4f       	sbci	r31, 0xFF	; 255
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	91 83       	std	Z+1, r25	; 0x01
    372a:	80 83       	st	Z, r24
    372c:	64 c0       	rjmp	.+200    	; 0x37f6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    372e:	fe 01       	movw	r30, r28
    3730:	e5 5a       	subi	r30, 0xA5	; 165
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	60 81       	ld	r22, Z
    3736:	71 81       	ldd	r23, Z+1	; 0x01
    3738:	82 81       	ldd	r24, Z+2	; 0x02
    373a:	93 81       	ldd	r25, Z+3	; 0x03
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	3f ef       	ldi	r19, 0xFF	; 255
    3740:	4f e7       	ldi	r20, 0x7F	; 127
    3742:	57 e4       	ldi	r21, 0x47	; 71
    3744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3748:	18 16       	cp	r1, r24
    374a:	0c f0       	brlt	.+2      	; 0x374e <LCD_displayCharacter+0xbe>
    374c:	43 c0       	rjmp	.+134    	; 0x37d4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374e:	fe 01       	movw	r30, r28
    3750:	e1 5a       	subi	r30, 0xA1	; 161
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	8e 01       	movw	r16, r28
    376e:	07 5a       	subi	r16, 0xA7	; 167
    3770:	1f 4f       	sbci	r17, 0xFF	; 255
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	f8 01       	movw	r30, r16
    3780:	91 83       	std	Z+1, r25	; 0x01
    3782:	80 83       	st	Z, r24
    3784:	1f c0       	rjmp	.+62     	; 0x37c4 <LCD_displayCharacter+0x134>
    3786:	fe 01       	movw	r30, r28
    3788:	e9 5a       	subi	r30, 0xA9	; 169
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	80 e9       	ldi	r24, 0x90	; 144
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	80 83       	st	Z, r24
    3794:	fe 01       	movw	r30, r28
    3796:	e9 5a       	subi	r30, 0xA9	; 169
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	80 81       	ld	r24, Z
    379c:	91 81       	ldd	r25, Z+1	; 0x01
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	f1 f7       	brne	.-4      	; 0x379e <LCD_displayCharacter+0x10e>
    37a2:	fe 01       	movw	r30, r28
    37a4:	e9 5a       	subi	r30, 0xA9	; 169
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ac:	de 01       	movw	r26, r28
    37ae:	a7 5a       	subi	r26, 0xA7	; 167
    37b0:	bf 4f       	sbci	r27, 0xFF	; 255
    37b2:	fe 01       	movw	r30, r28
    37b4:	e7 5a       	subi	r30, 0xA7	; 167
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	80 81       	ld	r24, Z
    37ba:	91 81       	ldd	r25, Z+1	; 0x01
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	11 96       	adiw	r26, 0x01	; 1
    37c0:	9c 93       	st	X, r25
    37c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c4:	fe 01       	movw	r30, r28
    37c6:	e7 5a       	subi	r30, 0xA7	; 167
    37c8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ca:	80 81       	ld	r24, Z
    37cc:	91 81       	ldd	r25, Z+1	; 0x01
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	d1 f6       	brne	.-76     	; 0x3786 <LCD_displayCharacter+0xf6>
    37d2:	27 c0       	rjmp	.+78     	; 0x3822 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d4:	8e 01       	movw	r16, r28
    37d6:	07 5a       	subi	r16, 0xA7	; 167
    37d8:	1f 4f       	sbci	r17, 0xFF	; 255
    37da:	fe 01       	movw	r30, r28
    37dc:	e5 5a       	subi	r30, 0xA5	; 165
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	f8 01       	movw	r30, r16
    37f2:	91 83       	std	Z+1, r25	; 0x01
    37f4:	80 83       	st	Z, r24
    37f6:	de 01       	movw	r26, r28
    37f8:	ab 5a       	subi	r26, 0xAB	; 171
    37fa:	bf 4f       	sbci	r27, 0xFF	; 255
    37fc:	fe 01       	movw	r30, r28
    37fe:	e7 5a       	subi	r30, 0xA7	; 167
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	8d 93       	st	X+, r24
    3808:	9c 93       	st	X, r25
    380a:	fe 01       	movw	r30, r28
    380c:	eb 5a       	subi	r30, 0xAB	; 171
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	80 81       	ld	r24, Z
    3812:	91 81       	ldd	r25, Z+1	; 0x01
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	f1 f7       	brne	.-4      	; 0x3814 <LCD_displayCharacter+0x184>
    3818:	fe 01       	movw	r30, r28
    381a:	eb 5a       	subi	r30, 0xAB	; 171
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	62 e0       	ldi	r22, 0x02	; 2
    3826:	41 e0       	ldi	r20, 0x01	; 1
    3828:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    382c:	fe 01       	movw	r30, r28
    382e:	ef 5a       	subi	r30, 0xAF	; 175
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	a0 e8       	ldi	r26, 0x80	; 128
    3838:	bf e3       	ldi	r27, 0x3F	; 63
    383a:	80 83       	st	Z, r24
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	a2 83       	std	Z+2, r26	; 0x02
    3840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3842:	8e 01       	movw	r16, r28
    3844:	03 5b       	subi	r16, 0xB3	; 179
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	fe 01       	movw	r30, r28
    384a:	ef 5a       	subi	r30, 0xAF	; 175
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	4a e7       	ldi	r20, 0x7A	; 122
    385c:	55 e4       	ldi	r21, 0x45	; 69
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	f8 01       	movw	r30, r16
    3868:	80 83       	st	Z, r24
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	a2 83       	std	Z+2, r26	; 0x02
    386e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3870:	fe 01       	movw	r30, r28
    3872:	e3 5b       	subi	r30, 0xB3	; 179
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e8       	ldi	r20, 0x80	; 128
    3884:	5f e3       	ldi	r21, 0x3F	; 63
    3886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388a:	88 23       	and	r24, r24
    388c:	44 f4       	brge	.+16     	; 0x389e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    388e:	fe 01       	movw	r30, r28
    3890:	e5 5b       	subi	r30, 0xB5	; 181
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	80 83       	st	Z, r24
    389c:	64 c0       	rjmp	.+200    	; 0x3966 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    389e:	fe 01       	movw	r30, r28
    38a0:	e3 5b       	subi	r30, 0xB3	; 179
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	3f ef       	ldi	r19, 0xFF	; 255
    38b0:	4f e7       	ldi	r20, 0x7F	; 127
    38b2:	57 e4       	ldi	r21, 0x47	; 71
    38b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38b8:	18 16       	cp	r1, r24
    38ba:	0c f0       	brlt	.+2      	; 0x38be <LCD_displayCharacter+0x22e>
    38bc:	43 c0       	rjmp	.+134    	; 0x3944 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	fe 01       	movw	r30, r28
    38c0:	ef 5a       	subi	r30, 0xAF	; 175
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	60 81       	ld	r22, Z
    38c6:	71 81       	ldd	r23, Z+1	; 0x01
    38c8:	82 81       	ldd	r24, Z+2	; 0x02
    38ca:	93 81       	ldd	r25, Z+3	; 0x03
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	8e 01       	movw	r16, r28
    38de:	05 5b       	subi	r16, 0xB5	; 181
    38e0:	1f 4f       	sbci	r17, 0xFF	; 255
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	f8 01       	movw	r30, r16
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
    38f4:	1f c0       	rjmp	.+62     	; 0x3934 <LCD_displayCharacter+0x2a4>
    38f6:	fe 01       	movw	r30, r28
    38f8:	e7 5b       	subi	r30, 0xB7	; 183
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	80 e9       	ldi	r24, 0x90	; 144
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	80 83       	st	Z, r24
    3904:	fe 01       	movw	r30, r28
    3906:	e7 5b       	subi	r30, 0xB7	; 183
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	80 81       	ld	r24, Z
    390c:	91 81       	ldd	r25, Z+1	; 0x01
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <LCD_displayCharacter+0x27e>
    3912:	fe 01       	movw	r30, r28
    3914:	e7 5b       	subi	r30, 0xB7	; 183
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391c:	de 01       	movw	r26, r28
    391e:	a5 5b       	subi	r26, 0xB5	; 181
    3920:	bf 4f       	sbci	r27, 0xFF	; 255
    3922:	fe 01       	movw	r30, r28
    3924:	e5 5b       	subi	r30, 0xB5	; 181
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 81       	ld	r24, Z
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	11 96       	adiw	r26, 0x01	; 1
    3930:	9c 93       	st	X, r25
    3932:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3934:	fe 01       	movw	r30, r28
    3936:	e5 5b       	subi	r30, 0xB5	; 181
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	d1 f6       	brne	.-76     	; 0x38f6 <LCD_displayCharacter+0x266>
    3942:	27 c0       	rjmp	.+78     	; 0x3992 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3944:	8e 01       	movw	r16, r28
    3946:	05 5b       	subi	r16, 0xB5	; 181
    3948:	1f 4f       	sbci	r17, 0xFF	; 255
    394a:	fe 01       	movw	r30, r28
    394c:	e3 5b       	subi	r30, 0xB3	; 179
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	f8 01       	movw	r30, r16
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	80 83       	st	Z, r24
    3966:	de 01       	movw	r26, r28
    3968:	a9 5b       	subi	r26, 0xB9	; 185
    396a:	bf 4f       	sbci	r27, 0xFF	; 255
    396c:	fe 01       	movw	r30, r28
    396e:	e5 5b       	subi	r30, 0xB5	; 181
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	8d 93       	st	X+, r24
    3978:	9c 93       	st	X, r25
    397a:	fe 01       	movw	r30, r28
    397c:	e9 5b       	subi	r30, 0xB9	; 185
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	80 81       	ld	r24, Z
    3982:	91 81       	ldd	r25, Z+1	; 0x01
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <LCD_displayCharacter+0x2f4>
    3988:	fe 01       	movw	r30, r28
    398a:	e9 5b       	subi	r30, 0xB9	; 185
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3992:	fe 01       	movw	r30, r28
    3994:	ed 59       	subi	r30, 0x9D	; 157
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 81       	ld	r24, Z
    399a:	88 2f       	mov	r24, r24
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	80 71       	andi	r24, 0x10	; 16
    39a0:	90 70       	andi	r25, 0x00	; 0
    39a2:	95 95       	asr	r25
    39a4:	87 95       	ror	r24
    39a6:	95 95       	asr	r25
    39a8:	87 95       	ror	r24
    39aa:	95 95       	asr	r25
    39ac:	87 95       	ror	r24
    39ae:	95 95       	asr	r25
    39b0:	87 95       	ror	r24
    39b2:	98 2f       	mov	r25, r24
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	49 2f       	mov	r20, r25
    39ba:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    39be:	fe 01       	movw	r30, r28
    39c0:	ed 59       	subi	r30, 0x9D	; 157
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 81       	ld	r24, Z
    39c6:	88 2f       	mov	r24, r24
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	80 72       	andi	r24, 0x20	; 32
    39cc:	90 70       	andi	r25, 0x00	; 0
    39ce:	95 95       	asr	r25
    39d0:	87 95       	ror	r24
    39d2:	95 95       	asr	r25
    39d4:	87 95       	ror	r24
    39d6:	95 95       	asr	r25
    39d8:	87 95       	ror	r24
    39da:	95 95       	asr	r25
    39dc:	87 95       	ror	r24
    39de:	95 95       	asr	r25
    39e0:	87 95       	ror	r24
    39e2:	98 2f       	mov	r25, r24
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	61 e0       	ldi	r22, 0x01	; 1
    39e8:	49 2f       	mov	r20, r25
    39ea:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    39ee:	fe 01       	movw	r30, r28
    39f0:	ed 59       	subi	r30, 0x9D	; 157
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	80 81       	ld	r24, Z
    39f6:	88 2f       	mov	r24, r24
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	80 74       	andi	r24, 0x40	; 64
    39fc:	90 70       	andi	r25, 0x00	; 0
    39fe:	08 2e       	mov	r0, r24
    3a00:	89 2f       	mov	r24, r25
    3a02:	00 0c       	add	r0, r0
    3a04:	88 1f       	adc	r24, r24
    3a06:	99 0b       	sbc	r25, r25
    3a08:	00 0c       	add	r0, r0
    3a0a:	88 1f       	adc	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	98 2f       	mov	r25, r24
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	62 e0       	ldi	r22, 0x02	; 2
    3a14:	49 2f       	mov	r20, r25
    3a16:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	ed 59       	subi	r30, 0x9D	; 157
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	98 2f       	mov	r25, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	99 27       	eor	r25, r25
    3a28:	99 1f       	adc	r25, r25
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	64 e0       	ldi	r22, 0x04	; 4
    3a2e:	49 2f       	mov	r20, r25
    3a30:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3a34:	fe 01       	movw	r30, r28
    3a36:	ed 5b       	subi	r30, 0xBD	; 189
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	a0 e8       	ldi	r26, 0x80	; 128
    3a40:	bf e3       	ldi	r27, 0x3F	; 63
    3a42:	80 83       	st	Z, r24
    3a44:	91 83       	std	Z+1, r25	; 0x01
    3a46:	a2 83       	std	Z+2, r26	; 0x02
    3a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4a:	8e 01       	movw	r16, r28
    3a4c:	01 5c       	subi	r16, 0xC1	; 193
    3a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a50:	fe 01       	movw	r30, r28
    3a52:	ed 5b       	subi	r30, 0xBD	; 189
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	60 81       	ld	r22, Z
    3a58:	71 81       	ldd	r23, Z+1	; 0x01
    3a5a:	82 81       	ldd	r24, Z+2	; 0x02
    3a5c:	93 81       	ldd	r25, Z+3	; 0x03
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	4a e7       	ldi	r20, 0x7A	; 122
    3a64:	55 e4       	ldi	r21, 0x45	; 69
    3a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	f8 01       	movw	r30, r16
    3a70:	80 83       	st	Z, r24
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	a2 83       	std	Z+2, r26	; 0x02
    3a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a78:	fe 01       	movw	r30, r28
    3a7a:	ff 96       	adiw	r30, 0x3f	; 63
    3a7c:	60 81       	ld	r22, Z
    3a7e:	71 81       	ldd	r23, Z+1	; 0x01
    3a80:	82 81       	ldd	r24, Z+2	; 0x02
    3a82:	93 81       	ldd	r25, Z+3	; 0x03
    3a84:	20 e0       	ldi	r18, 0x00	; 0
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	40 e8       	ldi	r20, 0x80	; 128
    3a8a:	5f e3       	ldi	r21, 0x3F	; 63
    3a8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a90:	88 23       	and	r24, r24
    3a92:	2c f4       	brge	.+10     	; 0x3a9e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	9e af       	std	Y+62, r25	; 0x3e
    3a9a:	8d af       	std	Y+61, r24	; 0x3d
    3a9c:	46 c0       	rjmp	.+140    	; 0x3b2a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	ff 96       	adiw	r30, 0x3f	; 63
    3aa2:	60 81       	ld	r22, Z
    3aa4:	71 81       	ldd	r23, Z+1	; 0x01
    3aa6:	82 81       	ldd	r24, Z+2	; 0x02
    3aa8:	93 81       	ldd	r25, Z+3	; 0x03
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	3f ef       	ldi	r19, 0xFF	; 255
    3aae:	4f e7       	ldi	r20, 0x7F	; 127
    3ab0:	57 e4       	ldi	r21, 0x47	; 71
    3ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ab6:	18 16       	cp	r1, r24
    3ab8:	64 f5       	brge	.+88     	; 0x3b12 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aba:	fe 01       	movw	r30, r28
    3abc:	ed 5b       	subi	r30, 0xBD	; 189
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	60 81       	ld	r22, Z
    3ac2:	71 81       	ldd	r23, Z+1	; 0x01
    3ac4:	82 81       	ldd	r24, Z+2	; 0x02
    3ac6:	93 81       	ldd	r25, Z+3	; 0x03
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	40 e2       	ldi	r20, 0x20	; 32
    3ace:	51 e4       	ldi	r21, 0x41	; 65
    3ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	bc 01       	movw	r22, r24
    3ada:	cd 01       	movw	r24, r26
    3adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	9e af       	std	Y+62, r25	; 0x3e
    3ae6:	8d af       	std	Y+61, r24	; 0x3d
    3ae8:	0f c0       	rjmp	.+30     	; 0x3b08 <LCD_displayCharacter+0x478>
    3aea:	80 e9       	ldi	r24, 0x90	; 144
    3aec:	91 e0       	ldi	r25, 0x01	; 1
    3aee:	9c af       	std	Y+60, r25	; 0x3c
    3af0:	8b af       	std	Y+59, r24	; 0x3b
    3af2:	8b ad       	ldd	r24, Y+59	; 0x3b
    3af4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <LCD_displayCharacter+0x466>
    3afa:	9c af       	std	Y+60, r25	; 0x3c
    3afc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	9e af       	std	Y+62, r25	; 0x3e
    3b06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b08:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b0c:	00 97       	sbiw	r24, 0x00	; 0
    3b0e:	69 f7       	brne	.-38     	; 0x3aea <LCD_displayCharacter+0x45a>
    3b10:	16 c0       	rjmp	.+44     	; 0x3b3e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b12:	fe 01       	movw	r30, r28
    3b14:	ff 96       	adiw	r30, 0x3f	; 63
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	82 81       	ldd	r24, Z+2	; 0x02
    3b1c:	93 81       	ldd	r25, Z+3	; 0x03
    3b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	9e af       	std	Y+62, r25	; 0x3e
    3b28:	8d af       	std	Y+61, r24	; 0x3d
    3b2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3b2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3b2e:	9a af       	std	Y+58, r25	; 0x3a
    3b30:	89 af       	std	Y+57, r24	; 0x39
    3b32:	89 ad       	ldd	r24, Y+57	; 0x39
    3b34:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <LCD_displayCharacter+0x4a6>
    3b3a:	9a af       	std	Y+58, r25	; 0x3a
    3b3c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	62 e0       	ldi	r22, 0x02	; 2
    3b42:	40 e0       	ldi	r20, 0x00	; 0
    3b44:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	a0 e8       	ldi	r26, 0x80	; 128
    3b4e:	bf e3       	ldi	r27, 0x3F	; 63
    3b50:	8d ab       	std	Y+53, r24	; 0x35
    3b52:	9e ab       	std	Y+54, r25	; 0x36
    3b54:	af ab       	std	Y+55, r26	; 0x37
    3b56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b58:	6d a9       	ldd	r22, Y+53	; 0x35
    3b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    3b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    3b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	4a e7       	ldi	r20, 0x7A	; 122
    3b66:	55 e4       	ldi	r21, 0x45	; 69
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	89 ab       	std	Y+49, r24	; 0x31
    3b72:	9a ab       	std	Y+50, r25	; 0x32
    3b74:	ab ab       	std	Y+51, r26	; 0x33
    3b76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b78:	69 a9       	ldd	r22, Y+49	; 0x31
    3b7a:	7a a9       	ldd	r23, Y+50	; 0x32
    3b7c:	8b a9       	ldd	r24, Y+51	; 0x33
    3b7e:	9c a9       	ldd	r25, Y+52	; 0x34
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e8       	ldi	r20, 0x80	; 128
    3b86:	5f e3       	ldi	r21, 0x3F	; 63
    3b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b8c:	88 23       	and	r24, r24
    3b8e:	2c f4       	brge	.+10     	; 0x3b9a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	98 ab       	std	Y+48, r25	; 0x30
    3b96:	8f a7       	std	Y+47, r24	; 0x2f
    3b98:	3f c0       	rjmp	.+126    	; 0x3c18 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3b9a:	69 a9       	ldd	r22, Y+49	; 0x31
    3b9c:	7a a9       	ldd	r23, Y+50	; 0x32
    3b9e:	8b a9       	ldd	r24, Y+51	; 0x33
    3ba0:	9c a9       	ldd	r25, Y+52	; 0x34
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	3f ef       	ldi	r19, 0xFF	; 255
    3ba6:	4f e7       	ldi	r20, 0x7F	; 127
    3ba8:	57 e4       	ldi	r21, 0x47	; 71
    3baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bae:	18 16       	cp	r1, r24
    3bb0:	4c f5       	brge	.+82     	; 0x3c04 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	6d a9       	ldd	r22, Y+53	; 0x35
    3bb4:	7e a9       	ldd	r23, Y+54	; 0x36
    3bb6:	8f a9       	ldd	r24, Y+55	; 0x37
    3bb8:	98 ad       	ldd	r25, Y+56	; 0x38
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e2       	ldi	r20, 0x20	; 32
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	98 ab       	std	Y+48, r25	; 0x30
    3bd8:	8f a7       	std	Y+47, r24	; 0x2f
    3bda:	0f c0       	rjmp	.+30     	; 0x3bfa <LCD_displayCharacter+0x56a>
    3bdc:	80 e9       	ldi	r24, 0x90	; 144
    3bde:	91 e0       	ldi	r25, 0x01	; 1
    3be0:	9e a7       	std	Y+46, r25	; 0x2e
    3be2:	8d a7       	std	Y+45, r24	; 0x2d
    3be4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3be6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <LCD_displayCharacter+0x558>
    3bec:	9e a7       	std	Y+46, r25	; 0x2e
    3bee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bf2:	98 a9       	ldd	r25, Y+48	; 0x30
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	98 ab       	std	Y+48, r25	; 0x30
    3bf8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	69 f7       	brne	.-38     	; 0x3bdc <LCD_displayCharacter+0x54c>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c04:	69 a9       	ldd	r22, Y+49	; 0x31
    3c06:	7a a9       	ldd	r23, Y+50	; 0x32
    3c08:	8b a9       	ldd	r24, Y+51	; 0x33
    3c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    3c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	98 ab       	std	Y+48, r25	; 0x30
    3c16:	8f a7       	std	Y+47, r24	; 0x2f
    3c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3c1c:	9c a7       	std	Y+44, r25	; 0x2c
    3c1e:	8b a7       	std	Y+43, r24	; 0x2b
    3c20:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c22:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <LCD_displayCharacter+0x594>
    3c28:	9c a7       	std	Y+44, r25	; 0x2c
    3c2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	62 e0       	ldi	r22, 0x02	; 2
    3c30:	41 e0       	ldi	r20, 0x01	; 1
    3c32:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	a0 e8       	ldi	r26, 0x80	; 128
    3c3c:	bf e3       	ldi	r27, 0x3F	; 63
    3c3e:	8f a3       	std	Y+39, r24	; 0x27
    3c40:	98 a7       	std	Y+40, r25	; 0x28
    3c42:	a9 a7       	std	Y+41, r26	; 0x29
    3c44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c46:	6f a1       	ldd	r22, Y+39	; 0x27
    3c48:	78 a5       	ldd	r23, Y+40	; 0x28
    3c4a:	89 a5       	ldd	r24, Y+41	; 0x29
    3c4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	4a e7       	ldi	r20, 0x7A	; 122
    3c54:	55 e4       	ldi	r21, 0x45	; 69
    3c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	8b a3       	std	Y+35, r24	; 0x23
    3c60:	9c a3       	std	Y+36, r25	; 0x24
    3c62:	ad a3       	std	Y+37, r26	; 0x25
    3c64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c66:	6b a1       	ldd	r22, Y+35	; 0x23
    3c68:	7c a1       	ldd	r23, Y+36	; 0x24
    3c6a:	8d a1       	ldd	r24, Y+37	; 0x25
    3c6c:	9e a1       	ldd	r25, Y+38	; 0x26
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e8       	ldi	r20, 0x80	; 128
    3c74:	5f e3       	ldi	r21, 0x3F	; 63
    3c76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c7a:	88 23       	and	r24, r24
    3c7c:	2c f4       	brge	.+10     	; 0x3c88 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	9a a3       	std	Y+34, r25	; 0x22
    3c84:	89 a3       	std	Y+33, r24	; 0x21
    3c86:	3f c0       	rjmp	.+126    	; 0x3d06 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3c88:	6b a1       	ldd	r22, Y+35	; 0x23
    3c8a:	7c a1       	ldd	r23, Y+36	; 0x24
    3c8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3c8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	3f ef       	ldi	r19, 0xFF	; 255
    3c94:	4f e7       	ldi	r20, 0x7F	; 127
    3c96:	57 e4       	ldi	r21, 0x47	; 71
    3c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c9c:	18 16       	cp	r1, r24
    3c9e:	4c f5       	brge	.+82     	; 0x3cf2 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca0:	6f a1       	ldd	r22, Y+39	; 0x27
    3ca2:	78 a5       	ldd	r23, Y+40	; 0x28
    3ca4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ca6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e2       	ldi	r20, 0x20	; 32
    3cae:	51 e4       	ldi	r21, 0x41	; 65
    3cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	bc 01       	movw	r22, r24
    3cba:	cd 01       	movw	r24, r26
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9a a3       	std	Y+34, r25	; 0x22
    3cc6:	89 a3       	std	Y+33, r24	; 0x21
    3cc8:	0f c0       	rjmp	.+30     	; 0x3ce8 <LCD_displayCharacter+0x658>
    3cca:	80 e9       	ldi	r24, 0x90	; 144
    3ccc:	91 e0       	ldi	r25, 0x01	; 1
    3cce:	98 a3       	std	Y+32, r25	; 0x20
    3cd0:	8f 8f       	std	Y+31, r24	; 0x1f
    3cd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cd4:	98 a1       	ldd	r25, Y+32	; 0x20
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	f1 f7       	brne	.-4      	; 0x3cd6 <LCD_displayCharacter+0x646>
    3cda:	98 a3       	std	Y+32, r25	; 0x20
    3cdc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cde:	89 a1       	ldd	r24, Y+33	; 0x21
    3ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	9a a3       	std	Y+34, r25	; 0x22
    3ce6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce8:	89 a1       	ldd	r24, Y+33	; 0x21
    3cea:	9a a1       	ldd	r25, Y+34	; 0x22
    3cec:	00 97       	sbiw	r24, 0x00	; 0
    3cee:	69 f7       	brne	.-38     	; 0x3cca <LCD_displayCharacter+0x63a>
    3cf0:	14 c0       	rjmp	.+40     	; 0x3d1a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    3cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    3cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    3cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    3cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	9a a3       	std	Y+34, r25	; 0x22
    3d04:	89 a3       	std	Y+33, r24	; 0x21
    3d06:	89 a1       	ldd	r24, Y+33	; 0x21
    3d08:	9a a1       	ldd	r25, Y+34	; 0x22
    3d0a:	9e 8f       	std	Y+30, r25	; 0x1e
    3d0c:	8d 8f       	std	Y+29, r24	; 0x1d
    3d0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <LCD_displayCharacter+0x682>
    3d16:	9e 8f       	std	Y+30, r25	; 0x1e
    3d18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	ed 59       	subi	r30, 0x9D	; 157
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	80 81       	ld	r24, Z
    3d22:	98 2f       	mov	r25, r24
    3d24:	91 70       	andi	r25, 0x01	; 1
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	49 2f       	mov	r20, r25
    3d2c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3d30:	fe 01       	movw	r30, r28
    3d32:	ed 59       	subi	r30, 0x9D	; 157
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	80 81       	ld	r24, Z
    3d38:	88 2f       	mov	r24, r24
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	82 70       	andi	r24, 0x02	; 2
    3d3e:	90 70       	andi	r25, 0x00	; 0
    3d40:	95 95       	asr	r25
    3d42:	87 95       	ror	r24
    3d44:	98 2f       	mov	r25, r24
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	61 e0       	ldi	r22, 0x01	; 1
    3d4a:	49 2f       	mov	r20, r25
    3d4c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3d50:	fe 01       	movw	r30, r28
    3d52:	ed 59       	subi	r30, 0x9D	; 157
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	88 2f       	mov	r24, r24
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	84 70       	andi	r24, 0x04	; 4
    3d5e:	90 70       	andi	r25, 0x00	; 0
    3d60:	95 95       	asr	r25
    3d62:	87 95       	ror	r24
    3d64:	95 95       	asr	r25
    3d66:	87 95       	ror	r24
    3d68:	98 2f       	mov	r25, r24
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	62 e0       	ldi	r22, 0x02	; 2
    3d6e:	49 2f       	mov	r20, r25
    3d70:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3d74:	fe 01       	movw	r30, r28
    3d76:	ed 59       	subi	r30, 0x9D	; 157
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	80 81       	ld	r24, Z
    3d7c:	88 2f       	mov	r24, r24
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	88 70       	andi	r24, 0x08	; 8
    3d82:	90 70       	andi	r25, 0x00	; 0
    3d84:	95 95       	asr	r25
    3d86:	87 95       	ror	r24
    3d88:	95 95       	asr	r25
    3d8a:	87 95       	ror	r24
    3d8c:	95 95       	asr	r25
    3d8e:	87 95       	ror	r24
    3d90:	98 2f       	mov	r25, r24
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	64 e0       	ldi	r22, 0x04	; 4
    3d96:	49 2f       	mov	r20, r25
    3d98:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	a0 e8       	ldi	r26, 0x80	; 128
    3da2:	bf e3       	ldi	r27, 0x3F	; 63
    3da4:	89 8f       	std	Y+25, r24	; 0x19
    3da6:	9a 8f       	std	Y+26, r25	; 0x1a
    3da8:	ab 8f       	std	Y+27, r26	; 0x1b
    3daa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dac:	69 8d       	ldd	r22, Y+25	; 0x19
    3dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	4a e7       	ldi	r20, 0x7A	; 122
    3dba:	55 e4       	ldi	r21, 0x45	; 69
    3dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	8d 8b       	std	Y+21, r24	; 0x15
    3dc6:	9e 8b       	std	Y+22, r25	; 0x16
    3dc8:	af 8b       	std	Y+23, r26	; 0x17
    3dca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    3dce:	7e 89       	ldd	r23, Y+22	; 0x16
    3dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e8       	ldi	r20, 0x80	; 128
    3dda:	5f e3       	ldi	r21, 0x3F	; 63
    3ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de0:	88 23       	and	r24, r24
    3de2:	2c f4       	brge	.+10     	; 0x3dee <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	9c 8b       	std	Y+20, r25	; 0x14
    3dea:	8b 8b       	std	Y+19, r24	; 0x13
    3dec:	3f c0       	rjmp	.+126    	; 0x3e6c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3dee:	6d 89       	ldd	r22, Y+21	; 0x15
    3df0:	7e 89       	ldd	r23, Y+22	; 0x16
    3df2:	8f 89       	ldd	r24, Y+23	; 0x17
    3df4:	98 8d       	ldd	r25, Y+24	; 0x18
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	3f ef       	ldi	r19, 0xFF	; 255
    3dfa:	4f e7       	ldi	r20, 0x7F	; 127
    3dfc:	57 e4       	ldi	r21, 0x47	; 71
    3dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e02:	18 16       	cp	r1, r24
    3e04:	4c f5       	brge	.+82     	; 0x3e58 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e06:	69 8d       	ldd	r22, Y+25	; 0x19
    3e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e2       	ldi	r20, 0x20	; 32
    3e14:	51 e4       	ldi	r21, 0x41	; 65
    3e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	bc 01       	movw	r22, r24
    3e20:	cd 01       	movw	r24, r26
    3e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	9c 8b       	std	Y+20, r25	; 0x14
    3e2c:	8b 8b       	std	Y+19, r24	; 0x13
    3e2e:	0f c0       	rjmp	.+30     	; 0x3e4e <LCD_displayCharacter+0x7be>
    3e30:	80 e9       	ldi	r24, 0x90	; 144
    3e32:	91 e0       	ldi	r25, 0x01	; 1
    3e34:	9a 8b       	std	Y+18, r25	; 0x12
    3e36:	89 8b       	std	Y+17, r24	; 0x11
    3e38:	89 89       	ldd	r24, Y+17	; 0x11
    3e3a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	f1 f7       	brne	.-4      	; 0x3e3c <LCD_displayCharacter+0x7ac>
    3e40:	9a 8b       	std	Y+18, r25	; 0x12
    3e42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e44:	8b 89       	ldd	r24, Y+19	; 0x13
    3e46:	9c 89       	ldd	r25, Y+20	; 0x14
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	9c 8b       	std	Y+20, r25	; 0x14
    3e4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e50:	9c 89       	ldd	r25, Y+20	; 0x14
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	69 f7       	brne	.-38     	; 0x3e30 <LCD_displayCharacter+0x7a0>
    3e56:	14 c0       	rjmp	.+40     	; 0x3e80 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e58:	6d 89       	ldd	r22, Y+21	; 0x15
    3e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	9c 8b       	std	Y+20, r25	; 0x14
    3e6a:	8b 8b       	std	Y+19, r24	; 0x13
    3e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e70:	98 8b       	std	Y+16, r25	; 0x10
    3e72:	8f 87       	std	Y+15, r24	; 0x0f
    3e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e76:	98 89       	ldd	r25, Y+16	; 0x10
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	f1 f7       	brne	.-4      	; 0x3e78 <LCD_displayCharacter+0x7e8>
    3e7c:	98 8b       	std	Y+16, r25	; 0x10
    3e7e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	62 e0       	ldi	r22, 0x02	; 2
    3e84:	40 e0       	ldi	r20, 0x00	; 0
    3e86:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	a0 e8       	ldi	r26, 0x80	; 128
    3e90:	bf e3       	ldi	r27, 0x3F	; 63
    3e92:	8b 87       	std	Y+11, r24	; 0x0b
    3e94:	9c 87       	std	Y+12, r25	; 0x0c
    3e96:	ad 87       	std	Y+13, r26	; 0x0d
    3e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	4a e7       	ldi	r20, 0x7A	; 122
    3ea8:	55 e4       	ldi	r21, 0x45	; 69
    3eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	8f 83       	std	Y+7, r24	; 0x07
    3eb4:	98 87       	std	Y+8, r25	; 0x08
    3eb6:	a9 87       	std	Y+9, r26	; 0x09
    3eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eba:	6f 81       	ldd	r22, Y+7	; 0x07
    3ebc:	78 85       	ldd	r23, Y+8	; 0x08
    3ebe:	89 85       	ldd	r24, Y+9	; 0x09
    3ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	40 e8       	ldi	r20, 0x80	; 128
    3ec8:	5f e3       	ldi	r21, 0x3F	; 63
    3eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ece:	88 23       	and	r24, r24
    3ed0:	2c f4       	brge	.+10     	; 0x3edc <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3ed2:	81 e0       	ldi	r24, 0x01	; 1
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	9e 83       	std	Y+6, r25	; 0x06
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
    3eda:	3f c0       	rjmp	.+126    	; 0x3f5a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3edc:	6f 81       	ldd	r22, Y+7	; 0x07
    3ede:	78 85       	ldd	r23, Y+8	; 0x08
    3ee0:	89 85       	ldd	r24, Y+9	; 0x09
    3ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	3f ef       	ldi	r19, 0xFF	; 255
    3ee8:	4f e7       	ldi	r20, 0x7F	; 127
    3eea:	57 e4       	ldi	r21, 0x47	; 71
    3eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef0:	18 16       	cp	r1, r24
    3ef2:	4c f5       	brge	.+82     	; 0x3f46 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e2       	ldi	r20, 0x20	; 32
    3f02:	51 e4       	ldi	r21, 0x41	; 65
    3f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	bc 01       	movw	r22, r24
    3f0e:	cd 01       	movw	r24, r26
    3f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f14:	dc 01       	movw	r26, r24
    3f16:	cb 01       	movw	r24, r22
    3f18:	9e 83       	std	Y+6, r25	; 0x06
    3f1a:	8d 83       	std	Y+5, r24	; 0x05
    3f1c:	0f c0       	rjmp	.+30     	; 0x3f3c <LCD_displayCharacter+0x8ac>
    3f1e:	80 e9       	ldi	r24, 0x90	; 144
    3f20:	91 e0       	ldi	r25, 0x01	; 1
    3f22:	9c 83       	std	Y+4, r25	; 0x04
    3f24:	8b 83       	std	Y+3, r24	; 0x03
    3f26:	8b 81       	ldd	r24, Y+3	; 0x03
    3f28:	9c 81       	ldd	r25, Y+4	; 0x04
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <LCD_displayCharacter+0x89a>
    3f2e:	9c 83       	std	Y+4, r25	; 0x04
    3f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f32:	8d 81       	ldd	r24, Y+5	; 0x05
    3f34:	9e 81       	ldd	r25, Y+6	; 0x06
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	9e 83       	std	Y+6, r25	; 0x06
    3f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	69 f7       	brne	.-38     	; 0x3f1e <LCD_displayCharacter+0x88e>
    3f44:	14 c0       	rjmp	.+40     	; 0x3f6e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f46:	6f 81       	ldd	r22, Y+7	; 0x07
    3f48:	78 85       	ldd	r23, Y+8	; 0x08
    3f4a:	89 85       	ldd	r24, Y+9	; 0x09
    3f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	9e 83       	std	Y+6, r25	; 0x06
    3f58:	8d 83       	std	Y+5, r24	; 0x05
    3f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	89 83       	std	Y+1, r24	; 0x01
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	9a 81       	ldd	r25, Y+2	; 0x02
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	f1 f7       	brne	.-4      	; 0x3f66 <LCD_displayCharacter+0x8d6>
    3f6a:	9a 83       	std	Y+2, r25	; 0x02
    3f6c:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3f6e:	cd 59       	subi	r28, 0x9D	; 157
    3f70:	df 4f       	sbci	r29, 0xFF	; 255
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	0f be       	out	0x3f, r0	; 63
    3f7a:	cd bf       	out	0x3d, r28	; 61
    3f7c:	cf 91       	pop	r28
    3f7e:	df 91       	pop	r29
    3f80:	1f 91       	pop	r17
    3f82:	0f 91       	pop	r16
    3f84:	08 95       	ret

00003f86 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3f86:	df 93       	push	r29
    3f88:	cf 93       	push	r28
    3f8a:	00 d0       	rcall	.+0      	; 0x3f8c <LCD_displayString+0x6>
    3f8c:	0f 92       	push	r0
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	9b 83       	std	Y+3, r25	; 0x03
    3f94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3f96:	19 82       	std	Y+1, r1	; 0x01
    3f98:	0e c0       	rjmp	.+28     	; 0x3fb6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	28 2f       	mov	r18, r24
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	e2 0f       	add	r30, r18
    3fa8:	f3 1f       	adc	r31, r19
    3faa:	80 81       	ld	r24, Z
    3fac:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_displayCharacter>
		i++;
    3fb0:	89 81       	ldd	r24, Y+1	; 0x01
    3fb2:	8f 5f       	subi	r24, 0xFF	; 255
    3fb4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	28 2f       	mov	r18, r24
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc0:	fc 01       	movw	r30, r24
    3fc2:	e2 0f       	add	r30, r18
    3fc4:	f3 1f       	adc	r31, r19
    3fc6:	80 81       	ld	r24, Z
    3fc8:	88 23       	and	r24, r24
    3fca:	39 f7       	brne	.-50     	; 0x3f9a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	cf 91       	pop	r28
    3fd4:	df 91       	pop	r29
    3fd6:	08 95       	ret

00003fd8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3fd8:	df 93       	push	r29
    3fda:	cf 93       	push	r28
    3fdc:	00 d0       	rcall	.+0      	; 0x3fde <LCD_moveCursor+0x6>
    3fde:	00 d0       	rcall	.+0      	; 0x3fe0 <LCD_moveCursor+0x8>
    3fe0:	0f 92       	push	r0
    3fe2:	cd b7       	in	r28, 0x3d	; 61
    3fe4:	de b7       	in	r29, 0x3e	; 62
    3fe6:	8a 83       	std	Y+2, r24	; 0x02
    3fe8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	3d 83       	std	Y+5, r19	; 0x05
    3ff2:	2c 83       	std	Y+4, r18	; 0x04
    3ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ff8:	81 30       	cpi	r24, 0x01	; 1
    3ffa:	91 05       	cpc	r25, r1
    3ffc:	c1 f0       	breq	.+48     	; 0x402e <LCD_moveCursor+0x56>
    3ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    4000:	3d 81       	ldd	r19, Y+5	; 0x05
    4002:	22 30       	cpi	r18, 0x02	; 2
    4004:	31 05       	cpc	r19, r1
    4006:	2c f4       	brge	.+10     	; 0x4012 <LCD_moveCursor+0x3a>
    4008:	8c 81       	ldd	r24, Y+4	; 0x04
    400a:	9d 81       	ldd	r25, Y+5	; 0x05
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	61 f0       	breq	.+24     	; 0x4028 <LCD_moveCursor+0x50>
    4010:	19 c0       	rjmp	.+50     	; 0x4044 <LCD_moveCursor+0x6c>
    4012:	2c 81       	ldd	r18, Y+4	; 0x04
    4014:	3d 81       	ldd	r19, Y+5	; 0x05
    4016:	22 30       	cpi	r18, 0x02	; 2
    4018:	31 05       	cpc	r19, r1
    401a:	69 f0       	breq	.+26     	; 0x4036 <LCD_moveCursor+0x5e>
    401c:	8c 81       	ldd	r24, Y+4	; 0x04
    401e:	9d 81       	ldd	r25, Y+5	; 0x05
    4020:	83 30       	cpi	r24, 0x03	; 3
    4022:	91 05       	cpc	r25, r1
    4024:	61 f0       	breq	.+24     	; 0x403e <LCD_moveCursor+0x66>
    4026:	0e c0       	rjmp	.+28     	; 0x4044 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    4028:	8b 81       	ldd	r24, Y+3	; 0x03
    402a:	89 83       	std	Y+1, r24	; 0x01
    402c:	0b c0       	rjmp	.+22     	; 0x4044 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0xC0;
    402e:	8b 81       	ldd	r24, Y+3	; 0x03
    4030:	80 54       	subi	r24, 0x40	; 64
    4032:	89 83       	std	Y+1, r24	; 0x01
    4034:	07 c0       	rjmp	.+14     	; 0x4044 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x94;
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
    4038:	8c 56       	subi	r24, 0x6C	; 108
    403a:	89 83       	std	Y+1, r24	; 0x01
    403c:	03 c0       	rjmp	.+6      	; 0x4044 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0xD4;
    403e:	8b 81       	ldd	r24, Y+3	; 0x03
    4040:	8c 52       	subi	r24, 0x2C	; 44
    4042:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4044:	89 81       	ldd	r24, Y+1	; 0x01
    4046:	80 68       	ori	r24, 0x80	; 128
    4048:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <LCD_sendCommand>
}
    404c:	0f 90       	pop	r0
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	cf 91       	pop	r28
    4058:	df 91       	pop	r29
    405a:	08 95       	ret

0000405c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    405c:	df 93       	push	r29
    405e:	cf 93       	push	r28
    4060:	00 d0       	rcall	.+0      	; 0x4062 <LCD_displayStringRowColumn+0x6>
    4062:	00 d0       	rcall	.+0      	; 0x4064 <LCD_displayStringRowColumn+0x8>
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
    4068:	89 83       	std	Y+1, r24	; 0x01
    406a:	6a 83       	std	Y+2, r22	; 0x02
    406c:	5c 83       	std	Y+4, r21	; 0x04
    406e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	6a 81       	ldd	r22, Y+2	; 0x02
    4074:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	9c 81       	ldd	r25, Y+4	; 0x04
    407c:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
}
    4080:	0f 90       	pop	r0
    4082:	0f 90       	pop	r0
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	62 97       	sbiw	r28, 0x12	; 18
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	9a 8b       	std	Y+18, r25	; 0x12
    40a4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    40a6:	89 89       	ldd	r24, Y+17	; 0x11
    40a8:	9a 89       	ldd	r25, Y+18	; 0x12
    40aa:	9e 01       	movw	r18, r28
    40ac:	2f 5f       	subi	r18, 0xFF	; 255
    40ae:	3f 4f       	sbci	r19, 0xFF	; 255
    40b0:	b9 01       	movw	r22, r18
    40b2:	4a e0       	ldi	r20, 0x0A	; 10
    40b4:	50 e0       	ldi	r21, 0x00	; 0
    40b6:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <itoa>
   LCD_displayString(buff); /* Display the string */
    40ba:	ce 01       	movw	r24, r28
    40bc:	01 96       	adiw	r24, 0x01	; 1
    40be:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <LCD_displayString>
}
    40c2:	62 96       	adiw	r28, 0x12	; 18
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	f8 94       	cli
    40c8:	de bf       	out	0x3e, r29	; 62
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	cf 91       	pop	r28
    40d0:	df 91       	pop	r29
    40d2:	08 95       	ret

000040d4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <LCD_sendCommand>
}
    40e2:	cf 91       	pop	r28
    40e4:	df 91       	pop	r29
    40e6:	08 95       	ret

000040e8 <BUZZER_init>:

#include "../../MCAL/DIO/dio.h"
#include "buzzer.h"

void BUZZER_init(void)
{
    40e8:	df 93       	push	r29
    40ea:	cf 93       	push	r28
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    40f0:	82 e0       	ldi	r24, 0x02	; 2
    40f2:	66 e0       	ldi	r22, 0x06	; 6
    40f4:	41 e0       	ldi	r20, 0x01	; 1
    40f6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	66 e0       	ldi	r22, 0x06	; 6
    40fe:	40 e0       	ldi	r20, 0x00	; 0
    4100:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    4104:	cf 91       	pop	r28
    4106:	df 91       	pop	r29
    4108:	08 95       	ret

0000410a <BUZZER_on>:

void BUZZER_on(void)
{
    410a:	df 93       	push	r29
    410c:	cf 93       	push	r28
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    4112:	82 e0       	ldi	r24, 0x02	; 2
    4114:	66 e0       	ldi	r22, 0x06	; 6
    4116:	41 e0       	ldi	r20, 0x01	; 1
    4118:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    411c:	cf 91       	pop	r28
    411e:	df 91       	pop	r29
    4120:	08 95       	ret

00004122 <BUZZER_off>:

void BUZZER_off(void)
{
    4122:	df 93       	push	r29
    4124:	cf 93       	push	r28
    4126:	cd b7       	in	r28, 0x3d	; 61
    4128:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    412a:	82 e0       	ldi	r24, 0x02	; 2
    412c:	66 e0       	ldi	r22, 0x06	; 6
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    4134:	cf 91       	pop	r28
    4136:	df 91       	pop	r29
    4138:	08 95       	ret

0000413a <BMP180_ReadCalb>:
/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;
void delay(void);
void BMP180_ReadCalb(void) {
    413a:	0f 93       	push	r16
    413c:	1f 93       	push	r17
    413e:	df 93       	push	r29
    4140:	cf 93       	push	r28
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    4146:	c2 59       	subi	r28, 0x92	; 146
    4148:	d0 40       	sbci	r29, 0x00	; 0
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61

	uint8_t Callib_Data[22] = { 0 };
    4154:	ce 01       	movw	r24, r28
    4156:	83 58       	subi	r24, 0x83	; 131
    4158:	9f 4f       	sbci	r25, 0xFF	; 255
    415a:	26 e1       	ldi	r18, 0x16	; 22
    415c:	fc 01       	movw	r30, r24
    415e:	df 01       	movw	r26, r30
    4160:	82 2f       	mov	r24, r18
    4162:	1d 92       	st	X+, r1
    4164:	8a 95       	dec	r24
    4166:	e9 f7       	brne	.-6      	; 0x4162 <BMP180_ReadCalb+0x28>
	uint16_t Callib_Start = 0xAA;
    4168:	fe 01       	movw	r30, r28
    416a:	e5 58       	subi	r30, 0x85	; 133
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	8a ea       	ldi	r24, 0xAA	; 170
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	91 83       	std	Z+1, r25	; 0x01
    4174:	80 83       	st	Z, r24

	for (int i = 0; i < 22; i++) {
    4176:	fe 01       	movw	r30, r28
    4178:	e7 58       	subi	r30, 0x87	; 135
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	11 82       	std	Z+1, r1	; 0x01
    417e:	10 82       	st	Z, r1
    4180:	d9 c4       	rjmp	.+2482   	; 0x4b34 <BMP180_ReadCalb+0x9fa>
		TWI_Start_Wait(BMP180_ADDRESS_W);// To write
    4182:	8e ee       	ldi	r24, 0xEE	; 238
    4184:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
    4188:	fe 01       	movw	r30, r28
    418a:	eb 58       	subi	r30, 0x8B	; 139
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	a0 e2       	ldi	r26, 0x20	; 32
    4194:	b1 e4       	ldi	r27, 0x41	; 65
    4196:	80 83       	st	Z, r24
    4198:	91 83       	std	Z+1, r25	; 0x01
    419a:	a2 83       	std	Z+2, r26	; 0x02
    419c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    419e:	8e 01       	movw	r16, r28
    41a0:	0f 58       	subi	r16, 0x8F	; 143
    41a2:	1f 4f       	sbci	r17, 0xFF	; 255
    41a4:	fe 01       	movw	r30, r28
    41a6:	eb 58       	subi	r30, 0x8B	; 139
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	2b ea       	ldi	r18, 0xAB	; 171
    41b4:	3a ea       	ldi	r19, 0xAA	; 170
    41b6:	4a ea       	ldi	r20, 0xAA	; 170
    41b8:	50 e4       	ldi	r21, 0x40	; 64
    41ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	f8 01       	movw	r30, r16
    41c4:	80 83       	st	Z, r24
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	a2 83       	std	Z+2, r26	; 0x02
    41ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41cc:	fe 01       	movw	r30, r28
    41ce:	ef 58       	subi	r30, 0x8F	; 143
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	60 81       	ld	r22, Z
    41d4:	71 81       	ldd	r23, Z+1	; 0x01
    41d6:	82 81       	ldd	r24, Z+2	; 0x02
    41d8:	93 81       	ldd	r25, Z+3	; 0x03
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	40 e8       	ldi	r20, 0x80	; 128
    41e0:	5f e3       	ldi	r21, 0x3F	; 63
    41e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41e6:	88 23       	and	r24, r24
    41e8:	34 f4       	brge	.+12     	; 0x41f6 <BMP180_ReadCalb+0xbc>
		__ticks = 1;
    41ea:	fe 01       	movw	r30, r28
    41ec:	e0 59       	subi	r30, 0x90	; 144
    41ee:	ff 4f       	sbci	r31, 0xFF	; 255
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	80 83       	st	Z, r24
    41f4:	e0 c0       	rjmp	.+448    	; 0x43b6 <BMP180_ReadCalb+0x27c>
	else if (__tmp > 255)
    41f6:	fe 01       	movw	r30, r28
    41f8:	ef 58       	subi	r30, 0x8F	; 143
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	60 81       	ld	r22, Z
    41fe:	71 81       	ldd	r23, Z+1	; 0x01
    4200:	82 81       	ldd	r24, Z+2	; 0x02
    4202:	93 81       	ldd	r25, Z+3	; 0x03
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	4f e7       	ldi	r20, 0x7F	; 127
    420a:	53 e4       	ldi	r21, 0x43	; 67
    420c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4210:	18 16       	cp	r1, r24
    4212:	0c f0       	brlt	.+2      	; 0x4216 <BMP180_ReadCalb+0xdc>
    4214:	c0 c0       	rjmp	.+384    	; 0x4396 <BMP180_ReadCalb+0x25c>
	{
		_delay_ms(__us / 1000.0);
    4216:	fe 01       	movw	r30, r28
    4218:	eb 58       	subi	r30, 0x8B	; 139
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	60 81       	ld	r22, Z
    421e:	71 81       	ldd	r23, Z+1	; 0x01
    4220:	82 81       	ldd	r24, Z+2	; 0x02
    4222:	93 81       	ldd	r25, Z+3	; 0x03
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	4a e7       	ldi	r20, 0x7A	; 122
    422a:	54 e4       	ldi	r21, 0x44	; 68
    422c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	fe 01       	movw	r30, r28
    4236:	e4 59       	subi	r30, 0x94	; 148
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 83       	st	Z, r24
    423c:	91 83       	std	Z+1, r25	; 0x01
    423e:	a2 83       	std	Z+2, r26	; 0x02
    4240:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4242:	8e 01       	movw	r16, r28
    4244:	08 59       	subi	r16, 0x98	; 152
    4246:	1f 4f       	sbci	r17, 0xFF	; 255
    4248:	fe 01       	movw	r30, r28
    424a:	e4 59       	subi	r30, 0x94	; 148
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	4a e7       	ldi	r20, 0x7A	; 122
    425c:	55 e4       	ldi	r21, 0x45	; 69
    425e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	f8 01       	movw	r30, r16
    4268:	80 83       	st	Z, r24
    426a:	91 83       	std	Z+1, r25	; 0x01
    426c:	a2 83       	std	Z+2, r26	; 0x02
    426e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4270:	fe 01       	movw	r30, r28
    4272:	e8 59       	subi	r30, 0x98	; 152
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	60 81       	ld	r22, Z
    4278:	71 81       	ldd	r23, Z+1	; 0x01
    427a:	82 81       	ldd	r24, Z+2	; 0x02
    427c:	93 81       	ldd	r25, Z+3	; 0x03
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	40 e8       	ldi	r20, 0x80	; 128
    4284:	5f e3       	ldi	r21, 0x3F	; 63
    4286:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    428a:	88 23       	and	r24, r24
    428c:	44 f4       	brge	.+16     	; 0x429e <BMP180_ReadCalb+0x164>
		__ticks = 1;
    428e:	fe 01       	movw	r30, r28
    4290:	ea 59       	subi	r30, 0x9A	; 154
    4292:	ff 4f       	sbci	r31, 0xFF	; 255
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	80 83       	st	Z, r24
    429c:	64 c0       	rjmp	.+200    	; 0x4366 <BMP180_ReadCalb+0x22c>
	else if (__tmp > 65535)
    429e:	fe 01       	movw	r30, r28
    42a0:	e8 59       	subi	r30, 0x98	; 152
    42a2:	ff 4f       	sbci	r31, 0xFF	; 255
    42a4:	60 81       	ld	r22, Z
    42a6:	71 81       	ldd	r23, Z+1	; 0x01
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	3f ef       	ldi	r19, 0xFF	; 255
    42b0:	4f e7       	ldi	r20, 0x7F	; 127
    42b2:	57 e4       	ldi	r21, 0x47	; 71
    42b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42b8:	18 16       	cp	r1, r24
    42ba:	0c f0       	brlt	.+2      	; 0x42be <BMP180_ReadCalb+0x184>
    42bc:	43 c0       	rjmp	.+134    	; 0x4344 <BMP180_ReadCalb+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42be:	fe 01       	movw	r30, r28
    42c0:	e4 59       	subi	r30, 0x94	; 148
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	60 81       	ld	r22, Z
    42c6:	71 81       	ldd	r23, Z+1	; 0x01
    42c8:	82 81       	ldd	r24, Z+2	; 0x02
    42ca:	93 81       	ldd	r25, Z+3	; 0x03
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	40 e2       	ldi	r20, 0x20	; 32
    42d2:	51 e4       	ldi	r21, 0x41	; 65
    42d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	8e 01       	movw	r16, r28
    42de:	0a 59       	subi	r16, 0x9A	; 154
    42e0:	1f 4f       	sbci	r17, 0xFF	; 255
    42e2:	bc 01       	movw	r22, r24
    42e4:	cd 01       	movw	r24, r26
    42e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	f8 01       	movw	r30, r16
    42f0:	91 83       	std	Z+1, r25	; 0x01
    42f2:	80 83       	st	Z, r24
    42f4:	1f c0       	rjmp	.+62     	; 0x4334 <BMP180_ReadCalb+0x1fa>
    42f6:	fe 01       	movw	r30, r28
    42f8:	ec 59       	subi	r30, 0x9C	; 156
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	80 e9       	ldi	r24, 0x90	; 144
    42fe:	91 e0       	ldi	r25, 0x01	; 1
    4300:	91 83       	std	Z+1, r25	; 0x01
    4302:	80 83       	st	Z, r24
    4304:	fe 01       	movw	r30, r28
    4306:	ec 59       	subi	r30, 0x9C	; 156
    4308:	ff 4f       	sbci	r31, 0xFF	; 255
    430a:	80 81       	ld	r24, Z
    430c:	91 81       	ldd	r25, Z+1	; 0x01
    430e:	01 97       	sbiw	r24, 0x01	; 1
    4310:	f1 f7       	brne	.-4      	; 0x430e <BMP180_ReadCalb+0x1d4>
    4312:	fe 01       	movw	r30, r28
    4314:	ec 59       	subi	r30, 0x9C	; 156
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	91 83       	std	Z+1, r25	; 0x01
    431a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    431c:	de 01       	movw	r26, r28
    431e:	aa 59       	subi	r26, 0x9A	; 154
    4320:	bf 4f       	sbci	r27, 0xFF	; 255
    4322:	fe 01       	movw	r30, r28
    4324:	ea 59       	subi	r30, 0x9A	; 154
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	80 81       	ld	r24, Z
    432a:	91 81       	ldd	r25, Z+1	; 0x01
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	11 96       	adiw	r26, 0x01	; 1
    4330:	9c 93       	st	X, r25
    4332:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4334:	fe 01       	movw	r30, r28
    4336:	ea 59       	subi	r30, 0x9A	; 154
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	80 81       	ld	r24, Z
    433c:	91 81       	ldd	r25, Z+1	; 0x01
    433e:	00 97       	sbiw	r24, 0x00	; 0
    4340:	d1 f6       	brne	.-76     	; 0x42f6 <BMP180_ReadCalb+0x1bc>
    4342:	4b c0       	rjmp	.+150    	; 0x43da <BMP180_ReadCalb+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4344:	8e 01       	movw	r16, r28
    4346:	0a 59       	subi	r16, 0x9A	; 154
    4348:	1f 4f       	sbci	r17, 0xFF	; 255
    434a:	fe 01       	movw	r30, r28
    434c:	e8 59       	subi	r30, 0x98	; 152
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	60 81       	ld	r22, Z
    4352:	71 81       	ldd	r23, Z+1	; 0x01
    4354:	82 81       	ldd	r24, Z+2	; 0x02
    4356:	93 81       	ldd	r25, Z+3	; 0x03
    4358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	f8 01       	movw	r30, r16
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	80 83       	st	Z, r24
    4366:	de 01       	movw	r26, r28
    4368:	ae 59       	subi	r26, 0x9E	; 158
    436a:	bf 4f       	sbci	r27, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	ea 59       	subi	r30, 0x9A	; 154
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	11 96       	adiw	r26, 0x01	; 1
    4378:	9c 93       	st	X, r25
    437a:	8e 93       	st	-X, r24
    437c:	fe 01       	movw	r30, r28
    437e:	ee 59       	subi	r30, 0x9E	; 158
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	80 81       	ld	r24, Z
    4384:	91 81       	ldd	r25, Z+1	; 0x01
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <BMP180_ReadCalb+0x24c>
    438a:	fe 01       	movw	r30, r28
    438c:	ee 59       	subi	r30, 0x9E	; 158
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	91 83       	std	Z+1, r25	; 0x01
    4392:	80 83       	st	Z, r24
    4394:	22 c0       	rjmp	.+68     	; 0x43da <BMP180_ReadCalb+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4396:	8e 01       	movw	r16, r28
    4398:	00 59       	subi	r16, 0x90	; 144
    439a:	1f 4f       	sbci	r17, 0xFF	; 255
    439c:	fe 01       	movw	r30, r28
    439e:	ef 58       	subi	r30, 0x8F	; 143
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	82 81       	ldd	r24, Z+2	; 0x02
    43a8:	93 81       	ldd	r25, Z+3	; 0x03
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	f8 01       	movw	r30, r16
    43b4:	80 83       	st	Z, r24
    43b6:	de 01       	movw	r26, r28
    43b8:	af 59       	subi	r26, 0x9F	; 159
    43ba:	bf 4f       	sbci	r27, 0xFF	; 255
    43bc:	fe 01       	movw	r30, r28
    43be:	e0 59       	subi	r30, 0x90	; 144
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	80 81       	ld	r24, Z
    43c4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    43c6:	fe 01       	movw	r30, r28
    43c8:	ef 59       	subi	r30, 0x9F	; 159
    43ca:	ff 4f       	sbci	r31, 0xFF	; 255
    43cc:	80 81       	ld	r24, Z
    43ce:	8a 95       	dec	r24
    43d0:	f1 f7       	brne	.-4      	; 0x43ce <BMP180_ReadCalb+0x294>
    43d2:	fe 01       	movw	r30, r28
    43d4:	ef 59       	subi	r30, 0x9F	; 159
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_WriteByte(Callib_Start + i);
    43da:	fe 01       	movw	r30, r28
    43dc:	e5 58       	subi	r30, 0x85	; 133
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	90 81       	ld	r25, Z
    43e2:	fe 01       	movw	r30, r28
    43e4:	e7 58       	subi	r30, 0x87	; 135
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	80 81       	ld	r24, Z
    43ea:	89 0f       	add	r24, r25
    43ec:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
    43f0:	fe 01       	movw	r30, r28
    43f2:	e3 5a       	subi	r30, 0xA3	; 163
    43f4:	ff 4f       	sbci	r31, 0xFF	; 255
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	a0 e2       	ldi	r26, 0x20	; 32
    43fc:	b1 e4       	ldi	r27, 0x41	; 65
    43fe:	80 83       	st	Z, r24
    4400:	91 83       	std	Z+1, r25	; 0x01
    4402:	a2 83       	std	Z+2, r26	; 0x02
    4404:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4406:	8e 01       	movw	r16, r28
    4408:	07 5a       	subi	r16, 0xA7	; 167
    440a:	1f 4f       	sbci	r17, 0xFF	; 255
    440c:	fe 01       	movw	r30, r28
    440e:	e3 5a       	subi	r30, 0xA3	; 163
    4410:	ff 4f       	sbci	r31, 0xFF	; 255
    4412:	60 81       	ld	r22, Z
    4414:	71 81       	ldd	r23, Z+1	; 0x01
    4416:	82 81       	ldd	r24, Z+2	; 0x02
    4418:	93 81       	ldd	r25, Z+3	; 0x03
    441a:	2b ea       	ldi	r18, 0xAB	; 171
    441c:	3a ea       	ldi	r19, 0xAA	; 170
    441e:	4a ea       	ldi	r20, 0xAA	; 170
    4420:	50 e4       	ldi	r21, 0x40	; 64
    4422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	f8 01       	movw	r30, r16
    442c:	80 83       	st	Z, r24
    442e:	91 83       	std	Z+1, r25	; 0x01
    4430:	a2 83       	std	Z+2, r26	; 0x02
    4432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4434:	fe 01       	movw	r30, r28
    4436:	e7 5a       	subi	r30, 0xA7	; 167
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	60 81       	ld	r22, Z
    443c:	71 81       	ldd	r23, Z+1	; 0x01
    443e:	82 81       	ldd	r24, Z+2	; 0x02
    4440:	93 81       	ldd	r25, Z+3	; 0x03
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	40 e8       	ldi	r20, 0x80	; 128
    4448:	5f e3       	ldi	r21, 0x3F	; 63
    444a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    444e:	88 23       	and	r24, r24
    4450:	34 f4       	brge	.+12     	; 0x445e <BMP180_ReadCalb+0x324>
		__ticks = 1;
    4452:	fe 01       	movw	r30, r28
    4454:	e8 5a       	subi	r30, 0xA8	; 168
    4456:	ff 4f       	sbci	r31, 0xFF	; 255
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	80 83       	st	Z, r24
    445c:	e0 c0       	rjmp	.+448    	; 0x461e <BMP180_ReadCalb+0x4e4>
	else if (__tmp > 255)
    445e:	fe 01       	movw	r30, r28
    4460:	e7 5a       	subi	r30, 0xA7	; 167
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	60 81       	ld	r22, Z
    4466:	71 81       	ldd	r23, Z+1	; 0x01
    4468:	82 81       	ldd	r24, Z+2	; 0x02
    446a:	93 81       	ldd	r25, Z+3	; 0x03
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	4f e7       	ldi	r20, 0x7F	; 127
    4472:	53 e4       	ldi	r21, 0x43	; 67
    4474:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4478:	18 16       	cp	r1, r24
    447a:	0c f0       	brlt	.+2      	; 0x447e <BMP180_ReadCalb+0x344>
    447c:	c0 c0       	rjmp	.+384    	; 0x45fe <BMP180_ReadCalb+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    447e:	fe 01       	movw	r30, r28
    4480:	e3 5a       	subi	r30, 0xA3	; 163
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	60 81       	ld	r22, Z
    4486:	71 81       	ldd	r23, Z+1	; 0x01
    4488:	82 81       	ldd	r24, Z+2	; 0x02
    448a:	93 81       	ldd	r25, Z+3	; 0x03
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	4a e7       	ldi	r20, 0x7A	; 122
    4492:	54 e4       	ldi	r21, 0x44	; 68
    4494:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	fe 01       	movw	r30, r28
    449e:	ec 5a       	subi	r30, 0xAC	; 172
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 83       	st	Z, r24
    44a4:	91 83       	std	Z+1, r25	; 0x01
    44a6:	a2 83       	std	Z+2, r26	; 0x02
    44a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44aa:	8e 01       	movw	r16, r28
    44ac:	00 5b       	subi	r16, 0xB0	; 176
    44ae:	1f 4f       	sbci	r17, 0xFF	; 255
    44b0:	fe 01       	movw	r30, r28
    44b2:	ec 5a       	subi	r30, 0xAC	; 172
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	60 81       	ld	r22, Z
    44b8:	71 81       	ldd	r23, Z+1	; 0x01
    44ba:	82 81       	ldd	r24, Z+2	; 0x02
    44bc:	93 81       	ldd	r25, Z+3	; 0x03
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	4a e7       	ldi	r20, 0x7A	; 122
    44c4:	55 e4       	ldi	r21, 0x45	; 69
    44c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	f8 01       	movw	r30, r16
    44d0:	80 83       	st	Z, r24
    44d2:	91 83       	std	Z+1, r25	; 0x01
    44d4:	a2 83       	std	Z+2, r26	; 0x02
    44d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44d8:	fe 01       	movw	r30, r28
    44da:	e0 5b       	subi	r30, 0xB0	; 176
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	60 81       	ld	r22, Z
    44e0:	71 81       	ldd	r23, Z+1	; 0x01
    44e2:	82 81       	ldd	r24, Z+2	; 0x02
    44e4:	93 81       	ldd	r25, Z+3	; 0x03
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e8       	ldi	r20, 0x80	; 128
    44ec:	5f e3       	ldi	r21, 0x3F	; 63
    44ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f2:	88 23       	and	r24, r24
    44f4:	44 f4       	brge	.+16     	; 0x4506 <BMP180_ReadCalb+0x3cc>
		__ticks = 1;
    44f6:	fe 01       	movw	r30, r28
    44f8:	e2 5b       	subi	r30, 0xB2	; 178
    44fa:	ff 4f       	sbci	r31, 0xFF	; 255
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	91 83       	std	Z+1, r25	; 0x01
    4502:	80 83       	st	Z, r24
    4504:	64 c0       	rjmp	.+200    	; 0x45ce <BMP180_ReadCalb+0x494>
	else if (__tmp > 65535)
    4506:	fe 01       	movw	r30, r28
    4508:	e0 5b       	subi	r30, 0xB0	; 176
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	60 81       	ld	r22, Z
    450e:	71 81       	ldd	r23, Z+1	; 0x01
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	93 81       	ldd	r25, Z+3	; 0x03
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	3f ef       	ldi	r19, 0xFF	; 255
    4518:	4f e7       	ldi	r20, 0x7F	; 127
    451a:	57 e4       	ldi	r21, 0x47	; 71
    451c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4520:	18 16       	cp	r1, r24
    4522:	0c f0       	brlt	.+2      	; 0x4526 <BMP180_ReadCalb+0x3ec>
    4524:	43 c0       	rjmp	.+134    	; 0x45ac <BMP180_ReadCalb+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4526:	fe 01       	movw	r30, r28
    4528:	ec 5a       	subi	r30, 0xAC	; 172
    452a:	ff 4f       	sbci	r31, 0xFF	; 255
    452c:	60 81       	ld	r22, Z
    452e:	71 81       	ldd	r23, Z+1	; 0x01
    4530:	82 81       	ldd	r24, Z+2	; 0x02
    4532:	93 81       	ldd	r25, Z+3	; 0x03
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	40 e2       	ldi	r20, 0x20	; 32
    453a:	51 e4       	ldi	r21, 0x41	; 65
    453c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4540:	dc 01       	movw	r26, r24
    4542:	cb 01       	movw	r24, r22
    4544:	8e 01       	movw	r16, r28
    4546:	02 5b       	subi	r16, 0xB2	; 178
    4548:	1f 4f       	sbci	r17, 0xFF	; 255
    454a:	bc 01       	movw	r22, r24
    454c:	cd 01       	movw	r24, r26
    454e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4552:	dc 01       	movw	r26, r24
    4554:	cb 01       	movw	r24, r22
    4556:	f8 01       	movw	r30, r16
    4558:	91 83       	std	Z+1, r25	; 0x01
    455a:	80 83       	st	Z, r24
    455c:	1f c0       	rjmp	.+62     	; 0x459c <BMP180_ReadCalb+0x462>
    455e:	fe 01       	movw	r30, r28
    4560:	e4 5b       	subi	r30, 0xB4	; 180
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	80 e9       	ldi	r24, 0x90	; 144
    4566:	91 e0       	ldi	r25, 0x01	; 1
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    456c:	fe 01       	movw	r30, r28
    456e:	e4 5b       	subi	r30, 0xB4	; 180
    4570:	ff 4f       	sbci	r31, 0xFF	; 255
    4572:	80 81       	ld	r24, Z
    4574:	91 81       	ldd	r25, Z+1	; 0x01
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	f1 f7       	brne	.-4      	; 0x4576 <BMP180_ReadCalb+0x43c>
    457a:	fe 01       	movw	r30, r28
    457c:	e4 5b       	subi	r30, 0xB4	; 180
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	91 83       	std	Z+1, r25	; 0x01
    4582:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4584:	de 01       	movw	r26, r28
    4586:	a2 5b       	subi	r26, 0xB2	; 178
    4588:	bf 4f       	sbci	r27, 0xFF	; 255
    458a:	fe 01       	movw	r30, r28
    458c:	e2 5b       	subi	r30, 0xB2	; 178
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	80 81       	ld	r24, Z
    4592:	91 81       	ldd	r25, Z+1	; 0x01
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	11 96       	adiw	r26, 0x01	; 1
    4598:	9c 93       	st	X, r25
    459a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    459c:	fe 01       	movw	r30, r28
    459e:	e2 5b       	subi	r30, 0xB2	; 178
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	80 81       	ld	r24, Z
    45a4:	91 81       	ldd	r25, Z+1	; 0x01
    45a6:	00 97       	sbiw	r24, 0x00	; 0
    45a8:	d1 f6       	brne	.-76     	; 0x455e <BMP180_ReadCalb+0x424>
    45aa:	4b c0       	rjmp	.+150    	; 0x4642 <BMP180_ReadCalb+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ac:	8e 01       	movw	r16, r28
    45ae:	02 5b       	subi	r16, 0xB2	; 178
    45b0:	1f 4f       	sbci	r17, 0xFF	; 255
    45b2:	fe 01       	movw	r30, r28
    45b4:	e0 5b       	subi	r30, 0xB0	; 176
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	60 81       	ld	r22, Z
    45ba:	71 81       	ldd	r23, Z+1	; 0x01
    45bc:	82 81       	ldd	r24, Z+2	; 0x02
    45be:	93 81       	ldd	r25, Z+3	; 0x03
    45c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	f8 01       	movw	r30, r16
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	80 83       	st	Z, r24
    45ce:	de 01       	movw	r26, r28
    45d0:	a6 5b       	subi	r26, 0xB6	; 182
    45d2:	bf 4f       	sbci	r27, 0xFF	; 255
    45d4:	fe 01       	movw	r30, r28
    45d6:	e2 5b       	subi	r30, 0xB2	; 178
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	80 81       	ld	r24, Z
    45dc:	91 81       	ldd	r25, Z+1	; 0x01
    45de:	11 96       	adiw	r26, 0x01	; 1
    45e0:	9c 93       	st	X, r25
    45e2:	8e 93       	st	-X, r24
    45e4:	fe 01       	movw	r30, r28
    45e6:	e6 5b       	subi	r30, 0xB6	; 182
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	80 81       	ld	r24, Z
    45ec:	91 81       	ldd	r25, Z+1	; 0x01
    45ee:	01 97       	sbiw	r24, 0x01	; 1
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <BMP180_ReadCalb+0x4b4>
    45f2:	fe 01       	movw	r30, r28
    45f4:	e6 5b       	subi	r30, 0xB6	; 182
    45f6:	ff 4f       	sbci	r31, 0xFF	; 255
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	80 83       	st	Z, r24
    45fc:	22 c0       	rjmp	.+68     	; 0x4642 <BMP180_ReadCalb+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    45fe:	8e 01       	movw	r16, r28
    4600:	08 5a       	subi	r16, 0xA8	; 168
    4602:	1f 4f       	sbci	r17, 0xFF	; 255
    4604:	fe 01       	movw	r30, r28
    4606:	e7 5a       	subi	r30, 0xA7	; 167
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	60 81       	ld	r22, Z
    460c:	71 81       	ldd	r23, Z+1	; 0x01
    460e:	82 81       	ldd	r24, Z+2	; 0x02
    4610:	93 81       	ldd	r25, Z+3	; 0x03
    4612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	f8 01       	movw	r30, r16
    461c:	80 83       	st	Z, r24
    461e:	de 01       	movw	r26, r28
    4620:	a7 5b       	subi	r26, 0xB7	; 183
    4622:	bf 4f       	sbci	r27, 0xFF	; 255
    4624:	fe 01       	movw	r30, r28
    4626:	e8 5a       	subi	r30, 0xA8	; 168
    4628:	ff 4f       	sbci	r31, 0xFF	; 255
    462a:	80 81       	ld	r24, Z
    462c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    462e:	fe 01       	movw	r30, r28
    4630:	e7 5b       	subi	r30, 0xB7	; 183
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	80 81       	ld	r24, Z
    4636:	8a 95       	dec	r24
    4638:	f1 f7       	brne	.-4      	; 0x4636 <BMP180_ReadCalb+0x4fc>
    463a:	fe 01       	movw	r30, r28
    463c:	e7 5b       	subi	r30, 0xB7	; 183
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_Repeated_start(BMP180_ADDRESS_R);	// To read
    4642:	8f ee       	ldi	r24, 0xEF	; 239
    4644:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
    4648:	fe 01       	movw	r30, r28
    464a:	eb 5b       	subi	r30, 0xBB	; 187
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	a0 e2       	ldi	r26, 0x20	; 32
    4654:	b1 e4       	ldi	r27, 0x41	; 65
    4656:	80 83       	st	Z, r24
    4658:	91 83       	std	Z+1, r25	; 0x01
    465a:	a2 83       	std	Z+2, r26	; 0x02
    465c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    465e:	8e 01       	movw	r16, r28
    4660:	0f 5b       	subi	r16, 0xBF	; 191
    4662:	1f 4f       	sbci	r17, 0xFF	; 255
    4664:	fe 01       	movw	r30, r28
    4666:	eb 5b       	subi	r30, 0xBB	; 187
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	60 81       	ld	r22, Z
    466c:	71 81       	ldd	r23, Z+1	; 0x01
    466e:	82 81       	ldd	r24, Z+2	; 0x02
    4670:	93 81       	ldd	r25, Z+3	; 0x03
    4672:	2b ea       	ldi	r18, 0xAB	; 171
    4674:	3a ea       	ldi	r19, 0xAA	; 170
    4676:	4a ea       	ldi	r20, 0xAA	; 170
    4678:	50 e4       	ldi	r21, 0x40	; 64
    467a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	f8 01       	movw	r30, r16
    4684:	80 83       	st	Z, r24
    4686:	91 83       	std	Z+1, r25	; 0x01
    4688:	a2 83       	std	Z+2, r26	; 0x02
    468a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    468c:	fe 01       	movw	r30, r28
    468e:	ef 5b       	subi	r30, 0xBF	; 191
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	60 81       	ld	r22, Z
    4694:	71 81       	ldd	r23, Z+1	; 0x01
    4696:	82 81       	ldd	r24, Z+2	; 0x02
    4698:	93 81       	ldd	r25, Z+3	; 0x03
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e8       	ldi	r20, 0x80	; 128
    46a0:	5f e3       	ldi	r21, 0x3F	; 63
    46a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46a6:	88 23       	and	r24, r24
    46a8:	34 f4       	brge	.+12     	; 0x46b6 <BMP180_ReadCalb+0x57c>
		__ticks = 1;
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	fe 01       	movw	r30, r28
    46ae:	e0 5c       	subi	r30, 0xC0	; 192
    46b0:	ff 4f       	sbci	r31, 0xFF	; 255
    46b2:	80 83       	st	Z, r24
    46b4:	9d c0       	rjmp	.+314    	; 0x47f0 <BMP180_ReadCalb+0x6b6>
	else if (__tmp > 255)
    46b6:	fe 01       	movw	r30, r28
    46b8:	ef 5b       	subi	r30, 0xBF	; 191
    46ba:	ff 4f       	sbci	r31, 0xFF	; 255
    46bc:	60 81       	ld	r22, Z
    46be:	71 81       	ldd	r23, Z+1	; 0x01
    46c0:	82 81       	ldd	r24, Z+2	; 0x02
    46c2:	93 81       	ldd	r25, Z+3	; 0x03
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	4f e7       	ldi	r20, 0x7F	; 127
    46ca:	53 e4       	ldi	r21, 0x43	; 67
    46cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46d0:	18 16       	cp	r1, r24
    46d2:	0c f0       	brlt	.+2      	; 0x46d6 <BMP180_ReadCalb+0x59c>
    46d4:	7e c0       	rjmp	.+252    	; 0x47d2 <BMP180_ReadCalb+0x698>
	{
		_delay_ms(__us / 1000.0);
    46d6:	fe 01       	movw	r30, r28
    46d8:	eb 5b       	subi	r30, 0xBB	; 187
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	60 81       	ld	r22, Z
    46de:	71 81       	ldd	r23, Z+1	; 0x01
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	93 81       	ldd	r25, Z+3	; 0x03
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	4a e7       	ldi	r20, 0x7A	; 122
    46ea:	54 e4       	ldi	r21, 0x44	; 68
    46ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	8c af       	std	Y+60, r24	; 0x3c
    46f6:	9d af       	std	Y+61, r25	; 0x3d
    46f8:	ae af       	std	Y+62, r26	; 0x3e
    46fa:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fc:	6c ad       	ldd	r22, Y+60	; 0x3c
    46fe:	7d ad       	ldd	r23, Y+61	; 0x3d
    4700:	8e ad       	ldd	r24, Y+62	; 0x3e
    4702:	9f ad       	ldd	r25, Y+63	; 0x3f
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	4a e7       	ldi	r20, 0x7A	; 122
    470a:	55 e4       	ldi	r21, 0x45	; 69
    470c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	88 af       	std	Y+56, r24	; 0x38
    4716:	99 af       	std	Y+57, r25	; 0x39
    4718:	aa af       	std	Y+58, r26	; 0x3a
    471a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    471c:	68 ad       	ldd	r22, Y+56	; 0x38
    471e:	79 ad       	ldd	r23, Y+57	; 0x39
    4720:	8a ad       	ldd	r24, Y+58	; 0x3a
    4722:	9b ad       	ldd	r25, Y+59	; 0x3b
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e8       	ldi	r20, 0x80	; 128
    472a:	5f e3       	ldi	r21, 0x3F	; 63
    472c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4730:	88 23       	and	r24, r24
    4732:	2c f4       	brge	.+10     	; 0x473e <BMP180_ReadCalb+0x604>
		__ticks = 1;
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	9f ab       	std	Y+55, r25	; 0x37
    473a:	8e ab       	std	Y+54, r24	; 0x36
    473c:	3f c0       	rjmp	.+126    	; 0x47bc <BMP180_ReadCalb+0x682>
	else if (__tmp > 65535)
    473e:	68 ad       	ldd	r22, Y+56	; 0x38
    4740:	79 ad       	ldd	r23, Y+57	; 0x39
    4742:	8a ad       	ldd	r24, Y+58	; 0x3a
    4744:	9b ad       	ldd	r25, Y+59	; 0x3b
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	3f ef       	ldi	r19, 0xFF	; 255
    474a:	4f e7       	ldi	r20, 0x7F	; 127
    474c:	57 e4       	ldi	r21, 0x47	; 71
    474e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4752:	18 16       	cp	r1, r24
    4754:	4c f5       	brge	.+82     	; 0x47a8 <BMP180_ReadCalb+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4756:	6c ad       	ldd	r22, Y+60	; 0x3c
    4758:	7d ad       	ldd	r23, Y+61	; 0x3d
    475a:	8e ad       	ldd	r24, Y+62	; 0x3e
    475c:	9f ad       	ldd	r25, Y+63	; 0x3f
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e2       	ldi	r20, 0x20	; 32
    4764:	51 e4       	ldi	r21, 0x41	; 65
    4766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	9f ab       	std	Y+55, r25	; 0x37
    477c:	8e ab       	std	Y+54, r24	; 0x36
    477e:	0f c0       	rjmp	.+30     	; 0x479e <BMP180_ReadCalb+0x664>
    4780:	80 e9       	ldi	r24, 0x90	; 144
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	9d ab       	std	Y+53, r25	; 0x35
    4786:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4788:	8c a9       	ldd	r24, Y+52	; 0x34
    478a:	9d a9       	ldd	r25, Y+53	; 0x35
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <BMP180_ReadCalb+0x652>
    4790:	9d ab       	std	Y+53, r25	; 0x35
    4792:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4794:	8e a9       	ldd	r24, Y+54	; 0x36
    4796:	9f a9       	ldd	r25, Y+55	; 0x37
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	9f ab       	std	Y+55, r25	; 0x37
    479c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479e:	8e a9       	ldd	r24, Y+54	; 0x36
    47a0:	9f a9       	ldd	r25, Y+55	; 0x37
    47a2:	00 97       	sbiw	r24, 0x00	; 0
    47a4:	69 f7       	brne	.-38     	; 0x4780 <BMP180_ReadCalb+0x646>
    47a6:	2d c0       	rjmp	.+90     	; 0x4802 <BMP180_ReadCalb+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a8:	68 ad       	ldd	r22, Y+56	; 0x38
    47aa:	79 ad       	ldd	r23, Y+57	; 0x39
    47ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    47ae:	9b ad       	ldd	r25, Y+59	; 0x3b
    47b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	9f ab       	std	Y+55, r25	; 0x37
    47ba:	8e ab       	std	Y+54, r24	; 0x36
    47bc:	8e a9       	ldd	r24, Y+54	; 0x36
    47be:	9f a9       	ldd	r25, Y+55	; 0x37
    47c0:	9b ab       	std	Y+51, r25	; 0x33
    47c2:	8a ab       	std	Y+50, r24	; 0x32
    47c4:	8a a9       	ldd	r24, Y+50	; 0x32
    47c6:	9b a9       	ldd	r25, Y+51	; 0x33
    47c8:	01 97       	sbiw	r24, 0x01	; 1
    47ca:	f1 f7       	brne	.-4      	; 0x47c8 <BMP180_ReadCalb+0x68e>
    47cc:	9b ab       	std	Y+51, r25	; 0x33
    47ce:	8a ab       	std	Y+50, r24	; 0x32
    47d0:	18 c0       	rjmp	.+48     	; 0x4802 <BMP180_ReadCalb+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    47d2:	fe 01       	movw	r30, r28
    47d4:	ef 5b       	subi	r30, 0xBF	; 191
    47d6:	ff 4f       	sbci	r31, 0xFF	; 255
    47d8:	60 81       	ld	r22, Z
    47da:	71 81       	ldd	r23, Z+1	; 0x01
    47dc:	82 81       	ldd	r24, Z+2	; 0x02
    47de:	93 81       	ldd	r25, Z+3	; 0x03
    47e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	fe 01       	movw	r30, r28
    47ea:	e0 5c       	subi	r30, 0xC0	; 192
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	80 83       	st	Z, r24
    47f0:	fe 01       	movw	r30, r28
    47f2:	e0 5c       	subi	r30, 0xC0	; 192
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	80 81       	ld	r24, Z
    47f8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    47fa:	89 a9       	ldd	r24, Y+49	; 0x31
    47fc:	8a 95       	dec	r24
    47fe:	f1 f7       	brne	.-4      	; 0x47fc <BMP180_ReadCalb+0x6c2>
    4800:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		Callib_Data[i] = TWI_ReadByteWithNACK();
    4802:	fe 01       	movw	r30, r28
    4804:	e7 58       	subi	r30, 0x87	; 135
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	00 81       	ld	r16, Z
    480a:	11 81       	ldd	r17, Z+1	; 0x01
    480c:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4810:	28 2f       	mov	r18, r24
    4812:	ce 01       	movw	r24, r28
    4814:	83 58       	subi	r24, 0x83	; 131
    4816:	9f 4f       	sbci	r25, 0xFF	; 255
    4818:	fc 01       	movw	r30, r24
    481a:	e0 0f       	add	r30, r16
    481c:	f1 1f       	adc	r31, r17
    481e:	20 83       	st	Z, r18
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	a0 e2       	ldi	r26, 0x20	; 32
    4826:	b1 e4       	ldi	r27, 0x41	; 65
    4828:	8d a7       	std	Y+45, r24	; 0x2d
    482a:	9e a7       	std	Y+46, r25	; 0x2e
    482c:	af a7       	std	Y+47, r26	; 0x2f
    482e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4830:	6d a5       	ldd	r22, Y+45	; 0x2d
    4832:	7e a5       	ldd	r23, Y+46	; 0x2e
    4834:	8f a5       	ldd	r24, Y+47	; 0x2f
    4836:	98 a9       	ldd	r25, Y+48	; 0x30
    4838:	2b ea       	ldi	r18, 0xAB	; 171
    483a:	3a ea       	ldi	r19, 0xAA	; 170
    483c:	4a ea       	ldi	r20, 0xAA	; 170
    483e:	50 e4       	ldi	r21, 0x40	; 64
    4840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	89 a7       	std	Y+41, r24	; 0x29
    484a:	9a a7       	std	Y+42, r25	; 0x2a
    484c:	ab a7       	std	Y+43, r26	; 0x2b
    484e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4850:	69 a5       	ldd	r22, Y+41	; 0x29
    4852:	7a a5       	ldd	r23, Y+42	; 0x2a
    4854:	8b a5       	ldd	r24, Y+43	; 0x2b
    4856:	9c a5       	ldd	r25, Y+44	; 0x2c
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e8       	ldi	r20, 0x80	; 128
    485e:	5f e3       	ldi	r21, 0x3F	; 63
    4860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4864:	88 23       	and	r24, r24
    4866:	1c f4       	brge	.+6      	; 0x486e <BMP180_ReadCalb+0x734>
		__ticks = 1;
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	88 a7       	std	Y+40, r24	; 0x28
    486c:	91 c0       	rjmp	.+290    	; 0x4990 <BMP180_ReadCalb+0x856>
	else if (__tmp > 255)
    486e:	69 a5       	ldd	r22, Y+41	; 0x29
    4870:	7a a5       	ldd	r23, Y+42	; 0x2a
    4872:	8b a5       	ldd	r24, Y+43	; 0x2b
    4874:	9c a5       	ldd	r25, Y+44	; 0x2c
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	4f e7       	ldi	r20, 0x7F	; 127
    487c:	53 e4       	ldi	r21, 0x43	; 67
    487e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4882:	18 16       	cp	r1, r24
    4884:	0c f0       	brlt	.+2      	; 0x4888 <BMP180_ReadCalb+0x74e>
    4886:	7b c0       	rjmp	.+246    	; 0x497e <BMP180_ReadCalb+0x844>
	{
		_delay_ms(__us / 1000.0);
    4888:	6d a5       	ldd	r22, Y+45	; 0x2d
    488a:	7e a5       	ldd	r23, Y+46	; 0x2e
    488c:	8f a5       	ldd	r24, Y+47	; 0x2f
    488e:	98 a9       	ldd	r25, Y+48	; 0x30
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	30 e0       	ldi	r19, 0x00	; 0
    4894:	4a e7       	ldi	r20, 0x7A	; 122
    4896:	54 e4       	ldi	r21, 0x44	; 68
    4898:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    489c:	dc 01       	movw	r26, r24
    489e:	cb 01       	movw	r24, r22
    48a0:	8c a3       	std	Y+36, r24	; 0x24
    48a2:	9d a3       	std	Y+37, r25	; 0x25
    48a4:	ae a3       	std	Y+38, r26	; 0x26
    48a6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a8:	6c a1       	ldd	r22, Y+36	; 0x24
    48aa:	7d a1       	ldd	r23, Y+37	; 0x25
    48ac:	8e a1       	ldd	r24, Y+38	; 0x26
    48ae:	9f a1       	ldd	r25, Y+39	; 0x27
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	4a e7       	ldi	r20, 0x7A	; 122
    48b6:	55 e4       	ldi	r21, 0x45	; 69
    48b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48bc:	dc 01       	movw	r26, r24
    48be:	cb 01       	movw	r24, r22
    48c0:	88 a3       	std	Y+32, r24	; 0x20
    48c2:	99 a3       	std	Y+33, r25	; 0x21
    48c4:	aa a3       	std	Y+34, r26	; 0x22
    48c6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    48c8:	68 a1       	ldd	r22, Y+32	; 0x20
    48ca:	79 a1       	ldd	r23, Y+33	; 0x21
    48cc:	8a a1       	ldd	r24, Y+34	; 0x22
    48ce:	9b a1       	ldd	r25, Y+35	; 0x23
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	40 e8       	ldi	r20, 0x80	; 128
    48d6:	5f e3       	ldi	r21, 0x3F	; 63
    48d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48dc:	88 23       	and	r24, r24
    48de:	2c f4       	brge	.+10     	; 0x48ea <BMP180_ReadCalb+0x7b0>
		__ticks = 1;
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	9f 8f       	std	Y+31, r25	; 0x1f
    48e6:	8e 8f       	std	Y+30, r24	; 0x1e
    48e8:	3f c0       	rjmp	.+126    	; 0x4968 <BMP180_ReadCalb+0x82e>
	else if (__tmp > 65535)
    48ea:	68 a1       	ldd	r22, Y+32	; 0x20
    48ec:	79 a1       	ldd	r23, Y+33	; 0x21
    48ee:	8a a1       	ldd	r24, Y+34	; 0x22
    48f0:	9b a1       	ldd	r25, Y+35	; 0x23
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	3f ef       	ldi	r19, 0xFF	; 255
    48f6:	4f e7       	ldi	r20, 0x7F	; 127
    48f8:	57 e4       	ldi	r21, 0x47	; 71
    48fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48fe:	18 16       	cp	r1, r24
    4900:	4c f5       	brge	.+82     	; 0x4954 <BMP180_ReadCalb+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4902:	6c a1       	ldd	r22, Y+36	; 0x24
    4904:	7d a1       	ldd	r23, Y+37	; 0x25
    4906:	8e a1       	ldd	r24, Y+38	; 0x26
    4908:	9f a1       	ldd	r25, Y+39	; 0x27
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	40 e2       	ldi	r20, 0x20	; 32
    4910:	51 e4       	ldi	r21, 0x41	; 65
    4912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	bc 01       	movw	r22, r24
    491c:	cd 01       	movw	r24, r26
    491e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	9f 8f       	std	Y+31, r25	; 0x1f
    4928:	8e 8f       	std	Y+30, r24	; 0x1e
    492a:	0f c0       	rjmp	.+30     	; 0x494a <BMP180_ReadCalb+0x810>
    492c:	80 e9       	ldi	r24, 0x90	; 144
    492e:	91 e0       	ldi	r25, 0x01	; 1
    4930:	9d 8f       	std	Y+29, r25	; 0x1d
    4932:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4934:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4936:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4938:	01 97       	sbiw	r24, 0x01	; 1
    493a:	f1 f7       	brne	.-4      	; 0x4938 <BMP180_ReadCalb+0x7fe>
    493c:	9d 8f       	std	Y+29, r25	; 0x1d
    493e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4940:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4942:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4944:	01 97       	sbiw	r24, 0x01	; 1
    4946:	9f 8f       	std	Y+31, r25	; 0x1f
    4948:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    494a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    494c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    494e:	00 97       	sbiw	r24, 0x00	; 0
    4950:	69 f7       	brne	.-38     	; 0x492c <BMP180_ReadCalb+0x7f2>
    4952:	24 c0       	rjmp	.+72     	; 0x499c <BMP180_ReadCalb+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4954:	68 a1       	ldd	r22, Y+32	; 0x20
    4956:	79 a1       	ldd	r23, Y+33	; 0x21
    4958:	8a a1       	ldd	r24, Y+34	; 0x22
    495a:	9b a1       	ldd	r25, Y+35	; 0x23
    495c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	9f 8f       	std	Y+31, r25	; 0x1f
    4966:	8e 8f       	std	Y+30, r24	; 0x1e
    4968:	8e 8d       	ldd	r24, Y+30	; 0x1e
    496a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    496c:	9b 8f       	std	Y+27, r25	; 0x1b
    496e:	8a 8f       	std	Y+26, r24	; 0x1a
    4970:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4972:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4974:	01 97       	sbiw	r24, 0x01	; 1
    4976:	f1 f7       	brne	.-4      	; 0x4974 <BMP180_ReadCalb+0x83a>
    4978:	9b 8f       	std	Y+27, r25	; 0x1b
    497a:	8a 8f       	std	Y+26, r24	; 0x1a
    497c:	0f c0       	rjmp	.+30     	; 0x499c <BMP180_ReadCalb+0x862>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    497e:	69 a5       	ldd	r22, Y+41	; 0x29
    4980:	7a a5       	ldd	r23, Y+42	; 0x2a
    4982:	8b a5       	ldd	r24, Y+43	; 0x2b
    4984:	9c a5       	ldd	r25, Y+44	; 0x2c
    4986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    498a:	dc 01       	movw	r26, r24
    498c:	cb 01       	movw	r24, r22
    498e:	88 a7       	std	Y+40, r24	; 0x28
    4990:	88 a5       	ldd	r24, Y+40	; 0x28
    4992:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4994:	89 8d       	ldd	r24, Y+25	; 0x19
    4996:	8a 95       	dec	r24
    4998:	f1 f7       	brne	.-4      	; 0x4996 <BMP180_ReadCalb+0x85c>
    499a:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		TWI_Stop();
    499c:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	a0 e2       	ldi	r26, 0x20	; 32
    49a6:	b1 e4       	ldi	r27, 0x41	; 65
    49a8:	8d 8b       	std	Y+21, r24	; 0x15
    49aa:	9e 8b       	std	Y+22, r25	; 0x16
    49ac:	af 8b       	std	Y+23, r26	; 0x17
    49ae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    49b0:	6d 89       	ldd	r22, Y+21	; 0x15
    49b2:	7e 89       	ldd	r23, Y+22	; 0x16
    49b4:	8f 89       	ldd	r24, Y+23	; 0x17
    49b6:	98 8d       	ldd	r25, Y+24	; 0x18
    49b8:	2b ea       	ldi	r18, 0xAB	; 171
    49ba:	3a ea       	ldi	r19, 0xAA	; 170
    49bc:	4a ea       	ldi	r20, 0xAA	; 170
    49be:	50 e4       	ldi	r21, 0x40	; 64
    49c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	89 8b       	std	Y+17, r24	; 0x11
    49ca:	9a 8b       	std	Y+18, r25	; 0x12
    49cc:	ab 8b       	std	Y+19, r26	; 0x13
    49ce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    49d0:	69 89       	ldd	r22, Y+17	; 0x11
    49d2:	7a 89       	ldd	r23, Y+18	; 0x12
    49d4:	8b 89       	ldd	r24, Y+19	; 0x13
    49d6:	9c 89       	ldd	r25, Y+20	; 0x14
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	40 e8       	ldi	r20, 0x80	; 128
    49de:	5f e3       	ldi	r21, 0x3F	; 63
    49e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49e4:	88 23       	and	r24, r24
    49e6:	1c f4       	brge	.+6      	; 0x49ee <BMP180_ReadCalb+0x8b4>
		__ticks = 1;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	88 8b       	std	Y+16, r24	; 0x10
    49ec:	91 c0       	rjmp	.+290    	; 0x4b10 <BMP180_ReadCalb+0x9d6>
	else if (__tmp > 255)
    49ee:	69 89       	ldd	r22, Y+17	; 0x11
    49f0:	7a 89       	ldd	r23, Y+18	; 0x12
    49f2:	8b 89       	ldd	r24, Y+19	; 0x13
    49f4:	9c 89       	ldd	r25, Y+20	; 0x14
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	4f e7       	ldi	r20, 0x7F	; 127
    49fc:	53 e4       	ldi	r21, 0x43	; 67
    49fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a02:	18 16       	cp	r1, r24
    4a04:	0c f0       	brlt	.+2      	; 0x4a08 <BMP180_ReadCalb+0x8ce>
    4a06:	7b c0       	rjmp	.+246    	; 0x4afe <BMP180_ReadCalb+0x9c4>
	{
		_delay_ms(__us / 1000.0);
    4a08:	6d 89       	ldd	r22, Y+21	; 0x15
    4a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    4a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    4a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	4a e7       	ldi	r20, 0x7A	; 122
    4a16:	54 e4       	ldi	r21, 0x44	; 68
    4a18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	8c 87       	std	Y+12, r24	; 0x0c
    4a22:	9d 87       	std	Y+13, r25	; 0x0d
    4a24:	ae 87       	std	Y+14, r26	; 0x0e
    4a26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a28:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	4a e7       	ldi	r20, 0x7A	; 122
    4a36:	55 e4       	ldi	r21, 0x45	; 69
    4a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	88 87       	std	Y+8, r24	; 0x08
    4a42:	99 87       	std	Y+9, r25	; 0x09
    4a44:	aa 87       	std	Y+10, r26	; 0x0a
    4a46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4a48:	68 85       	ldd	r22, Y+8	; 0x08
    4a4a:	79 85       	ldd	r23, Y+9	; 0x09
    4a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	5f e3       	ldi	r21, 0x3F	; 63
    4a58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a5c:	88 23       	and	r24, r24
    4a5e:	2c f4       	brge	.+10     	; 0x4a6a <BMP180_ReadCalb+0x930>
		__ticks = 1;
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	9f 83       	std	Y+7, r25	; 0x07
    4a66:	8e 83       	std	Y+6, r24	; 0x06
    4a68:	3f c0       	rjmp	.+126    	; 0x4ae8 <BMP180_ReadCalb+0x9ae>
	else if (__tmp > 65535)
    4a6a:	68 85       	ldd	r22, Y+8	; 0x08
    4a6c:	79 85       	ldd	r23, Y+9	; 0x09
    4a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a70:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	3f ef       	ldi	r19, 0xFF	; 255
    4a76:	4f e7       	ldi	r20, 0x7F	; 127
    4a78:	57 e4       	ldi	r21, 0x47	; 71
    4a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a7e:	18 16       	cp	r1, r24
    4a80:	4c f5       	brge	.+82     	; 0x4ad4 <BMP180_ReadCalb+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a82:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a84:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a86:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a88:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a8a:	20 e0       	ldi	r18, 0x00	; 0
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	40 e2       	ldi	r20, 0x20	; 32
    4a90:	51 e4       	ldi	r21, 0x41	; 65
    4a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a96:	dc 01       	movw	r26, r24
    4a98:	cb 01       	movw	r24, r22
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9f 83       	std	Y+7, r25	; 0x07
    4aa8:	8e 83       	std	Y+6, r24	; 0x06
    4aaa:	0f c0       	rjmp	.+30     	; 0x4aca <BMP180_ReadCalb+0x990>
    4aac:	80 e9       	ldi	r24, 0x90	; 144
    4aae:	91 e0       	ldi	r25, 0x01	; 1
    4ab0:	9d 83       	std	Y+5, r25	; 0x05
    4ab2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <BMP180_ReadCalb+0x97e>
    4abc:	9d 83       	std	Y+5, r25	; 0x05
    4abe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    4ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    4ac4:	01 97       	sbiw	r24, 0x01	; 1
    4ac6:	9f 83       	std	Y+7, r25	; 0x07
    4ac8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aca:	8e 81       	ldd	r24, Y+6	; 0x06
    4acc:	9f 81       	ldd	r25, Y+7	; 0x07
    4ace:	00 97       	sbiw	r24, 0x00	; 0
    4ad0:	69 f7       	brne	.-38     	; 0x4aac <BMP180_ReadCalb+0x972>
    4ad2:	24 c0       	rjmp	.+72     	; 0x4b1c <BMP180_ReadCalb+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad4:	68 85       	ldd	r22, Y+8	; 0x08
    4ad6:	79 85       	ldd	r23, Y+9	; 0x09
    4ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ada:	9b 85       	ldd	r25, Y+11	; 0x0b
    4adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	9f 83       	std	Y+7, r25	; 0x07
    4ae6:	8e 83       	std	Y+6, r24	; 0x06
    4ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    4aea:	9f 81       	ldd	r25, Y+7	; 0x07
    4aec:	9b 83       	std	Y+3, r25	; 0x03
    4aee:	8a 83       	std	Y+2, r24	; 0x02
    4af0:	8a 81       	ldd	r24, Y+2	; 0x02
    4af2:	9b 81       	ldd	r25, Y+3	; 0x03
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <BMP180_ReadCalb+0x9ba>
    4af8:	9b 83       	std	Y+3, r25	; 0x03
    4afa:	8a 83       	std	Y+2, r24	; 0x02
    4afc:	0f c0       	rjmp	.+30     	; 0x4b1c <BMP180_ReadCalb+0x9e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4afe:	69 89       	ldd	r22, Y+17	; 0x11
    4b00:	7a 89       	ldd	r23, Y+18	; 0x12
    4b02:	8b 89       	ldd	r24, Y+19	; 0x13
    4b04:	9c 89       	ldd	r25, Y+20	; 0x14
    4b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	88 8b       	std	Y+16, r24	; 0x10
    4b10:	88 89       	ldd	r24, Y+16	; 0x10
    4b12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4b14:	89 81       	ldd	r24, Y+1	; 0x01
    4b16:	8a 95       	dec	r24
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <BMP180_ReadCalb+0x9dc>
    4b1a:	89 83       	std	Y+1, r24	; 0x01
void BMP180_ReadCalb(void) {

	uint8_t Callib_Data[22] = { 0 };
	uint16_t Callib_Start = 0xAA;

	for (int i = 0; i < 22; i++) {
    4b1c:	de 01       	movw	r26, r28
    4b1e:	a7 58       	subi	r26, 0x87	; 135
    4b20:	bf 4f       	sbci	r27, 0xFF	; 255
    4b22:	fe 01       	movw	r30, r28
    4b24:	e7 58       	subi	r30, 0x87	; 135
    4b26:	ff 4f       	sbci	r31, 0xFF	; 255
    4b28:	80 81       	ld	r24, Z
    4b2a:	91 81       	ldd	r25, Z+1	; 0x01
    4b2c:	01 96       	adiw	r24, 0x01	; 1
    4b2e:	11 96       	adiw	r26, 0x01	; 1
    4b30:	9c 93       	st	X, r25
    4b32:	8e 93       	st	-X, r24
    4b34:	fe 01       	movw	r30, r28
    4b36:	e7 58       	subi	r30, 0x87	; 135
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	80 81       	ld	r24, Z
    4b3c:	91 81       	ldd	r25, Z+1	; 0x01
    4b3e:	86 31       	cpi	r24, 0x16	; 22
    4b40:	91 05       	cpc	r25, r1
    4b42:	0c f4       	brge	.+2      	; 0x4b46 <BMP180_ReadCalb+0xa0c>
    4b44:	1e cb       	rjmp	.-2500   	; 0x4182 <BMP180_ReadCalb+0x48>
		_delay_us(10);
		TWI_Stop();
		_delay_us(10);
	}

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
    4b46:	fe 01       	movw	r30, r28
    4b48:	e3 58       	subi	r30, 0x83	; 131
    4b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4c:	80 81       	ld	r24, Z
    4b4e:	88 2f       	mov	r24, r24
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	38 2f       	mov	r19, r24
    4b54:	22 27       	eor	r18, r18
    4b56:	fe 01       	movw	r30, r28
    4b58:	e3 58       	subi	r30, 0x83	; 131
    4b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5c:	81 81       	ldd	r24, Z+1	; 0x01
    4b5e:	88 2f       	mov	r24, r24
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	82 2b       	or	r24, r18
    4b64:	93 2b       	or	r25, r19
    4b66:	90 93 f7 01 	sts	0x01F7, r25
    4b6a:	80 93 f6 01 	sts	0x01F6, r24
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
    4b6e:	fe 01       	movw	r30, r28
    4b70:	e3 58       	subi	r30, 0x83	; 131
    4b72:	ff 4f       	sbci	r31, 0xFF	; 255
    4b74:	82 81       	ldd	r24, Z+2	; 0x02
    4b76:	88 2f       	mov	r24, r24
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	38 2f       	mov	r19, r24
    4b7c:	22 27       	eor	r18, r18
    4b7e:	fe 01       	movw	r30, r28
    4b80:	e3 58       	subi	r30, 0x83	; 131
    4b82:	ff 4f       	sbci	r31, 0xFF	; 255
    4b84:	83 81       	ldd	r24, Z+3	; 0x03
    4b86:	88 2f       	mov	r24, r24
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	82 2b       	or	r24, r18
    4b8c:	93 2b       	or	r25, r19
    4b8e:	90 93 f9 01 	sts	0x01F9, r25
    4b92:	80 93 f8 01 	sts	0x01F8, r24
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
    4b96:	fe 01       	movw	r30, r28
    4b98:	e3 58       	subi	r30, 0x83	; 131
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	84 81       	ldd	r24, Z+4	; 0x04
    4b9e:	88 2f       	mov	r24, r24
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	38 2f       	mov	r19, r24
    4ba4:	22 27       	eor	r18, r18
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	e3 58       	subi	r30, 0x83	; 131
    4baa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bac:	85 81       	ldd	r24, Z+5	; 0x05
    4bae:	88 2f       	mov	r24, r24
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	82 2b       	or	r24, r18
    4bb4:	93 2b       	or	r25, r19
    4bb6:	90 93 fb 01 	sts	0x01FB, r25
    4bba:	80 93 fa 01 	sts	0x01FA, r24
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	e3 58       	subi	r30, 0x83	; 131
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	86 81       	ldd	r24, Z+6	; 0x06
    4bc6:	88 2f       	mov	r24, r24
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	38 2f       	mov	r19, r24
    4bcc:	22 27       	eor	r18, r18
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e3 58       	subi	r30, 0x83	; 131
    4bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd4:	87 81       	ldd	r24, Z+7	; 0x07
    4bd6:	88 2f       	mov	r24, r24
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	82 2b       	or	r24, r18
    4bdc:	93 2b       	or	r25, r19
    4bde:	90 93 07 02 	sts	0x0207, r25
    4be2:	80 93 06 02 	sts	0x0206, r24
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
    4be6:	fe 01       	movw	r30, r28
    4be8:	e3 58       	subi	r30, 0x83	; 131
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	80 85       	ldd	r24, Z+8	; 0x08
    4bee:	88 2f       	mov	r24, r24
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	38 2f       	mov	r19, r24
    4bf4:	22 27       	eor	r18, r18
    4bf6:	fe 01       	movw	r30, r28
    4bf8:	e3 58       	subi	r30, 0x83	; 131
    4bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfc:	81 85       	ldd	r24, Z+9	; 0x09
    4bfe:	88 2f       	mov	r24, r24
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	82 2b       	or	r24, r18
    4c04:	93 2b       	or	r25, r19
    4c06:	90 93 09 02 	sts	0x0209, r25
    4c0a:	80 93 08 02 	sts	0x0208, r24
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
    4c0e:	fe 01       	movw	r30, r28
    4c10:	e3 58       	subi	r30, 0x83	; 131
    4c12:	ff 4f       	sbci	r31, 0xFF	; 255
    4c14:	82 85       	ldd	r24, Z+10	; 0x0a
    4c16:	88 2f       	mov	r24, r24
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	38 2f       	mov	r19, r24
    4c1c:	22 27       	eor	r18, r18
    4c1e:	fe 01       	movw	r30, r28
    4c20:	e3 58       	subi	r30, 0x83	; 131
    4c22:	ff 4f       	sbci	r31, 0xFF	; 255
    4c24:	83 85       	ldd	r24, Z+11	; 0x0b
    4c26:	88 2f       	mov	r24, r24
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	82 2b       	or	r24, r18
    4c2c:	93 2b       	or	r25, r19
    4c2e:	90 93 0b 02 	sts	0x020B, r25
    4c32:	80 93 0a 02 	sts	0x020A, r24
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
    4c36:	fe 01       	movw	r30, r28
    4c38:	e3 58       	subi	r30, 0x83	; 131
    4c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3c:	84 85       	ldd	r24, Z+12	; 0x0c
    4c3e:	88 2f       	mov	r24, r24
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	38 2f       	mov	r19, r24
    4c44:	22 27       	eor	r18, r18
    4c46:	fe 01       	movw	r30, r28
    4c48:	e3 58       	subi	r30, 0x83	; 131
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	85 85       	ldd	r24, Z+13	; 0x0d
    4c4e:	88 2f       	mov	r24, r24
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	82 2b       	or	r24, r18
    4c54:	93 2b       	or	r25, r19
    4c56:	90 93 fd 01 	sts	0x01FD, r25
    4c5a:	80 93 fc 01 	sts	0x01FC, r24
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
    4c5e:	fe 01       	movw	r30, r28
    4c60:	e3 58       	subi	r30, 0x83	; 131
    4c62:	ff 4f       	sbci	r31, 0xFF	; 255
    4c64:	86 85       	ldd	r24, Z+14	; 0x0e
    4c66:	88 2f       	mov	r24, r24
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	38 2f       	mov	r19, r24
    4c6c:	22 27       	eor	r18, r18
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e3 58       	subi	r30, 0x83	; 131
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	87 85       	ldd	r24, Z+15	; 0x0f
    4c76:	88 2f       	mov	r24, r24
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	82 2b       	or	r24, r18
    4c7c:	93 2b       	or	r25, r19
    4c7e:	90 93 ff 01 	sts	0x01FF, r25
    4c82:	80 93 fe 01 	sts	0x01FE, r24
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
    4c86:	fe 01       	movw	r30, r28
    4c88:	e3 58       	subi	r30, 0x83	; 131
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	80 89       	ldd	r24, Z+16	; 0x10
    4c8e:	88 2f       	mov	r24, r24
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	38 2f       	mov	r19, r24
    4c94:	22 27       	eor	r18, r18
    4c96:	fe 01       	movw	r30, r28
    4c98:	e3 58       	subi	r30, 0x83	; 131
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	81 89       	ldd	r24, Z+17	; 0x11
    4c9e:	88 2f       	mov	r24, r24
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	82 2b       	or	r24, r18
    4ca4:	93 2b       	or	r25, r19
    4ca6:	90 93 01 02 	sts	0x0201, r25
    4caa:	80 93 00 02 	sts	0x0200, r24
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
    4cae:	fe 01       	movw	r30, r28
    4cb0:	e3 58       	subi	r30, 0x83	; 131
    4cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb4:	82 89       	ldd	r24, Z+18	; 0x12
    4cb6:	88 2f       	mov	r24, r24
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	38 2f       	mov	r19, r24
    4cbc:	22 27       	eor	r18, r18
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	e3 58       	subi	r30, 0x83	; 131
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	83 89       	ldd	r24, Z+19	; 0x13
    4cc6:	88 2f       	mov	r24, r24
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	82 2b       	or	r24, r18
    4ccc:	93 2b       	or	r25, r19
    4cce:	90 93 03 02 	sts	0x0203, r25
    4cd2:	80 93 02 02 	sts	0x0202, r24
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e3 58       	subi	r30, 0x83	; 131
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	84 89       	ldd	r24, Z+20	; 0x14
    4cde:	88 2f       	mov	r24, r24
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	38 2f       	mov	r19, r24
    4ce4:	22 27       	eor	r18, r18
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	e3 58       	subi	r30, 0x83	; 131
    4cea:	ff 4f       	sbci	r31, 0xFF	; 255
    4cec:	85 89       	ldd	r24, Z+21	; 0x15
    4cee:	88 2f       	mov	r24, r24
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	82 2b       	or	r24, r18
    4cf4:	93 2b       	or	r25, r19
    4cf6:	90 93 05 02 	sts	0x0205, r25
    4cfa:	80 93 04 02 	sts	0x0204, r24

}
    4cfe:	ce 56       	subi	r28, 0x6E	; 110
    4d00:	df 4f       	sbci	r29, 0xFF	; 255
    4d02:	0f b6       	in	r0, 0x3f	; 63
    4d04:	f8 94       	cli
    4d06:	de bf       	out	0x3e, r29	; 62
    4d08:	0f be       	out	0x3f, r0	; 63
    4d0a:	cd bf       	out	0x3d, r28	; 61
    4d0c:	cf 91       	pop	r28
    4d0e:	df 91       	pop	r29
    4d10:	1f 91       	pop	r17
    4d12:	0f 91       	pop	r16
    4d14:	08 95       	ret

00004d16 <Get_UP>:

uint32 Get_UP(void) {
    4d16:	df 93       	push	r29
    4d18:	cf 93       	push	r28
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	66 97       	sbiw	r28, 0x16	; 22
    4d20:	0f b6       	in	r0, 0x3f	; 63
    4d22:	f8 94       	cli
    4d24:	de bf       	out	0x3e, r29	; 62
    4d26:	0f be       	out	0x3f, r0	; 63
    4d28:	cd bf       	out	0x3d, r28	; 61
	// calculate the value to write to the BMP180 control register based on the oversampling setting
	uint8 datatowrite = 0x34 + (OSS << 6);
    4d2a:	84 e3       	ldi	r24, 0x34	; 52
    4d2c:	8b 8b       	std	Y+19, r24	; 0x13
	// array to store the raw pressure data
	uint8 Pressure_RAW[3] = { 0 };
    4d2e:	83 e0       	ldi	r24, 0x03	; 3
    4d30:	fe 01       	movw	r30, r28
    4d32:	74 96       	adiw	r30, 0x14	; 20
    4d34:	df 01       	movw	r26, r30
    4d36:	98 2f       	mov	r25, r24
    4d38:	1d 92       	st	X+, r1
    4d3a:	9a 95       	dec	r25
    4d3c:	e9 f7       	brne	.-6      	; 0x4d38 <Get_UP+0x22>

	uint32 data = 0;
    4d3e:	1f 86       	std	Y+15, r1	; 0x0f
    4d40:	18 8a       	std	Y+16, r1	; 0x10
    4d42:	19 8a       	std	Y+17, r1	; 0x11
    4d44:	1a 8a       	std	Y+18, r1	; 0x12

	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    4d46:	8e ee       	ldi	r24, 0xEE	; 238
    4d48:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    4d4c:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// send the address of the BMP180 control register to initiate the pressure measurement
	TWI_WriteByte(0xF4);
    4d50:	84 ef       	ldi	r24, 0xF4	; 244
    4d52:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4d56:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// send the value calculated above to start the measurement with the selected oversampling setting
	TWI_WriteByte(datatowrite);
    4d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d5c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4d60:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    4d64:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	a0 ea       	ldi	r26, 0xA0	; 160
    4d6e:	b0 e4       	ldi	r27, 0x40	; 64
    4d70:	8b 87       	std	Y+11, r24	; 0x0b
    4d72:	9c 87       	std	Y+12, r25	; 0x0c
    4d74:	ad 87       	std	Y+13, r26	; 0x0d
    4d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	4a e7       	ldi	r20, 0x7A	; 122
    4d86:	55 e4       	ldi	r21, 0x45	; 69
    4d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d8c:	dc 01       	movw	r26, r24
    4d8e:	cb 01       	movw	r24, r22
    4d90:	8f 83       	std	Y+7, r24	; 0x07
    4d92:	98 87       	std	Y+8, r25	; 0x08
    4d94:	a9 87       	std	Y+9, r26	; 0x09
    4d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d98:	6f 81       	ldd	r22, Y+7	; 0x07
    4d9a:	78 85       	ldd	r23, Y+8	; 0x08
    4d9c:	89 85       	ldd	r24, Y+9	; 0x09
    4d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	40 e8       	ldi	r20, 0x80	; 128
    4da6:	5f e3       	ldi	r21, 0x3F	; 63
    4da8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dac:	88 23       	and	r24, r24
    4dae:	2c f4       	brge	.+10     	; 0x4dba <Get_UP+0xa4>
		__ticks = 1;
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	9e 83       	std	Y+6, r25	; 0x06
    4db6:	8d 83       	std	Y+5, r24	; 0x05
    4db8:	3f c0       	rjmp	.+126    	; 0x4e38 <Get_UP+0x122>
	else if (__tmp > 65535)
    4dba:	6f 81       	ldd	r22, Y+7	; 0x07
    4dbc:	78 85       	ldd	r23, Y+8	; 0x08
    4dbe:	89 85       	ldd	r24, Y+9	; 0x09
    4dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc2:	20 e0       	ldi	r18, 0x00	; 0
    4dc4:	3f ef       	ldi	r19, 0xFF	; 255
    4dc6:	4f e7       	ldi	r20, 0x7F	; 127
    4dc8:	57 e4       	ldi	r21, 0x47	; 71
    4dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dce:	18 16       	cp	r1, r24
    4dd0:	4c f5       	brge	.+82     	; 0x4e24 <Get_UP+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dda:	20 e0       	ldi	r18, 0x00	; 0
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	40 e2       	ldi	r20, 0x20	; 32
    4de0:	51 e4       	ldi	r21, 0x41	; 65
    4de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	bc 01       	movw	r22, r24
    4dec:	cd 01       	movw	r24, r26
    4dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df2:	dc 01       	movw	r26, r24
    4df4:	cb 01       	movw	r24, r22
    4df6:	9e 83       	std	Y+6, r25	; 0x06
    4df8:	8d 83       	std	Y+5, r24	; 0x05
    4dfa:	0f c0       	rjmp	.+30     	; 0x4e1a <Get_UP+0x104>
    4dfc:	80 e9       	ldi	r24, 0x90	; 144
    4dfe:	91 e0       	ldi	r25, 0x01	; 1
    4e00:	9c 83       	std	Y+4, r25	; 0x04
    4e02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4e04:	8b 81       	ldd	r24, Y+3	; 0x03
    4e06:	9c 81       	ldd	r25, Y+4	; 0x04
    4e08:	01 97       	sbiw	r24, 0x01	; 1
    4e0a:	f1 f7       	brne	.-4      	; 0x4e08 <Get_UP+0xf2>
    4e0c:	9c 83       	std	Y+4, r25	; 0x04
    4e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e10:	8d 81       	ldd	r24, Y+5	; 0x05
    4e12:	9e 81       	ldd	r25, Y+6	; 0x06
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	9e 83       	std	Y+6, r25	; 0x06
    4e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e1e:	00 97       	sbiw	r24, 0x00	; 0
    4e20:	69 f7       	brne	.-38     	; 0x4dfc <Get_UP+0xe6>
    4e22:	14 c0       	rjmp	.+40     	; 0x4e4c <Get_UP+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e24:	6f 81       	ldd	r22, Y+7	; 0x07
    4e26:	78 85       	ldd	r23, Y+8	; 0x08
    4e28:	89 85       	ldd	r24, Y+9	; 0x09
    4e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	9e 83       	std	Y+6, r25	; 0x06
    4e36:	8d 83       	std	Y+5, r24	; 0x05
    4e38:	8d 81       	ldd	r24, Y+5	; 0x05
    4e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e3c:	9a 83       	std	Y+2, r25	; 0x02
    4e3e:	89 83       	std	Y+1, r24	; 0x01
    4e40:	89 81       	ldd	r24, Y+1	; 0x01
    4e42:	9a 81       	ldd	r25, Y+2	; 0x02
    4e44:	01 97       	sbiw	r24, 0x01	; 1
    4e46:	f1 f7       	brne	.-4      	; 0x4e44 <Get_UP+0x12e>
    4e48:	9a 83       	std	Y+2, r25	; 0x02
    4e4a:	89 83       	std	Y+1, r24	; 0x01



	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4e4c:	8e ee       	ldi	r24, 0xEE	; 238
    4e4e:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4e52:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_WriteByte(0xF6);
    4e56:	86 ef       	ldi	r24, 0xF6	; 246
    4e58:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4e5c:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4e60:	8f ee       	ldi	r24, 0xEF	; 239
    4e62:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4e66:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	Pressure_RAW[0] = TWI_ReadByteWithNACK();
    4e6a:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4e6e:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    4e70:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Stop();
    4e74:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    4e78:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4e7c:	8e ee       	ldi	r24, 0xEE	; 238
    4e7e:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4e82:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_WriteByte(0xF7);
    4e86:	87 ef       	ldi	r24, 0xF7	; 247
    4e88:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4e8c:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4e90:	8f ee       	ldi	r24, 0xEF	; 239
    4e92:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4e96:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	Pressure_RAW[1] = TWI_ReadByteWithNACK();
    4e9a:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4e9e:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    4ea0:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Stop();
    4ea4:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    4ea8:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// read the LSB of the raw pressure data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4eac:	8e ee       	ldi	r24, 0xEE	; 238
    4eae:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4eb2:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_WriteByte(0xF8);
    4eb6:	88 ef       	ldi	r24, 0xF8	; 248
    4eb8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4ebc:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4ec0:	8f ee       	ldi	r24, 0xEF	; 239
    4ec2:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4ec6:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	Pressure_RAW[2] = TWI_ReadByteWithNACK();
    4eca:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4ece:	8e 8b       	std	Y+22, r24	; 0x16
	delay();
    4ed0:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Stop();
    4ed4:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	// combine the raw pressure data into a single 24-bit value and shift it right to adjust for the oversampling setting

	data |= ((uint32_t) Pressure_RAW[0] << 16);
    4ed8:	8c 89       	ldd	r24, Y+20	; 0x14
    4eda:	88 2f       	mov	r24, r24
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	a0 e0       	ldi	r26, 0x00	; 0
    4ee0:	b0 e0       	ldi	r27, 0x00	; 0
    4ee2:	ac 01       	movw	r20, r24
    4ee4:	33 27       	eor	r19, r19
    4ee6:	22 27       	eor	r18, r18
    4ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eea:	98 89       	ldd	r25, Y+16	; 0x10
    4eec:	a9 89       	ldd	r26, Y+17	; 0x11
    4eee:	ba 89       	ldd	r27, Y+18	; 0x12
    4ef0:	82 2b       	or	r24, r18
    4ef2:	93 2b       	or	r25, r19
    4ef4:	a4 2b       	or	r26, r20
    4ef6:	b5 2b       	or	r27, r21
    4ef8:	8f 87       	std	Y+15, r24	; 0x0f
    4efa:	98 8b       	std	Y+16, r25	; 0x10
    4efc:	a9 8b       	std	Y+17, r26	; 0x11
    4efe:	ba 8b       	std	Y+18, r27	; 0x12
	data |= ((uint32_t) Pressure_RAW[1] << 8);
    4f00:	8d 89       	ldd	r24, Y+21	; 0x15
    4f02:	88 2f       	mov	r24, r24
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	a0 e0       	ldi	r26, 0x00	; 0
    4f08:	b0 e0       	ldi	r27, 0x00	; 0
    4f0a:	22 27       	eor	r18, r18
    4f0c:	38 2f       	mov	r19, r24
    4f0e:	49 2f       	mov	r20, r25
    4f10:	5a 2f       	mov	r21, r26
    4f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f14:	98 89       	ldd	r25, Y+16	; 0x10
    4f16:	a9 89       	ldd	r26, Y+17	; 0x11
    4f18:	ba 89       	ldd	r27, Y+18	; 0x12
    4f1a:	82 2b       	or	r24, r18
    4f1c:	93 2b       	or	r25, r19
    4f1e:	a4 2b       	or	r26, r20
    4f20:	b5 2b       	or	r27, r21
    4f22:	8f 87       	std	Y+15, r24	; 0x0f
    4f24:	98 8b       	std	Y+16, r25	; 0x10
    4f26:	a9 8b       	std	Y+17, r26	; 0x11
    4f28:	ba 8b       	std	Y+18, r27	; 0x12
	data |= (uint32_t) Pressure_RAW[2];
    4f2a:	8e 89       	ldd	r24, Y+22	; 0x16
    4f2c:	28 2f       	mov	r18, r24
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	40 e0       	ldi	r20, 0x00	; 0
    4f32:	50 e0       	ldi	r21, 0x00	; 0
    4f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f36:	98 89       	ldd	r25, Y+16	; 0x10
    4f38:	a9 89       	ldd	r26, Y+17	; 0x11
    4f3a:	ba 89       	ldd	r27, Y+18	; 0x12
    4f3c:	82 2b       	or	r24, r18
    4f3e:	93 2b       	or	r25, r19
    4f40:	a4 2b       	or	r26, r20
    4f42:	b5 2b       	or	r27, r21
    4f44:	8f 87       	std	Y+15, r24	; 0x0f
    4f46:	98 8b       	std	Y+16, r25	; 0x10
    4f48:	a9 8b       	std	Y+17, r26	; 0x11
    4f4a:	ba 8b       	std	Y+18, r27	; 0x12
	data = data >> (8 - OSS);
    4f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f4e:	98 89       	ldd	r25, Y+16	; 0x10
    4f50:	a9 89       	ldd	r26, Y+17	; 0x11
    4f52:	ba 89       	ldd	r27, Y+18	; 0x12
    4f54:	89 2f       	mov	r24, r25
    4f56:	9a 2f       	mov	r25, r26
    4f58:	ab 2f       	mov	r26, r27
    4f5a:	bb 27       	eor	r27, r27
    4f5c:	8f 87       	std	Y+15, r24	; 0x0f
    4f5e:	98 8b       	std	Y+16, r25	; 0x10
    4f60:	a9 8b       	std	Y+17, r26	; 0x11
    4f62:	ba 8b       	std	Y+18, r27	; 0x12
	//division by 2 power (8-oss which is in datasheet (0,1))

	return data;
    4f64:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f66:	98 89       	ldd	r25, Y+16	; 0x10
    4f68:	a9 89       	ldd	r26, Y+17	; 0x11
    4f6a:	ba 89       	ldd	r27, Y+18	; 0x12
}
    4f6c:	bc 01       	movw	r22, r24
    4f6e:	cd 01       	movw	r24, r26
    4f70:	66 96       	adiw	r28, 0x16	; 22
    4f72:	0f b6       	in	r0, 0x3f	; 63
    4f74:	f8 94       	cli
    4f76:	de bf       	out	0x3e, r29	; 62
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	cd bf       	out	0x3d, r28	; 61
    4f7c:	cf 91       	pop	r28
    4f7e:	df 91       	pop	r29
    4f80:	08 95       	ret

00004f82 <Get_UT>:

uint32 Get_UT(void) {
    4f82:	df 93       	push	r29
    4f84:	cf 93       	push	r28
    4f86:	cd b7       	in	r28, 0x3d	; 61
    4f88:	de b7       	in	r29, 0x3e	; 62
    4f8a:	65 97       	sbiw	r28, 0x15	; 21
    4f8c:	0f b6       	in	r0, 0x3f	; 63
    4f8e:	f8 94       	cli
    4f90:	de bf       	out	0x3e, r29	; 62
    4f92:	0f be       	out	0x3f, r0	; 63
    4f94:	cd bf       	out	0x3d, r28	; 61
	uint32 data = 0;
    4f96:	18 8a       	std	Y+16, r1	; 0x10
    4f98:	19 8a       	std	Y+17, r1	; 0x11
    4f9a:	1a 8a       	std	Y+18, r1	; 0x12
    4f9c:	1b 8a       	std	Y+19, r1	; 0x13

	uint8 datatowrite = 0x2E;
    4f9e:	8e e2       	ldi	r24, 0x2E	; 46
    4fa0:	8f 87       	std	Y+15, r24	; 0x0f
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = { 0 };
    4fa2:	1d 8a       	std	Y+21, r1	; 0x15
    4fa4:	1c 8a       	std	Y+20, r1	; 0x14
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    4fa6:	8e ee       	ldi	r24, 0xEE	; 238
    4fa8:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    4fac:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    4fb0:	84 ef       	ldi	r24, 0xF4	; 244
    4fb2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4fb6:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// send the value calculated above to start the measurement
	TWI_WriteByte(datatowrite);
    4fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fbc:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4fc0:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    4fc4:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	a0 ea       	ldi	r26, 0xA0	; 160
    4fce:	b0 e4       	ldi	r27, 0x40	; 64
    4fd0:	8b 87       	std	Y+11, r24	; 0x0b
    4fd2:	9c 87       	std	Y+12, r25	; 0x0c
    4fd4:	ad 87       	std	Y+13, r26	; 0x0d
    4fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	4a e7       	ldi	r20, 0x7A	; 122
    4fe6:	55 e4       	ldi	r21, 0x45	; 69
    4fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	8f 83       	std	Y+7, r24	; 0x07
    4ff2:	98 87       	std	Y+8, r25	; 0x08
    4ff4:	a9 87       	std	Y+9, r26	; 0x09
    4ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    4ffa:	78 85       	ldd	r23, Y+8	; 0x08
    4ffc:	89 85       	ldd	r24, Y+9	; 0x09
    4ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	40 e8       	ldi	r20, 0x80	; 128
    5006:	5f e3       	ldi	r21, 0x3F	; 63
    5008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    500c:	88 23       	and	r24, r24
    500e:	2c f4       	brge	.+10     	; 0x501a <Get_UT+0x98>
		__ticks = 1;
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	9e 83       	std	Y+6, r25	; 0x06
    5016:	8d 83       	std	Y+5, r24	; 0x05
    5018:	3f c0       	rjmp	.+126    	; 0x5098 <Get_UT+0x116>
	else if (__tmp > 65535)
    501a:	6f 81       	ldd	r22, Y+7	; 0x07
    501c:	78 85       	ldd	r23, Y+8	; 0x08
    501e:	89 85       	ldd	r24, Y+9	; 0x09
    5020:	9a 85       	ldd	r25, Y+10	; 0x0a
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	3f ef       	ldi	r19, 0xFF	; 255
    5026:	4f e7       	ldi	r20, 0x7F	; 127
    5028:	57 e4       	ldi	r21, 0x47	; 71
    502a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    502e:	18 16       	cp	r1, r24
    5030:	4c f5       	brge	.+82     	; 0x5084 <Get_UT+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5032:	6b 85       	ldd	r22, Y+11	; 0x0b
    5034:	7c 85       	ldd	r23, Y+12	; 0x0c
    5036:	8d 85       	ldd	r24, Y+13	; 0x0d
    5038:	9e 85       	ldd	r25, Y+14	; 0x0e
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	40 e2       	ldi	r20, 0x20	; 32
    5040:	51 e4       	ldi	r21, 0x41	; 65
    5042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	bc 01       	movw	r22, r24
    504c:	cd 01       	movw	r24, r26
    504e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5052:	dc 01       	movw	r26, r24
    5054:	cb 01       	movw	r24, r22
    5056:	9e 83       	std	Y+6, r25	; 0x06
    5058:	8d 83       	std	Y+5, r24	; 0x05
    505a:	0f c0       	rjmp	.+30     	; 0x507a <Get_UT+0xf8>
    505c:	80 e9       	ldi	r24, 0x90	; 144
    505e:	91 e0       	ldi	r25, 0x01	; 1
    5060:	9c 83       	std	Y+4, r25	; 0x04
    5062:	8b 83       	std	Y+3, r24	; 0x03
    5064:	8b 81       	ldd	r24, Y+3	; 0x03
    5066:	9c 81       	ldd	r25, Y+4	; 0x04
    5068:	01 97       	sbiw	r24, 0x01	; 1
    506a:	f1 f7       	brne	.-4      	; 0x5068 <Get_UT+0xe6>
    506c:	9c 83       	std	Y+4, r25	; 0x04
    506e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5070:	8d 81       	ldd	r24, Y+5	; 0x05
    5072:	9e 81       	ldd	r25, Y+6	; 0x06
    5074:	01 97       	sbiw	r24, 0x01	; 1
    5076:	9e 83       	std	Y+6, r25	; 0x06
    5078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507a:	8d 81       	ldd	r24, Y+5	; 0x05
    507c:	9e 81       	ldd	r25, Y+6	; 0x06
    507e:	00 97       	sbiw	r24, 0x00	; 0
    5080:	69 f7       	brne	.-38     	; 0x505c <Get_UT+0xda>
    5082:	14 c0       	rjmp	.+40     	; 0x50ac <Get_UT+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5084:	6f 81       	ldd	r22, Y+7	; 0x07
    5086:	78 85       	ldd	r23, Y+8	; 0x08
    5088:	89 85       	ldd	r24, Y+9	; 0x09
    508a:	9a 85       	ldd	r25, Y+10	; 0x0a
    508c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	9e 83       	std	Y+6, r25	; 0x06
    5096:	8d 83       	std	Y+5, r24	; 0x05
    5098:	8d 81       	ldd	r24, Y+5	; 0x05
    509a:	9e 81       	ldd	r25, Y+6	; 0x06
    509c:	9a 83       	std	Y+2, r25	; 0x02
    509e:	89 83       	std	Y+1, r24	; 0x01
    50a0:	89 81       	ldd	r24, Y+1	; 0x01
    50a2:	9a 81       	ldd	r25, Y+2	; 0x02
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <Get_UT+0x122>
    50a8:	9a 83       	std	Y+2, r25	; 0x02
    50aa:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw temperature data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    50ac:	8e ee       	ldi	r24, 0xEE	; 238
    50ae:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    50b2:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_WriteByte(0xF6);
    50b6:	86 ef       	ldi	r24, 0xF6	; 246
    50b8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    50bc:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    50c0:	8f ee       	ldi	r24, 0xEF	; 239
    50c2:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    50c6:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	Temperature_RAW[0] = TWI_ReadByteWithNACK();
    50ca:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    50ce:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    50d0:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Stop();
    50d4:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    50d8:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	// read the LSB of the raw temperature data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    50dc:	8e ee       	ldi	r24, 0xEE	; 238
    50de:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    50e2:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_WriteByte(0xF7);
    50e6:	87 ef       	ldi	r24, 0xF7	; 247
    50e8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    50ec:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    50f0:	8f ee       	ldi	r24, 0xEF	; 239
    50f2:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    50f6:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	Temperature_RAW[1] = TWI_ReadByteWithNACK();
    50fa:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    50fe:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    5100:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <delay>
	TWI_Stop();
    5104:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	data |= ((uint32_t) Temperature_RAW[0] << 8);
    5108:	8c 89       	ldd	r24, Y+20	; 0x14
    510a:	88 2f       	mov	r24, r24
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	a0 e0       	ldi	r26, 0x00	; 0
    5110:	b0 e0       	ldi	r27, 0x00	; 0
    5112:	22 27       	eor	r18, r18
    5114:	38 2f       	mov	r19, r24
    5116:	49 2f       	mov	r20, r25
    5118:	5a 2f       	mov	r21, r26
    511a:	88 89       	ldd	r24, Y+16	; 0x10
    511c:	99 89       	ldd	r25, Y+17	; 0x11
    511e:	aa 89       	ldd	r26, Y+18	; 0x12
    5120:	bb 89       	ldd	r27, Y+19	; 0x13
    5122:	82 2b       	or	r24, r18
    5124:	93 2b       	or	r25, r19
    5126:	a4 2b       	or	r26, r20
    5128:	b5 2b       	or	r27, r21
    512a:	88 8b       	std	Y+16, r24	; 0x10
    512c:	99 8b       	std	Y+17, r25	; 0x11
    512e:	aa 8b       	std	Y+18, r26	; 0x12
    5130:	bb 8b       	std	Y+19, r27	; 0x13
	data |= (uint32_t) Temperature_RAW[1];
    5132:	8d 89       	ldd	r24, Y+21	; 0x15
    5134:	28 2f       	mov	r18, r24
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	40 e0       	ldi	r20, 0x00	; 0
    513a:	50 e0       	ldi	r21, 0x00	; 0
    513c:	88 89       	ldd	r24, Y+16	; 0x10
    513e:	99 89       	ldd	r25, Y+17	; 0x11
    5140:	aa 89       	ldd	r26, Y+18	; 0x12
    5142:	bb 89       	ldd	r27, Y+19	; 0x13
    5144:	82 2b       	or	r24, r18
    5146:	93 2b       	or	r25, r19
    5148:	a4 2b       	or	r26, r20
    514a:	b5 2b       	or	r27, r21
    514c:	88 8b       	std	Y+16, r24	; 0x10
    514e:	99 8b       	std	Y+17, r25	; 0x11
    5150:	aa 8b       	std	Y+18, r26	; 0x12
    5152:	bb 8b       	std	Y+19, r27	; 0x13
	return data;
    5154:	88 89       	ldd	r24, Y+16	; 0x10
    5156:	99 89       	ldd	r25, Y+17	; 0x11
    5158:	aa 89       	ldd	r26, Y+18	; 0x12
    515a:	bb 89       	ldd	r27, Y+19	; 0x13
}
    515c:	bc 01       	movw	r22, r24
    515e:	cd 01       	movw	r24, r26
    5160:	65 96       	adiw	r28, 0x15	; 21
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	cf 91       	pop	r28
    516e:	df 91       	pop	r29
    5170:	08 95       	ret

00005172 <BMP180_calculateTemperature>:

sint32 BMP180_calculateTemperature(void) {
    5172:	ef 92       	push	r14
    5174:	ff 92       	push	r15
    5176:	0f 93       	push	r16
    5178:	1f 93       	push	r17
    517a:	df 93       	push	r29
    517c:	cf 93       	push	r28
    517e:	00 d0       	rcall	.+0      	; 0x5180 <BMP180_calculateTemperature+0xe>
    5180:	00 d0       	rcall	.+0      	; 0x5182 <BMP180_calculateTemperature+0x10>
    5182:	cd b7       	in	r28, 0x3d	; 61
    5184:	de b7       	in	r29, 0x3e	; 62

	float32 temperature = 0;
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	a0 e0       	ldi	r26, 0x00	; 0
    518c:	b0 e0       	ldi	r27, 0x00	; 0
    518e:	89 83       	std	Y+1, r24	; 0x01
    5190:	9a 83       	std	Y+2, r25	; 0x02
    5192:	ab 83       	std	Y+3, r26	; 0x03
    5194:	bc 83       	std	Y+4, r27	; 0x04

	UT = Get_UT();
    5196:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <Get_UT>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	80 93 18 02 	sts	0x0218, r24
    51a2:	90 93 19 02 	sts	0x0219, r25
    51a6:	a0 93 1a 02 	sts	0x021A, r26
    51aa:	b0 93 1b 02 	sts	0x021B, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    51ae:	20 91 18 02 	lds	r18, 0x0218
    51b2:	30 91 19 02 	lds	r19, 0x0219
    51b6:	40 91 1a 02 	lds	r20, 0x021A
    51ba:	50 91 1b 02 	lds	r21, 0x021B
    51be:	80 91 0a 02 	lds	r24, 0x020A
    51c2:	90 91 0b 02 	lds	r25, 0x020B
    51c6:	cc 01       	movw	r24, r24
    51c8:	a0 e0       	ldi	r26, 0x00	; 0
    51ca:	b0 e0       	ldi	r27, 0x00	; 0
    51cc:	79 01       	movw	r14, r18
    51ce:	8a 01       	movw	r16, r20
    51d0:	e8 1a       	sub	r14, r24
    51d2:	f9 0a       	sbc	r15, r25
    51d4:	0a 0b       	sbc	r16, r26
    51d6:	1b 0b       	sbc	r17, r27
    51d8:	d8 01       	movw	r26, r16
    51da:	c7 01       	movw	r24, r14
    51dc:	bc 01       	movw	r22, r24
    51de:	cd 01       	movw	r24, r26
    51e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    51e4:	7b 01       	movw	r14, r22
    51e6:	8c 01       	movw	r16, r24
    51e8:	80 91 08 02 	lds	r24, 0x0208
    51ec:	90 91 09 02 	lds	r25, 0x0209
    51f0:	cc 01       	movw	r24, r24
    51f2:	a0 e0       	ldi	r26, 0x00	; 0
    51f4:	b0 e0       	ldi	r27, 0x00	; 0
    51f6:	bc 01       	movw	r22, r24
    51f8:	cd 01       	movw	r24, r26
    51fa:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    51fe:	dc 01       	movw	r26, r24
    5200:	cb 01       	movw	r24, r22
    5202:	bc 01       	movw	r22, r24
    5204:	cd 01       	movw	r24, r26
    5206:	20 e0       	ldi	r18, 0x00	; 0
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	40 e0       	ldi	r20, 0x00	; 0
    520c:	57 e4       	ldi	r21, 0x47	; 71
    520e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5212:	dc 01       	movw	r26, r24
    5214:	cb 01       	movw	r24, r22
    5216:	9c 01       	movw	r18, r24
    5218:	ad 01       	movw	r20, r26
    521a:	c8 01       	movw	r24, r16
    521c:	b7 01       	movw	r22, r14
    521e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5222:	dc 01       	movw	r26, r24
    5224:	cb 01       	movw	r24, r22
    5226:	bc 01       	movw	r22, r24
    5228:	cd 01       	movw	r24, r26
    522a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    522e:	dc 01       	movw	r26, r24
    5230:	cb 01       	movw	r24, r22
    5232:	80 93 0c 02 	sts	0x020C, r24
    5236:	90 93 0d 02 	sts	0x020D, r25
    523a:	a0 93 0e 02 	sts	0x020E, r26
    523e:	b0 93 0f 02 	sts	0x020F, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    5242:	80 91 02 02 	lds	r24, 0x0202
    5246:	90 91 03 02 	lds	r25, 0x0203
    524a:	aa 27       	eor	r26, r26
    524c:	97 fd       	sbrc	r25, 7
    524e:	a0 95       	com	r26
    5250:	ba 2f       	mov	r27, r26
    5252:	bc 01       	movw	r22, r24
    5254:	cd 01       	movw	r24, r26
    5256:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    525a:	dc 01       	movw	r26, r24
    525c:	cb 01       	movw	r24, r22
    525e:	bc 01       	movw	r22, r24
    5260:	cd 01       	movw	r24, r26
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	40 e0       	ldi	r20, 0x00	; 0
    5268:	55 e4       	ldi	r21, 0x45	; 69
    526a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    526e:	dc 01       	movw	r26, r24
    5270:	cb 01       	movw	r24, r22
    5272:	7c 01       	movw	r14, r24
    5274:	8d 01       	movw	r16, r26
    5276:	80 91 04 02 	lds	r24, 0x0204
    527a:	90 91 05 02 	lds	r25, 0x0205
    527e:	9c 01       	movw	r18, r24
    5280:	44 27       	eor	r20, r20
    5282:	37 fd       	sbrc	r19, 7
    5284:	40 95       	com	r20
    5286:	54 2f       	mov	r21, r20
    5288:	80 91 0c 02 	lds	r24, 0x020C
    528c:	90 91 0d 02 	lds	r25, 0x020D
    5290:	a0 91 0e 02 	lds	r26, 0x020E
    5294:	b0 91 0f 02 	lds	r27, 0x020F
    5298:	82 0f       	add	r24, r18
    529a:	93 1f       	adc	r25, r19
    529c:	a4 1f       	adc	r26, r20
    529e:	b5 1f       	adc	r27, r21
    52a0:	bc 01       	movw	r22, r24
    52a2:	cd 01       	movw	r24, r26
    52a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    52a8:	9b 01       	movw	r18, r22
    52aa:	ac 01       	movw	r20, r24
    52ac:	c8 01       	movw	r24, r16
    52ae:	b7 01       	movw	r22, r14
    52b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    52b4:	dc 01       	movw	r26, r24
    52b6:	cb 01       	movw	r24, r22
    52b8:	bc 01       	movw	r22, r24
    52ba:	cd 01       	movw	r24, r26
    52bc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    52c0:	dc 01       	movw	r26, r24
    52c2:	cb 01       	movw	r24, r22
    52c4:	80 93 10 02 	sts	0x0210, r24
    52c8:	90 93 11 02 	sts	0x0211, r25
    52cc:	a0 93 12 02 	sts	0x0212, r26
    52d0:	b0 93 13 02 	sts	0x0213, r27
	B5 = X1 + X2;
    52d4:	20 91 0c 02 	lds	r18, 0x020C
    52d8:	30 91 0d 02 	lds	r19, 0x020D
    52dc:	40 91 0e 02 	lds	r20, 0x020E
    52e0:	50 91 0f 02 	lds	r21, 0x020F
    52e4:	80 91 10 02 	lds	r24, 0x0210
    52e8:	90 91 11 02 	lds	r25, 0x0211
    52ec:	a0 91 12 02 	lds	r26, 0x0212
    52f0:	b0 91 13 02 	lds	r27, 0x0213
    52f4:	82 0f       	add	r24, r18
    52f6:	93 1f       	adc	r25, r19
    52f8:	a4 1f       	adc	r26, r20
    52fa:	b5 1f       	adc	r27, r21
    52fc:	80 93 14 02 	sts	0x0214, r24
    5300:	90 93 15 02 	sts	0x0215, r25
    5304:	a0 93 16 02 	sts	0x0216, r26
    5308:	b0 93 17 02 	sts	0x0217, r27
	temperature = (B5 + 8) / (pow(2, 4));
    530c:	80 91 14 02 	lds	r24, 0x0214
    5310:	90 91 15 02 	lds	r25, 0x0215
    5314:	a0 91 16 02 	lds	r26, 0x0216
    5318:	b0 91 17 02 	lds	r27, 0x0217
    531c:	08 96       	adiw	r24, 0x08	; 8
    531e:	a1 1d       	adc	r26, r1
    5320:	b1 1d       	adc	r27, r1
    5322:	bc 01       	movw	r22, r24
    5324:	cd 01       	movw	r24, r26
    5326:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    532a:	dc 01       	movw	r26, r24
    532c:	cb 01       	movw	r24, r22
    532e:	bc 01       	movw	r22, r24
    5330:	cd 01       	movw	r24, r26
    5332:	20 e0       	ldi	r18, 0x00	; 0
    5334:	30 e0       	ldi	r19, 0x00	; 0
    5336:	40 e8       	ldi	r20, 0x80	; 128
    5338:	51 e4       	ldi	r21, 0x41	; 65
    533a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    533e:	dc 01       	movw	r26, r24
    5340:	cb 01       	movw	r24, r22
    5342:	89 83       	std	Y+1, r24	; 0x01
    5344:	9a 83       	std	Y+2, r25	; 0x02
    5346:	ab 83       	std	Y+3, r26	; 0x03
    5348:	bc 83       	std	Y+4, r27	; 0x04
	return temperature / 10.0;
    534a:	69 81       	ldd	r22, Y+1	; 0x01
    534c:	7a 81       	ldd	r23, Y+2	; 0x02
    534e:	8b 81       	ldd	r24, Y+3	; 0x03
    5350:	9c 81       	ldd	r25, Y+4	; 0x04
    5352:	20 e0       	ldi	r18, 0x00	; 0
    5354:	30 e0       	ldi	r19, 0x00	; 0
    5356:	40 e2       	ldi	r20, 0x20	; 32
    5358:	51 e4       	ldi	r21, 0x41	; 65
    535a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    535e:	dc 01       	movw	r26, r24
    5360:	cb 01       	movw	r24, r22
    5362:	bc 01       	movw	r22, r24
    5364:	cd 01       	movw	r24, r26
    5366:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    536a:	dc 01       	movw	r26, r24
    536c:	cb 01       	movw	r24, r22
}
    536e:	bc 01       	movw	r22, r24
    5370:	cd 01       	movw	r24, r26
    5372:	0f 90       	pop	r0
    5374:	0f 90       	pop	r0
    5376:	0f 90       	pop	r0
    5378:	0f 90       	pop	r0
    537a:	cf 91       	pop	r28
    537c:	df 91       	pop	r29
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	ff 90       	pop	r15
    5384:	ef 90       	pop	r14
    5386:	08 95       	ret

00005388 <BMP180_calculatePressure>:

sint32 BMP180_calculatePressure(void) {
    5388:	ef 92       	push	r14
    538a:	ff 92       	push	r15
    538c:	0f 93       	push	r16
    538e:	1f 93       	push	r17
    5390:	df 93       	push	r29
    5392:	cf 93       	push	r28
    5394:	cd b7       	in	r28, 0x3d	; 61
    5396:	de b7       	in	r29, 0x3e	; 62
	UP = Get_UP();
    5398:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <Get_UP>
    539c:	dc 01       	movw	r26, r24
    539e:	cb 01       	movw	r24, r22
    53a0:	80 93 2c 02 	sts	0x022C, r24
    53a4:	90 93 2d 02 	sts	0x022D, r25
    53a8:	a0 93 2e 02 	sts	0x022E, r26
    53ac:	b0 93 2f 02 	sts	0x022F, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    53b0:	20 91 18 02 	lds	r18, 0x0218
    53b4:	30 91 19 02 	lds	r19, 0x0219
    53b8:	40 91 1a 02 	lds	r20, 0x021A
    53bc:	50 91 1b 02 	lds	r21, 0x021B
    53c0:	80 91 0a 02 	lds	r24, 0x020A
    53c4:	90 91 0b 02 	lds	r25, 0x020B
    53c8:	cc 01       	movw	r24, r24
    53ca:	a0 e0       	ldi	r26, 0x00	; 0
    53cc:	b0 e0       	ldi	r27, 0x00	; 0
    53ce:	79 01       	movw	r14, r18
    53d0:	8a 01       	movw	r16, r20
    53d2:	e8 1a       	sub	r14, r24
    53d4:	f9 0a       	sbc	r15, r25
    53d6:	0a 0b       	sbc	r16, r26
    53d8:	1b 0b       	sbc	r17, r27
    53da:	d8 01       	movw	r26, r16
    53dc:	c7 01       	movw	r24, r14
    53de:	bc 01       	movw	r22, r24
    53e0:	cd 01       	movw	r24, r26
    53e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    53e6:	7b 01       	movw	r14, r22
    53e8:	8c 01       	movw	r16, r24
    53ea:	80 91 08 02 	lds	r24, 0x0208
    53ee:	90 91 09 02 	lds	r25, 0x0209
    53f2:	cc 01       	movw	r24, r24
    53f4:	a0 e0       	ldi	r26, 0x00	; 0
    53f6:	b0 e0       	ldi	r27, 0x00	; 0
    53f8:	bc 01       	movw	r22, r24
    53fa:	cd 01       	movw	r24, r26
    53fc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5400:	dc 01       	movw	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	bc 01       	movw	r22, r24
    5406:	cd 01       	movw	r24, r26
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	30 e0       	ldi	r19, 0x00	; 0
    540c:	40 e0       	ldi	r20, 0x00	; 0
    540e:	57 e4       	ldi	r21, 0x47	; 71
    5410:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5414:	dc 01       	movw	r26, r24
    5416:	cb 01       	movw	r24, r22
    5418:	9c 01       	movw	r18, r24
    541a:	ad 01       	movw	r20, r26
    541c:	c8 01       	movw	r24, r16
    541e:	b7 01       	movw	r22, r14
    5420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5424:	dc 01       	movw	r26, r24
    5426:	cb 01       	movw	r24, r22
    5428:	bc 01       	movw	r22, r24
    542a:	cd 01       	movw	r24, r26
    542c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5430:	dc 01       	movw	r26, r24
    5432:	cb 01       	movw	r24, r22
    5434:	80 93 0c 02 	sts	0x020C, r24
    5438:	90 93 0d 02 	sts	0x020D, r25
    543c:	a0 93 0e 02 	sts	0x020E, r26
    5440:	b0 93 0f 02 	sts	0x020F, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    5444:	80 91 02 02 	lds	r24, 0x0202
    5448:	90 91 03 02 	lds	r25, 0x0203
    544c:	aa 27       	eor	r26, r26
    544e:	97 fd       	sbrc	r25, 7
    5450:	a0 95       	com	r26
    5452:	ba 2f       	mov	r27, r26
    5454:	bc 01       	movw	r22, r24
    5456:	cd 01       	movw	r24, r26
    5458:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    545c:	dc 01       	movw	r26, r24
    545e:	cb 01       	movw	r24, r22
    5460:	bc 01       	movw	r22, r24
    5462:	cd 01       	movw	r24, r26
    5464:	20 e0       	ldi	r18, 0x00	; 0
    5466:	30 e0       	ldi	r19, 0x00	; 0
    5468:	40 e0       	ldi	r20, 0x00	; 0
    546a:	55 e4       	ldi	r21, 0x45	; 69
    546c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22
    5474:	7c 01       	movw	r14, r24
    5476:	8d 01       	movw	r16, r26
    5478:	80 91 04 02 	lds	r24, 0x0204
    547c:	90 91 05 02 	lds	r25, 0x0205
    5480:	9c 01       	movw	r18, r24
    5482:	44 27       	eor	r20, r20
    5484:	37 fd       	sbrc	r19, 7
    5486:	40 95       	com	r20
    5488:	54 2f       	mov	r21, r20
    548a:	80 91 0c 02 	lds	r24, 0x020C
    548e:	90 91 0d 02 	lds	r25, 0x020D
    5492:	a0 91 0e 02 	lds	r26, 0x020E
    5496:	b0 91 0f 02 	lds	r27, 0x020F
    549a:	82 0f       	add	r24, r18
    549c:	93 1f       	adc	r25, r19
    549e:	a4 1f       	adc	r26, r20
    54a0:	b5 1f       	adc	r27, r21
    54a2:	bc 01       	movw	r22, r24
    54a4:	cd 01       	movw	r24, r26
    54a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    54aa:	9b 01       	movw	r18, r22
    54ac:	ac 01       	movw	r20, r24
    54ae:	c8 01       	movw	r24, r16
    54b0:	b7 01       	movw	r22, r14
    54b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54b6:	dc 01       	movw	r26, r24
    54b8:	cb 01       	movw	r24, r22
    54ba:	bc 01       	movw	r22, r24
    54bc:	cd 01       	movw	r24, r26
    54be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    54c2:	dc 01       	movw	r26, r24
    54c4:	cb 01       	movw	r24, r22
    54c6:	80 93 10 02 	sts	0x0210, r24
    54ca:	90 93 11 02 	sts	0x0211, r25
    54ce:	a0 93 12 02 	sts	0x0212, r26
    54d2:	b0 93 13 02 	sts	0x0213, r27
	B5 = X1 + X2;
    54d6:	20 91 0c 02 	lds	r18, 0x020C
    54da:	30 91 0d 02 	lds	r19, 0x020D
    54de:	40 91 0e 02 	lds	r20, 0x020E
    54e2:	50 91 0f 02 	lds	r21, 0x020F
    54e6:	80 91 10 02 	lds	r24, 0x0210
    54ea:	90 91 11 02 	lds	r25, 0x0211
    54ee:	a0 91 12 02 	lds	r26, 0x0212
    54f2:	b0 91 13 02 	lds	r27, 0x0213
    54f6:	82 0f       	add	r24, r18
    54f8:	93 1f       	adc	r25, r19
    54fa:	a4 1f       	adc	r26, r20
    54fc:	b5 1f       	adc	r27, r21
    54fe:	80 93 14 02 	sts	0x0214, r24
    5502:	90 93 15 02 	sts	0x0215, r25
    5506:	a0 93 16 02 	sts	0x0216, r26
    550a:	b0 93 17 02 	sts	0x0217, r27
	B6 = B5 - 4000;
    550e:	80 91 14 02 	lds	r24, 0x0214
    5512:	90 91 15 02 	lds	r25, 0x0215
    5516:	a0 91 16 02 	lds	r26, 0x0216
    551a:	b0 91 17 02 	lds	r27, 0x0217
    551e:	80 5a       	subi	r24, 0xA0	; 160
    5520:	9f 40       	sbci	r25, 0x0F	; 15
    5522:	a0 40       	sbci	r26, 0x00	; 0
    5524:	b0 40       	sbci	r27, 0x00	; 0
    5526:	80 93 24 02 	sts	0x0224, r24
    552a:	90 93 25 02 	sts	0x0225, r25
    552e:	a0 93 26 02 	sts	0x0226, r26
    5532:	b0 93 27 02 	sts	0x0227, r27
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
    5536:	80 91 fe 01 	lds	r24, 0x01FE
    553a:	90 91 ff 01 	lds	r25, 0x01FF
    553e:	aa 27       	eor	r26, r26
    5540:	97 fd       	sbrc	r25, 7
    5542:	a0 95       	com	r26
    5544:	ba 2f       	mov	r27, r26
    5546:	bc 01       	movw	r22, r24
    5548:	cd 01       	movw	r24, r26
    554a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    554e:	7b 01       	movw	r14, r22
    5550:	8c 01       	movw	r16, r24
    5552:	80 91 24 02 	lds	r24, 0x0224
    5556:	90 91 25 02 	lds	r25, 0x0225
    555a:	a0 91 26 02 	lds	r26, 0x0226
    555e:	b0 91 27 02 	lds	r27, 0x0227
    5562:	20 91 24 02 	lds	r18, 0x0224
    5566:	30 91 25 02 	lds	r19, 0x0225
    556a:	40 91 26 02 	lds	r20, 0x0226
    556e:	50 91 27 02 	lds	r21, 0x0227
    5572:	bc 01       	movw	r22, r24
    5574:	cd 01       	movw	r24, r26
    5576:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    557a:	dc 01       	movw	r26, r24
    557c:	cb 01       	movw	r24, r22
    557e:	bc 01       	movw	r22, r24
    5580:	cd 01       	movw	r24, r26
    5582:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5586:	dc 01       	movw	r26, r24
    5588:	cb 01       	movw	r24, r22
    558a:	bc 01       	movw	r22, r24
    558c:	cd 01       	movw	r24, r26
    558e:	20 e0       	ldi	r18, 0x00	; 0
    5590:	30 e0       	ldi	r19, 0x00	; 0
    5592:	40 e8       	ldi	r20, 0x80	; 128
    5594:	55 e4       	ldi	r21, 0x45	; 69
    5596:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    559a:	dc 01       	movw	r26, r24
    559c:	cb 01       	movw	r24, r22
    559e:	9c 01       	movw	r18, r24
    55a0:	ad 01       	movw	r20, r26
    55a2:	c8 01       	movw	r24, r16
    55a4:	b7 01       	movw	r22, r14
    55a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	bc 01       	movw	r22, r24
    55b0:	cd 01       	movw	r24, r26
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	40 e0       	ldi	r20, 0x00	; 0
    55b8:	55 e4       	ldi	r21, 0x45	; 69
    55ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55be:	dc 01       	movw	r26, r24
    55c0:	cb 01       	movw	r24, r22
    55c2:	bc 01       	movw	r22, r24
    55c4:	cd 01       	movw	r24, r26
    55c6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    55ca:	dc 01       	movw	r26, r24
    55cc:	cb 01       	movw	r24, r22
    55ce:	80 93 0c 02 	sts	0x020C, r24
    55d2:	90 93 0d 02 	sts	0x020D, r25
    55d6:	a0 93 0e 02 	sts	0x020E, r26
    55da:	b0 93 0f 02 	sts	0x020F, r27
	X2 = AC2 * B6 / (pow(2, 11));
    55de:	80 91 f8 01 	lds	r24, 0x01F8
    55e2:	90 91 f9 01 	lds	r25, 0x01F9
    55e6:	aa 27       	eor	r26, r26
    55e8:	97 fd       	sbrc	r25, 7
    55ea:	a0 95       	com	r26
    55ec:	ba 2f       	mov	r27, r26
    55ee:	20 91 24 02 	lds	r18, 0x0224
    55f2:	30 91 25 02 	lds	r19, 0x0225
    55f6:	40 91 26 02 	lds	r20, 0x0226
    55fa:	50 91 27 02 	lds	r21, 0x0227
    55fe:	bc 01       	movw	r22, r24
    5600:	cd 01       	movw	r24, r26
    5602:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    5606:	dc 01       	movw	r26, r24
    5608:	cb 01       	movw	r24, r22
    560a:	bc 01       	movw	r22, r24
    560c:	cd 01       	movw	r24, r26
    560e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
    5616:	bc 01       	movw	r22, r24
    5618:	cd 01       	movw	r24, r26
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	30 e0       	ldi	r19, 0x00	; 0
    561e:	40 e0       	ldi	r20, 0x00	; 0
    5620:	55 e4       	ldi	r21, 0x45	; 69
    5622:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5626:	dc 01       	movw	r26, r24
    5628:	cb 01       	movw	r24, r22
    562a:	bc 01       	movw	r22, r24
    562c:	cd 01       	movw	r24, r26
    562e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5632:	dc 01       	movw	r26, r24
    5634:	cb 01       	movw	r24, r22
    5636:	80 93 10 02 	sts	0x0210, r24
    563a:	90 93 11 02 	sts	0x0211, r25
    563e:	a0 93 12 02 	sts	0x0212, r26
    5642:	b0 93 13 02 	sts	0x0213, r27
	X3 = X1 + X2;
    5646:	20 91 0c 02 	lds	r18, 0x020C
    564a:	30 91 0d 02 	lds	r19, 0x020D
    564e:	40 91 0e 02 	lds	r20, 0x020E
    5652:	50 91 0f 02 	lds	r21, 0x020F
    5656:	80 91 10 02 	lds	r24, 0x0210
    565a:	90 91 11 02 	lds	r25, 0x0211
    565e:	a0 91 12 02 	lds	r26, 0x0212
    5662:	b0 91 13 02 	lds	r27, 0x0213
    5666:	82 0f       	add	r24, r18
    5668:	93 1f       	adc	r25, r19
    566a:	a4 1f       	adc	r26, r20
    566c:	b5 1f       	adc	r27, r21
    566e:	80 93 1c 02 	sts	0x021C, r24
    5672:	90 93 1d 02 	sts	0x021D, r25
    5676:	a0 93 1e 02 	sts	0x021E, r26
    567a:	b0 93 1f 02 	sts	0x021F, r27
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
    567e:	80 91 f6 01 	lds	r24, 0x01F6
    5682:	90 91 f7 01 	lds	r25, 0x01F7
    5686:	88 0f       	add	r24, r24
    5688:	99 1f       	adc	r25, r25
    568a:	88 0f       	add	r24, r24
    568c:	99 1f       	adc	r25, r25
    568e:	9c 01       	movw	r18, r24
    5690:	44 27       	eor	r20, r20
    5692:	37 fd       	sbrc	r19, 7
    5694:	40 95       	com	r20
    5696:	54 2f       	mov	r21, r20
    5698:	80 91 1c 02 	lds	r24, 0x021C
    569c:	90 91 1d 02 	lds	r25, 0x021D
    56a0:	a0 91 1e 02 	lds	r26, 0x021E
    56a4:	b0 91 1f 02 	lds	r27, 0x021F
    56a8:	82 0f       	add	r24, r18
    56aa:	93 1f       	adc	r25, r19
    56ac:	a4 1f       	adc	r26, r20
    56ae:	b5 1f       	adc	r27, r21
    56b0:	02 96       	adiw	r24, 0x02	; 2
    56b2:	a1 1d       	adc	r26, r1
    56b4:	b1 1d       	adc	r27, r1
    56b6:	24 e0       	ldi	r18, 0x04	; 4
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	40 e0       	ldi	r20, 0x00	; 0
    56bc:	50 e0       	ldi	r21, 0x00	; 0
    56be:	bc 01       	movw	r22, r24
    56c0:	cd 01       	movw	r24, r26
    56c2:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <__divmodsi4>
    56c6:	da 01       	movw	r26, r20
    56c8:	c9 01       	movw	r24, r18
    56ca:	80 93 20 02 	sts	0x0220, r24
    56ce:	90 93 21 02 	sts	0x0221, r25
    56d2:	a0 93 22 02 	sts	0x0222, r26
    56d6:	b0 93 23 02 	sts	0x0223, r27
	X1 = AC3 * B6 / (pow(2, 13));
    56da:	80 91 fa 01 	lds	r24, 0x01FA
    56de:	90 91 fb 01 	lds	r25, 0x01FB
    56e2:	aa 27       	eor	r26, r26
    56e4:	97 fd       	sbrc	r25, 7
    56e6:	a0 95       	com	r26
    56e8:	ba 2f       	mov	r27, r26
    56ea:	20 91 24 02 	lds	r18, 0x0224
    56ee:	30 91 25 02 	lds	r19, 0x0225
    56f2:	40 91 26 02 	lds	r20, 0x0226
    56f6:	50 91 27 02 	lds	r21, 0x0227
    56fa:	bc 01       	movw	r22, r24
    56fc:	cd 01       	movw	r24, r26
    56fe:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    5702:	dc 01       	movw	r26, r24
    5704:	cb 01       	movw	r24, r22
    5706:	bc 01       	movw	r22, r24
    5708:	cd 01       	movw	r24, r26
    570a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    570e:	dc 01       	movw	r26, r24
    5710:	cb 01       	movw	r24, r22
    5712:	bc 01       	movw	r22, r24
    5714:	cd 01       	movw	r24, r26
    5716:	20 e0       	ldi	r18, 0x00	; 0
    5718:	30 e0       	ldi	r19, 0x00	; 0
    571a:	40 e0       	ldi	r20, 0x00	; 0
    571c:	56 e4       	ldi	r21, 0x46	; 70
    571e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	bc 01       	movw	r22, r24
    5728:	cd 01       	movw	r24, r26
    572a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    572e:	dc 01       	movw	r26, r24
    5730:	cb 01       	movw	r24, r22
    5732:	80 93 0c 02 	sts	0x020C, r24
    5736:	90 93 0d 02 	sts	0x020D, r25
    573a:	a0 93 0e 02 	sts	0x020E, r26
    573e:	b0 93 0f 02 	sts	0x020F, r27
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
    5742:	80 91 fc 01 	lds	r24, 0x01FC
    5746:	90 91 fd 01 	lds	r25, 0x01FD
    574a:	aa 27       	eor	r26, r26
    574c:	97 fd       	sbrc	r25, 7
    574e:	a0 95       	com	r26
    5750:	ba 2f       	mov	r27, r26
    5752:	bc 01       	movw	r22, r24
    5754:	cd 01       	movw	r24, r26
    5756:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    575a:	7b 01       	movw	r14, r22
    575c:	8c 01       	movw	r16, r24
    575e:	80 91 24 02 	lds	r24, 0x0224
    5762:	90 91 25 02 	lds	r25, 0x0225
    5766:	a0 91 26 02 	lds	r26, 0x0226
    576a:	b0 91 27 02 	lds	r27, 0x0227
    576e:	20 91 24 02 	lds	r18, 0x0224
    5772:	30 91 25 02 	lds	r19, 0x0225
    5776:	40 91 26 02 	lds	r20, 0x0226
    577a:	50 91 27 02 	lds	r21, 0x0227
    577e:	bc 01       	movw	r22, r24
    5780:	cd 01       	movw	r24, r26
    5782:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    5786:	dc 01       	movw	r26, r24
    5788:	cb 01       	movw	r24, r22
    578a:	bc 01       	movw	r22, r24
    578c:	cd 01       	movw	r24, r26
    578e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	bc 01       	movw	r22, r24
    5798:	cd 01       	movw	r24, r26
    579a:	20 e0       	ldi	r18, 0x00	; 0
    579c:	30 e0       	ldi	r19, 0x00	; 0
    579e:	40 e8       	ldi	r20, 0x80	; 128
    57a0:	55 e4       	ldi	r21, 0x45	; 69
    57a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    57a6:	dc 01       	movw	r26, r24
    57a8:	cb 01       	movw	r24, r22
    57aa:	9c 01       	movw	r18, r24
    57ac:	ad 01       	movw	r20, r26
    57ae:	c8 01       	movw	r24, r16
    57b0:	b7 01       	movw	r22, r14
    57b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57b6:	dc 01       	movw	r26, r24
    57b8:	cb 01       	movw	r24, r22
    57ba:	bc 01       	movw	r22, r24
    57bc:	cd 01       	movw	r24, r26
    57be:	20 e0       	ldi	r18, 0x00	; 0
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	40 e8       	ldi	r20, 0x80	; 128
    57c4:	57 e4       	ldi	r21, 0x47	; 71
    57c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    57ca:	dc 01       	movw	r26, r24
    57cc:	cb 01       	movw	r24, r22
    57ce:	bc 01       	movw	r22, r24
    57d0:	cd 01       	movw	r24, r26
    57d2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    57d6:	dc 01       	movw	r26, r24
    57d8:	cb 01       	movw	r24, r22
    57da:	80 93 10 02 	sts	0x0210, r24
    57de:	90 93 11 02 	sts	0x0211, r25
    57e2:	a0 93 12 02 	sts	0x0212, r26
    57e6:	b0 93 13 02 	sts	0x0213, r27
	X3 = ((X1 + X2) + 2) / (pow(2, 2));
    57ea:	20 91 0c 02 	lds	r18, 0x020C
    57ee:	30 91 0d 02 	lds	r19, 0x020D
    57f2:	40 91 0e 02 	lds	r20, 0x020E
    57f6:	50 91 0f 02 	lds	r21, 0x020F
    57fa:	80 91 10 02 	lds	r24, 0x0210
    57fe:	90 91 11 02 	lds	r25, 0x0211
    5802:	a0 91 12 02 	lds	r26, 0x0212
    5806:	b0 91 13 02 	lds	r27, 0x0213
    580a:	82 0f       	add	r24, r18
    580c:	93 1f       	adc	r25, r19
    580e:	a4 1f       	adc	r26, r20
    5810:	b5 1f       	adc	r27, r21
    5812:	02 96       	adiw	r24, 0x02	; 2
    5814:	a1 1d       	adc	r26, r1
    5816:	b1 1d       	adc	r27, r1
    5818:	bc 01       	movw	r22, r24
    581a:	cd 01       	movw	r24, r26
    581c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5820:	dc 01       	movw	r26, r24
    5822:	cb 01       	movw	r24, r22
    5824:	bc 01       	movw	r22, r24
    5826:	cd 01       	movw	r24, r26
    5828:	20 e0       	ldi	r18, 0x00	; 0
    582a:	30 e0       	ldi	r19, 0x00	; 0
    582c:	40 e8       	ldi	r20, 0x80	; 128
    582e:	50 e4       	ldi	r21, 0x40	; 64
    5830:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5834:	dc 01       	movw	r26, r24
    5836:	cb 01       	movw	r24, r22
    5838:	bc 01       	movw	r22, r24
    583a:	cd 01       	movw	r24, r26
    583c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	80 93 1c 02 	sts	0x021C, r24
    5848:	90 93 1d 02 	sts	0x021D, r25
    584c:	a0 93 1e 02 	sts	0x021E, r26
    5850:	b0 93 1f 02 	sts	0x021F, r27
	B4 = (AC4 * (uint32) (X3 + 32768)) / (pow(2, 15));
    5854:	80 91 06 02 	lds	r24, 0x0206
    5858:	90 91 07 02 	lds	r25, 0x0207
    585c:	7c 01       	movw	r14, r24
    585e:	00 e0       	ldi	r16, 0x00	; 0
    5860:	10 e0       	ldi	r17, 0x00	; 0
    5862:	80 91 1c 02 	lds	r24, 0x021C
    5866:	90 91 1d 02 	lds	r25, 0x021D
    586a:	a0 91 1e 02 	lds	r26, 0x021E
    586e:	b0 91 1f 02 	lds	r27, 0x021F
    5872:	80 50       	subi	r24, 0x00	; 0
    5874:	90 48       	sbci	r25, 0x80	; 128
    5876:	af 4f       	sbci	r26, 0xFF	; 255
    5878:	bf 4f       	sbci	r27, 0xFF	; 255
    587a:	9c 01       	movw	r18, r24
    587c:	ad 01       	movw	r20, r26
    587e:	c8 01       	movw	r24, r16
    5880:	b7 01       	movw	r22, r14
    5882:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    5886:	dc 01       	movw	r26, r24
    5888:	cb 01       	movw	r24, r22
    588a:	bc 01       	movw	r22, r24
    588c:	cd 01       	movw	r24, r26
    588e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5892:	dc 01       	movw	r26, r24
    5894:	cb 01       	movw	r24, r22
    5896:	bc 01       	movw	r22, r24
    5898:	cd 01       	movw	r24, r26
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	57 e4       	ldi	r21, 0x47	; 71
    58a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	bc 01       	movw	r22, r24
    58ac:	cd 01       	movw	r24, r26
    58ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	80 93 30 02 	sts	0x0230, r24
    58ba:	90 93 31 02 	sts	0x0231, r25
    58be:	a0 93 32 02 	sts	0x0232, r26
    58c2:	b0 93 33 02 	sts	0x0233, r27
	B7 = ((uint32) UP - B3) * (50000 >> OSS);
    58c6:	80 91 2c 02 	lds	r24, 0x022C
    58ca:	90 91 2d 02 	lds	r25, 0x022D
    58ce:	a0 91 2e 02 	lds	r26, 0x022E
    58d2:	b0 91 2f 02 	lds	r27, 0x022F
    58d6:	9c 01       	movw	r18, r24
    58d8:	ad 01       	movw	r20, r26
    58da:	80 91 20 02 	lds	r24, 0x0220
    58de:	90 91 21 02 	lds	r25, 0x0221
    58e2:	a0 91 22 02 	lds	r26, 0x0222
    58e6:	b0 91 23 02 	lds	r27, 0x0223
    58ea:	79 01       	movw	r14, r18
    58ec:	8a 01       	movw	r16, r20
    58ee:	e8 1a       	sub	r14, r24
    58f0:	f9 0a       	sbc	r15, r25
    58f2:	0a 0b       	sbc	r16, r26
    58f4:	1b 0b       	sbc	r17, r27
    58f6:	d8 01       	movw	r26, r16
    58f8:	c7 01       	movw	r24, r14
    58fa:	20 e5       	ldi	r18, 0x50	; 80
    58fc:	33 ec       	ldi	r19, 0xC3	; 195
    58fe:	40 e0       	ldi	r20, 0x00	; 0
    5900:	50 e0       	ldi	r21, 0x00	; 0
    5902:	bc 01       	movw	r22, r24
    5904:	cd 01       	movw	r24, r26
    5906:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	80 93 34 02 	sts	0x0234, r24
    5912:	90 93 35 02 	sts	0x0235, r25
    5916:	a0 93 36 02 	sts	0x0236, r26
    591a:	b0 93 37 02 	sts	0x0237, r27

	if (B7 < 0x80000000) {
    591e:	80 91 34 02 	lds	r24, 0x0234
    5922:	90 91 35 02 	lds	r25, 0x0235
    5926:	a0 91 36 02 	lds	r26, 0x0236
    592a:	b0 91 37 02 	lds	r27, 0x0237
    592e:	bb 23       	and	r27, r27
    5930:	1c f1       	brlt	.+70     	; 0x5978 <BMP180_calculatePressure+0x5f0>
		P = (B7 * 2) / B4;
    5932:	80 91 34 02 	lds	r24, 0x0234
    5936:	90 91 35 02 	lds	r25, 0x0235
    593a:	a0 91 36 02 	lds	r26, 0x0236
    593e:	b0 91 37 02 	lds	r27, 0x0237
    5942:	88 0f       	add	r24, r24
    5944:	99 1f       	adc	r25, r25
    5946:	aa 1f       	adc	r26, r26
    5948:	bb 1f       	adc	r27, r27
    594a:	20 91 30 02 	lds	r18, 0x0230
    594e:	30 91 31 02 	lds	r19, 0x0231
    5952:	40 91 32 02 	lds	r20, 0x0232
    5956:	50 91 33 02 	lds	r21, 0x0233
    595a:	bc 01       	movw	r22, r24
    595c:	cd 01       	movw	r24, r26
    595e:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__udivmodsi4>
    5962:	da 01       	movw	r26, r20
    5964:	c9 01       	movw	r24, r18
    5966:	80 93 28 02 	sts	0x0228, r24
    596a:	90 93 29 02 	sts	0x0229, r25
    596e:	a0 93 2a 02 	sts	0x022A, r26
    5972:	b0 93 2b 02 	sts	0x022B, r27
    5976:	22 c0       	rjmp	.+68     	; 0x59bc <BMP180_calculatePressure+0x634>
	} else {
		P = (B7 / B4) * 2;
    5978:	80 91 34 02 	lds	r24, 0x0234
    597c:	90 91 35 02 	lds	r25, 0x0235
    5980:	a0 91 36 02 	lds	r26, 0x0236
    5984:	b0 91 37 02 	lds	r27, 0x0237
    5988:	20 91 30 02 	lds	r18, 0x0230
    598c:	30 91 31 02 	lds	r19, 0x0231
    5990:	40 91 32 02 	lds	r20, 0x0232
    5994:	50 91 33 02 	lds	r21, 0x0233
    5998:	bc 01       	movw	r22, r24
    599a:	cd 01       	movw	r24, r26
    599c:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__udivmodsi4>
    59a0:	da 01       	movw	r26, r20
    59a2:	c9 01       	movw	r24, r18
    59a4:	88 0f       	add	r24, r24
    59a6:	99 1f       	adc	r25, r25
    59a8:	aa 1f       	adc	r26, r26
    59aa:	bb 1f       	adc	r27, r27
    59ac:	80 93 28 02 	sts	0x0228, r24
    59b0:	90 93 29 02 	sts	0x0229, r25
    59b4:	a0 93 2a 02 	sts	0x022A, r26
    59b8:	b0 93 2b 02 	sts	0x022B, r27
	}
	X1 = (P / (pow(2, 8))) * (P / (pow(2, 8)));
    59bc:	80 91 28 02 	lds	r24, 0x0228
    59c0:	90 91 29 02 	lds	r25, 0x0229
    59c4:	a0 91 2a 02 	lds	r26, 0x022A
    59c8:	b0 91 2b 02 	lds	r27, 0x022B
    59cc:	bc 01       	movw	r22, r24
    59ce:	cd 01       	movw	r24, r26
    59d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    59d4:	dc 01       	movw	r26, r24
    59d6:	cb 01       	movw	r24, r22
    59d8:	bc 01       	movw	r22, r24
    59da:	cd 01       	movw	r24, r26
    59dc:	20 e0       	ldi	r18, 0x00	; 0
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	40 e8       	ldi	r20, 0x80	; 128
    59e2:	53 e4       	ldi	r21, 0x43	; 67
    59e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    59e8:	dc 01       	movw	r26, r24
    59ea:	cb 01       	movw	r24, r22
    59ec:	7c 01       	movw	r14, r24
    59ee:	8d 01       	movw	r16, r26
    59f0:	80 91 28 02 	lds	r24, 0x0228
    59f4:	90 91 29 02 	lds	r25, 0x0229
    59f8:	a0 91 2a 02 	lds	r26, 0x022A
    59fc:	b0 91 2b 02 	lds	r27, 0x022B
    5a00:	bc 01       	movw	r22, r24
    5a02:	cd 01       	movw	r24, r26
    5a04:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5a08:	dc 01       	movw	r26, r24
    5a0a:	cb 01       	movw	r24, r22
    5a0c:	bc 01       	movw	r22, r24
    5a0e:	cd 01       	movw	r24, r26
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	40 e8       	ldi	r20, 0x80	; 128
    5a16:	53 e4       	ldi	r21, 0x43	; 67
    5a18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	cb 01       	movw	r24, r22
    5a20:	9c 01       	movw	r18, r24
    5a22:	ad 01       	movw	r20, r26
    5a24:	c8 01       	movw	r24, r16
    5a26:	b7 01       	movw	r22, r14
    5a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a2c:	dc 01       	movw	r26, r24
    5a2e:	cb 01       	movw	r24, r22
    5a30:	bc 01       	movw	r22, r24
    5a32:	cd 01       	movw	r24, r26
    5a34:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5a38:	dc 01       	movw	r26, r24
    5a3a:	cb 01       	movw	r24, r22
    5a3c:	80 93 0c 02 	sts	0x020C, r24
    5a40:	90 93 0d 02 	sts	0x020D, r25
    5a44:	a0 93 0e 02 	sts	0x020E, r26
    5a48:	b0 93 0f 02 	sts	0x020F, r27
	X1 = (X1 * 3038) / (pow(2, 16));
    5a4c:	80 91 0c 02 	lds	r24, 0x020C
    5a50:	90 91 0d 02 	lds	r25, 0x020D
    5a54:	a0 91 0e 02 	lds	r26, 0x020E
    5a58:	b0 91 0f 02 	lds	r27, 0x020F
    5a5c:	2e ed       	ldi	r18, 0xDE	; 222
    5a5e:	3b e0       	ldi	r19, 0x0B	; 11
    5a60:	40 e0       	ldi	r20, 0x00	; 0
    5a62:	50 e0       	ldi	r21, 0x00	; 0
    5a64:	bc 01       	movw	r22, r24
    5a66:	cd 01       	movw	r24, r26
    5a68:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    5a6c:	dc 01       	movw	r26, r24
    5a6e:	cb 01       	movw	r24, r22
    5a70:	bc 01       	movw	r22, r24
    5a72:	cd 01       	movw	r24, r26
    5a74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5a78:	dc 01       	movw	r26, r24
    5a7a:	cb 01       	movw	r24, r22
    5a7c:	bc 01       	movw	r22, r24
    5a7e:	cd 01       	movw	r24, r26
    5a80:	20 e0       	ldi	r18, 0x00	; 0
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	40 e8       	ldi	r20, 0x80	; 128
    5a86:	57 e4       	ldi	r21, 0x47	; 71
    5a88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a8c:	dc 01       	movw	r26, r24
    5a8e:	cb 01       	movw	r24, r22
    5a90:	bc 01       	movw	r22, r24
    5a92:	cd 01       	movw	r24, r26
    5a94:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5a98:	dc 01       	movw	r26, r24
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	80 93 0c 02 	sts	0x020C, r24
    5aa0:	90 93 0d 02 	sts	0x020D, r25
    5aa4:	a0 93 0e 02 	sts	0x020E, r26
    5aa8:	b0 93 0f 02 	sts	0x020F, r27
	X2 = (-7357 * P) / (pow(2, 16));
    5aac:	80 91 28 02 	lds	r24, 0x0228
    5ab0:	90 91 29 02 	lds	r25, 0x0229
    5ab4:	a0 91 2a 02 	lds	r26, 0x022A
    5ab8:	b0 91 2b 02 	lds	r27, 0x022B
    5abc:	23 e4       	ldi	r18, 0x43	; 67
    5abe:	33 ee       	ldi	r19, 0xE3	; 227
    5ac0:	4f ef       	ldi	r20, 0xFF	; 255
    5ac2:	5f ef       	ldi	r21, 0xFF	; 255
    5ac4:	bc 01       	movw	r22, r24
    5ac6:	cd 01       	movw	r24, r26
    5ac8:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <__mulsi3>
    5acc:	dc 01       	movw	r26, r24
    5ace:	cb 01       	movw	r24, r22
    5ad0:	bc 01       	movw	r22, r24
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	bc 01       	movw	r22, r24
    5ade:	cd 01       	movw	r24, r26
    5ae0:	20 e0       	ldi	r18, 0x00	; 0
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	40 e8       	ldi	r20, 0x80	; 128
    5ae6:	57 e4       	ldi	r21, 0x47	; 71
    5ae8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5aec:	dc 01       	movw	r26, r24
    5aee:	cb 01       	movw	r24, r22
    5af0:	bc 01       	movw	r22, r24
    5af2:	cd 01       	movw	r24, r26
    5af4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5af8:	dc 01       	movw	r26, r24
    5afa:	cb 01       	movw	r24, r22
    5afc:	80 93 10 02 	sts	0x0210, r24
    5b00:	90 93 11 02 	sts	0x0211, r25
    5b04:	a0 93 12 02 	sts	0x0212, r26
    5b08:	b0 93 13 02 	sts	0x0213, r27
	P = P + (X1 + X2 + 3791) / (pow(2, 4));
    5b0c:	80 91 28 02 	lds	r24, 0x0228
    5b10:	90 91 29 02 	lds	r25, 0x0229
    5b14:	a0 91 2a 02 	lds	r26, 0x022A
    5b18:	b0 91 2b 02 	lds	r27, 0x022B
    5b1c:	bc 01       	movw	r22, r24
    5b1e:	cd 01       	movw	r24, r26
    5b20:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5b24:	7b 01       	movw	r14, r22
    5b26:	8c 01       	movw	r16, r24
    5b28:	20 91 0c 02 	lds	r18, 0x020C
    5b2c:	30 91 0d 02 	lds	r19, 0x020D
    5b30:	40 91 0e 02 	lds	r20, 0x020E
    5b34:	50 91 0f 02 	lds	r21, 0x020F
    5b38:	80 91 10 02 	lds	r24, 0x0210
    5b3c:	90 91 11 02 	lds	r25, 0x0211
    5b40:	a0 91 12 02 	lds	r26, 0x0212
    5b44:	b0 91 13 02 	lds	r27, 0x0213
    5b48:	82 0f       	add	r24, r18
    5b4a:	93 1f       	adc	r25, r19
    5b4c:	a4 1f       	adc	r26, r20
    5b4e:	b5 1f       	adc	r27, r21
    5b50:	81 53       	subi	r24, 0x31	; 49
    5b52:	91 4f       	sbci	r25, 0xF1	; 241
    5b54:	af 4f       	sbci	r26, 0xFF	; 255
    5b56:	bf 4f       	sbci	r27, 0xFF	; 255
    5b58:	bc 01       	movw	r22, r24
    5b5a:	cd 01       	movw	r24, r26
    5b5c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5b60:	dc 01       	movw	r26, r24
    5b62:	cb 01       	movw	r24, r22
    5b64:	bc 01       	movw	r22, r24
    5b66:	cd 01       	movw	r24, r26
    5b68:	20 e0       	ldi	r18, 0x00	; 0
    5b6a:	30 e0       	ldi	r19, 0x00	; 0
    5b6c:	40 e8       	ldi	r20, 0x80	; 128
    5b6e:	51 e4       	ldi	r21, 0x41	; 65
    5b70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5b74:	dc 01       	movw	r26, r24
    5b76:	cb 01       	movw	r24, r22
    5b78:	9c 01       	movw	r18, r24
    5b7a:	ad 01       	movw	r20, r26
    5b7c:	c8 01       	movw	r24, r16
    5b7e:	b7 01       	movw	r22, r14
    5b80:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	bc 01       	movw	r22, r24
    5b8a:	cd 01       	movw	r24, r26
    5b8c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5b90:	dc 01       	movw	r26, r24
    5b92:	cb 01       	movw	r24, r22
    5b94:	80 93 28 02 	sts	0x0228, r24
    5b98:	90 93 29 02 	sts	0x0229, r25
    5b9c:	a0 93 2a 02 	sts	0x022A, r26
    5ba0:	b0 93 2b 02 	sts	0x022B, r27

	P = P / 100;
    5ba4:	80 91 28 02 	lds	r24, 0x0228
    5ba8:	90 91 29 02 	lds	r25, 0x0229
    5bac:	a0 91 2a 02 	lds	r26, 0x022A
    5bb0:	b0 91 2b 02 	lds	r27, 0x022B
    5bb4:	24 e6       	ldi	r18, 0x64	; 100
    5bb6:	30 e0       	ldi	r19, 0x00	; 0
    5bb8:	40 e0       	ldi	r20, 0x00	; 0
    5bba:	50 e0       	ldi	r21, 0x00	; 0
    5bbc:	bc 01       	movw	r22, r24
    5bbe:	cd 01       	movw	r24, r26
    5bc0:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <__divmodsi4>
    5bc4:	da 01       	movw	r26, r20
    5bc6:	c9 01       	movw	r24, r18
    5bc8:	80 93 28 02 	sts	0x0228, r24
    5bcc:	90 93 29 02 	sts	0x0229, r25
    5bd0:	a0 93 2a 02 	sts	0x022A, r26
    5bd4:	b0 93 2b 02 	sts	0x022B, r27

	return P;
    5bd8:	80 91 28 02 	lds	r24, 0x0228
    5bdc:	90 91 29 02 	lds	r25, 0x0229
    5be0:	a0 91 2a 02 	lds	r26, 0x022A
    5be4:	b0 91 2b 02 	lds	r27, 0x022B
}
    5be8:	bc 01       	movw	r22, r24
    5bea:	cd 01       	movw	r24, r26
    5bec:	cf 91       	pop	r28
    5bee:	df 91       	pop	r29
    5bf0:	1f 91       	pop	r17
    5bf2:	0f 91       	pop	r16
    5bf4:	ff 90       	pop	r15
    5bf6:	ef 90       	pop	r14
    5bf8:	08 95       	ret

00005bfa <BMP180_Start>:

void BMP180_Start(void) {
    5bfa:	df 93       	push	r29
    5bfc:	cf 93       	push	r28
    5bfe:	cd b7       	in	r28, 0x3d	; 61
    5c00:	de b7       	in	r29, 0x3e	; 62
	BMP180_ReadCalb();
    5c02:	0e 94 9d 20 	call	0x413a	; 0x413a <BMP180_ReadCalb>
}
    5c06:	cf 91       	pop	r28
    5c08:	df 91       	pop	r29
    5c0a:	08 95       	ret

00005c0c <delay>:

void delay(void){
    5c0c:	df 93       	push	r29
    5c0e:	cf 93       	push	r28
    5c10:	cd b7       	in	r28, 0x3d	; 61
    5c12:	de b7       	in	r29, 0x3e	; 62
    5c14:	68 97       	sbiw	r28, 0x18	; 24
    5c16:	0f b6       	in	r0, 0x3f	; 63
    5c18:	f8 94       	cli
    5c1a:	de bf       	out	0x3e, r29	; 62
    5c1c:	0f be       	out	0x3f, r0	; 63
    5c1e:	cd bf       	out	0x3d, r28	; 61
    5c20:	80 e0       	ldi	r24, 0x00	; 0
    5c22:	90 e0       	ldi	r25, 0x00	; 0
    5c24:	a0 e2       	ldi	r26, 0x20	; 32
    5c26:	b1 e4       	ldi	r27, 0x41	; 65
    5c28:	8d 8b       	std	Y+21, r24	; 0x15
    5c2a:	9e 8b       	std	Y+22, r25	; 0x16
    5c2c:	af 8b       	std	Y+23, r26	; 0x17
    5c2e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5c30:	6d 89       	ldd	r22, Y+21	; 0x15
    5c32:	7e 89       	ldd	r23, Y+22	; 0x16
    5c34:	8f 89       	ldd	r24, Y+23	; 0x17
    5c36:	98 8d       	ldd	r25, Y+24	; 0x18
    5c38:	2b ea       	ldi	r18, 0xAB	; 171
    5c3a:	3a ea       	ldi	r19, 0xAA	; 170
    5c3c:	4a ea       	ldi	r20, 0xAA	; 170
    5c3e:	50 e4       	ldi	r21, 0x40	; 64
    5c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c44:	dc 01       	movw	r26, r24
    5c46:	cb 01       	movw	r24, r22
    5c48:	89 8b       	std	Y+17, r24	; 0x11
    5c4a:	9a 8b       	std	Y+18, r25	; 0x12
    5c4c:	ab 8b       	std	Y+19, r26	; 0x13
    5c4e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5c50:	69 89       	ldd	r22, Y+17	; 0x11
    5c52:	7a 89       	ldd	r23, Y+18	; 0x12
    5c54:	8b 89       	ldd	r24, Y+19	; 0x13
    5c56:	9c 89       	ldd	r25, Y+20	; 0x14
    5c58:	20 e0       	ldi	r18, 0x00	; 0
    5c5a:	30 e0       	ldi	r19, 0x00	; 0
    5c5c:	40 e8       	ldi	r20, 0x80	; 128
    5c5e:	5f e3       	ldi	r21, 0x3F	; 63
    5c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c64:	88 23       	and	r24, r24
    5c66:	1c f4       	brge	.+6      	; 0x5c6e <delay+0x62>
		__ticks = 1;
    5c68:	81 e0       	ldi	r24, 0x01	; 1
    5c6a:	88 8b       	std	Y+16, r24	; 0x10
    5c6c:	91 c0       	rjmp	.+290    	; 0x5d90 <delay+0x184>
	else if (__tmp > 255)
    5c6e:	69 89       	ldd	r22, Y+17	; 0x11
    5c70:	7a 89       	ldd	r23, Y+18	; 0x12
    5c72:	8b 89       	ldd	r24, Y+19	; 0x13
    5c74:	9c 89       	ldd	r25, Y+20	; 0x14
    5c76:	20 e0       	ldi	r18, 0x00	; 0
    5c78:	30 e0       	ldi	r19, 0x00	; 0
    5c7a:	4f e7       	ldi	r20, 0x7F	; 127
    5c7c:	53 e4       	ldi	r21, 0x43	; 67
    5c7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c82:	18 16       	cp	r1, r24
    5c84:	0c f0       	brlt	.+2      	; 0x5c88 <delay+0x7c>
    5c86:	7b c0       	rjmp	.+246    	; 0x5d7e <delay+0x172>
	{
		_delay_ms(__us / 1000.0);
    5c88:	6d 89       	ldd	r22, Y+21	; 0x15
    5c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    5c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    5c90:	20 e0       	ldi	r18, 0x00	; 0
    5c92:	30 e0       	ldi	r19, 0x00	; 0
    5c94:	4a e7       	ldi	r20, 0x7A	; 122
    5c96:	54 e4       	ldi	r21, 0x44	; 68
    5c98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	cb 01       	movw	r24, r22
    5ca0:	8c 87       	std	Y+12, r24	; 0x0c
    5ca2:	9d 87       	std	Y+13, r25	; 0x0d
    5ca4:	ae 87       	std	Y+14, r26	; 0x0e
    5ca6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ca8:	6c 85       	ldd	r22, Y+12	; 0x0c
    5caa:	7d 85       	ldd	r23, Y+13	; 0x0d
    5cac:	8e 85       	ldd	r24, Y+14	; 0x0e
    5cae:	9f 85       	ldd	r25, Y+15	; 0x0f
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
    5cb2:	30 e0       	ldi	r19, 0x00	; 0
    5cb4:	4a e7       	ldi	r20, 0x7A	; 122
    5cb6:	55 e4       	ldi	r21, 0x45	; 69
    5cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cbc:	dc 01       	movw	r26, r24
    5cbe:	cb 01       	movw	r24, r22
    5cc0:	88 87       	std	Y+8, r24	; 0x08
    5cc2:	99 87       	std	Y+9, r25	; 0x09
    5cc4:	aa 87       	std	Y+10, r26	; 0x0a
    5cc6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5cc8:	68 85       	ldd	r22, Y+8	; 0x08
    5cca:	79 85       	ldd	r23, Y+9	; 0x09
    5ccc:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cce:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cd0:	20 e0       	ldi	r18, 0x00	; 0
    5cd2:	30 e0       	ldi	r19, 0x00	; 0
    5cd4:	40 e8       	ldi	r20, 0x80	; 128
    5cd6:	5f e3       	ldi	r21, 0x3F	; 63
    5cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cdc:	88 23       	and	r24, r24
    5cde:	2c f4       	brge	.+10     	; 0x5cea <delay+0xde>
		__ticks = 1;
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	9f 83       	std	Y+7, r25	; 0x07
    5ce6:	8e 83       	std	Y+6, r24	; 0x06
    5ce8:	3f c0       	rjmp	.+126    	; 0x5d68 <delay+0x15c>
	else if (__tmp > 65535)
    5cea:	68 85       	ldd	r22, Y+8	; 0x08
    5cec:	79 85       	ldd	r23, Y+9	; 0x09
    5cee:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cf0:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cf2:	20 e0       	ldi	r18, 0x00	; 0
    5cf4:	3f ef       	ldi	r19, 0xFF	; 255
    5cf6:	4f e7       	ldi	r20, 0x7F	; 127
    5cf8:	57 e4       	ldi	r21, 0x47	; 71
    5cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cfe:	18 16       	cp	r1, r24
    5d00:	4c f5       	brge	.+82     	; 0x5d54 <delay+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d02:	6c 85       	ldd	r22, Y+12	; 0x0c
    5d04:	7d 85       	ldd	r23, Y+13	; 0x0d
    5d06:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d08:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d0a:	20 e0       	ldi	r18, 0x00	; 0
    5d0c:	30 e0       	ldi	r19, 0x00	; 0
    5d0e:	40 e2       	ldi	r20, 0x20	; 32
    5d10:	51 e4       	ldi	r21, 0x41	; 65
    5d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d16:	dc 01       	movw	r26, r24
    5d18:	cb 01       	movw	r24, r22
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d22:	dc 01       	movw	r26, r24
    5d24:	cb 01       	movw	r24, r22
    5d26:	9f 83       	std	Y+7, r25	; 0x07
    5d28:	8e 83       	std	Y+6, r24	; 0x06
    5d2a:	0f c0       	rjmp	.+30     	; 0x5d4a <delay+0x13e>
    5d2c:	80 e9       	ldi	r24, 0x90	; 144
    5d2e:	91 e0       	ldi	r25, 0x01	; 1
    5d30:	9d 83       	std	Y+5, r25	; 0x05
    5d32:	8c 83       	std	Y+4, r24	; 0x04
    5d34:	8c 81       	ldd	r24, Y+4	; 0x04
    5d36:	9d 81       	ldd	r25, Y+5	; 0x05
    5d38:	01 97       	sbiw	r24, 0x01	; 1
    5d3a:	f1 f7       	brne	.-4      	; 0x5d38 <delay+0x12c>
    5d3c:	9d 83       	std	Y+5, r25	; 0x05
    5d3e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d40:	8e 81       	ldd	r24, Y+6	; 0x06
    5d42:	9f 81       	ldd	r25, Y+7	; 0x07
    5d44:	01 97       	sbiw	r24, 0x01	; 1
    5d46:	9f 83       	std	Y+7, r25	; 0x07
    5d48:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    5d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    5d4e:	00 97       	sbiw	r24, 0x00	; 0
    5d50:	69 f7       	brne	.-38     	; 0x5d2c <delay+0x120>
    5d52:	24 c0       	rjmp	.+72     	; 0x5d9c <delay+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d54:	68 85       	ldd	r22, Y+8	; 0x08
    5d56:	79 85       	ldd	r23, Y+9	; 0x09
    5d58:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d60:	dc 01       	movw	r26, r24
    5d62:	cb 01       	movw	r24, r22
    5d64:	9f 83       	std	Y+7, r25	; 0x07
    5d66:	8e 83       	std	Y+6, r24	; 0x06
    5d68:	8e 81       	ldd	r24, Y+6	; 0x06
    5d6a:	9f 81       	ldd	r25, Y+7	; 0x07
    5d6c:	9b 83       	std	Y+3, r25	; 0x03
    5d6e:	8a 83       	std	Y+2, r24	; 0x02
    5d70:	8a 81       	ldd	r24, Y+2	; 0x02
    5d72:	9b 81       	ldd	r25, Y+3	; 0x03
    5d74:	01 97       	sbiw	r24, 0x01	; 1
    5d76:	f1 f7       	brne	.-4      	; 0x5d74 <delay+0x168>
    5d78:	9b 83       	std	Y+3, r25	; 0x03
    5d7a:	8a 83       	std	Y+2, r24	; 0x02
    5d7c:	0f c0       	rjmp	.+30     	; 0x5d9c <delay+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5d7e:	69 89       	ldd	r22, Y+17	; 0x11
    5d80:	7a 89       	ldd	r23, Y+18	; 0x12
    5d82:	8b 89       	ldd	r24, Y+19	; 0x13
    5d84:	9c 89       	ldd	r25, Y+20	; 0x14
    5d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d8a:	dc 01       	movw	r26, r24
    5d8c:	cb 01       	movw	r24, r22
    5d8e:	88 8b       	std	Y+16, r24	; 0x10
    5d90:	88 89       	ldd	r24, Y+16	; 0x10
    5d92:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5d94:	89 81       	ldd	r24, Y+1	; 0x01
    5d96:	8a 95       	dec	r24
    5d98:	f1 f7       	brne	.-4      	; 0x5d96 <delay+0x18a>
    5d9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    5d9c:	68 96       	adiw	r28, 0x18	; 24
    5d9e:	0f b6       	in	r0, 0x3f	; 63
    5da0:	f8 94       	cli
    5da2:	de bf       	out	0x3e, r29	; 62
    5da4:	0f be       	out	0x3f, r0	; 63
    5da6:	cd bf       	out	0x3d, r28	; 61
    5da8:	cf 91       	pop	r28
    5daa:	df 91       	pop	r29
    5dac:	08 95       	ret

00005dae <__mulsi3>:
    5dae:	62 9f       	mul	r22, r18
    5db0:	d0 01       	movw	r26, r0
    5db2:	73 9f       	mul	r23, r19
    5db4:	f0 01       	movw	r30, r0
    5db6:	82 9f       	mul	r24, r18
    5db8:	e0 0d       	add	r30, r0
    5dba:	f1 1d       	adc	r31, r1
    5dbc:	64 9f       	mul	r22, r20
    5dbe:	e0 0d       	add	r30, r0
    5dc0:	f1 1d       	adc	r31, r1
    5dc2:	92 9f       	mul	r25, r18
    5dc4:	f0 0d       	add	r31, r0
    5dc6:	83 9f       	mul	r24, r19
    5dc8:	f0 0d       	add	r31, r0
    5dca:	74 9f       	mul	r23, r20
    5dcc:	f0 0d       	add	r31, r0
    5dce:	65 9f       	mul	r22, r21
    5dd0:	f0 0d       	add	r31, r0
    5dd2:	99 27       	eor	r25, r25
    5dd4:	72 9f       	mul	r23, r18
    5dd6:	b0 0d       	add	r27, r0
    5dd8:	e1 1d       	adc	r30, r1
    5dda:	f9 1f       	adc	r31, r25
    5ddc:	63 9f       	mul	r22, r19
    5dde:	b0 0d       	add	r27, r0
    5de0:	e1 1d       	adc	r30, r1
    5de2:	f9 1f       	adc	r31, r25
    5de4:	bd 01       	movw	r22, r26
    5de6:	cf 01       	movw	r24, r30
    5de8:	11 24       	eor	r1, r1
    5dea:	08 95       	ret

00005dec <__udivmodsi4>:
    5dec:	a1 e2       	ldi	r26, 0x21	; 33
    5dee:	1a 2e       	mov	r1, r26
    5df0:	aa 1b       	sub	r26, r26
    5df2:	bb 1b       	sub	r27, r27
    5df4:	fd 01       	movw	r30, r26
    5df6:	0d c0       	rjmp	.+26     	; 0x5e12 <__udivmodsi4_ep>

00005df8 <__udivmodsi4_loop>:
    5df8:	aa 1f       	adc	r26, r26
    5dfa:	bb 1f       	adc	r27, r27
    5dfc:	ee 1f       	adc	r30, r30
    5dfe:	ff 1f       	adc	r31, r31
    5e00:	a2 17       	cp	r26, r18
    5e02:	b3 07       	cpc	r27, r19
    5e04:	e4 07       	cpc	r30, r20
    5e06:	f5 07       	cpc	r31, r21
    5e08:	20 f0       	brcs	.+8      	; 0x5e12 <__udivmodsi4_ep>
    5e0a:	a2 1b       	sub	r26, r18
    5e0c:	b3 0b       	sbc	r27, r19
    5e0e:	e4 0b       	sbc	r30, r20
    5e10:	f5 0b       	sbc	r31, r21

00005e12 <__udivmodsi4_ep>:
    5e12:	66 1f       	adc	r22, r22
    5e14:	77 1f       	adc	r23, r23
    5e16:	88 1f       	adc	r24, r24
    5e18:	99 1f       	adc	r25, r25
    5e1a:	1a 94       	dec	r1
    5e1c:	69 f7       	brne	.-38     	; 0x5df8 <__udivmodsi4_loop>
    5e1e:	60 95       	com	r22
    5e20:	70 95       	com	r23
    5e22:	80 95       	com	r24
    5e24:	90 95       	com	r25
    5e26:	9b 01       	movw	r18, r22
    5e28:	ac 01       	movw	r20, r24
    5e2a:	bd 01       	movw	r22, r26
    5e2c:	cf 01       	movw	r24, r30
    5e2e:	08 95       	ret

00005e30 <__divmodsi4>:
    5e30:	97 fb       	bst	r25, 7
    5e32:	09 2e       	mov	r0, r25
    5e34:	05 26       	eor	r0, r21
    5e36:	0e d0       	rcall	.+28     	; 0x5e54 <__divmodsi4_neg1>
    5e38:	57 fd       	sbrc	r21, 7
    5e3a:	04 d0       	rcall	.+8      	; 0x5e44 <__divmodsi4_neg2>
    5e3c:	d7 df       	rcall	.-82     	; 0x5dec <__udivmodsi4>
    5e3e:	0a d0       	rcall	.+20     	; 0x5e54 <__divmodsi4_neg1>
    5e40:	00 1c       	adc	r0, r0
    5e42:	38 f4       	brcc	.+14     	; 0x5e52 <__divmodsi4_exit>

00005e44 <__divmodsi4_neg2>:
    5e44:	50 95       	com	r21
    5e46:	40 95       	com	r20
    5e48:	30 95       	com	r19
    5e4a:	21 95       	neg	r18
    5e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e4e:	4f 4f       	sbci	r20, 0xFF	; 255
    5e50:	5f 4f       	sbci	r21, 0xFF	; 255

00005e52 <__divmodsi4_exit>:
    5e52:	08 95       	ret

00005e54 <__divmodsi4_neg1>:
    5e54:	f6 f7       	brtc	.-4      	; 0x5e52 <__divmodsi4_exit>
    5e56:	90 95       	com	r25
    5e58:	80 95       	com	r24
    5e5a:	70 95       	com	r23
    5e5c:	61 95       	neg	r22
    5e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e60:	8f 4f       	sbci	r24, 0xFF	; 255
    5e62:	9f 4f       	sbci	r25, 0xFF	; 255
    5e64:	08 95       	ret

00005e66 <__prologue_saves__>:
    5e66:	2f 92       	push	r2
    5e68:	3f 92       	push	r3
    5e6a:	4f 92       	push	r4
    5e6c:	5f 92       	push	r5
    5e6e:	6f 92       	push	r6
    5e70:	7f 92       	push	r7
    5e72:	8f 92       	push	r8
    5e74:	9f 92       	push	r9
    5e76:	af 92       	push	r10
    5e78:	bf 92       	push	r11
    5e7a:	cf 92       	push	r12
    5e7c:	df 92       	push	r13
    5e7e:	ef 92       	push	r14
    5e80:	ff 92       	push	r15
    5e82:	0f 93       	push	r16
    5e84:	1f 93       	push	r17
    5e86:	cf 93       	push	r28
    5e88:	df 93       	push	r29
    5e8a:	cd b7       	in	r28, 0x3d	; 61
    5e8c:	de b7       	in	r29, 0x3e	; 62
    5e8e:	ca 1b       	sub	r28, r26
    5e90:	db 0b       	sbc	r29, r27
    5e92:	0f b6       	in	r0, 0x3f	; 63
    5e94:	f8 94       	cli
    5e96:	de bf       	out	0x3e, r29	; 62
    5e98:	0f be       	out	0x3f, r0	; 63
    5e9a:	cd bf       	out	0x3d, r28	; 61
    5e9c:	09 94       	ijmp

00005e9e <__epilogue_restores__>:
    5e9e:	2a 88       	ldd	r2, Y+18	; 0x12
    5ea0:	39 88       	ldd	r3, Y+17	; 0x11
    5ea2:	48 88       	ldd	r4, Y+16	; 0x10
    5ea4:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ea6:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ea8:	7d 84       	ldd	r7, Y+13	; 0x0d
    5eaa:	8c 84       	ldd	r8, Y+12	; 0x0c
    5eac:	9b 84       	ldd	r9, Y+11	; 0x0b
    5eae:	aa 84       	ldd	r10, Y+10	; 0x0a
    5eb0:	b9 84       	ldd	r11, Y+9	; 0x09
    5eb2:	c8 84       	ldd	r12, Y+8	; 0x08
    5eb4:	df 80       	ldd	r13, Y+7	; 0x07
    5eb6:	ee 80       	ldd	r14, Y+6	; 0x06
    5eb8:	fd 80       	ldd	r15, Y+5	; 0x05
    5eba:	0c 81       	ldd	r16, Y+4	; 0x04
    5ebc:	1b 81       	ldd	r17, Y+3	; 0x03
    5ebe:	aa 81       	ldd	r26, Y+2	; 0x02
    5ec0:	b9 81       	ldd	r27, Y+1	; 0x01
    5ec2:	ce 0f       	add	r28, r30
    5ec4:	d1 1d       	adc	r29, r1
    5ec6:	0f b6       	in	r0, 0x3f	; 63
    5ec8:	f8 94       	cli
    5eca:	de bf       	out	0x3e, r29	; 62
    5ecc:	0f be       	out	0x3f, r0	; 63
    5ece:	cd bf       	out	0x3d, r28	; 61
    5ed0:	ed 01       	movw	r28, r26
    5ed2:	08 95       	ret

00005ed4 <itoa>:
    5ed4:	fb 01       	movw	r30, r22
    5ed6:	9f 01       	movw	r18, r30
    5ed8:	e8 94       	clt
    5eda:	42 30       	cpi	r20, 0x02	; 2
    5edc:	c4 f0       	brlt	.+48     	; 0x5f0e <itoa+0x3a>
    5ede:	45 32       	cpi	r20, 0x25	; 37
    5ee0:	b4 f4       	brge	.+44     	; 0x5f0e <itoa+0x3a>
    5ee2:	4a 30       	cpi	r20, 0x0A	; 10
    5ee4:	29 f4       	brne	.+10     	; 0x5ef0 <itoa+0x1c>
    5ee6:	97 fb       	bst	r25, 7
    5ee8:	1e f4       	brtc	.+6      	; 0x5ef0 <itoa+0x1c>
    5eea:	90 95       	com	r25
    5eec:	81 95       	neg	r24
    5eee:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef0:	64 2f       	mov	r22, r20
    5ef2:	77 27       	eor	r23, r23
    5ef4:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__udivmodhi4>
    5ef8:	80 5d       	subi	r24, 0xD0	; 208
    5efa:	8a 33       	cpi	r24, 0x3A	; 58
    5efc:	0c f0       	brlt	.+2      	; 0x5f00 <itoa+0x2c>
    5efe:	89 5d       	subi	r24, 0xD9	; 217
    5f00:	81 93       	st	Z+, r24
    5f02:	cb 01       	movw	r24, r22
    5f04:	00 97       	sbiw	r24, 0x00	; 0
    5f06:	a1 f7       	brne	.-24     	; 0x5ef0 <itoa+0x1c>
    5f08:	16 f4       	brtc	.+4      	; 0x5f0e <itoa+0x3a>
    5f0a:	5d e2       	ldi	r21, 0x2D	; 45
    5f0c:	51 93       	st	Z+, r21
    5f0e:	10 82       	st	Z, r1
    5f10:	c9 01       	movw	r24, r18
    5f12:	0c 94 8b 2f 	jmp	0x5f16	; 0x5f16 <strrev>

00005f16 <strrev>:
    5f16:	dc 01       	movw	r26, r24
    5f18:	fc 01       	movw	r30, r24
    5f1a:	67 2f       	mov	r22, r23
    5f1c:	71 91       	ld	r23, Z+
    5f1e:	77 23       	and	r23, r23
    5f20:	e1 f7       	brne	.-8      	; 0x5f1a <strrev+0x4>
    5f22:	32 97       	sbiw	r30, 0x02	; 2
    5f24:	04 c0       	rjmp	.+8      	; 0x5f2e <strrev+0x18>
    5f26:	7c 91       	ld	r23, X
    5f28:	6d 93       	st	X+, r22
    5f2a:	70 83       	st	Z, r23
    5f2c:	62 91       	ld	r22, -Z
    5f2e:	ae 17       	cp	r26, r30
    5f30:	bf 07       	cpc	r27, r31
    5f32:	c8 f3       	brcs	.-14     	; 0x5f26 <strrev+0x10>
    5f34:	08 95       	ret

00005f36 <__udivmodhi4>:
    5f36:	aa 1b       	sub	r26, r26
    5f38:	bb 1b       	sub	r27, r27
    5f3a:	51 e1       	ldi	r21, 0x11	; 17
    5f3c:	07 c0       	rjmp	.+14     	; 0x5f4c <__udivmodhi4_ep>

00005f3e <__udivmodhi4_loop>:
    5f3e:	aa 1f       	adc	r26, r26
    5f40:	bb 1f       	adc	r27, r27
    5f42:	a6 17       	cp	r26, r22
    5f44:	b7 07       	cpc	r27, r23
    5f46:	10 f0       	brcs	.+4      	; 0x5f4c <__udivmodhi4_ep>
    5f48:	a6 1b       	sub	r26, r22
    5f4a:	b7 0b       	sbc	r27, r23

00005f4c <__udivmodhi4_ep>:
    5f4c:	88 1f       	adc	r24, r24
    5f4e:	99 1f       	adc	r25, r25
    5f50:	5a 95       	dec	r21
    5f52:	a9 f7       	brne	.-22     	; 0x5f3e <__udivmodhi4_loop>
    5f54:	80 95       	com	r24
    5f56:	90 95       	com	r25
    5f58:	bc 01       	movw	r22, r24
    5f5a:	cd 01       	movw	r24, r26
    5f5c:	08 95       	ret

00005f5e <_exit>:
    5f5e:	f8 94       	cli

00005f60 <__stop_program>:
    5f60:	ff cf       	rjmp	.-2      	; 0x5f60 <__stop_program>
