
Node_Integration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00004ad0  00004b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800172  00800172  00004c76  2**0
                  ALLOC
  3 .stab         00004b3c  00000000  00000000  00004c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020ce  00000000  00000000  000097b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000b882  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000ba42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000bc56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000e268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000f736  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00010a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00010c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00010f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011945  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_4>
      14:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_5>
      18:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_6>
      1c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_9>
      28:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_10>
      2c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 12 	call	0x2446	; 0x2446 <main>
      8a:	0c 94 66 25 	jmp	0x4acc	; 0x4acc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2f 25 	jmp	0x4a5e	; 0x4a5e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2f 25 	jmp	0x4a5e	; 0x4a5e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 53 25 	jmp	0x4aa6	; 0x4aa6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 38 25 	jmp	0x4a70	; 0x4a70 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 54 25 	jmp	0x4aa8	; 0x4aa8 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 53 25 	jmp	0x4aa6	; 0x4aa6 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TWI_init>:
 * 																		*
 * [Args]							*
 * [Return]															*
 *======================================================================*/

void TWI_init(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate Configuration */
#if BIT_RATE >= MINIMUM_BIT_RATE
	TWBR = BIT_RATE;
     ef2:	e0 e2       	ldi	r30, 0x20	; 32
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	88 e4       	ldi	r24, 0x48	; 72
     ef8:	80 83       	st	Z, r24
#else
#error "Invalid I2C bit rate configuration. Minimum bit rate allowed is 10."
#endif
	/* Prescaler Configuration */
#if PRESCALER_1 == PRESCALER
	CLEAR_BIT(TWSR, TWPS1);
     efa:	a1 e2       	ldi	r26, 0x21	; 33
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e2       	ldi	r30, 0x21	; 33
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWPS0);
     f08:	a1 e2       	ldi	r26, 0x21	; 33
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e1 e2       	ldi	r30, 0x21	; 33
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8c 93       	st	X, r24
#else
#error "Invalid I2C prescaler configuration"
#endif
	/* Slave Address Configuration */
#if SLAVE_ADDRESS >= MINIMUM_ADDRESS && SLAVE_ADDRESS <= MAXIMUM_ADDRESS
	TWAR = (SLAVE_ADDRESS << 1);
     f16:	e2 e2       	ldi	r30, 0x22	; 34
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	80 83       	st	Z, r24
#error "Invalid I2C slave address configuration (out of range)."
#endif
#if ENABLE_GENERAL_CALL == GENERAL_CALL
	SET_BIT(TWAR, TWGCE);
#elif DISABLE_GENERAL_CALL == GENERAL_CALL
	CLEAR_BIT(TWAR, TWGCE);
     f1e:	a2 e2       	ldi	r26, 0x22	; 34
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e2       	ldi	r30, 0x22	; 34
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
#else
#error "Invalid general call configuration"
#endif
	/* Enable I2C Peripheral */
	SET_BIT(TWCR, TWEN);
     f2c:	a6 e5       	ldi	r26, 0x56	; 86
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	8c 93       	st	X, r24
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <TWI_Start>:
 * 																		*
 * [Args]		uint8 slave_write_adress						*
 * [Return]															*
 *======================================================================*/

uint8 TWI_Start(uint8 slave_write_adress) {
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <TWI_Start+0x6>
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	84 ea       	ldi	r24, 0xA4	; 164
     f54:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <TWI_Start+0x16>
		;
	status = TWI_getStatus();
     f60:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f64:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	11 f0       	breq	.+4      	; 0xf70 <TWI_Start+0x30>
		return 0;
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <TWI_Start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     f70:	e3 e2       	ldi	r30, 0x23	; 35
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     f78:	e6 e5       	ldi	r30, 0x56	; 86
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	84 e8       	ldi	r24, 0x84	; 132
     f7e:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f80:	e6 e5       	ldi	r30, 0x56	; 86
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	dc f7       	brge	.-10     	; 0xf80 <TWI_Start+0x40>
		;
	status = TWI_getStatus();
     f8a:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f8e:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 31       	cpi	r24, 0x18	; 24
     f94:	19 f4       	brne	.+6      	; 0xf9c <TWI_Start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <TWI_Start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 32       	cpi	r24, 0x20	; 32
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <TWI_Start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <TWI_Start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TWI_Repeated_start>:
 * [Description]:	Function responsible for re-start the TWI communication.*
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
uint8 TWI_Repeated_start(uint8 slave_write_adress) {
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <TWI_Repeated_start+0x6>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	84 ea       	ldi	r24, 0xA4	; 164
     fce:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <TWI_Repeated_start+0x16>
		;
	status = TWI_getStatus();
     fda:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     fde:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_REP_START) /* Check weather start condition transmitted successfully or not? */
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	11 f0       	breq	.+4      	; 0xfea <TWI_Repeated_start+0x30>
		return 0;
     fe6:	1b 82       	std	Y+3, r1	; 0x03
     fe8:	1e c0       	rjmp	.+60     	; 0x1026 <TWI_Repeated_start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     fea:	e3 e2       	ldi	r30, 0x23	; 35
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     ffa:	e6 e5       	ldi	r30, 0x56	; 86
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 23       	and	r24, r24
    1002:	dc f7       	brge	.-10     	; 0xffa <TWI_Repeated_start+0x40>
		;
	status = TWI_getStatus();
    1004:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
    1008:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_R_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	19 f4       	brne	.+6      	; 0x1016 <TWI_Repeated_start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <TWI_Repeated_start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 32       	cpi	r24, 0x20	; 32
    101a:	19 f4       	brne	.+6      	; 0x1022 <TWI_Repeated_start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <TWI_Repeated_start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_Start_Wait>:
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <TWI_Start_Wait+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	84 ea       	ldi	r24, 0xA4	; 164
    1046:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	dc f7       	brge	.-10     	; 0x1048 <TWI_Start_Wait+0x14>
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    1052:	e1 e2       	ldi	r30, 0x21	; 33
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	79 f7       	brne	.-34     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* If no then continue with start loop again */
		TWDR = slave_write_address; /* If yes then write SLA+W in TWI data register */
    1062:	e3 e2       	ldi	r30, 0x23	; 35
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	80 83       	st	Z, r24
		TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	84 e8       	ldi	r24, 0x84	; 132
    1070:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1072:	e6 e5       	ldi	r30, 0x56	; 86
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 23       	and	r24, r24
    107a:	dc f7       	brge	.-10     	; 0x1072 <TWI_Start_Wait+0x3e>
			; /* Wait until TWI finish its current job (Write operation) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    107c:	e1 e2       	ldi	r30, 0x21	; 33
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	88 31       	cpi	r24, 0x18	; 24
    108a:	19 f0       	breq	.+6      	; 0x1092 <TWI_Start_Wait+0x5e>
		{
			TWI_Stop(); /* If not then generate stop condition */
    108c:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    1090:	d7 cf       	rjmp	.-82     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* continue with start loop again */
		}
		break; /* If yes then break loop */
	}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <TWI_Stop>:
 * [Description]:	Function responsible for stop the TWI communication *
 * 																*
 * [Args]		void											*
 * [Return]			void										*
 *======================================================================*/
void TWI_Stop(void) {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	84 e9       	ldi	r24, 0x94	; 148
    10aa:	80 83       	st	Z, r24
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TWI_WriteByte>:
 * [Description]:	Function responsible for sending 1 byte *
 * 																*
 * [Args]		uint8 data											*
 * [Return]			void										*
 *======================================================================*/
void TWI_WriteByte(uint8 data) {
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    10be:	e3 e2       	ldi	r30, 0x23	; 35
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    10c6:	e6 e5       	ldi	r30, 0x56	; 86
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	84 e8       	ldi	r24, 0x84	; 132
    10cc:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10ce:	e6 e5       	ldi	r30, 0x56	; 86
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 23       	and	r24, r24
    10d6:	dc f7       	brge	.-10     	; 0x10ce <TWI_WriteByte+0x1c>
		;
}
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TWI_ReadByteWithACK>:
 * [Description]:	Function responsible for reading 1 byte with ack *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithACK(void) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    10e8:	e6 e5       	ldi	r30, 0x56	; 86
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	84 ec       	ldi	r24, 0xC4	; 196
    10ee:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	dc f7       	brge	.-10     	; 0x10f0 <TWI_ReadByteWithACK+0x10>
		;
	/* Read Data */
	return TWDR;
    10fa:	e3 e2       	ldi	r30, 0x23	; 35
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <TWI_ReadByteWithNACK>:
 * [Description]:	Function responsible for reading 1 byte with NACK *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithNACK(void) {
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 e8       	ldi	r24, 0x84	; 132
    1114:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	dc f7       	brge	.-10     	; 0x1116 <TWI_ReadByteWithNACK+0x10>
		;
	/* Read Data */
	return TWDR;
    1120:	e3 e2       	ldi	r30, 0x23	; 35
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TWI_getStatus>:
 * [Description]:	FET STATUS from TWSR register *
 * 																*
 * [Args]													*
 * [Return]			uint8 status									*
 *======================================================================*/
uint8 TWI_getStatus(void) {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1136:	e1 e2       	ldi	r30, 0x21	; 33
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
}
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_11>:
/********************************************************/
/*                     ISRs
/********************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1174:	80 91 72 01 	lds	r24, 0x0172
    1178:	90 91 73 01 	lds	r25, 0x0173
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	29 f0       	breq	.+10     	; 0x118a <__vector_11+0x40>
		(*g_Timer0CallBackPtr)();
    1180:	e0 91 72 01 	lds	r30, 0x0172
    1184:	f0 91 73 01 	lds	r31, 0x0173
    1188:	09 95       	icall
	}
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_10>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    11da:	80 91 72 01 	lds	r24, 0x0172
    11de:	90 91 73 01 	lds	r25, 0x0173
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <__vector_10+0x40>
		(*g_Timer0CallBackPtr)();
    11e6:	e0 91 72 01 	lds	r30, 0x0172
    11ea:	f0 91 73 01 	lds	r31, 0x0173
    11ee:	09 95       	icall
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_9>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	2f 93       	push	r18
    1222:	3f 93       	push	r19
    1224:	4f 93       	push	r20
    1226:	5f 93       	push	r21
    1228:	6f 93       	push	r22
    122a:	7f 93       	push	r23
    122c:	8f 93       	push	r24
    122e:	9f 93       	push	r25
    1230:	af 93       	push	r26
    1232:	bf 93       	push	r27
    1234:	ef 93       	push	r30
    1236:	ff 93       	push	r31
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1240:	80 91 74 01 	lds	r24, 0x0174
    1244:	90 91 75 01 	lds	r25, 0x0175
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	29 f0       	breq	.+10     	; 0x1256 <__vector_9+0x40>
		(*g_Timer1CallBackPtr)();
    124c:	e0 91 74 01 	lds	r30, 0x0174
    1250:	f0 91 75 01 	lds	r31, 0x0175
    1254:	09 95       	icall
	}
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    12a6:	80 91 74 01 	lds	r24, 0x0174
    12aa:	90 91 75 01 	lds	r25, 0x0175
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	29 f0       	breq	.+10     	; 0x12bc <__vector_7+0x40>
		(*g_Timer1CallBackPtr)();
    12b2:	e0 91 74 01 	lds	r30, 0x0174
    12b6:	f0 91 75 01 	lds	r31, 0x0175
    12ba:	09 95       	icall
	}
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_5>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    130c:	80 91 76 01 	lds	r24, 0x0176
    1310:	90 91 77 01 	lds	r25, 0x0177
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	29 f0       	breq	.+10     	; 0x1322 <__vector_5+0x40>
		(*g_Timer2CallBackPtr)();
    1318:	e0 91 76 01 	lds	r30, 0x0176
    131c:	f0 91 77 01 	lds	r31, 0x0177
    1320:	09 95       	icall
	}
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_4>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1372:	80 91 76 01 	lds	r24, 0x0176
    1376:	90 91 77 01 	lds	r25, 0x0177
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    137e:	e0 91 76 01 	lds	r30, 0x0176
    1382:	f0 91 77 01 	lds	r31, 0x0177
    1386:	09 95       	icall
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <Timer_init>:

/********************************************************/
/* Functions Implementation */
/********************************************************/

void Timer_init(const Timer_configuration *timer_config){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Timer_init+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	80 81       	ld	r24, Z
    13c2:	88 23       	and	r24, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <Timer_init+0x1a>
    13c6:	60 c0       	rjmp	.+192    	; 0x1488 <Timer_init+0xda>

		TCNT0 = timer_config->initialValue;
    13c8:	a2 e5       	ldi	r26, 0x52	; 82
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e9 81       	ldd	r30, Y+1	; 0x01
    13ce:	fa 81       	ldd	r31, Y+2	; 0x02
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	8c 93       	st	X, r24
		TCCR0 = 0;
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	90 81       	ld	r25, Z
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	89 2b       	or	r24, r25
    13ee:	8c 93       	st	X, r24

		if (timer_config->mode == Normal){
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	81 81       	ldd	r24, Z+1	; 0x01
    13f6:	88 23       	and	r24, r24
    13f8:	b1 f4       	brne	.+44     	; 0x1426 <Timer_init+0x78>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    13fa:	a3 e5       	ldi	r26, 0x53	; 83
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e5       	ldi	r30, 0x53	; 83
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    1416:	a8 e5       	ldi	r26, 0x58	; 88
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e5       	ldi	r30, 0x58	; 88
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	28 c0       	rjmp	.+80     	; 0x1476 <Timer_init+0xc8>

		}else if (timer_config->mode == CTC){
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	19 f5       	brne	.+70     	; 0x1476 <Timer_init+0xc8>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1430:	a3 e5       	ldi	r26, 0x53	; 83
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e3 e5       	ldi	r30, 0x53	; 83
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    143e:	a3 e5       	ldi	r26, 0x53	; 83
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e3 e5       	ldi	r30, 0x53	; 83
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    144c:	ac e5       	ldi	r26, 0x5C	; 92
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	84 81       	ldd	r24, Z+4	; 0x04
    1456:	95 81       	ldd	r25, Z+5	; 0x05
    1458:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    145a:	a9 e5       	ldi	r26, 0x59	; 89
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e9 e5       	ldi	r30, 0x59	; 89
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    1468:	a8 e5       	ldi	r26, 0x58	; 88
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e5       	ldi	r30, 0x58	; 88
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	87 81       	ldd	r24, Z+7	; 0x07
    147c:	90 85       	ldd	r25, Z+8	; 0x08
    147e:	90 93 73 01 	sts	0x0173, r25
    1482:	80 93 72 01 	sts	0x0172, r24
    1486:	c4 c0       	rjmp	.+392    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer1){
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	80 81       	ld	r24, Z
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <Timer_init+0xe6>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <Timer_init+0x1a6>
		TCCR1A =0;
    1494:	ef e4       	ldi	r30, 0x4F	; 79
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    149a:	af e4       	ldi	r26, 0x4F	; 79
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e4       	ldi	r30, 0x4F	; 79
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    14c2:	ac e4       	ldi	r26, 0x4C	; 76
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24

		if (timer_config->mode == Normal) {
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	81 81       	ldd	r24, Z+1	; 0x01
    14da:	88 23       	and	r24, r24
    14dc:	79 f4       	brne	.+30     	; 0x14fc <Timer_init+0x14e>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    14de:	a9 e5       	ldi	r26, 0x59	; 89
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e9 e5       	ldi	r30, 0x59	; 89
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    14ec:	a8 e5       	ldi	r26, 0x58	; 88
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e8 e5       	ldi	r30, 0x58	; 88
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
    14fa:	23 c0       	rjmp	.+70     	; 0x1542 <Timer_init+0x194>

		} else if (timer_config->mode == CTC) {
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	f1 f4       	brne	.+60     	; 0x1542 <Timer_init+0x194>
			SET_BIT(TCCR1B, WGM12);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    1514:	aa e4       	ldi	r26, 0x4A	; 74
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1526:	a9 e5       	ldi	r26, 0x59	; 89
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 61       	ori	r24, 0x10	; 16
    1532:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1534:	a8 e5       	ldi	r26, 0x58	; 88
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e5       	ldi	r30, 0x58	; 88
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	87 81       	ldd	r24, Z+7	; 0x07
    1548:	90 85       	ldd	r25, Z+8	; 0x08
    154a:	90 93 75 01 	sts	0x0175, r25
    154e:	80 93 74 01 	sts	0x0174, r24
    1552:	5e c0       	rjmp	.+188    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer2){
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	80 81       	ld	r24, Z
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	09 f0       	breq	.+2      	; 0x1560 <Timer_init+0x1b2>
    155e:	58 c0       	rjmp	.+176    	; 0x1610 <Timer_init+0x262>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    156e:	a4 e4       	ldi	r26, 0x44	; 68
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	8c 93       	st	X, r24
		TCCR2 = 0;
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	90 81       	ld	r25, Z
    158c:	e9 81       	ldd	r30, Y+1	; 0x01
    158e:	fa 81       	ldd	r31, Y+2	; 0x02
    1590:	86 81       	ldd	r24, Z+6	; 0x06
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24

		if (timer_config->mode == Normal) {
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	88 23       	and	r24, r24
    159e:	79 f4       	brne	.+30     	; 0x15be <Timer_init+0x210>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    15a0:	a9 e5       	ldi	r26, 0x59	; 89
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 64       	ori	r24, 0x40	; 64
    15ac:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    15ae:	a8 e5       	ldi	r26, 0x58	; 88
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e5       	ldi	r30, 0x58	; 88
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	8c 93       	st	X, r24
    15bc:	21 c0       	rjmp	.+66     	; 0x1600 <Timer_init+0x252>

		} else if (timer_config->mode == CTC) {
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	81 81       	ldd	r24, Z+1	; 0x01
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	e1 f4       	brne	.+56     	; 0x1600 <Timer_init+0x252>
			SET_BIT(TCCR0, WGM21);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    15d6:	a3 e4       	ldi	r26, 0x43	; 67
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	84 81       	ldd	r24, Z+4	; 0x04
    15e0:	95 81       	ldd	r25, Z+5	; 0x05
    15e2:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    15e4:	a9 e5       	ldi	r26, 0x59	; 89
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    15f2:	a8 e5       	ldi	r26, 0x58	; 88
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e5       	ldi	r30, 0x58	; 88
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    1600:	e9 81       	ldd	r30, Y+1	; 0x01
    1602:	fa 81       	ldd	r31, Y+2	; 0x02
    1604:	87 81       	ldd	r24, Z+7	; 0x07
    1606:	90 85       	ldd	r25, Z+8	; 0x08
    1608:	90 93 77 01 	sts	0x0177, r25
    160c:	80 93 76 01 	sts	0x0176, r24
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	88 23       	and	r24, r24
    162a:	e1 f4       	brne	.+56     	; 0x1664 <Timer_deInit+0x4a>
		TCCR0 = 0;
    162c:	e3 e5       	ldi	r30, 0x53	; 83
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    1632:	e2 e5       	ldi	r30, 0x52	; 82
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    1638:	ec e5       	ldi	r30, 0x5C	; 92
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    163e:	a9 e5       	ldi	r26, 0x59	; 89
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e9 e5       	ldi	r30, 0x59	; 89
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    164c:	a9 e5       	ldi	r26, 0x59	; 89
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e9 e5       	ldi	r30, 0x59	; 89
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8e 7f       	andi	r24, 0xFE	; 254
    1658:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    165a:	10 92 73 01 	sts	0x0173, r1
    165e:	10 92 72 01 	sts	0x0172, r1
    1662:	42 c0       	rjmp	.+132    	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer1){
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f5       	brne	.+66     	; 0x16ac <Timer_deInit+0x92>
		TCCR1A =0;
    166a:	ef e4       	ldi	r30, 0x4F	; 79
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
		TCNT1 = 0;
    1676:	ec e4       	ldi	r30, 0x4C	; 76
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	11 82       	std	Z+1, r1	; 0x01
    167c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    167e:	a9 e5       	ldi	r26, 0x59	; 89
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    168c:	ea e4       	ldi	r30, 0x4A	; 74
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    16a2:	10 92 75 01 	sts	0x0175, r1
    16a6:	10 92 74 01 	sts	0x0174, r1
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer2){
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	d9 f4       	brne	.+54     	; 0x16e8 <Timer_deInit+0xce>
		TCCR2 = 0;
    16b2:	e5 e4       	ldi	r30, 0x45	; 69
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    16b8:	e4 e4       	ldi	r30, 0x44	; 68
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    16be:	e3 e4       	ldi	r30, 0x43	; 67
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    16c4:	a9 e5       	ldi	r26, 0x59	; 89
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e9 e5       	ldi	r30, 0x59	; 89
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    16d2:	a9 e5       	ldi	r26, 0x59	; 89
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e9 e5       	ldi	r30, 0x59	; 89
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7b       	andi	r24, 0xBF	; 191
    16de:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    16e0:	10 92 77 01 	sts	0x0177, r1
    16e4:	10 92 76 01 	sts	0x0176, r1
	}
}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <Timer_reset>:

void Timer_reset(Timer_ID timer_ID){
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	88 23       	and	r24, r24
    1700:	21 f4       	brne	.+8      	; 0x170a <Timer_reset+0x1a>
		TCNT0 = 0;
    1702:	e2 e5       	ldi	r30, 0x52	; 82
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	10 82       	st	Z, r1
    1708:	0e c0       	rjmp	.+28     	; 0x1726 <Timer_reset+0x36>
	}else if (timer_ID == Timer1){
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	29 f4       	brne	.+10     	; 0x171a <Timer_reset+0x2a>
		TCNT1 = 0;
    1710:	ec e4       	ldi	r30, 0x4C	; 76
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	11 82       	std	Z+1, r1	; 0x01
    1716:	10 82       	st	Z, r1
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <Timer_reset+0x36>
	}else if (timer_ID == Timer2){
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	19 f4       	brne	.+6      	; 0x1726 <Timer_reset+0x36>
		TCNT2 = 0;
    1720:	e4 e4       	ldi	r30, 0x44	; 68
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	10 82       	st	Z, r1
	}
}
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	ef 93       	push	r30
    174e:	ff 93       	push	r31
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1758:	80 91 78 01 	lds	r24, 0x0178
    175c:	90 91 79 01 	lds	r25, 0x0179
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	29 f0       	breq	.+10     	; 0x176e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1764:	e0 91 78 01 	lds	r30, 0x0178
    1768:	f0 91 79 01 	lds	r31, 0x0179
    176c:	09 95       	icall
	}
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	ff 91       	pop	r31
    1774:	ef 91       	pop	r30
    1776:	bf 91       	pop	r27
    1778:	af 91       	pop	r26
    177a:	9f 91       	pop	r25
    177c:	8f 91       	pop	r24
    177e:	7f 91       	pop	r23
    1780:	6f 91       	pop	r22
    1782:	5f 91       	pop	r21
    1784:	4f 91       	pop	r20
    1786:	3f 91       	pop	r19
    1788:	2f 91       	pop	r18
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <Icu_init+0x6>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B = (1<<ICES1)|(1<<CS11); //start by catching the rising edge & no prescaler
    17a2:	ee e4       	ldi	r30, 0x4E	; 78
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	82 e4       	ldi	r24, 0x42	; 66
    17a8:	80 83       	st	Z, r24
	TCNT1  = 0;
    17aa:	ec e4       	ldi	r30, 0x4C	; 76
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	11 82       	std	Z+1, r1	; 0x01
    17b0:	10 82       	st	Z, r1
	ICR1   = 0;
    17b2:	e6 e4       	ldi	r30, 0x46	; 70
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	11 82       	std	Z+1, r1	; 0x01
    17b8:	10 82       	st	Z, r1
	TIMSK |= (1<<TICIE1);
    17ba:	a9 e5       	ldi	r26, 0x59	; 89
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e9 e5       	ldi	r30, 0x59	; 89
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	80 62       	ori	r24, 0x20	; 32
    17c6:	8c 93       	st	X, r24

	/* Configure ICP1/PD6 as i/p pin */
	//DDRD &= ~(1<<PD6);
	CLEAR_BIT(DDRD,6);
    17c8:	a1 e3       	ldi	r26, 0x31	; 49
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e1 e3       	ldi	r30, 0x31	; 49
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	8f 7b       	andi	r24, 0xBF	; 191
    17d4:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    17d6:	ef e4       	ldi	r30, 0x4F	; 79
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8c e0       	ldi	r24, 0x0C	; 12
    17dc:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->clock));
    17de:	ae e4       	ldi	r26, 0x4E	; 78
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ee e4       	ldi	r30, 0x4E	; 78
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	98 2f       	mov	r25, r24
    17ea:	98 7f       	andi	r25, 0xF8	; 248
    17ec:	e9 81       	ldd	r30, Y+1	; 0x01
    17ee:	fa 81       	ldd	r31, Y+2	; 0x02
    17f0:	80 81       	ld	r24, Z
    17f2:	89 2b       	or	r24, r25
    17f4:	8c 93       	st	X, r24
	/*
    * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    17f6:	ae e4       	ldi	r26, 0x4E	; 78
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ee e4       	ldi	r30, 0x4E	; 78
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	2f 7b       	andi	r18, 0xBF	; 191
    1804:	e9 81       	ldd	r30, Y+1	; 0x01
    1806:	fa 81       	ldd	r31, Y+2	; 0x02
    1808:	81 81       	ldd	r24, Z+1	; 0x01
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	00 24       	eor	r0, r0
    1810:	96 95       	lsr	r25
    1812:	87 95       	ror	r24
    1814:	07 94       	ror	r0
    1816:	96 95       	lsr	r25
    1818:	87 95       	ror	r24
    181a:	07 94       	ror	r0
    181c:	98 2f       	mov	r25, r24
    181e:	80 2d       	mov	r24, r0
    1820:	82 2b       	or	r24, r18
    1822:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1824:	ec e4       	ldi	r30, 0x4C	; 76
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	11 82       	std	Z+1, r1	; 0x01
    182a:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    182c:	e6 e4       	ldi	r30, 0x46	; 70
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	11 82       	std	Z+1, r1	; 0x01
    1832:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1834:	a9 e5       	ldi	r26, 0x59	; 89
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e9 e5       	ldi	r30, 0x59	; 89
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 62       	ori	r24, 0x20	; 32
    1840:	8c 93       	st	X, r24
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	00 d0       	rcall	.+0      	; 0x1852 <Icu_setCallBack+0x6>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	90 93 79 01 	sts	0x0179, r25
    1862:	80 93 78 01 	sts	0x0178, r24
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <Icu_setEdgeDetectionType>:

/*
* Description: Function to set the required edge detection.
*/
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    187c:	ae e4       	ldi	r26, 0x4E	; 78
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	ee e4       	ldi	r30, 0x4E	; 78
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	28 2f       	mov	r18, r24
    1888:	2f 7b       	andi	r18, 0xBF	; 191
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	00 24       	eor	r0, r0
    1892:	96 95       	lsr	r25
    1894:	87 95       	ror	r24
    1896:	07 94       	ror	r0
    1898:	96 95       	lsr	r25
    189a:	87 95       	ror	r24
    189c:	07 94       	ror	r0
    189e:	98 2f       	mov	r25, r24
    18a0:	80 2d       	mov	r24, r0
    18a2:	82 2b       	or	r24, r18
    18a4:	8c 93       	st	X, r24
}
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <Icu_getInputCaptureValue>:
/*
* Description: Function to get the Timer1 Value when the input is captured
*              The value stored at Input Capture Register ICR1
*/
uint16 Icu_getInputCaptureValue(void)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    18b6:	e6 e4       	ldi	r30, 0x46	; 70
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <Icu_clearTimerValue>:

/*
* Description: Function to clear the Timer1 Value to start count from ZERO
*/
void Icu_clearTimerValue(void)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    18cc:	ec e4       	ldi	r30, 0x4C	; 76
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	11 82       	std	Z+1, r1	; 0x01
    18d2:	10 82       	st	Z, r1
}
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <Icu_DeInit>:

/*
* Description: Function to disable the Timer1 to stop the ICU Driver
*/
void Icu_DeInit(void)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    18e2:	ef e4       	ldi	r30, 0x4F	; 79
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	10 82       	st	Z, r1
	TCCR1B = 0;
    18e8:	ee e4       	ldi	r30, 0x4E	; 78
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	10 82       	st	Z, r1
	TCNT1 = 0;
    18ee:	ec e4       	ldi	r30, 0x4C	; 76
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	11 82       	std	Z+1, r1	; 0x01
    18f4:	10 82       	st	Z, r1
	ICR1 = 0;
    18f6:	e6 e4       	ldi	r30, 0x46	; 70
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	11 82       	std	Z+1, r1	; 0x01
    18fc:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    18fe:	a9 e5       	ldi	r26, 0x59	; 89
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e9 e5       	ldi	r30, 0x59	; 89
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 7d       	andi	r24, 0xDF	; 223
    190a:	8c 93       	st	X, r24
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <DIO_setupPinDirection>:
#include"dio.h"
#include "../../CommonDef/common_macros.h"


void DIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <DIO_setupPinDirection+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <DIO_setupPinDirection+0x8>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	6a 83       	std	Y+2, r22	; 0x02
    1924:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	88 30       	cpi	r24, 0x08	; 8
    192a:	08 f0       	brcs	.+2      	; 0x192e <DIO_setupPinDirection+0x1c>
    192c:	d5 c0       	rjmp	.+426    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	08 f0       	brcs	.+2      	; 0x1936 <DIO_setupPinDirection+0x24>
    1934:	d1 c0       	rjmp	.+418    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	3d 83       	std	Y+5, r19	; 0x05
    193e:	2c 83       	std	Y+4, r18	; 0x04
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	91 05       	cpc	r25, r1
    1948:	09 f4       	brne	.+2      	; 0x194c <DIO_setupPinDirection+0x3a>
    194a:	43 c0       	rjmp	.+134    	; 0x19d2 <DIO_setupPinDirection+0xc0>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <DIO_setupPinDirection+0x4e>
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	71 f0       	breq	.+28     	; 0x197a <DIO_setupPinDirection+0x68>
    195e:	bc c0       	rjmp	.+376    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
    1960:	2c 81       	ldd	r18, Y+4	; 0x04
    1962:	3d 81       	ldd	r19, Y+5	; 0x05
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <DIO_setupPinDirection+0x5a>
    196a:	5f c0       	rjmp	.+190    	; 0x1a2a <DIO_setupPinDirection+0x118>
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <DIO_setupPinDirection+0x66>
    1976:	85 c0       	rjmp	.+266    	; 0x1a82 <DIO_setupPinDirection+0x170>
    1978:	af c0       	rjmp	.+350    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	a1 f4       	brne	.+40     	; 0x19a8 <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1980:	aa e3       	ldi	r26, 0x3A	; 58
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_setupPinDirection+0x8c>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_setupPinDirection+0x88>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	98 c0       	rjmp	.+304    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19a8:	aa e3       	ldi	r26, 0x3A	; 58
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ea e3       	ldi	r30, 0x3A	; 58
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_setupPinDirection+0xb4>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_setupPinDirection+0xb0>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	83 c0       	rjmp	.+262    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	a1 f4       	brne	.+40     	; 0x1a00 <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19d8:	a7 e3       	ldi	r26, 0x37	; 55
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e7 e3       	ldi	r30, 0x37	; 55
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_setupPinDirection+0xe4>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_setupPinDirection+0xe0>
    19fa:	84 2b       	or	r24, r20
    19fc:	8c 93       	st	X, r24
    19fe:	6c c0       	rjmp	.+216    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a00:	a7 e3       	ldi	r26, 0x37	; 55
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e7 e3       	ldi	r30, 0x37	; 55
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <DIO_setupPinDirection+0x10c>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <DIO_setupPinDirection+0x108>
    1a22:	80 95       	com	r24
    1a24:	84 23       	and	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	57 c0       	rjmp	.+174    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	a1 f4       	brne	.+40     	; 0x1a58 <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a30:	a4 e3       	ldi	r26, 0x34	; 52
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e4 e3       	ldi	r30, 0x34	; 52
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_setupPinDirection+0x13c>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_setupPinDirection+0x138>
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	40 c0       	rjmp	.+128    	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a58:	a4 e3       	ldi	r26, 0x34	; 52
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <DIO_setupPinDirection+0x164>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <DIO_setupPinDirection+0x160>
    1a7a:	80 95       	com	r24
    1a7c:	84 23       	and	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	2b c0       	rjmp	.+86     	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	a1 f4       	brne	.+40     	; 0x1ab0 <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a88:	a1 e3       	ldi	r26, 0x31	; 49
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e1 e3       	ldi	r30, 0x31	; 49
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <DIO_setupPinDirection+0x194>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <DIO_setupPinDirection+0x190>
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ab0:	a1 e3       	ldi	r26, 0x31	; 49
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e1 e3       	ldi	r30, 0x31	; 49
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <DIO_setupPinDirection+0x1bc>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <DIO_setupPinDirection+0x1b8>
    1ad2:	80 95       	com	r24
    1ad4:	84 23       	and	r24, r20
    1ad6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <DIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void DIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <DIO_writePin+0x6>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <DIO_writePin+0x8>
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	6a 83       	std	Y+2, r22	; 0x02
    1afa:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <DIO_writePin+0x1c>
    1b02:	d5 c0       	rjmp	.+426    	; 0x1cae <DIO_writePin+0x1c6>
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	84 30       	cpi	r24, 0x04	; 4
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <DIO_writePin+0x24>
    1b0a:	d1 c0       	rjmp	.+418    	; 0x1cae <DIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	3d 83       	std	Y+5, r19	; 0x05
    1b14:	2c 83       	std	Y+4, r18	; 0x04
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <DIO_writePin+0x3a>
    1b20:	43 c0       	rjmp	.+134    	; 0x1ba8 <DIO_writePin+0xc0>
    1b22:	2c 81       	ldd	r18, Y+4	; 0x04
    1b24:	3d 81       	ldd	r19, Y+5	; 0x05
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <DIO_writePin+0x4e>
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	71 f0       	breq	.+28     	; 0x1b50 <DIO_writePin+0x68>
    1b34:	bc c0       	rjmp	.+376    	; 0x1cae <DIO_writePin+0x1c6>
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <DIO_writePin+0x5a>
    1b40:	5f c0       	rjmp	.+190    	; 0x1c00 <DIO_writePin+0x118>
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <DIO_writePin+0x66>
    1b4c:	85 c0       	rjmp	.+266    	; 0x1c58 <DIO_writePin+0x170>
    1b4e:	af c0       	rjmp	.+350    	; 0x1cae <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	a1 f4       	brne	.+40     	; 0x1b7e <DIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b56:	ab e3       	ldi	r26, 0x3B	; 59
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	eb e3       	ldi	r30, 0x3B	; 59
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <DIO_writePin+0x8c>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <DIO_writePin+0x88>
    1b78:	84 2b       	or	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	98 c0       	rjmp	.+304    	; 0x1cae <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b7e:	ab e3       	ldi	r26, 0x3B	; 59
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	eb e3       	ldi	r30, 0x3B	; 59
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_writePin+0xb4>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_writePin+0xb0>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	83 c0       	rjmp	.+262    	; 0x1cae <DIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	a1 f4       	brne	.+40     	; 0x1bd6 <DIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1bae:	a8 e3       	ldi	r26, 0x38	; 56
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e8 e3       	ldi	r30, 0x38	; 56
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	48 2f       	mov	r20, r24
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <DIO_writePin+0xe4>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	0a 94       	dec	r0
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <DIO_writePin+0xe0>
    1bd0:	84 2b       	or	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	6c c0       	rjmp	.+216    	; 0x1cae <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1bd6:	a8 e3       	ldi	r26, 0x38	; 56
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e8 e3       	ldi	r30, 0x38	; 56
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_writePin+0x10c>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_writePin+0x108>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	57 c0       	rjmp	.+174    	; 0x1cae <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	a1 f4       	brne	.+40     	; 0x1c2e <DIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c06:	a5 e3       	ldi	r26, 0x35	; 53
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e3       	ldi	r30, 0x35	; 53
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_writePin+0x13c>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_writePin+0x138>
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	40 c0       	rjmp	.+128    	; 0x1cae <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c2e:	a5 e3       	ldi	r26, 0x35	; 53
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e3       	ldi	r30, 0x35	; 53
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_writePin+0x164>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_writePin+0x160>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	2b c0       	rjmp	.+86     	; 0x1cae <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	a1 f4       	brne	.+40     	; 0x1c86 <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c5e:	a2 e3       	ldi	r26, 0x32	; 50
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e2 e3       	ldi	r30, 0x32	; 50
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_writePin+0x194>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <DIO_writePin+0x190>
    1c80:	84 2b       	or	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c86:	a2 e3       	ldi	r26, 0x32	; 50
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e2 e3       	ldi	r30, 0x32	; 50
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_writePin+0x1bc>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_writePin+0x1b8>
    1ca8:	80 95       	com	r24
    1caa:	84 23       	and	r24, r20
    1cac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <DIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 DIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <DIO_readPin+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <DIO_readPin+0x8>
    1cc6:	0f 92       	push	r0
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
    1cce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1cd0:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	88 30       	cpi	r24, 0x08	; 8
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <DIO_readPin+0x1c>
    1cd8:	84 c0       	rjmp	.+264    	; 0x1de2 <DIO_readPin+0x124>
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <DIO_readPin+0x24>
    1ce0:	80 c0       	rjmp	.+256    	; 0x1de2 <DIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3d 83       	std	Y+5, r19	; 0x05
    1cea:	2c 83       	std	Y+4, r18	; 0x04
    1cec:	4c 81       	ldd	r20, Y+4	; 0x04
    1cee:	5d 81       	ldd	r21, Y+5	; 0x05
    1cf0:	41 30       	cpi	r20, 0x01	; 1
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	79 f1       	breq	.+94     	; 0x1d54 <DIO_readPin+0x96>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	34 f4       	brge	.+12     	; 0x1d0c <DIO_readPin+0x4e>
    1d00:	2c 81       	ldd	r18, Y+4	; 0x04
    1d02:	3d 81       	ldd	r19, Y+5	; 0x05
    1d04:	21 15       	cp	r18, r1
    1d06:	31 05       	cpc	r19, r1
    1d08:	69 f0       	breq	.+26     	; 0x1d24 <DIO_readPin+0x66>
    1d0a:	6b c0       	rjmp	.+214    	; 0x1de2 <DIO_readPin+0x124>
    1d0c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d0e:	5d 81       	ldd	r21, Y+5	; 0x05
    1d10:	42 30       	cpi	r20, 0x02	; 2
    1d12:	51 05       	cpc	r21, r1
    1d14:	b9 f1       	breq	.+110    	; 0x1d84 <DIO_readPin+0xc6>
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <DIO_readPin+0x64>
    1d20:	49 c0       	rjmp	.+146    	; 0x1db4 <DIO_readPin+0xf6>
    1d22:	5f c0       	rjmp	.+190    	; 0x1de2 <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d24:	e9 e3       	ldi	r30, 0x39	; 57
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a9 01       	movw	r20, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_readPin+0x7e>
    1d38:	55 95       	asr	r21
    1d3a:	47 95       	ror	r20
    1d3c:	8a 95       	dec	r24
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_readPin+0x7a>
    1d40:	ca 01       	movw	r24, r20
    1d42:	81 70       	andi	r24, 0x01	; 1
    1d44:	90 70       	andi	r25, 0x00	; 0
    1d46:	88 23       	and	r24, r24
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	49 c0       	rjmp	.+146    	; 0x1de2 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d50:	19 82       	std	Y+1, r1	; 0x01
    1d52:	47 c0       	rjmp	.+142    	; 0x1de2 <DIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d54:	e6 e3       	ldi	r30, 0x36	; 54
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a9 01       	movw	r20, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_readPin+0xae>
    1d68:	55 95       	asr	r21
    1d6a:	47 95       	ror	r20
    1d6c:	8a 95       	dec	r24
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_readPin+0xaa>
    1d70:	ca 01       	movw	r24, r20
    1d72:	81 70       	andi	r24, 0x01	; 1
    1d74:	90 70       	andi	r25, 0x00	; 0
    1d76:	88 23       	and	r24, r24
    1d78:	19 f0       	breq	.+6      	; 0x1d80 <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	31 c0       	rjmp	.+98     	; 0x1de2 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d80:	19 82       	std	Y+1, r1	; 0x01
    1d82:	2f c0       	rjmp	.+94     	; 0x1de2 <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d84:	e3 e3       	ldi	r30, 0x33	; 51
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a9 01       	movw	r20, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_readPin+0xde>
    1d98:	55 95       	asr	r21
    1d9a:	47 95       	ror	r20
    1d9c:	8a 95       	dec	r24
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_readPin+0xda>
    1da0:	ca 01       	movw	r24, r20
    1da2:	81 70       	andi	r24, 0x01	; 1
    1da4:	90 70       	andi	r25, 0x00	; 0
    1da6:	88 23       	and	r24, r24
    1da8:	19 f0       	breq	.+6      	; 0x1db0 <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	19 c0       	rjmp	.+50     	; 0x1de2 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1db0:	19 82       	std	Y+1, r1	; 0x01
    1db2:	17 c0       	rjmp	.+46     	; 0x1de2 <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1db4:	e0 e3       	ldi	r30, 0x30	; 48
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a9 01       	movw	r20, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <DIO_readPin+0x10e>
    1dc8:	55 95       	asr	r21
    1dca:	47 95       	ror	r20
    1dcc:	8a 95       	dec	r24
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <DIO_readPin+0x10a>
    1dd0:	ca 01       	movw	r24, r20
    1dd2:	81 70       	andi	r24, 0x01	; 1
    1dd4:	90 70       	andi	r25, 0x00	; 0
    1dd6:	88 23       	and	r24, r24
    1dd8:	19 f0       	breq	.+6      	; 0x1de0 <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1de0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <DIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <DIO_setupPortDirection+0x6>
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <DIO_setupPortDirection+0x8>
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	90 f5       	brcc	.+100    	; 0x1e6e <DIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3c 83       	std	Y+4, r19	; 0x04
    1e12:	2b 83       	std	Y+3, r18	; 0x03
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	d1 f0       	breq	.+52     	; 0x1e52 <DIO_setupPortDirection+0x5e>
    1e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e20:	3c 81       	ldd	r19, Y+4	; 0x04
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <DIO_setupPortDirection+0x3e>
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	61 f0       	breq	.+24     	; 0x1e48 <DIO_setupPortDirection+0x54>
    1e30:	1e c0       	rjmp	.+60     	; 0x1e6e <DIO_setupPortDirection+0x7a>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	81 f0       	breq	.+32     	; 0x1e5c <DIO_setupPortDirection+0x68>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	83 30       	cpi	r24, 0x03	; 3
    1e42:	91 05       	cpc	r25, r1
    1e44:	81 f0       	breq	.+32     	; 0x1e66 <DIO_setupPortDirection+0x72>
    1e46:	13 c0       	rjmp	.+38     	; 0x1e6e <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e48:	ea e3       	ldi	r30, 0x3A	; 58
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	80 83       	st	Z, r24
    1e50:	0e c0       	rjmp	.+28     	; 0x1e6e <DIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e52:	e7 e3       	ldi	r30, 0x37	; 55
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	80 83       	st	Z, r24
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <DIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e5c:	e4 e3       	ldi	r30, 0x34	; 52
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	80 83       	st	Z, r24
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <DIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e66:	e1 e3       	ldi	r30, 0x31	; 49
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_num, uint8 value)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <DIO_writePort+0x6>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <DIO_writePort+0x8>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	84 30       	cpi	r24, 0x04	; 4
    1e90:	90 f5       	brcc	.+100    	; 0x1ef6 <DIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3c 83       	std	Y+4, r19	; 0x04
    1e9a:	2b 83       	std	Y+3, r18	; 0x03
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	d1 f0       	breq	.+52     	; 0x1eda <DIO_writePort+0x5e>
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	2c f4       	brge	.+10     	; 0x1eba <DIO_writePort+0x3e>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	61 f0       	breq	.+24     	; 0x1ed0 <DIO_writePort+0x54>
    1eb8:	1e c0       	rjmp	.+60     	; 0x1ef6 <DIO_writePort+0x7a>
    1eba:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	81 f0       	breq	.+32     	; 0x1ee4 <DIO_writePort+0x68>
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	81 f0       	breq	.+32     	; 0x1eee <DIO_writePort+0x72>
    1ece:	13 c0       	rjmp	.+38     	; 0x1ef6 <DIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ed0:	eb e3       	ldi	r30, 0x3B	; 59
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	80 83       	st	Z, r24
    1ed8:	0e c0       	rjmp	.+28     	; 0x1ef6 <DIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = value;
    1eda:	e8 e3       	ldi	r30, 0x38	; 56
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	80 83       	st	Z, r24
    1ee2:	09 c0       	rjmp	.+18     	; 0x1ef6 <DIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = value;
    1ee4:	e5 e3       	ldi	r30, 0x35	; 53
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	80 83       	st	Z, r24
    1eec:	04 c0       	rjmp	.+8      	; 0x1ef6 <DIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = value;
    1eee:	e2 e3       	ldi	r30, 0x32	; 50
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_num)
{	uint8 value = LOGIC_LOW;
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <DIO_readPort+0x6>
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <DIO_readPort+0x8>
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	8a 83       	std	Y+2, r24	; 0x02
    1f12:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS))
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	90 f5       	brcc	.+100    	; 0x1f7e <DIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3c 83       	std	Y+4, r19	; 0x04
    1f22:	2b 83       	std	Y+3, r18	; 0x03
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	d1 f0       	breq	.+52     	; 0x1f62 <DIO_readPort+0x5e>
    1f2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f30:	3c 81       	ldd	r19, Y+4	; 0x04
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <DIO_readPort+0x3e>
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <DIO_readPort+0x54>
    1f40:	1e c0       	rjmp	.+60     	; 0x1f7e <DIO_readPort+0x7a>
    1f42:	2b 81       	ldd	r18, Y+3	; 0x03
    1f44:	3c 81       	ldd	r19, Y+4	; 0x04
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	81 f0       	breq	.+32     	; 0x1f6c <DIO_readPort+0x68>
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	91 05       	cpc	r25, r1
    1f54:	81 f0       	breq	.+32     	; 0x1f76 <DIO_readPort+0x72>
    1f56:	13 c0       	rjmp	.+38     	; 0x1f7e <DIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f58:	e9 e3       	ldi	r30, 0x39	; 57
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	0e c0       	rjmp	.+28     	; 0x1f7e <DIO_readPort+0x7a>
			break;

		case PORTB_ID:
			value = PINB;
    1f62:	e6 e3       	ldi	r30, 0x36	; 54
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	09 c0       	rjmp	.+18     	; 0x1f7e <DIO_readPort+0x7a>
			break;

		case PORTC_ID:
			value = PINC;
    1f6c:	e3 e3       	ldi	r30, 0x33	; 51
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <DIO_readPort+0x7a>
			break;

		case PORTD_ID:
			value = PIND;
    1f76:	e0 e3       	ldi	r30, 0x30	; 48
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <DIO_togglePin>:

void DIO_togglePin(uint8 port_num, uint8 pin_num)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <DIO_togglePin+0x6>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <DIO_togglePin+0x8>
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	88 30       	cpi	r24, 0x08	; 8
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <DIO_togglePin+0x18>
    1fa4:	72 c0       	rjmp	.+228    	; 0x208a <DIO_togglePin+0xfc>
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	84 30       	cpi	r24, 0x04	; 4
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <DIO_togglePin+0x20>
    1fac:	6e c0       	rjmp	.+220    	; 0x208a <DIO_togglePin+0xfc>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	3c 83       	std	Y+4, r19	; 0x04
    1fb6:	2b 83       	std	Y+3, r18	; 0x03
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	49 f1       	breq	.+82     	; 0x2014 <DIO_togglePin+0x86>
    1fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc6:	22 30       	cpi	r18, 0x02	; 2
    1fc8:	31 05       	cpc	r19, r1
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <DIO_togglePin+0x48>
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	61 f0       	breq	.+24     	; 0x1fec <DIO_togglePin+0x5e>
    1fd4:	5a c0       	rjmp	.+180    	; 0x208a <DIO_togglePin+0xfc>
    1fd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	71 f1       	breq	.+92     	; 0x203c <DIO_togglePin+0xae>
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	83 30       	cpi	r24, 0x03	; 3
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	e9 f1       	breq	.+122    	; 0x2064 <DIO_togglePin+0xd6>
    1fea:	4f c0       	rjmp	.+158    	; 0x208a <DIO_togglePin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA,pin_num);
    1fec:	ab e3       	ldi	r26, 0x3B	; 59
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	eb e3       	ldi	r30, 0x3B	; 59
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	48 2f       	mov	r20, r24
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	02 2e       	mov	r0, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <DIO_togglePin+0x7c>
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	0a 94       	dec	r0
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <DIO_togglePin+0x78>
    200e:	84 27       	eor	r24, r20
    2010:	8c 93       	st	X, r24
    2012:	3b c0       	rjmp	.+118    	; 0x208a <DIO_togglePin+0xfc>
			break;

		case PORTB_ID:
			TOGGLE_BIT(PORTB,pin_num);
    2014:	a8 e3       	ldi	r26, 0x38	; 56
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e8 e3       	ldi	r30, 0x38	; 56
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <DIO_togglePin+0xa4>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <DIO_togglePin+0xa0>
    2036:	84 27       	eor	r24, r20
    2038:	8c 93       	st	X, r24
    203a:	27 c0       	rjmp	.+78     	; 0x208a <DIO_togglePin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC,pin_num);
    203c:	a5 e3       	ldi	r26, 0x35	; 53
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e5 e3       	ldi	r30, 0x35	; 53
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	48 2f       	mov	r20, r24
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 2e       	mov	r0, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <DIO_togglePin+0xcc>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	0a 94       	dec	r0
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <DIO_togglePin+0xc8>
    205e:	84 27       	eor	r24, r20
    2060:	8c 93       	st	X, r24
    2062:	13 c0       	rjmp	.+38     	; 0x208a <DIO_togglePin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD,pin_num);
    2064:	a2 e3       	ldi	r26, 0x32	; 50
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e2 e3       	ldi	r30, 0x32	; 50
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DIO_togglePin+0xf4>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <DIO_togglePin+0xf0>
    2086:	84 27       	eor	r24, r20
    2088:	8c 93       	st	X, r24
			break;
		}
	}
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <timercallBckFunc>:

t_ULTRASONIC_INTERVAL ultrasonicInterval;


void timercallBckFunc(void)
{static uint8 counter=0;
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <timercallBckFunc+0x6>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62

switch(ultrasonicInterval)
    20a2:	80 91 d5 01 	lds	r24, 0x01D5
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	3a 83       	std	Y+2, r19	; 0x02
    20ac:	29 83       	std	Y+1, r18	; 0x01
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	82 30       	cpi	r24, 0x02	; 2
    20b4:	91 05       	cpc	r25, r1
    20b6:	71 f1       	breq	.+92     	; 0x2114 <timercallBckFunc+0x7c>
    20b8:	29 81       	ldd	r18, Y+1	; 0x01
    20ba:	3a 81       	ldd	r19, Y+2	; 0x02
    20bc:	23 30       	cpi	r18, 0x03	; 3
    20be:	31 05       	cpc	r19, r1
    20c0:	34 f4       	brge	.+12     	; 0x20ce <timercallBckFunc+0x36>
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	91 05       	cpc	r25, r1
    20ca:	69 f0       	breq	.+26     	; 0x20e6 <timercallBckFunc+0x4e>
    20cc:	7a c0       	rjmp	.+244    	; 0x21c2 <timercallBckFunc+0x12a>
    20ce:	29 81       	ldd	r18, Y+1	; 0x01
    20d0:	3a 81       	ldd	r19, Y+2	; 0x02
    20d2:	23 30       	cpi	r18, 0x03	; 3
    20d4:	31 05       	cpc	r19, r1
    20d6:	d9 f1       	breq	.+118    	; 0x214e <timercallBckFunc+0xb6>
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	84 30       	cpi	r24, 0x04	; 4
    20de:	91 05       	cpc	r25, r1
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <timercallBckFunc+0x4c>
    20e2:	52 c0       	rjmp	.+164    	; 0x2188 <timercallBckFunc+0xf0>
    20e4:	6e c0       	rjmp	.+220    	; 0x21c2 <timercallBckFunc+0x12a>
case LOW_RISK_DISTANCE:
	//we need to make the buzzer on for 400ms and off for 100ms
	//to make it on for 100ms we need the timer to overflow 6 times
	//to make it off for 100ms we need the timer to overflow 6 times
	//so the buzzer will toggle when counter is 24
	Parking_LED_default();
    20e6:	0e 94 05 11 	call	0x220a	; 0x220a <Parking_LED_default>
	//	Buzzer_on(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
	//	LED_ON(WARNING_FRONT_PORT_ID,WARNING_FRONT_LOW_RISK_LED_PIN_ID);

	if(counter == 24)
    20ea:	80 91 87 01 	lds	r24, 0x0187
    20ee:	88 31       	cpi	r24, 0x18	; 24
    20f0:	59 f4       	brne	.+22     	; 0x2108 <timercallBckFunc+0x70>
	{
		BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	67 e0       	ldi	r22, 0x07	; 7
    20f6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <BUZZER_TOGGLE>
		LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_LOW_RISK_LED_PIN_ID);
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	64 e0       	ldi	r22, 0x04	; 4
    20fe:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <LED_TOGGLE>
		counter = 0;
    2102:	10 92 87 01 	sts	0x0187, r1
    2106:	65 c0       	rjmp	.+202    	; 0x21d2 <timercallBckFunc+0x13a>
	}
	else
	{
		counter++;
    2108:	80 91 87 01 	lds	r24, 0x0187
    210c:	8f 5f       	subi	r24, 0xFF	; 255
    210e:	80 93 87 01 	sts	0x0187, r24
    2112:	5f c0       	rjmp	.+190    	; 0x21d2 <timercallBckFunc+0x13a>
	break;

case MODERATE_RISK_DISTANCE:
	//we need to make the buzzer toggle each 300ms
	//so it will toggle when counter is 18
	Parking_LED_default();
    2114:	0e 94 05 11 	call	0x220a	; 0x220a <Parking_LED_default>

	//	Buzzer_on(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
	//	LED_ON(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);

	if(counter > 18)
    2118:	80 91 87 01 	lds	r24, 0x0187
    211c:	83 31       	cpi	r24, 0x13	; 19
    211e:	10 f0       	brcs	.+4      	; 0x2124 <timercallBckFunc+0x8c>
	{
		counter = 0;
    2120:	10 92 87 01 	sts	0x0187, r1
	}
	if(counter == 18)
    2124:	80 91 87 01 	lds	r24, 0x0187
    2128:	82 31       	cpi	r24, 0x12	; 18
    212a:	59 f4       	brne	.+22     	; 0x2142 <timercallBckFunc+0xaa>
	{
		BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	67 e0       	ldi	r22, 0x07	; 7
    2130:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <BUZZER_TOGGLE>
		LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	65 e0       	ldi	r22, 0x05	; 5
    2138:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <LED_TOGGLE>
		counter = 0;
    213c:	10 92 87 01 	sts	0x0187, r1
    2140:	48 c0       	rjmp	.+144    	; 0x21d2 <timercallBckFunc+0x13a>
	}
	else
	{
		counter++;
    2142:	80 91 87 01 	lds	r24, 0x0187
    2146:	8f 5f       	subi	r24, 0xFF	; 255
    2148:	80 93 87 01 	sts	0x0187, r24
    214c:	42 c0       	rjmp	.+132    	; 0x21d2 <timercallBckFunc+0x13a>
	break;

case HIGH_RISK_DISTANCE:
	//we need to make the buzzer toggle each 200ms
	//so it will toggle when counter is 12
	Parking_LED_default();
    214e:	0e 94 05 11 	call	0x220a	; 0x220a <Parking_LED_default>
	//	Buzzer_on(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
	//	LED_ON(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);

	if(counter > 12)
    2152:	80 91 87 01 	lds	r24, 0x0187
    2156:	8d 30       	cpi	r24, 0x0D	; 13
    2158:	10 f0       	brcs	.+4      	; 0x215e <timercallBckFunc+0xc6>
	{
		counter = 0;
    215a:	10 92 87 01 	sts	0x0187, r1
	}
	if(counter == 12)
    215e:	80 91 87 01 	lds	r24, 0x0187
    2162:	8c 30       	cpi	r24, 0x0C	; 12
    2164:	59 f4       	brne	.+22     	; 0x217c <timercallBckFunc+0xe4>
	{
		BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	67 e0       	ldi	r22, 0x07	; 7
    216a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <BUZZER_TOGGLE>
		LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	66 e0       	ldi	r22, 0x06	; 6
    2172:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <LED_TOGGLE>
		counter = 0;
    2176:	10 92 87 01 	sts	0x0187, r1
    217a:	2b c0       	rjmp	.+86     	; 0x21d2 <timercallBckFunc+0x13a>
	}
	else
	{
		counter++;
    217c:	80 91 87 01 	lds	r24, 0x0187
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	80 93 87 01 	sts	0x0187, r24
    2186:	25 c0       	rjmp	.+74     	; 0x21d2 <timercallBckFunc+0x13a>
	break;

case EXTREME_RISK_DISTANCE:
	//we need to make the buzzer toggle each 100ms
	//so it will toggle when counter is 6
	Parking_LED_default();
    2188:	0e 94 05 11 	call	0x220a	; 0x220a <Parking_LED_default>
	//	Buzzer_on(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
	//	LED_ON(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);

	if(counter > 6)
    218c:	80 91 87 01 	lds	r24, 0x0187
    2190:	87 30       	cpi	r24, 0x07	; 7
    2192:	10 f0       	brcs	.+4      	; 0x2198 <timercallBckFunc+0x100>
	{
		counter = 0;
    2194:	10 92 87 01 	sts	0x0187, r1
	}
	if(counter == 6)
    2198:	80 91 87 01 	lds	r24, 0x0187
    219c:	86 30       	cpi	r24, 0x06	; 6
    219e:	59 f4       	brne	.+22     	; 0x21b6 <timercallBckFunc+0x11e>
	{
		BUZZER_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	67 e0       	ldi	r22, 0x07	; 7
    21a4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <BUZZER_TOGGLE>
		LED_TOGGLE(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	66 e0       	ldi	r22, 0x06	; 6
    21ac:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <LED_TOGGLE>
		counter = 0;
    21b0:	10 92 87 01 	sts	0x0187, r1
    21b4:	0e c0       	rjmp	.+28     	; 0x21d2 <timercallBckFunc+0x13a>
	}
	else
	{
		counter++;
    21b6:	80 91 87 01 	lds	r24, 0x0187
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	80 93 87 01 	sts	0x0187, r24
    21c0:	08 c0       	rjmp	.+16     	; 0x21d2 <timercallBckFunc+0x13a>
	}
	break;

default:
	Parking_LED_default();
    21c2:	0e 94 05 11 	call	0x220a	; 0x220a <Parking_LED_default>
	BUZZER_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	67 e0       	ldi	r22, 0x07	; 7
    21ca:	0e 94 55 16 	call	0x2caa	; 0x2caa <BUZZER_OFF>
	counter = 0;
    21ce:	10 92 87 01 	sts	0x0187, r1
	break;
}
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <Parking_LED_init>:

void Parking_LED_init()
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
	LED_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_LOW_RISK_LED_PIN_ID);
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	64 e0       	ldi	r22, 0x04	; 4
    21e8:	0e 94 d6 15 	call	0x2bac	; 0x2bac <LED_init>
	LED_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	65 e0       	ldi	r22, 0x05	; 5
    21f0:	0e 94 d6 15 	call	0x2bac	; 0x2bac <LED_init>
	LED_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	66 e0       	ldi	r22, 0x06	; 6
    21f8:	0e 94 d6 15 	call	0x2bac	; 0x2bac <LED_init>
	BUZZER_init(WARNING_FRONT_PORT_ID,WARNING_FRONT_BUZZER_PIN_ID);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	67 e0       	ldi	r22, 0x07	; 7
    2200:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <BUZZER_init>
}
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <Parking_LED_default>:


void Parking_LED_default(void)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	LED_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_LOW_RISK_LED_PIN_ID);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	64 e0       	ldi	r22, 0x04	; 4
    2216:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <LED_OFF>
	LED_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_MODERATE_RISK_LED_PIN_ID);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	65 e0       	ldi	r22, 0x05	; 5
    221e:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <LED_OFF>
	LED_OFF(WARNING_FRONT_PORT_ID,WARNING_FRONT_HIGH_RISK_LED_PIN_ID);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	66 e0       	ldi	r22, 0x06	; 6
    2226:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <LED_OFF>
}
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <Temp_state>:

void Temp_state(void){
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	if (g_readings.temperature >= TEMPERATURE_SEVERE)
    2238:	80 91 7a 01 	lds	r24, 0x017A
    223c:	90 91 7b 01 	lds	r25, 0x017B
    2240:	a0 91 7c 01 	lds	r26, 0x017C
    2244:	b0 91 7d 01 	lds	r27, 0x017D
    2248:	88 32       	cpi	r24, 0x28	; 40
    224a:	91 05       	cpc	r25, r1
    224c:	a1 05       	cpc	r26, r1
    224e:	b1 05       	cpc	r27, r1
    2250:	24 f0       	brlt	.+8      	; 0x225a <Temp_state+0x2a>
	{
		T_state = SEVERE;
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	80 93 86 01 	sts	0x0186, r24
    2258:	37 c0       	rjmp	.+110    	; 0x22c8 <Temp_state+0x98>
	}
	else if ((g_readings.temperature >= TEMPERATURE_MODERATE) && (g_readings.temperature < TEMPERATURE_SEVERE))
    225a:	80 91 7a 01 	lds	r24, 0x017A
    225e:	90 91 7b 01 	lds	r25, 0x017B
    2262:	a0 91 7c 01 	lds	r26, 0x017C
    2266:	b0 91 7d 01 	lds	r27, 0x017D
    226a:	84 31       	cpi	r24, 0x14	; 20
    226c:	91 05       	cpc	r25, r1
    226e:	a1 05       	cpc	r26, r1
    2270:	b1 05       	cpc	r27, r1
    2272:	8c f0       	brlt	.+34     	; 0x2296 <Temp_state+0x66>
    2274:	80 91 7a 01 	lds	r24, 0x017A
    2278:	90 91 7b 01 	lds	r25, 0x017B
    227c:	a0 91 7c 01 	lds	r26, 0x017C
    2280:	b0 91 7d 01 	lds	r27, 0x017D
    2284:	88 32       	cpi	r24, 0x28	; 40
    2286:	91 05       	cpc	r25, r1
    2288:	a1 05       	cpc	r26, r1
    228a:	b1 05       	cpc	r27, r1
    228c:	24 f4       	brge	.+8      	; 0x2296 <Temp_state+0x66>
	{
		T_state = MODERATE;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	80 93 86 01 	sts	0x0186, r24
    2294:	19 c0       	rjmp	.+50     	; 0x22c8 <Temp_state+0x98>
	}
	else if ((g_readings.temperature >= TEMPERATURE_SAFE) && (g_readings.temperature < TEMPERATURE_MODERATE))
    2296:	80 91 7a 01 	lds	r24, 0x017A
    229a:	90 91 7b 01 	lds	r25, 0x017B
    229e:	a0 91 7c 01 	lds	r26, 0x017C
    22a2:	b0 91 7d 01 	lds	r27, 0x017D
    22a6:	bb 23       	and	r27, r27
    22a8:	7c f0       	brlt	.+30     	; 0x22c8 <Temp_state+0x98>
    22aa:	80 91 7a 01 	lds	r24, 0x017A
    22ae:	90 91 7b 01 	lds	r25, 0x017B
    22b2:	a0 91 7c 01 	lds	r26, 0x017C
    22b6:	b0 91 7d 01 	lds	r27, 0x017D
    22ba:	84 31       	cpi	r24, 0x14	; 20
    22bc:	91 05       	cpc	r25, r1
    22be:	a1 05       	cpc	r26, r1
    22c0:	b1 05       	cpc	r27, r1
    22c2:	14 f4       	brge	.+4      	; 0x22c8 <Temp_state+0x98>
	{
		T_state = SAFE;
    22c4:	10 92 86 01 	sts	0x0186, r1
	}
}
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <Press_state>:

void Press_state(void)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	if (g_readings.pressure >= PRESSURE_SEVERE)
    22d6:	80 91 7e 01 	lds	r24, 0x017E
    22da:	90 91 7f 01 	lds	r25, 0x017F
    22de:	a0 91 80 01 	lds	r26, 0x0180
    22e2:	b0 91 81 01 	lds	r27, 0x0181
    22e6:	8c 3b       	cpi	r24, 0xBC	; 188
    22e8:	22 e0       	ldi	r18, 0x02	; 2
    22ea:	92 07       	cpc	r25, r18
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	a2 07       	cpc	r26, r18
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	b2 07       	cpc	r27, r18
    22f4:	24 f0       	brlt	.+8      	; 0x22fe <Press_state+0x30>
	{
		P_state = SEVERE;
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	80 93 85 01 	sts	0x0185, r24
    22fc:	46 c0       	rjmp	.+140    	; 0x238a <Press_state+0xbc>
	}
	else if ((g_readings.pressure >= PRESSURE_MODERATE) && (g_readings.pressure < PRESSURE_SEVERE))
    22fe:	80 91 7e 01 	lds	r24, 0x017E
    2302:	90 91 7f 01 	lds	r25, 0x017F
    2306:	a0 91 80 01 	lds	r26, 0x0180
    230a:	b0 91 81 01 	lds	r27, 0x0181
    230e:	84 3f       	cpi	r24, 0xF4	; 244
    2310:	21 e0       	ldi	r18, 0x01	; 1
    2312:	92 07       	cpc	r25, r18
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	a2 07       	cpc	r26, r18
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	b2 07       	cpc	r27, r18
    231c:	a4 f0       	brlt	.+40     	; 0x2346 <Press_state+0x78>
    231e:	80 91 7e 01 	lds	r24, 0x017E
    2322:	90 91 7f 01 	lds	r25, 0x017F
    2326:	a0 91 80 01 	lds	r26, 0x0180
    232a:	b0 91 81 01 	lds	r27, 0x0181
    232e:	8c 3b       	cpi	r24, 0xBC	; 188
    2330:	22 e0       	ldi	r18, 0x02	; 2
    2332:	92 07       	cpc	r25, r18
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	a2 07       	cpc	r26, r18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	b2 07       	cpc	r27, r18
    233c:	24 f4       	brge	.+8      	; 0x2346 <Press_state+0x78>
	{
		P_state = MODERATE;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	80 93 85 01 	sts	0x0185, r24
    2344:	22 c0       	rjmp	.+68     	; 0x238a <Press_state+0xbc>
	}
	else if ((g_readings.pressure >= PRESSURE_SAFE) && (g_readings.pressure < PRESSURE_MODERATE))
    2346:	80 91 7e 01 	lds	r24, 0x017E
    234a:	90 91 7f 01 	lds	r25, 0x017F
    234e:	a0 91 80 01 	lds	r26, 0x0180
    2352:	b0 91 81 01 	lds	r27, 0x0181
    2356:	8c 32       	cpi	r24, 0x2C	; 44
    2358:	21 e0       	ldi	r18, 0x01	; 1
    235a:	92 07       	cpc	r25, r18
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	a2 07       	cpc	r26, r18
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	b2 07       	cpc	r27, r18
    2364:	94 f0       	brlt	.+36     	; 0x238a <Press_state+0xbc>
    2366:	80 91 7e 01 	lds	r24, 0x017E
    236a:	90 91 7f 01 	lds	r25, 0x017F
    236e:	a0 91 80 01 	lds	r26, 0x0180
    2372:	b0 91 81 01 	lds	r27, 0x0181
    2376:	84 3f       	cpi	r24, 0xF4	; 244
    2378:	21 e0       	ldi	r18, 0x01	; 1
    237a:	92 07       	cpc	r25, r18
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	a2 07       	cpc	r26, r18
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	b2 07       	cpc	r27, r18
    2384:	14 f4       	brge	.+4      	; 0x238a <Press_state+0xbc>
	{
		P_state = SAFE;
    2386:	10 92 85 01 	sts	0x0185, r1
	}
}
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <Action_severe>:

void Action_severe(void)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	BUZZER_ON(BMP_BUZZER_PORT,BMP_BUZZER_PIN);
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	64 e0       	ldi	r22, 0x04	; 4
    239c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <BUZZER_ON>
	if (T_state == SEVERE || T_state == MODERATE)
    23a0:	80 91 86 01 	lds	r24, 0x0186
    23a4:	82 30       	cpi	r24, 0x02	; 2
    23a6:	21 f0       	breq	.+8      	; 0x23b0 <Action_severe+0x20>
    23a8:	80 91 86 01 	lds	r24, 0x0186
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	19 f4       	brne	.+6      	; 0x23b6 <Action_severe+0x26>
	{
		WATERPUMP_on();
    23b0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <WATERPUMP_on>
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <Action_severe+0x2a>
	}
	else
	{
		WATERPUMP_off();
    23b6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <WATERPUMP_off>
	}
	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_HIGH);
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	63 e0       	ldi	r22, 0x03	; 3
    23be:	41 e0       	ldi	r20, 0x01	; 1
    23c0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
//	_delay_ms(5);
//	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_LOW);
}
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <Action_moderate>:

void Action_moderate(void)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
	BUZZER_ON(BMP_BUZZER_PORT,BMP_BUZZER_PIN);
    23d2:	83 e0       	ldi	r24, 0x03	; 3
    23d4:	64 e0       	ldi	r22, 0x04	; 4
    23d6:	0e 94 44 16 	call	0x2c88	; 0x2c88 <BUZZER_ON>
	if (T_state == SEVERE || T_state == MODERATE)
    23da:	80 91 86 01 	lds	r24, 0x0186
    23de:	82 30       	cpi	r24, 0x02	; 2
    23e0:	21 f0       	breq	.+8      	; 0x23ea <Action_moderate+0x20>
    23e2:	80 91 86 01 	lds	r24, 0x0186
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	19 f4       	brne	.+6      	; 0x23f0 <Action_moderate+0x26>
	{
		WATERPUMP_on();
    23ea:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <WATERPUMP_on>
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <Action_moderate+0x2a>
	}
	else
	{
		WATERPUMP_off();
    23f0:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <WATERPUMP_off>

	}
	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_LOW);
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	63 e0       	ldi	r22, 0x03	; 3
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <Action_safe>:

void Action_safe(void)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
	BUZZER_OFF(BMP_BUZZER_PORT,BMP_BUZZER_PIN);
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	64 e0       	ldi	r22, 0x04	; 4
    2410:	0e 94 55 16 	call	0x2caa	; 0x2caa <BUZZER_OFF>
	WATERPUMP_off();
    2414:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <WATERPUMP_off>
	DIO_writePin(SLS_FLAG_PORT, SLS_FLAG_PIN, LOGIC_LOW);
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	63 e0       	ldi	r22, 0x03	; 3
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <Detection_LED_init>:

void Detection_LED_init(void)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	LED_init(BMP_BUZZER_PORT,BMP_BUZZER_PIN);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	64 e0       	ldi	r22, 0x04	; 4
    2434:	0e 94 d6 15 	call	0x2bac	; 0x2bac <LED_init>
	BUZZER_init(BMP_LED_PORT,BMP_LED_PIN);
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	65 e0       	ldi	r22, 0x05	; 5
    243c:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <BUZZER_init>
}
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <main>:

int main()
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	aa 97       	sbiw	r28, 0x2a	; 42
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	aa e7       	ldi	r26, 0x7A	; 122
    2460:	b3 e4       	ldi	r27, 0x43	; 67
    2462:	89 8f       	std	Y+25, r24	; 0x19
    2464:	9a 8f       	std	Y+26, r25	; 0x1a
    2466:	ab 8f       	std	Y+27, r26	; 0x1b
    2468:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	69 8d       	ldd	r22, Y+25	; 0x19
    246c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a e7       	ldi	r20, 0x7A	; 122
    2478:	55 e4       	ldi	r21, 0x45	; 69
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8d 8b       	std	Y+21, r24	; 0x15
    2484:	9e 8b       	std	Y+22, r25	; 0x16
    2486:	af 8b       	std	Y+23, r26	; 0x17
    2488:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    248a:	6d 89       	ldd	r22, Y+21	; 0x15
    248c:	7e 89       	ldd	r23, Y+22	; 0x16
    248e:	8f 89       	ldd	r24, Y+23	; 0x17
    2490:	98 8d       	ldd	r25, Y+24	; 0x18
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <main+0x66>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <main+0xe4>
	else if (__tmp > 65535)
    24ac:	6d 89       	ldd	r22, Y+21	; 0x15
    24ae:	7e 89       	ldd	r23, Y+22	; 0x16
    24b0:	8f 89       	ldd	r24, Y+23	; 0x17
    24b2:	98 8d       	ldd	r25, Y+24	; 0x18
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <main+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	69 8d       	ldd	r22, Y+25	; 0x19
    24c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9c 8b       	std	Y+20, r25	; 0x14
    24ea:	8b 8b       	std	Y+19, r24	; 0x13
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <main+0xc6>
    24ee:	80 e9       	ldi	r24, 0x90	; 144
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	9a 8b       	std	Y+18, r25	; 0x12
    24f4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f6:	89 89       	ldd	r24, Y+17	; 0x11
    24f8:	9a 89       	ldd	r25, Y+18	; 0x12
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <main+0xb4>
    24fe:	9a 8b       	std	Y+18, r25	; 0x12
    2500:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8b 89       	ldd	r24, Y+19	; 0x13
    2504:	9c 89       	ldd	r25, Y+20	; 0x14
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9c 8b       	std	Y+20, r25	; 0x14
    250a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8b 89       	ldd	r24, Y+19	; 0x13
    250e:	9c 89       	ldd	r25, Y+20	; 0x14
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <main+0xa8>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <main+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6d 89       	ldd	r22, Y+21	; 0x15
    2518:	7e 89       	ldd	r23, Y+22	; 0x16
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
    252a:	8b 89       	ldd	r24, Y+19	; 0x13
    252c:	9c 89       	ldd	r25, Y+20	; 0x14
    252e:	98 8b       	std	Y+16, r25	; 0x10
    2530:	8f 87       	std	Y+15, r24	; 0x0f
    2532:	8f 85       	ldd	r24, Y+15	; 0x0f
    2534:	98 89       	ldd	r25, Y+16	; 0x10
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <main+0xf0>
    253a:	98 8b       	std	Y+16, r25	; 0x10
    253c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	TWI_init();
    253e:	0e 94 75 07 	call	0xeea	; 0xeea <TWI_init>
	BMP180_Start();
    2542:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <BMP180_Start>
	Detection_LED_init();
    2546:	0e 94 14 12 	call	0x2428	; 0x2428 <Detection_LED_init>
	Parking_LED_init();
    254a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Parking_LED_init>
	Timer_configuration Timer0_Configuration={Timer0,Normal,TIMER_INITIAL_VALUE,NO_COMPARE_VALUE,Prescaler_1024,timercallBckFunc};
    254e:	ce 01       	movw	r24, r28
    2550:	4d 96       	adiw	r24, 0x1d	; 29
    2552:	9f a3       	std	Y+39, r25	; 0x27
    2554:	8e a3       	std	Y+38, r24	; 0x26
    2556:	e8 e6       	ldi	r30, 0x68	; 104
    2558:	f1 e0       	ldi	r31, 0x01	; 1
    255a:	f9 a7       	std	Y+41, r31	; 0x29
    255c:	e8 a7       	std	Y+40, r30	; 0x28
    255e:	f9 e0       	ldi	r31, 0x09	; 9
    2560:	fa a7       	std	Y+42, r31	; 0x2a
    2562:	e8 a5       	ldd	r30, Y+40	; 0x28
    2564:	f9 a5       	ldd	r31, Y+41	; 0x29
    2566:	00 80       	ld	r0, Z
    2568:	88 a5       	ldd	r24, Y+40	; 0x28
    256a:	99 a5       	ldd	r25, Y+41	; 0x29
    256c:	01 96       	adiw	r24, 0x01	; 1
    256e:	99 a7       	std	Y+41, r25	; 0x29
    2570:	88 a7       	std	Y+40, r24	; 0x28
    2572:	ee a1       	ldd	r30, Y+38	; 0x26
    2574:	ff a1       	ldd	r31, Y+39	; 0x27
    2576:	00 82       	st	Z, r0
    2578:	8e a1       	ldd	r24, Y+38	; 0x26
    257a:	9f a1       	ldd	r25, Y+39	; 0x27
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	9f a3       	std	Y+39, r25	; 0x27
    2580:	8e a3       	std	Y+38, r24	; 0x26
    2582:	9a a5       	ldd	r25, Y+42	; 0x2a
    2584:	91 50       	subi	r25, 0x01	; 1
    2586:	9a a7       	std	Y+42, r25	; 0x2a
    2588:	ea a5       	ldd	r30, Y+42	; 0x2a
    258a:	ee 23       	and	r30, r30
    258c:	51 f7       	brne	.-44     	; 0x2562 <main+0x11c>

	Timer_init(&Timer0_Configuration);
    258e:	ce 01       	movw	r24, r28
    2590:	4d 96       	adiw	r24, 0x1d	; 29
    2592:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Timer_init>
	DIO_setupPinDirection(SLS_FLAG_PORT, SLS_FLAG_PIN, PIN_OUTPUT);
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	63 e0       	ldi	r22, 0x03	; 3
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_setupPinDirection>

	Ultrasonic_init(); /*initializing Ultrasonic*/
    25a0:	0e 94 21 14 	call	0x2842	; 0x2842 <Ultrasonic_init>
	WATERPUMP_init();
    25a4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <WATERPUMP_init>

	sei();
    25a8:	78 94       	sei

	while(1)
	{
		Temp_state();
    25aa:	0e 94 18 11 	call	0x2230	; 0x2230 <Temp_state>
		Press_state();
    25ae:	0e 94 67 11 	call	0x22ce	; 0x22ce <Press_state>
		if (P_state == SEVERE || T_state == SEVERE)
    25b2:	80 91 85 01 	lds	r24, 0x0185
    25b6:	82 30       	cpi	r24, 0x02	; 2
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <main+0x17c>
    25ba:	80 91 86 01 	lds	r24, 0x0186
    25be:	82 30       	cpi	r24, 0x02	; 2
    25c0:	19 f4       	brne	.+6      	; 0x25c8 <main+0x182>
		{
			Action_severe();
    25c2:	0e 94 c8 11 	call	0x2390	; 0x2390 <Action_severe>
    25c6:	1c c0       	rjmp	.+56     	; 0x2600 <main+0x1ba>
		}
		else if (P_state == MODERATE || T_state == MODERATE)
    25c8:	80 91 85 01 	lds	r24, 0x0185
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	21 f0       	breq	.+8      	; 0x25d8 <main+0x192>
    25d0:	80 91 86 01 	lds	r24, 0x0186
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	19 f4       	brne	.+6      	; 0x25de <main+0x198>
		{
			Action_moderate();
    25d8:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Action_moderate>
    25dc:	11 c0       	rjmp	.+34     	; 0x2600 <main+0x1ba>
		}
		else if (P_state == SAFE || T_state == SAFE)
    25de:	80 91 85 01 	lds	r24, 0x0185
    25e2:	88 23       	and	r24, r24
    25e4:	21 f0       	breq	.+8      	; 0x25ee <main+0x1a8>
    25e6:	80 91 86 01 	lds	r24, 0x0186
    25ea:	88 23       	and	r24, r24
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <main+0x1ae>
		{
			Action_safe();
    25ee:	0e 94 02 12 	call	0x2404	; 0x2404 <Action_safe>
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <main+0x1ba>
		}
		else
		{
			BUZZER_OFF(BMP_BUZZER_PORT,BMP_BUZZER_PIN);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	64 e0       	ldi	r22, 0x04	; 4
    25f8:	0e 94 55 16 	call	0x2caa	; 0x2caa <BUZZER_OFF>
			WATERPUMP_off();
    25fc:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <WATERPUMP_off>
		}

		g_distance = Ultrasonic_readDistance(); /*storing the measured distance*/
    2600:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Ultrasonic_readDistance>
    2604:	90 93 84 01 	sts	0x0184, r25
    2608:	80 93 83 01 	sts	0x0183, r24
		warning(g_distance);
    260c:	80 91 83 01 	lds	r24, 0x0183
    2610:	90 91 84 01 	lds	r25, 0x0184
    2614:	0e 94 83 13 	call	0x2706	; 0x2706 <warning>

		BMP180_calculate(&g_readings);
    2618:	8a e7       	ldi	r24, 0x7A	; 122
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	0e 94 d6 23 	call	0x47ac	; 0x47ac <BMP180_calculate>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	aa e7       	ldi	r26, 0x7A	; 122
    2626:	b4 e4       	ldi	r27, 0x44	; 68
    2628:	8b 87       	std	Y+11, r24	; 0x0b
    262a:	9c 87       	std	Y+12, r25	; 0x0c
    262c:	ad 87       	std	Y+13, r26	; 0x0d
    262e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2630:	6b 85       	ldd	r22, Y+11	; 0x0b
    2632:	7c 85       	ldd	r23, Y+12	; 0x0c
    2634:	8d 85       	ldd	r24, Y+13	; 0x0d
    2636:	9e 85       	ldd	r25, Y+14	; 0x0e
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a e7       	ldi	r20, 0x7A	; 122
    263e:	55 e4       	ldi	r21, 0x45	; 69
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8f 83       	std	Y+7, r24	; 0x07
    264a:	98 87       	std	Y+8, r25	; 0x08
    264c:	a9 87       	std	Y+9, r26	; 0x09
    264e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	2c f4       	brge	.+10     	; 0x2672 <main+0x22c>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <main+0x2aa>
	else if (__tmp > 65535)
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	4c f5       	brge	.+82     	; 0x26dc <main+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268a:	6b 85       	ldd	r22, Y+11	; 0x0b
    268c:	7c 85       	ldd	r23, Y+12	; 0x0c
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	9e 85       	ldd	r25, Y+14	; 0x0e
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e2       	ldi	r20, 0x20	; 32
    2698:	51 e4       	ldi	r21, 0x41	; 65
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9e 83       	std	Y+6, r25	; 0x06
    26b0:	8d 83       	std	Y+5, r24	; 0x05
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <main+0x28c>
    26b4:	80 e9       	ldi	r24, 0x90	; 144
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	8b 83       	std	Y+3, r24	; 0x03
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <main+0x27a>
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	9e 81       	ldd	r25, Y+6	; 0x06
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	69 f7       	brne	.-38     	; 0x26b4 <main+0x26e>
    26da:	67 cf       	rjmp	.-306    	; 0x25aa <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	9e 81       	ldd	r25, Y+6	; 0x06
    26f4:	9a 83       	std	Y+2, r25	; 0x02
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <main+0x2b6>
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	52 cf       	rjmp	.-348    	; 0x25aa <main+0x164>

00002706 <warning>:
	// 4.1) if Temperature = MODERATE or SEVERE
	// 4.1.1)
}

void warning(uint16 Distance)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <warning+0x6>
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
	if(Distance <= LOW_RISK_DISTANCE_UPPER_LIMIT && Distance > LOW_RISK_DISTANCE_LOWER_LIMIT)
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	89 32       	cpi	r24, 0x29	; 41
    271a:	91 05       	cpc	r25, r1
    271c:	60 f4       	brcc	.+24     	; 0x2736 <warning+0x30>
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	8f 31       	cpi	r24, 0x1F	; 31
    2724:	91 05       	cpc	r25, r1
    2726:	38 f0       	brcs	.+14     	; 0x2736 <warning+0x30>
	{
		ultrasonicInterval = LOW_RISK_DISTANCE;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	80 93 d5 01 	sts	0x01D5, r24
		Timer_reset(Timer0);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    2734:	33 c0       	rjmp	.+102    	; 0x279c <warning+0x96>
	}
	else if(Distance <= MODERATE_RISK_DISTANCE_UPPER_LIMIT && Distance > MODERATE_RISK_DISTANCE_LOWER_LIMIT)
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	9a 81       	ldd	r25, Y+2	; 0x02
    273a:	8f 31       	cpi	r24, 0x1F	; 31
    273c:	91 05       	cpc	r25, r1
    273e:	60 f4       	brcc	.+24     	; 0x2758 <warning+0x52>
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	85 31       	cpi	r24, 0x15	; 21
    2746:	91 05       	cpc	r25, r1
    2748:	38 f0       	brcs	.+14     	; 0x2758 <warning+0x52>
	{
		ultrasonicInterval = MODERATE_RISK_DISTANCE;
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	80 93 d5 01 	sts	0x01D5, r24
		Timer_reset(Timer0);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    2756:	22 c0       	rjmp	.+68     	; 0x279c <warning+0x96>
	}
	else if(Distance <= HIGH_RISK_DISTANCE_UPPER_LIMIT && Distance > HIGH_RISK_DISTANCE_LOWER_LIMIT)
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	85 31       	cpi	r24, 0x15	; 21
    275e:	91 05       	cpc	r25, r1
    2760:	60 f4       	brcc	.+24     	; 0x277a <warning+0x74>
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	8b 30       	cpi	r24, 0x0B	; 11
    2768:	91 05       	cpc	r25, r1
    276a:	38 f0       	brcs	.+14     	; 0x277a <warning+0x74>
	{
		ultrasonicInterval = HIGH_RISK_DISTANCE;
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	80 93 d5 01 	sts	0x01D5, r24
		Timer_reset(Timer0);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    2778:	11 c0       	rjmp	.+34     	; 0x279c <warning+0x96>
	}
	else if(Distance <= EXTREME_RISK_DISTANCE_UPPER_LIMIT)
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	8b 30       	cpi	r24, 0x0B	; 11
    2780:	91 05       	cpc	r25, r1
    2782:	38 f4       	brcc	.+14     	; 0x2792 <warning+0x8c>
	{
		ultrasonicInterval = EXTREME_RISK_DISTANCE;
    2784:	84 e0       	ldi	r24, 0x04	; 4
    2786:	80 93 d5 01 	sts	0x01D5, r24
		Timer_reset(Timer0);
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
    2790:	05 c0       	rjmp	.+10     	; 0x279c <warning+0x96>
	}
	else
	{
		ultrasonicInterval = SAFE_DISTANCE;
    2792:	10 92 d5 01 	sts	0x01D5, r1
		Timer_reset(Timer0);
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer_reset>
	}
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <WATERPUMP_init>:

#include "../../MCAL/DIO/dio.h"
#include "../../ECUAL/WATERPUMP/waterpump.h"

void WATERPUMP_init(void)
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <WATERPUMP_on>:

void WATERPUMP_on(void)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <WATERPUMP_off>:

void WATERPUMP_off(void)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <Ultrasonic_edgeProcessing>:
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_edgeProcessing(void)

{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
		g_edgeCount++;
    2800:	80 91 88 01 	lds	r24, 0x0188
    2804:	8f 5f       	subi	r24, 0xFF	; 255
    2806:	80 93 88 01 	sts	0x0188, r24
		if(g_edgeCount == 1)
    280a:	80 91 88 01 	lds	r24, 0x0188
    280e:	81 30       	cpi	r24, 0x01	; 1
    2810:	31 f4       	brne	.+12     	; 0x281e <Ultrasonic_edgeProcessing+0x26>
		{
			/*
			 * Clear the timer counter register to start measurements from the
			 * first detected rising edge
			 */
			Icu_clearTimerValue();
    2812:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <Icu_clearTimerValue>
			/* Detect falling edge */
			Icu_setEdgeDetectionType(FALLING);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	0e 94 38 0c 	call	0x1870	; 0x1870 <Icu_setEdgeDetectionType>
    281c:	0f c0       	rjmp	.+30     	; 0x283c <Ultrasonic_edgeProcessing+0x44>
		}
		else if(g_edgeCount == 2)
    281e:	80 91 88 01 	lds	r24, 0x0188
    2822:	82 30       	cpi	r24, 0x02	; 2
    2824:	59 f4       	brne	.+22     	; 0x283c <Ultrasonic_edgeProcessing+0x44>
		{
			/* storing the value of the 'ICR1' register in the g_timerValue variable where it's global *
		 	* as it will be used again in another function which is called "ULTRASONIC_readDistance". */

			g_timeHigh = Icu_getInputCaptureValue();
    2826:	0e 94 57 0c 	call	0x18ae	; 0x18ae <Icu_getInputCaptureValue>
    282a:	90 93 8a 01 	sts	0x018A, r25
    282e:	80 93 89 01 	sts	0x0189, r24
			/* Detect rising edge */
			

			Icu_setEdgeDetectionType(RISING);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 38 0c 	call	0x1870	; 0x1870 <Icu_setEdgeDetectionType>
			g_edgeCount=0;
    2838:	10 92 88 01 	sts	0x0188, r1
		}


}
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <Ultrasonic_init>:
 *
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_init(void)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	00 d0       	rcall	.+0      	; 0x2848 <Ultrasonic_init+0x6>
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	8a 83       	std	Y+2, r24	; 0x02
	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    2854:	8c ef       	ldi	r24, 0xFC	; 252
    2856:	93 e1       	ldi	r25, 0x13	; 19
    2858:	0e 94 26 0c 	call	0x184c	; 0x184c <Icu_setCallBack>
	/* Initialize the ICU driver */
	Icu_init(&Icu_Config);
    285c:	ce 01       	movw	r24, r28
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	0e 94 ca 0b 	call	0x1794	; 0x1794 <Icu_init>
	/*setup the direction of the trigger pin as output pin through the gpio driver*/
	DIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	65 e0       	ldi	r22, 0x05	; 5
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_setupPinDirection>
	/*disabling trigger pin*/
	DIO_writePin(PORTB_ID,PIN5_ID,LOGIC_LOW);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	65 e0       	ldi	r22, 0x05	; 5
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>

}
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <Ultrasonic_Trigger>:
 * [Description]   : Send the Trigger pulse to the ultrasonic
 *
 * [Args]          : NONE
 *******************************************************************************/
void Ultrasonic_Trigger(void)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	68 97       	sbiw	r28, 0x18	; 24
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
	DIO_writePin(PORTB_ID,PIN5_ID,1);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	65 e0       	ldi	r22, 0x05	; 5
    289a:	41 e0       	ldi	r20, 0x01	; 1
    289c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	a0 e8       	ldi	r26, 0x80	; 128
    28a6:	bf e3       	ldi	r27, 0x3F	; 63
    28a8:	8d 8b       	std	Y+21, r24	; 0x15
    28aa:	9e 8b       	std	Y+22, r25	; 0x16
    28ac:	af 8b       	std	Y+23, r26	; 0x17
    28ae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28b0:	6d 89       	ldd	r22, Y+21	; 0x15
    28b2:	7e 89       	ldd	r23, Y+22	; 0x16
    28b4:	8f 89       	ldd	r24, Y+23	; 0x17
    28b6:	98 8d       	ldd	r25, Y+24	; 0x18
    28b8:	2b ea       	ldi	r18, 0xAB	; 171
    28ba:	3a ea       	ldi	r19, 0xAA	; 170
    28bc:	4a ea       	ldi	r20, 0xAA	; 170
    28be:	50 e4       	ldi	r21, 0x40	; 64
    28c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	89 8b       	std	Y+17, r24	; 0x11
    28ca:	9a 8b       	std	Y+18, r25	; 0x12
    28cc:	ab 8b       	std	Y+19, r26	; 0x13
    28ce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28d0:	69 89       	ldd	r22, Y+17	; 0x11
    28d2:	7a 89       	ldd	r23, Y+18	; 0x12
    28d4:	8b 89       	ldd	r24, Y+19	; 0x13
    28d6:	9c 89       	ldd	r25, Y+20	; 0x14
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e8       	ldi	r20, 0x80	; 128
    28de:	5f e3       	ldi	r21, 0x3F	; 63
    28e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e4:	88 23       	and	r24, r24
    28e6:	1c f4       	brge	.+6      	; 0x28ee <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	88 8b       	std	Y+16, r24	; 0x10
    28ec:	91 c0       	rjmp	.+290    	; 0x2a10 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    28ee:	69 89       	ldd	r22, Y+17	; 0x11
    28f0:	7a 89       	ldd	r23, Y+18	; 0x12
    28f2:	8b 89       	ldd	r24, Y+19	; 0x13
    28f4:	9c 89       	ldd	r25, Y+20	; 0x14
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	53 e4       	ldi	r21, 0x43	; 67
    28fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	0c f0       	brlt	.+2      	; 0x2908 <Ultrasonic_Trigger+0x86>
    2906:	7b c0       	rjmp	.+246    	; 0x29fe <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a e7       	ldi	r20, 0x7A	; 122
    2916:	54 e4       	ldi	r21, 0x44	; 68
    2918:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8c 87       	std	Y+12, r24	; 0x0c
    2922:	9d 87       	std	Y+13, r25	; 0x0d
    2924:	ae 87       	std	Y+14, r26	; 0x0e
    2926:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	6c 85       	ldd	r22, Y+12	; 0x0c
    292a:	7d 85       	ldd	r23, Y+13	; 0x0d
    292c:	8e 85       	ldd	r24, Y+14	; 0x0e
    292e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4a e7       	ldi	r20, 0x7A	; 122
    2936:	55 e4       	ldi	r21, 0x45	; 69
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	88 87       	std	Y+8, r24	; 0x08
    2942:	99 87       	std	Y+9, r25	; 0x09
    2944:	aa 87       	std	Y+10, r26	; 0x0a
    2946:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2948:	68 85       	ldd	r22, Y+8	; 0x08
    294a:	79 85       	ldd	r23, Y+9	; 0x09
    294c:	8a 85       	ldd	r24, Y+10	; 0x0a
    294e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e8       	ldi	r20, 0x80	; 128
    2956:	5f e3       	ldi	r21, 0x3F	; 63
    2958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295c:	88 23       	and	r24, r24
    295e:	2c f4       	brge	.+10     	; 0x296a <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9f 83       	std	Y+7, r25	; 0x07
    2966:	8e 83       	std	Y+6, r24	; 0x06
    2968:	3f c0       	rjmp	.+126    	; 0x29e8 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    296a:	68 85       	ldd	r22, Y+8	; 0x08
    296c:	79 85       	ldd	r23, Y+9	; 0x09
    296e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2970:	9b 85       	ldd	r25, Y+11	; 0x0b
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	4c f5       	brge	.+82     	; 0x29d4 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2982:	6c 85       	ldd	r22, Y+12	; 0x0c
    2984:	7d 85       	ldd	r23, Y+13	; 0x0d
    2986:	8e 85       	ldd	r24, Y+14	; 0x0e
    2988:	9f 85       	ldd	r25, Y+15	; 0x0f
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9f 83       	std	Y+7, r25	; 0x07
    29a8:	8e 83       	std	Y+6, r24	; 0x06
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <Ultrasonic_Trigger+0x148>
    29ac:	80 e9       	ldi	r24, 0x90	; 144
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	9d 83       	std	Y+5, r25	; 0x05
    29b2:	8c 83       	std	Y+4, r24	; 0x04
    29b4:	8c 81       	ldd	r24, Y+4	; 0x04
    29b6:	9d 81       	ldd	r25, Y+5	; 0x05
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <Ultrasonic_Trigger+0x136>
    29bc:	9d 83       	std	Y+5, r25	; 0x05
    29be:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c0:	8e 81       	ldd	r24, Y+6	; 0x06
    29c2:	9f 81       	ldd	r25, Y+7	; 0x07
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	9f 83       	std	Y+7, r25	; 0x07
    29c8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	8e 81       	ldd	r24, Y+6	; 0x06
    29cc:	9f 81       	ldd	r25, Y+7	; 0x07
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	69 f7       	brne	.-38     	; 0x29ac <Ultrasonic_Trigger+0x12a>
    29d2:	24 c0       	rjmp	.+72     	; 0x2a1c <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d4:	68 85       	ldd	r22, Y+8	; 0x08
    29d6:	79 85       	ldd	r23, Y+9	; 0x09
    29d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29da:	9b 85       	ldd	r25, Y+11	; 0x0b
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9f 83       	std	Y+7, r25	; 0x07
    29e6:	8e 83       	std	Y+6, r24	; 0x06
    29e8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ea:	9f 81       	ldd	r25, Y+7	; 0x07
    29ec:	9b 83       	std	Y+3, r25	; 0x03
    29ee:	8a 83       	std	Y+2, r24	; 0x02
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <Ultrasonic_Trigger+0x172>
    29f8:	9b 83       	std	Y+3, r25	; 0x03
    29fa:	8a 83       	std	Y+2, r24	; 0x02
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29fe:	69 89       	ldd	r22, Y+17	; 0x11
    2a00:	7a 89       	ldd	r23, Y+18	; 0x12
    2a02:	8b 89       	ldd	r24, Y+19	; 0x13
    2a04:	9c 89       	ldd	r25, Y+20	; 0x14
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	88 8b       	std	Y+16, r24	; 0x10
    2a10:	88 89       	ldd	r24, Y+16	; 0x10
    2a12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	8a 95       	dec	r24
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <Ultrasonic_Trigger+0x194>
    2a1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_writePin(PORTB_ID,PIN5_ID,0);
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	65 e0       	ldi	r22, 0x05	; 5
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>

}
    2a26:	68 96       	adiw	r28, 0x18	; 24
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <Ultrasonic_readDistance>:
 * [Returns]       : Distance (The measured distance in Centimeter).
 * [NOTE]          : The calculated distance will be updated when use another prescaler and CPU freq
 *******************************************************************************/

uint16 Ultrasonic_readDistance(void)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <Ultrasonic_readDistance+0x6>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	static uint32 distance;
	/*for calibrating the reading due to ultrasonic tolerance*/
	static uint32 distance_calibration;

	/*enabling triggering*/
	Ultrasonic_Trigger();
    2a42:	0e 94 41 14 	call	0x2882	; 0x2882 <Ultrasonic_Trigger>
				 in this case i will work with no prescaler so prescaler=1
				 distance is divided by 2 because it is distance of going and return back*/

	/******** distance =(g_timeHigh*0.01715)*(Prescaler/FCPU)+1  ***********/

	 distance = (g_timeHigh*0.01715)/2+1;
    2a46:	80 91 89 01 	lds	r24, 0x0189
    2a4a:	90 91 8a 01 	lds	r25, 0x018A
    2a4e:	cc 01       	movw	r24, r24
    2a50:	a0 e0       	ldi	r26, 0x00	; 0
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	28 e2       	ldi	r18, 0x28	; 40
    2a66:	3e e7       	ldi	r19, 0x7E	; 126
    2a68:	4c e8       	ldi	r20, 0x8C	; 140
    2a6a:	5c e3       	ldi	r21, 0x3C	; 60
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	50 e4       	ldi	r21, 0x40	; 64
    2a80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	80 93 8f 01 	sts	0x018F, r24
    2aac:	90 93 90 01 	sts	0x0190, r25
    2ab0:	a0 93 91 01 	sts	0x0191, r26
    2ab4:	b0 93 92 01 	sts	0x0192, r27
	 /* (+1) because of ultrasonic tolerence*/
	 /*Also for calibration*/

	 if(distance>=342){
    2ab8:	80 91 8f 01 	lds	r24, 0x018F
    2abc:	90 91 90 01 	lds	r25, 0x0190
    2ac0:	a0 91 91 01 	lds	r26, 0x0191
    2ac4:	b0 91 92 01 	lds	r27, 0x0192
    2ac8:	86 35       	cpi	r24, 0x56	; 86
    2aca:	21 e0       	ldi	r18, 0x01	; 1
    2acc:	92 07       	cpc	r25, r18
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	a2 07       	cpc	r26, r18
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	b2 07       	cpc	r27, r18
    2ad6:	f0 f0       	brcs	.+60     	; 0x2b14 <Ultrasonic_readDistance+0xdc>
	 		distance_calibration=distance+2;
    2ad8:	80 91 8f 01 	lds	r24, 0x018F
    2adc:	90 91 90 01 	lds	r25, 0x0190
    2ae0:	a0 91 91 01 	lds	r26, 0x0191
    2ae4:	b0 91 92 01 	lds	r27, 0x0192
    2ae8:	02 96       	adiw	r24, 0x02	; 2
    2aea:	a1 1d       	adc	r26, r1
    2aec:	b1 1d       	adc	r27, r1
    2aee:	80 93 8b 01 	sts	0x018B, r24
    2af2:	90 93 8c 01 	sts	0x018C, r25
    2af6:	a0 93 8d 01 	sts	0x018D, r26
    2afa:	b0 93 8e 01 	sts	0x018E, r27
	 		return distance_calibration;
    2afe:	80 91 8b 01 	lds	r24, 0x018B
    2b02:	90 91 8c 01 	lds	r25, 0x018C
    2b06:	a0 91 8d 01 	lds	r26, 0x018D
    2b0a:	b0 91 8e 01 	lds	r27, 0x018E
    2b0e:	9a 83       	std	Y+2, r25	; 0x02
    2b10:	89 83       	std	Y+1, r24	; 0x01
    2b12:	45 c0       	rjmp	.+138    	; 0x2b9e <Ultrasonic_readDistance+0x166>
	 	}
	 	else if(distance>=154&&distance<342){
    2b14:	80 91 8f 01 	lds	r24, 0x018F
    2b18:	90 91 90 01 	lds	r25, 0x0190
    2b1c:	a0 91 91 01 	lds	r26, 0x0191
    2b20:	b0 91 92 01 	lds	r27, 0x0192
    2b24:	8a 39       	cpi	r24, 0x9A	; 154
    2b26:	91 05       	cpc	r25, r1
    2b28:	a1 05       	cpc	r26, r1
    2b2a:	b1 05       	cpc	r27, r1
    2b2c:	70 f1       	brcs	.+92     	; 0x2b8a <Ultrasonic_readDistance+0x152>
    2b2e:	80 91 8f 01 	lds	r24, 0x018F
    2b32:	90 91 90 01 	lds	r25, 0x0190
    2b36:	a0 91 91 01 	lds	r26, 0x0191
    2b3a:	b0 91 92 01 	lds	r27, 0x0192
    2b3e:	86 35       	cpi	r24, 0x56	; 86
    2b40:	21 e0       	ldi	r18, 0x01	; 1
    2b42:	92 07       	cpc	r25, r18
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	a2 07       	cpc	r26, r18
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	b2 07       	cpc	r27, r18
    2b4c:	f0 f4       	brcc	.+60     	; 0x2b8a <Ultrasonic_readDistance+0x152>
	 		distance_calibration=distance+1;
    2b4e:	80 91 8f 01 	lds	r24, 0x018F
    2b52:	90 91 90 01 	lds	r25, 0x0190
    2b56:	a0 91 91 01 	lds	r26, 0x0191
    2b5a:	b0 91 92 01 	lds	r27, 0x0192
    2b5e:	01 96       	adiw	r24, 0x01	; 1
    2b60:	a1 1d       	adc	r26, r1
    2b62:	b1 1d       	adc	r27, r1
    2b64:	80 93 8b 01 	sts	0x018B, r24
    2b68:	90 93 8c 01 	sts	0x018C, r25
    2b6c:	a0 93 8d 01 	sts	0x018D, r26
    2b70:	b0 93 8e 01 	sts	0x018E, r27
	 		return distance_calibration;
    2b74:	80 91 8b 01 	lds	r24, 0x018B
    2b78:	90 91 8c 01 	lds	r25, 0x018C
    2b7c:	a0 91 8d 01 	lds	r26, 0x018D
    2b80:	b0 91 8e 01 	lds	r27, 0x018E
    2b84:	9a 83       	std	Y+2, r25	; 0x02
    2b86:	89 83       	std	Y+1, r24	; 0x01
    2b88:	0a c0       	rjmp	.+20     	; 0x2b9e <Ultrasonic_readDistance+0x166>
	 	}

	 	else{
	 	return distance;}
    2b8a:	80 91 8f 01 	lds	r24, 0x018F
    2b8e:	90 91 90 01 	lds	r25, 0x0190
    2b92:	a0 91 91 01 	lds	r26, 0x0191
    2b96:	b0 91 92 01 	lds	r27, 0x0192
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02

	 	return 1;



}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <LED_init>:

#include "led.h"
#include <util/delay.h>

void LED_init(uint8 port_number, uint8 pin_number)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <LED_init+0x6>
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setupPinDirection(port_number,pin_number,PIN_OUTPUT);
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	6a 81       	ldd	r22, Y+2	; 0x02
    2bbe:	41 e0       	ldi	r20, 0x01	; 1
    2bc0:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_setupPinDirection>
	DIO_writePin(port_number,pin_number, LOGIC_LOW); /*Initiate LEDs to OFF*/
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	6a 81       	ldd	r22, Y+2	; 0x02
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	08 95       	ret

00002bd8 <LED_ON>:
 * Function to turn on LED.
 * It depends on DIO driver, as it take port number and pin number,
 * then turn on the required pin (LED).
 */
void LED_ON(uint8 port_number, uint8 pin_number)
{
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <LED_ON+0x6>
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number, LOGIC_HIGH);
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	6a 81       	ldd	r22, Y+2	; 0x02
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <LED_OFF>:
 * Function to turn off LED.
 * It depends on DIO driver, as it take port number and pin number,
 * then turn off the required pin (LED).
 */
void LED_OFF(uint8 port_number, uint8 pin_number)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <LED_OFF+0x6>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number, LOGIC_LOW);
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <LED_TOGGLE>:
 * Function to toggle LED.
 * It depends on DIO driver, as it take port number and pin number,
 * then toggle the required pin (LED).
 */
void LED_TOGGLE(uint8 port_number, uint8 pin_number)
{
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <LED_TOGGLE+0x6>
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	6a 83       	std	Y+2, r22	; 0x02
	DIO_togglePin(port_number,pin_number);
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c2e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <DIO_togglePin>
}
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <LED_IS_ON>:
/*
 * Description :
 * Function to check if the LED is on.
*/
uint8 LED_IS_ON(uint8 port_number, uint8 pin_number)
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <LED_IS_ON+0x6>
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_readPin(port_number,pin_number);
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c4e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_readPin>
}
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <BUZZER_init>:
 * Inputs: No inputs
 * Outputs: No outputs.
 */

void BUZZER_init(uint8 port_number, uint8 pin_number)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <BUZZER_init+0x6>
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	89 83       	std	Y+1, r24	; 0x01
    2c68:	6a 83       	std	Y+2, r22	; 0x02
	DIO_setupPinDirection(port_number,pin_number,PIN_OUTPUT);
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	0e 94 89 0c 	call	0x1912	; 0x1912 <DIO_setupPinDirection>
	DIO_writePin(port_number,pin_number,LOGIC_LOW);
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	6a 81       	ldd	r22, Y+2	; 0x02
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <BUZZER_ON>:
 * Inputs: No inputs
 * Outputs: No outputs.
 */

void BUZZER_ON(uint8 port_number, uint8 pin_number)
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <BUZZER_ON+0x6>
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number,LOGIC_HIGH);
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	6a 81       	ldd	r22, Y+2	; 0x02
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <BUZZER_OFF>:
 * Description : Function to turn the Buzzer Off.
 * Inputs: No inputs
 * Outputs: No outputs.
 */
void BUZZER_OFF(uint8 port_number, uint8 pin_number)
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <BUZZER_OFF+0x6>
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_writePin(port_number,pin_number,LOGIC_LOW);
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	6a 81       	ldd	r22, Y+2	; 0x02
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <DIO_writePin>
}
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <BUZZER_TOGGLE>:

void BUZZER_TOGGLE(uint8 port_number, uint8 pin_number)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <BUZZER_TOGGLE+0x6>
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_togglePin(port_number,pin_number);
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	6a 81       	ldd	r22, Y+2	; 0x02
    2cde:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <DIO_togglePin>
}
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <BMP180_ReadCalb>:
/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;
void delay(void);
void BMP180_ReadCalb(void) {
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	c2 59       	subi	r28, 0x92	; 146
    2cfa:	d0 40       	sbci	r29, 0x00	; 0
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61

	uint8_t Callib_Data[22] = { 0 };
    2d06:	ce 01       	movw	r24, r28
    2d08:	83 58       	subi	r24, 0x83	; 131
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	26 e1       	ldi	r18, 0x16	; 22
    2d0e:	fc 01       	movw	r30, r24
    2d10:	df 01       	movw	r26, r30
    2d12:	82 2f       	mov	r24, r18
    2d14:	1d 92       	st	X+, r1
    2d16:	8a 95       	dec	r24
    2d18:	e9 f7       	brne	.-6      	; 0x2d14 <BMP180_ReadCalb+0x28>
	uint16_t Callib_Start = 0xAA;
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	e5 58       	subi	r30, 0x85	; 133
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	8a ea       	ldi	r24, 0xAA	; 170
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24

	for (int i = 0; i < 22; i++) {
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e7 58       	subi	r30, 0x87	; 135
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	11 82       	std	Z+1, r1	; 0x01
    2d30:	10 82       	st	Z, r1
    2d32:	d9 c4       	rjmp	.+2482   	; 0x36e6 <BMP180_ReadCalb+0x9fa>
		TWI_Start_Wait(BMP180_ADDRESS_W);// To write
    2d34:	8e ee       	ldi	r24, 0xEE	; 238
    2d36:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	eb 58       	subi	r30, 0x8B	; 139
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	a0 e2       	ldi	r26, 0x20	; 32
    2d46:	b1 e4       	ldi	r27, 0x41	; 65
    2d48:	80 83       	st	Z, r24
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	a2 83       	std	Z+2, r26	; 0x02
    2d4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d50:	8e 01       	movw	r16, r28
    2d52:	0f 58       	subi	r16, 0x8F	; 143
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	fe 01       	movw	r30, r28
    2d58:	eb 58       	subi	r30, 0x8B	; 139
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	2b ea       	ldi	r18, 0xAB	; 171
    2d66:	3a ea       	ldi	r19, 0xAA	; 170
    2d68:	4a ea       	ldi	r20, 0xAA	; 170
    2d6a:	50 e4       	ldi	r21, 0x40	; 64
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	f8 01       	movw	r30, r16
    2d76:	80 83       	st	Z, r24
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	a2 83       	std	Z+2, r26	; 0x02
    2d7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ef 58       	subi	r30, 0x8F	; 143
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e8       	ldi	r20, 0x80	; 128
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d98:	88 23       	and	r24, r24
    2d9a:	34 f4       	brge	.+12     	; 0x2da8 <BMP180_ReadCalb+0xbc>
		__ticks = 1;
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e0 59       	subi	r30, 0x90	; 144
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	80 83       	st	Z, r24
    2da6:	e0 c0       	rjmp	.+448    	; 0x2f68 <BMP180_ReadCalb+0x27c>
	else if (__tmp > 255)
    2da8:	fe 01       	movw	r30, r28
    2daa:	ef 58       	subi	r30, 0x8F	; 143
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4f e7       	ldi	r20, 0x7F	; 127
    2dbc:	53 e4       	ldi	r21, 0x43	; 67
    2dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc2:	18 16       	cp	r1, r24
    2dc4:	0c f0       	brlt	.+2      	; 0x2dc8 <BMP180_ReadCalb+0xdc>
    2dc6:	c0 c0       	rjmp	.+384    	; 0x2f48 <BMP180_ReadCalb+0x25c>
	{
		_delay_ms(__us / 1000.0);
    2dc8:	fe 01       	movw	r30, r28
    2dca:	eb 58       	subi	r30, 0x8B	; 139
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a e7       	ldi	r20, 0x7A	; 122
    2ddc:	54 e4       	ldi	r21, 0x44	; 68
    2dde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	fe 01       	movw	r30, r28
    2de8:	e4 59       	subi	r30, 0x94	; 148
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 83       	st	Z, r24
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	a2 83       	std	Z+2, r26	; 0x02
    2df2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df4:	8e 01       	movw	r16, r28
    2df6:	08 59       	subi	r16, 0x98	; 152
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e4 59       	subi	r30, 0x94	; 148
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	4a e7       	ldi	r20, 0x7A	; 122
    2e0e:	55 e4       	ldi	r21, 0x45	; 69
    2e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	f8 01       	movw	r30, r16
    2e1a:	80 83       	st	Z, r24
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	a2 83       	std	Z+2, r26	; 0x02
    2e20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e22:	fe 01       	movw	r30, r28
    2e24:	e8 59       	subi	r30, 0x98	; 152
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	60 81       	ld	r22, Z
    2e2a:	71 81       	ldd	r23, Z+1	; 0x01
    2e2c:	82 81       	ldd	r24, Z+2	; 0x02
    2e2e:	93 81       	ldd	r25, Z+3	; 0x03
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e8       	ldi	r20, 0x80	; 128
    2e36:	5f e3       	ldi	r21, 0x3F	; 63
    2e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	44 f4       	brge	.+16     	; 0x2e50 <BMP180_ReadCalb+0x164>
		__ticks = 1;
    2e40:	fe 01       	movw	r30, r28
    2e42:	ea 59       	subi	r30, 0x9A	; 154
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	80 83       	st	Z, r24
    2e4e:	64 c0       	rjmp	.+200    	; 0x2f18 <BMP180_ReadCalb+0x22c>
	else if (__tmp > 65535)
    2e50:	fe 01       	movw	r30, r28
    2e52:	e8 59       	subi	r30, 0x98	; 152
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	60 81       	ld	r22, Z
    2e58:	71 81       	ldd	r23, Z+1	; 0x01
    2e5a:	82 81       	ldd	r24, Z+2	; 0x02
    2e5c:	93 81       	ldd	r25, Z+3	; 0x03
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	3f ef       	ldi	r19, 0xFF	; 255
    2e62:	4f e7       	ldi	r20, 0x7F	; 127
    2e64:	57 e4       	ldi	r21, 0x47	; 71
    2e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e6a:	18 16       	cp	r1, r24
    2e6c:	0c f0       	brlt	.+2      	; 0x2e70 <BMP180_ReadCalb+0x184>
    2e6e:	43 c0       	rjmp	.+134    	; 0x2ef6 <BMP180_ReadCalb+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e70:	fe 01       	movw	r30, r28
    2e72:	e4 59       	subi	r30, 0x94	; 148
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	60 81       	ld	r22, Z
    2e78:	71 81       	ldd	r23, Z+1	; 0x01
    2e7a:	82 81       	ldd	r24, Z+2	; 0x02
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	8e 01       	movw	r16, r28
    2e90:	0a 59       	subi	r16, 0x9A	; 154
    2e92:	1f 4f       	sbci	r17, 0xFF	; 255
    2e94:	bc 01       	movw	r22, r24
    2e96:	cd 01       	movw	r24, r26
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	f8 01       	movw	r30, r16
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	1f c0       	rjmp	.+62     	; 0x2ee6 <BMP180_ReadCalb+0x1fa>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ec 59       	subi	r30, 0x9C	; 156
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 e9       	ldi	r24, 0x90	; 144
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ec 59       	subi	r30, 0x9C	; 156
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 81       	ld	r24, Z
    2ebe:	91 81       	ldd	r25, Z+1	; 0x01
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <BMP180_ReadCalb+0x1d4>
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ec 59       	subi	r30, 0x9C	; 156
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ece:	de 01       	movw	r26, r28
    2ed0:	aa 59       	subi	r26, 0x9A	; 154
    2ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ea 59       	subi	r30, 0x9A	; 154
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	11 96       	adiw	r26, 0x01	; 1
    2ee2:	9c 93       	st	X, r25
    2ee4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ea 59       	subi	r30, 0x9A	; 154
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	d1 f6       	brne	.-76     	; 0x2ea8 <BMP180_ReadCalb+0x1bc>
    2ef4:	4b c0       	rjmp	.+150    	; 0x2f8c <BMP180_ReadCalb+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef6:	8e 01       	movw	r16, r28
    2ef8:	0a 59       	subi	r16, 0x9A	; 154
    2efa:	1f 4f       	sbci	r17, 0xFF	; 255
    2efc:	fe 01       	movw	r30, r28
    2efe:	e8 59       	subi	r30, 0x98	; 152
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	f8 01       	movw	r30, r16
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
    2f18:	de 01       	movw	r26, r28
    2f1a:	ae 59       	subi	r26, 0x9E	; 158
    2f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ea 59       	subi	r30, 0x9A	; 154
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	11 96       	adiw	r26, 0x01	; 1
    2f2a:	9c 93       	st	X, r25
    2f2c:	8e 93       	st	-X, r24
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ee 59       	subi	r30, 0x9E	; 158
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <BMP180_ReadCalb+0x24c>
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	ee 59       	subi	r30, 0x9E	; 158
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	91 83       	std	Z+1, r25	; 0x01
    2f44:	80 83       	st	Z, r24
    2f46:	22 c0       	rjmp	.+68     	; 0x2f8c <BMP180_ReadCalb+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f48:	8e 01       	movw	r16, r28
    2f4a:	00 59       	subi	r16, 0x90	; 144
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ef 58       	subi	r30, 0x8F	; 143
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	60 81       	ld	r22, Z
    2f56:	71 81       	ldd	r23, Z+1	; 0x01
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	93 81       	ldd	r25, Z+3	; 0x03
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	f8 01       	movw	r30, r16
    2f66:	80 83       	st	Z, r24
    2f68:	de 01       	movw	r26, r28
    2f6a:	af 59       	subi	r26, 0x9F	; 159
    2f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6e:	fe 01       	movw	r30, r28
    2f70:	e0 59       	subi	r30, 0x90	; 144
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f78:	fe 01       	movw	r30, r28
    2f7a:	ef 59       	subi	r30, 0x9F	; 159
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	8a 95       	dec	r24
    2f82:	f1 f7       	brne	.-4      	; 0x2f80 <BMP180_ReadCalb+0x294>
    2f84:	fe 01       	movw	r30, r28
    2f86:	ef 59       	subi	r30, 0x9F	; 159
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_WriteByte(Callib_Start + i);
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	e5 58       	subi	r30, 0x85	; 133
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	90 81       	ld	r25, Z
    2f94:	fe 01       	movw	r30, r28
    2f96:	e7 58       	subi	r30, 0x87	; 135
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	80 81       	ld	r24, Z
    2f9c:	89 0f       	add	r24, r25
    2f9e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e3 5a       	subi	r30, 0xA3	; 163
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	a0 e2       	ldi	r26, 0x20	; 32
    2fae:	b1 e4       	ldi	r27, 0x41	; 65
    2fb0:	80 83       	st	Z, r24
    2fb2:	91 83       	std	Z+1, r25	; 0x01
    2fb4:	a2 83       	std	Z+2, r26	; 0x02
    2fb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fb8:	8e 01       	movw	r16, r28
    2fba:	07 5a       	subi	r16, 0xA7	; 167
    2fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e3 5a       	subi	r30, 0xA3	; 163
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	2b ea       	ldi	r18, 0xAB	; 171
    2fce:	3a ea       	ldi	r19, 0xAA	; 170
    2fd0:	4a ea       	ldi	r20, 0xAA	; 170
    2fd2:	50 e4       	ldi	r21, 0x40	; 64
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	f8 01       	movw	r30, r16
    2fde:	80 83       	st	Z, r24
    2fe0:	91 83       	std	Z+1, r25	; 0x01
    2fe2:	a2 83       	std	Z+2, r26	; 0x02
    2fe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e7 5a       	subi	r30, 0xA7	; 167
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	60 81       	ld	r22, Z
    2fee:	71 81       	ldd	r23, Z+1	; 0x01
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	93 81       	ldd	r25, Z+3	; 0x03
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e8       	ldi	r20, 0x80	; 128
    2ffa:	5f e3       	ldi	r21, 0x3F	; 63
    2ffc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3000:	88 23       	and	r24, r24
    3002:	34 f4       	brge	.+12     	; 0x3010 <BMP180_ReadCalb+0x324>
		__ticks = 1;
    3004:	fe 01       	movw	r30, r28
    3006:	e8 5a       	subi	r30, 0xA8	; 168
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	80 83       	st	Z, r24
    300e:	e0 c0       	rjmp	.+448    	; 0x31d0 <BMP180_ReadCalb+0x4e4>
	else if (__tmp > 255)
    3010:	fe 01       	movw	r30, r28
    3012:	e7 5a       	subi	r30, 0xA7	; 167
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	53 e4       	ldi	r21, 0x43	; 67
    3026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	0c f0       	brlt	.+2      	; 0x3030 <BMP180_ReadCalb+0x344>
    302e:	c0 c0       	rjmp	.+384    	; 0x31b0 <BMP180_ReadCalb+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    3030:	fe 01       	movw	r30, r28
    3032:	e3 5a       	subi	r30, 0xA3	; 163
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	54 e4       	ldi	r21, 0x44	; 68
    3046:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	fe 01       	movw	r30, r28
    3050:	ec 5a       	subi	r30, 0xAC	; 172
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	80 83       	st	Z, r24
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	a2 83       	std	Z+2, r26	; 0x02
    305a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305c:	8e 01       	movw	r16, r28
    305e:	00 5b       	subi	r16, 0xB0	; 176
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	fe 01       	movw	r30, r28
    3064:	ec 5a       	subi	r30, 0xAC	; 172
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a e7       	ldi	r20, 0x7A	; 122
    3076:	55 e4       	ldi	r21, 0x45	; 69
    3078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	f8 01       	movw	r30, r16
    3082:	80 83       	st	Z, r24
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	a2 83       	std	Z+2, r26	; 0x02
    3088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    308a:	fe 01       	movw	r30, r28
    308c:	e0 5b       	subi	r30, 0xB0	; 176
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a4:	88 23       	and	r24, r24
    30a6:	44 f4       	brge	.+16     	; 0x30b8 <BMP180_ReadCalb+0x3cc>
		__ticks = 1;
    30a8:	fe 01       	movw	r30, r28
    30aa:	e2 5b       	subi	r30, 0xB2	; 178
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	80 83       	st	Z, r24
    30b6:	64 c0       	rjmp	.+200    	; 0x3180 <BMP180_ReadCalb+0x494>
	else if (__tmp > 65535)
    30b8:	fe 01       	movw	r30, r28
    30ba:	e0 5b       	subi	r30, 0xB0	; 176
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	3f ef       	ldi	r19, 0xFF	; 255
    30ca:	4f e7       	ldi	r20, 0x7F	; 127
    30cc:	57 e4       	ldi	r21, 0x47	; 71
    30ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	0c f0       	brlt	.+2      	; 0x30d8 <BMP180_ReadCalb+0x3ec>
    30d6:	43 c0       	rjmp	.+134    	; 0x315e <BMP180_ReadCalb+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d8:	fe 01       	movw	r30, r28
    30da:	ec 5a       	subi	r30, 0xAC	; 172
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e2       	ldi	r20, 0x20	; 32
    30ec:	51 e4       	ldi	r21, 0x41	; 65
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	8e 01       	movw	r16, r28
    30f8:	02 5b       	subi	r16, 0xB2	; 178
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	f8 01       	movw	r30, r16
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
    310e:	1f c0       	rjmp	.+62     	; 0x314e <BMP180_ReadCalb+0x462>
    3110:	fe 01       	movw	r30, r28
    3112:	e4 5b       	subi	r30, 0xB4	; 180
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 e9       	ldi	r24, 0x90	; 144
    3118:	91 e0       	ldi	r25, 0x01	; 1
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    311e:	fe 01       	movw	r30, r28
    3120:	e4 5b       	subi	r30, 0xB4	; 180
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	91 81       	ldd	r25, Z+1	; 0x01
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <BMP180_ReadCalb+0x43c>
    312c:	fe 01       	movw	r30, r28
    312e:	e4 5b       	subi	r30, 0xB4	; 180
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3136:	de 01       	movw	r26, r28
    3138:	a2 5b       	subi	r26, 0xB2	; 178
    313a:	bf 4f       	sbci	r27, 0xFF	; 255
    313c:	fe 01       	movw	r30, r28
    313e:	e2 5b       	subi	r30, 0xB2	; 178
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	11 96       	adiw	r26, 0x01	; 1
    314a:	9c 93       	st	X, r25
    314c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314e:	fe 01       	movw	r30, r28
    3150:	e2 5b       	subi	r30, 0xB2	; 178
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	80 81       	ld	r24, Z
    3156:	91 81       	ldd	r25, Z+1	; 0x01
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	d1 f6       	brne	.-76     	; 0x3110 <BMP180_ReadCalb+0x424>
    315c:	4b c0       	rjmp	.+150    	; 0x31f4 <BMP180_ReadCalb+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315e:	8e 01       	movw	r16, r28
    3160:	02 5b       	subi	r16, 0xB2	; 178
    3162:	1f 4f       	sbci	r17, 0xFF	; 255
    3164:	fe 01       	movw	r30, r28
    3166:	e0 5b       	subi	r30, 0xB0	; 176
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	60 81       	ld	r22, Z
    316c:	71 81       	ldd	r23, Z+1	; 0x01
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	f8 01       	movw	r30, r16
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	80 83       	st	Z, r24
    3180:	de 01       	movw	r26, r28
    3182:	a6 5b       	subi	r26, 0xB6	; 182
    3184:	bf 4f       	sbci	r27, 0xFF	; 255
    3186:	fe 01       	movw	r30, r28
    3188:	e2 5b       	subi	r30, 0xB2	; 178
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	11 96       	adiw	r26, 0x01	; 1
    3192:	9c 93       	st	X, r25
    3194:	8e 93       	st	-X, r24
    3196:	fe 01       	movw	r30, r28
    3198:	e6 5b       	subi	r30, 0xB6	; 182
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <BMP180_ReadCalb+0x4b4>
    31a4:	fe 01       	movw	r30, r28
    31a6:	e6 5b       	subi	r30, 0xB6	; 182
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
    31ae:	22 c0       	rjmp	.+68     	; 0x31f4 <BMP180_ReadCalb+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31b0:	8e 01       	movw	r16, r28
    31b2:	08 5a       	subi	r16, 0xA8	; 168
    31b4:	1f 4f       	sbci	r17, 0xFF	; 255
    31b6:	fe 01       	movw	r30, r28
    31b8:	e7 5a       	subi	r30, 0xA7	; 167
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	60 81       	ld	r22, Z
    31be:	71 81       	ldd	r23, Z+1	; 0x01
    31c0:	82 81       	ldd	r24, Z+2	; 0x02
    31c2:	93 81       	ldd	r25, Z+3	; 0x03
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	f8 01       	movw	r30, r16
    31ce:	80 83       	st	Z, r24
    31d0:	de 01       	movw	r26, r28
    31d2:	a7 5b       	subi	r26, 0xB7	; 183
    31d4:	bf 4f       	sbci	r27, 0xFF	; 255
    31d6:	fe 01       	movw	r30, r28
    31d8:	e8 5a       	subi	r30, 0xA8	; 168
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31e0:	fe 01       	movw	r30, r28
    31e2:	e7 5b       	subi	r30, 0xB7	; 183
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	80 81       	ld	r24, Z
    31e8:	8a 95       	dec	r24
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <BMP180_ReadCalb+0x4fc>
    31ec:	fe 01       	movw	r30, r28
    31ee:	e7 5b       	subi	r30, 0xB7	; 183
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_Repeated_start(BMP180_ADDRESS_R);	// To read
    31f4:	8f ee       	ldi	r24, 0xEF	; 239
    31f6:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
    31fa:	fe 01       	movw	r30, r28
    31fc:	eb 5b       	subi	r30, 0xBB	; 187
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	a0 e2       	ldi	r26, 0x20	; 32
    3206:	b1 e4       	ldi	r27, 0x41	; 65
    3208:	80 83       	st	Z, r24
    320a:	91 83       	std	Z+1, r25	; 0x01
    320c:	a2 83       	std	Z+2, r26	; 0x02
    320e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3210:	8e 01       	movw	r16, r28
    3212:	0f 5b       	subi	r16, 0xBF	; 191
    3214:	1f 4f       	sbci	r17, 0xFF	; 255
    3216:	fe 01       	movw	r30, r28
    3218:	eb 5b       	subi	r30, 0xBB	; 187
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	60 81       	ld	r22, Z
    321e:	71 81       	ldd	r23, Z+1	; 0x01
    3220:	82 81       	ldd	r24, Z+2	; 0x02
    3222:	93 81       	ldd	r25, Z+3	; 0x03
    3224:	2b ea       	ldi	r18, 0xAB	; 171
    3226:	3a ea       	ldi	r19, 0xAA	; 170
    3228:	4a ea       	ldi	r20, 0xAA	; 170
    322a:	50 e4       	ldi	r21, 0x40	; 64
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	f8 01       	movw	r30, r16
    3236:	80 83       	st	Z, r24
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	a2 83       	std	Z+2, r26	; 0x02
    323c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    323e:	fe 01       	movw	r30, r28
    3240:	ef 5b       	subi	r30, 0xBF	; 191
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	82 81       	ldd	r24, Z+2	; 0x02
    324a:	93 81       	ldd	r25, Z+3	; 0x03
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e8       	ldi	r20, 0x80	; 128
    3252:	5f e3       	ldi	r21, 0x3F	; 63
    3254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3258:	88 23       	and	r24, r24
    325a:	34 f4       	brge	.+12     	; 0x3268 <BMP180_ReadCalb+0x57c>
		__ticks = 1;
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	fe 01       	movw	r30, r28
    3260:	e0 5c       	subi	r30, 0xC0	; 192
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 83       	st	Z, r24
    3266:	9d c0       	rjmp	.+314    	; 0x33a2 <BMP180_ReadCalb+0x6b6>
	else if (__tmp > 255)
    3268:	fe 01       	movw	r30, r28
    326a:	ef 5b       	subi	r30, 0xBF	; 191
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4f e7       	ldi	r20, 0x7F	; 127
    327c:	53 e4       	ldi	r21, 0x43	; 67
    327e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	0c f0       	brlt	.+2      	; 0x3288 <BMP180_ReadCalb+0x59c>
    3286:	7e c0       	rjmp	.+252    	; 0x3384 <BMP180_ReadCalb+0x698>
	{
		_delay_ms(__us / 1000.0);
    3288:	fe 01       	movw	r30, r28
    328a:	eb 5b       	subi	r30, 0xBB	; 187
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	60 81       	ld	r22, Z
    3290:	71 81       	ldd	r23, Z+1	; 0x01
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	93 81       	ldd	r25, Z+3	; 0x03
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4a e7       	ldi	r20, 0x7A	; 122
    329c:	54 e4       	ldi	r21, 0x44	; 68
    329e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	8c af       	std	Y+60, r24	; 0x3c
    32a8:	9d af       	std	Y+61, r25	; 0x3d
    32aa:	ae af       	std	Y+62, r26	; 0x3e
    32ac:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    32b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    32b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    32b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	4a e7       	ldi	r20, 0x7A	; 122
    32bc:	55 e4       	ldi	r21, 0x45	; 69
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	88 af       	std	Y+56, r24	; 0x38
    32c8:	99 af       	std	Y+57, r25	; 0x39
    32ca:	aa af       	std	Y+58, r26	; 0x3a
    32cc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    32ce:	68 ad       	ldd	r22, Y+56	; 0x38
    32d0:	79 ad       	ldd	r23, Y+57	; 0x39
    32d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    32d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e2:	88 23       	and	r24, r24
    32e4:	2c f4       	brge	.+10     	; 0x32f0 <BMP180_ReadCalb+0x604>
		__ticks = 1;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	9f ab       	std	Y+55, r25	; 0x37
    32ec:	8e ab       	std	Y+54, r24	; 0x36
    32ee:	3f c0       	rjmp	.+126    	; 0x336e <BMP180_ReadCalb+0x682>
	else if (__tmp > 65535)
    32f0:	68 ad       	ldd	r22, Y+56	; 0x38
    32f2:	79 ad       	ldd	r23, Y+57	; 0x39
    32f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    32f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	3f ef       	ldi	r19, 0xFF	; 255
    32fc:	4f e7       	ldi	r20, 0x7F	; 127
    32fe:	57 e4       	ldi	r21, 0x47	; 71
    3300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3304:	18 16       	cp	r1, r24
    3306:	4c f5       	brge	.+82     	; 0x335a <BMP180_ReadCalb+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3308:	6c ad       	ldd	r22, Y+60	; 0x3c
    330a:	7d ad       	ldd	r23, Y+61	; 0x3d
    330c:	8e ad       	ldd	r24, Y+62	; 0x3e
    330e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e2       	ldi	r20, 0x20	; 32
    3316:	51 e4       	ldi	r21, 0x41	; 65
    3318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9f ab       	std	Y+55, r25	; 0x37
    332e:	8e ab       	std	Y+54, r24	; 0x36
    3330:	0f c0       	rjmp	.+30     	; 0x3350 <BMP180_ReadCalb+0x664>
    3332:	80 e9       	ldi	r24, 0x90	; 144
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	9d ab       	std	Y+53, r25	; 0x35
    3338:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    333a:	8c a9       	ldd	r24, Y+52	; 0x34
    333c:	9d a9       	ldd	r25, Y+53	; 0x35
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <BMP180_ReadCalb+0x652>
    3342:	9d ab       	std	Y+53, r25	; 0x35
    3344:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3346:	8e a9       	ldd	r24, Y+54	; 0x36
    3348:	9f a9       	ldd	r25, Y+55	; 0x37
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	9f ab       	std	Y+55, r25	; 0x37
    334e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3350:	8e a9       	ldd	r24, Y+54	; 0x36
    3352:	9f a9       	ldd	r25, Y+55	; 0x37
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	69 f7       	brne	.-38     	; 0x3332 <BMP180_ReadCalb+0x646>
    3358:	2d c0       	rjmp	.+90     	; 0x33b4 <BMP180_ReadCalb+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335a:	68 ad       	ldd	r22, Y+56	; 0x38
    335c:	79 ad       	ldd	r23, Y+57	; 0x39
    335e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3360:	9b ad       	ldd	r25, Y+59	; 0x3b
    3362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	9f ab       	std	Y+55, r25	; 0x37
    336c:	8e ab       	std	Y+54, r24	; 0x36
    336e:	8e a9       	ldd	r24, Y+54	; 0x36
    3370:	9f a9       	ldd	r25, Y+55	; 0x37
    3372:	9b ab       	std	Y+51, r25	; 0x33
    3374:	8a ab       	std	Y+50, r24	; 0x32
    3376:	8a a9       	ldd	r24, Y+50	; 0x32
    3378:	9b a9       	ldd	r25, Y+51	; 0x33
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <BMP180_ReadCalb+0x68e>
    337e:	9b ab       	std	Y+51, r25	; 0x33
    3380:	8a ab       	std	Y+50, r24	; 0x32
    3382:	18 c0       	rjmp	.+48     	; 0x33b4 <BMP180_ReadCalb+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3384:	fe 01       	movw	r30, r28
    3386:	ef 5b       	subi	r30, 0xBF	; 191
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	fe 01       	movw	r30, r28
    339c:	e0 5c       	subi	r30, 0xC0	; 192
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 83       	st	Z, r24
    33a2:	fe 01       	movw	r30, r28
    33a4:	e0 5c       	subi	r30, 0xC0	; 192
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ac:	89 a9       	ldd	r24, Y+49	; 0x31
    33ae:	8a 95       	dec	r24
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <BMP180_ReadCalb+0x6c2>
    33b2:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		Callib_Data[i] = TWI_ReadByteWithNACK();
    33b4:	fe 01       	movw	r30, r28
    33b6:	e7 58       	subi	r30, 0x87	; 135
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	00 81       	ld	r16, Z
    33bc:	11 81       	ldd	r17, Z+1	; 0x01
    33be:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    33c2:	28 2f       	mov	r18, r24
    33c4:	ce 01       	movw	r24, r28
    33c6:	83 58       	subi	r24, 0x83	; 131
    33c8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ca:	fc 01       	movw	r30, r24
    33cc:	e0 0f       	add	r30, r16
    33ce:	f1 1f       	adc	r31, r17
    33d0:	20 83       	st	Z, r18
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	a0 e2       	ldi	r26, 0x20	; 32
    33d8:	b1 e4       	ldi	r27, 0x41	; 65
    33da:	8d a7       	std	Y+45, r24	; 0x2d
    33dc:	9e a7       	std	Y+46, r25	; 0x2e
    33de:	af a7       	std	Y+47, r26	; 0x2f
    33e0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    33e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    33e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33e8:	98 a9       	ldd	r25, Y+48	; 0x30
    33ea:	2b ea       	ldi	r18, 0xAB	; 171
    33ec:	3a ea       	ldi	r19, 0xAA	; 170
    33ee:	4a ea       	ldi	r20, 0xAA	; 170
    33f0:	50 e4       	ldi	r21, 0x40	; 64
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	89 a7       	std	Y+41, r24	; 0x29
    33fc:	9a a7       	std	Y+42, r25	; 0x2a
    33fe:	ab a7       	std	Y+43, r26	; 0x2b
    3400:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3402:	69 a5       	ldd	r22, Y+41	; 0x29
    3404:	7a a5       	ldd	r23, Y+42	; 0x2a
    3406:	8b a5       	ldd	r24, Y+43	; 0x2b
    3408:	9c a5       	ldd	r25, Y+44	; 0x2c
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3416:	88 23       	and	r24, r24
    3418:	1c f4       	brge	.+6      	; 0x3420 <BMP180_ReadCalb+0x734>
		__ticks = 1;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	88 a7       	std	Y+40, r24	; 0x28
    341e:	91 c0       	rjmp	.+290    	; 0x3542 <BMP180_ReadCalb+0x856>
	else if (__tmp > 255)
    3420:	69 a5       	ldd	r22, Y+41	; 0x29
    3422:	7a a5       	ldd	r23, Y+42	; 0x2a
    3424:	8b a5       	ldd	r24, Y+43	; 0x2b
    3426:	9c a5       	ldd	r25, Y+44	; 0x2c
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	53 e4       	ldi	r21, 0x43	; 67
    3430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	0c f0       	brlt	.+2      	; 0x343a <BMP180_ReadCalb+0x74e>
    3438:	7b c0       	rjmp	.+246    	; 0x3530 <BMP180_ReadCalb+0x844>
	{
		_delay_ms(__us / 1000.0);
    343a:	6d a5       	ldd	r22, Y+45	; 0x2d
    343c:	7e a5       	ldd	r23, Y+46	; 0x2e
    343e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3440:	98 a9       	ldd	r25, Y+48	; 0x30
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	4a e7       	ldi	r20, 0x7A	; 122
    3448:	54 e4       	ldi	r21, 0x44	; 68
    344a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	8c a3       	std	Y+36, r24	; 0x24
    3454:	9d a3       	std	Y+37, r25	; 0x25
    3456:	ae a3       	std	Y+38, r26	; 0x26
    3458:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345a:	6c a1       	ldd	r22, Y+36	; 0x24
    345c:	7d a1       	ldd	r23, Y+37	; 0x25
    345e:	8e a1       	ldd	r24, Y+38	; 0x26
    3460:	9f a1       	ldd	r25, Y+39	; 0x27
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	4a e7       	ldi	r20, 0x7A	; 122
    3468:	55 e4       	ldi	r21, 0x45	; 69
    346a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	88 a3       	std	Y+32, r24	; 0x20
    3474:	99 a3       	std	Y+33, r25	; 0x21
    3476:	aa a3       	std	Y+34, r26	; 0x22
    3478:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    347a:	68 a1       	ldd	r22, Y+32	; 0x20
    347c:	79 a1       	ldd	r23, Y+33	; 0x21
    347e:	8a a1       	ldd	r24, Y+34	; 0x22
    3480:	9b a1       	ldd	r25, Y+35	; 0x23
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e8       	ldi	r20, 0x80	; 128
    3488:	5f e3       	ldi	r21, 0x3F	; 63
    348a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    348e:	88 23       	and	r24, r24
    3490:	2c f4       	brge	.+10     	; 0x349c <BMP180_ReadCalb+0x7b0>
		__ticks = 1;
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9f 8f       	std	Y+31, r25	; 0x1f
    3498:	8e 8f       	std	Y+30, r24	; 0x1e
    349a:	3f c0       	rjmp	.+126    	; 0x351a <BMP180_ReadCalb+0x82e>
	else if (__tmp > 65535)
    349c:	68 a1       	ldd	r22, Y+32	; 0x20
    349e:	79 a1       	ldd	r23, Y+33	; 0x21
    34a0:	8a a1       	ldd	r24, Y+34	; 0x22
    34a2:	9b a1       	ldd	r25, Y+35	; 0x23
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	3f ef       	ldi	r19, 0xFF	; 255
    34a8:	4f e7       	ldi	r20, 0x7F	; 127
    34aa:	57 e4       	ldi	r21, 0x47	; 71
    34ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b0:	18 16       	cp	r1, r24
    34b2:	4c f5       	brge	.+82     	; 0x3506 <BMP180_ReadCalb+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b4:	6c a1       	ldd	r22, Y+36	; 0x24
    34b6:	7d a1       	ldd	r23, Y+37	; 0x25
    34b8:	8e a1       	ldd	r24, Y+38	; 0x26
    34ba:	9f a1       	ldd	r25, Y+39	; 0x27
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e2       	ldi	r20, 0x20	; 32
    34c2:	51 e4       	ldi	r21, 0x41	; 65
    34c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	bc 01       	movw	r22, r24
    34ce:	cd 01       	movw	r24, r26
    34d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	9f 8f       	std	Y+31, r25	; 0x1f
    34da:	8e 8f       	std	Y+30, r24	; 0x1e
    34dc:	0f c0       	rjmp	.+30     	; 0x34fc <BMP180_ReadCalb+0x810>
    34de:	80 e9       	ldi	r24, 0x90	; 144
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	9d 8f       	std	Y+29, r25	; 0x1d
    34e4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <BMP180_ReadCalb+0x7fe>
    34ee:	9d 8f       	std	Y+29, r25	; 0x1d
    34f0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	9f 8f       	std	Y+31, r25	; 0x1f
    34fa:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	69 f7       	brne	.-38     	; 0x34de <BMP180_ReadCalb+0x7f2>
    3504:	24 c0       	rjmp	.+72     	; 0x354e <BMP180_ReadCalb+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3506:	68 a1       	ldd	r22, Y+32	; 0x20
    3508:	79 a1       	ldd	r23, Y+33	; 0x21
    350a:	8a a1       	ldd	r24, Y+34	; 0x22
    350c:	9b a1       	ldd	r25, Y+35	; 0x23
    350e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	9f 8f       	std	Y+31, r25	; 0x1f
    3518:	8e 8f       	std	Y+30, r24	; 0x1e
    351a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    351c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    351e:	9b 8f       	std	Y+27, r25	; 0x1b
    3520:	8a 8f       	std	Y+26, r24	; 0x1a
    3522:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3524:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <BMP180_ReadCalb+0x83a>
    352a:	9b 8f       	std	Y+27, r25	; 0x1b
    352c:	8a 8f       	std	Y+26, r24	; 0x1a
    352e:	0f c0       	rjmp	.+30     	; 0x354e <BMP180_ReadCalb+0x862>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3530:	69 a5       	ldd	r22, Y+41	; 0x29
    3532:	7a a5       	ldd	r23, Y+42	; 0x2a
    3534:	8b a5       	ldd	r24, Y+43	; 0x2b
    3536:	9c a5       	ldd	r25, Y+44	; 0x2c
    3538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	88 a7       	std	Y+40, r24	; 0x28
    3542:	88 a5       	ldd	r24, Y+40	; 0x28
    3544:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3546:	89 8d       	ldd	r24, Y+25	; 0x19
    3548:	8a 95       	dec	r24
    354a:	f1 f7       	brne	.-4      	; 0x3548 <BMP180_ReadCalb+0x85c>
    354c:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		TWI_Stop();
    354e:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	a0 e2       	ldi	r26, 0x20	; 32
    3558:	b1 e4       	ldi	r27, 0x41	; 65
    355a:	8d 8b       	std	Y+21, r24	; 0x15
    355c:	9e 8b       	std	Y+22, r25	; 0x16
    355e:	af 8b       	std	Y+23, r26	; 0x17
    3560:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3562:	6d 89       	ldd	r22, Y+21	; 0x15
    3564:	7e 89       	ldd	r23, Y+22	; 0x16
    3566:	8f 89       	ldd	r24, Y+23	; 0x17
    3568:	98 8d       	ldd	r25, Y+24	; 0x18
    356a:	2b ea       	ldi	r18, 0xAB	; 171
    356c:	3a ea       	ldi	r19, 0xAA	; 170
    356e:	4a ea       	ldi	r20, 0xAA	; 170
    3570:	50 e4       	ldi	r21, 0x40	; 64
    3572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	89 8b       	std	Y+17, r24	; 0x11
    357c:	9a 8b       	std	Y+18, r25	; 0x12
    357e:	ab 8b       	std	Y+19, r26	; 0x13
    3580:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3582:	69 89       	ldd	r22, Y+17	; 0x11
    3584:	7a 89       	ldd	r23, Y+18	; 0x12
    3586:	8b 89       	ldd	r24, Y+19	; 0x13
    3588:	9c 89       	ldd	r25, Y+20	; 0x14
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e8       	ldi	r20, 0x80	; 128
    3590:	5f e3       	ldi	r21, 0x3F	; 63
    3592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3596:	88 23       	and	r24, r24
    3598:	1c f4       	brge	.+6      	; 0x35a0 <BMP180_ReadCalb+0x8b4>
		__ticks = 1;
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	88 8b       	std	Y+16, r24	; 0x10
    359e:	91 c0       	rjmp	.+290    	; 0x36c2 <BMP180_ReadCalb+0x9d6>
	else if (__tmp > 255)
    35a0:	69 89       	ldd	r22, Y+17	; 0x11
    35a2:	7a 89       	ldd	r23, Y+18	; 0x12
    35a4:	8b 89       	ldd	r24, Y+19	; 0x13
    35a6:	9c 89       	ldd	r25, Y+20	; 0x14
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	4f e7       	ldi	r20, 0x7F	; 127
    35ae:	53 e4       	ldi	r21, 0x43	; 67
    35b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35b4:	18 16       	cp	r1, r24
    35b6:	0c f0       	brlt	.+2      	; 0x35ba <BMP180_ReadCalb+0x8ce>
    35b8:	7b c0       	rjmp	.+246    	; 0x36b0 <BMP180_ReadCalb+0x9c4>
	{
		_delay_ms(__us / 1000.0);
    35ba:	6d 89       	ldd	r22, Y+21	; 0x15
    35bc:	7e 89       	ldd	r23, Y+22	; 0x16
    35be:	8f 89       	ldd	r24, Y+23	; 0x17
    35c0:	98 8d       	ldd	r25, Y+24	; 0x18
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	4a e7       	ldi	r20, 0x7A	; 122
    35c8:	54 e4       	ldi	r21, 0x44	; 68
    35ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	8c 87       	std	Y+12, r24	; 0x0c
    35d4:	9d 87       	std	Y+13, r25	; 0x0d
    35d6:	ae 87       	std	Y+14, r26	; 0x0e
    35d8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35da:	6c 85       	ldd	r22, Y+12	; 0x0c
    35dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    35de:	8e 85       	ldd	r24, Y+14	; 0x0e
    35e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	4a e7       	ldi	r20, 0x7A	; 122
    35e8:	55 e4       	ldi	r21, 0x45	; 69
    35ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	88 87       	std	Y+8, r24	; 0x08
    35f4:	99 87       	std	Y+9, r25	; 0x09
    35f6:	aa 87       	std	Y+10, r26	; 0x0a
    35f8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35fa:	68 85       	ldd	r22, Y+8	; 0x08
    35fc:	79 85       	ldd	r23, Y+9	; 0x09
    35fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3600:	9b 85       	ldd	r25, Y+11	; 0x0b
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e8       	ldi	r20, 0x80	; 128
    3608:	5f e3       	ldi	r21, 0x3F	; 63
    360a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360e:	88 23       	and	r24, r24
    3610:	2c f4       	brge	.+10     	; 0x361c <BMP180_ReadCalb+0x930>
		__ticks = 1;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	9f 83       	std	Y+7, r25	; 0x07
    3618:	8e 83       	std	Y+6, r24	; 0x06
    361a:	3f c0       	rjmp	.+126    	; 0x369a <BMP180_ReadCalb+0x9ae>
	else if (__tmp > 65535)
    361c:	68 85       	ldd	r22, Y+8	; 0x08
    361e:	79 85       	ldd	r23, Y+9	; 0x09
    3620:	8a 85       	ldd	r24, Y+10	; 0x0a
    3622:	9b 85       	ldd	r25, Y+11	; 0x0b
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	3f ef       	ldi	r19, 0xFF	; 255
    3628:	4f e7       	ldi	r20, 0x7F	; 127
    362a:	57 e4       	ldi	r21, 0x47	; 71
    362c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3630:	18 16       	cp	r1, r24
    3632:	4c f5       	brge	.+82     	; 0x3686 <BMP180_ReadCalb+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3634:	6c 85       	ldd	r22, Y+12	; 0x0c
    3636:	7d 85       	ldd	r23, Y+13	; 0x0d
    3638:	8e 85       	ldd	r24, Y+14	; 0x0e
    363a:	9f 85       	ldd	r25, Y+15	; 0x0f
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e2       	ldi	r20, 0x20	; 32
    3642:	51 e4       	ldi	r21, 0x41	; 65
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	bc 01       	movw	r22, r24
    364e:	cd 01       	movw	r24, r26
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9f 83       	std	Y+7, r25	; 0x07
    365a:	8e 83       	std	Y+6, r24	; 0x06
    365c:	0f c0       	rjmp	.+30     	; 0x367c <BMP180_ReadCalb+0x990>
    365e:	80 e9       	ldi	r24, 0x90	; 144
    3660:	91 e0       	ldi	r25, 0x01	; 1
    3662:	9d 83       	std	Y+5, r25	; 0x05
    3664:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3666:	8c 81       	ldd	r24, Y+4	; 0x04
    3668:	9d 81       	ldd	r25, Y+5	; 0x05
    366a:	01 97       	sbiw	r24, 0x01	; 1
    366c:	f1 f7       	brne	.-4      	; 0x366a <BMP180_ReadCalb+0x97e>
    366e:	9d 83       	std	Y+5, r25	; 0x05
    3670:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3672:	8e 81       	ldd	r24, Y+6	; 0x06
    3674:	9f 81       	ldd	r25, Y+7	; 0x07
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	9f 83       	std	Y+7, r25	; 0x07
    367a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367c:	8e 81       	ldd	r24, Y+6	; 0x06
    367e:	9f 81       	ldd	r25, Y+7	; 0x07
    3680:	00 97       	sbiw	r24, 0x00	; 0
    3682:	69 f7       	brne	.-38     	; 0x365e <BMP180_ReadCalb+0x972>
    3684:	24 c0       	rjmp	.+72     	; 0x36ce <BMP180_ReadCalb+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3686:	68 85       	ldd	r22, Y+8	; 0x08
    3688:	79 85       	ldd	r23, Y+9	; 0x09
    368a:	8a 85       	ldd	r24, Y+10	; 0x0a
    368c:	9b 85       	ldd	r25, Y+11	; 0x0b
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9f 83       	std	Y+7, r25	; 0x07
    3698:	8e 83       	std	Y+6, r24	; 0x06
    369a:	8e 81       	ldd	r24, Y+6	; 0x06
    369c:	9f 81       	ldd	r25, Y+7	; 0x07
    369e:	9b 83       	std	Y+3, r25	; 0x03
    36a0:	8a 83       	std	Y+2, r24	; 0x02
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <BMP180_ReadCalb+0x9ba>
    36aa:	9b 83       	std	Y+3, r25	; 0x03
    36ac:	8a 83       	std	Y+2, r24	; 0x02
    36ae:	0f c0       	rjmp	.+30     	; 0x36ce <BMP180_ReadCalb+0x9e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36b0:	69 89       	ldd	r22, Y+17	; 0x11
    36b2:	7a 89       	ldd	r23, Y+18	; 0x12
    36b4:	8b 89       	ldd	r24, Y+19	; 0x13
    36b6:	9c 89       	ldd	r25, Y+20	; 0x14
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	88 8b       	std	Y+16, r24	; 0x10
    36c2:	88 89       	ldd	r24, Y+16	; 0x10
    36c4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	8a 95       	dec	r24
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <BMP180_ReadCalb+0x9dc>
    36cc:	89 83       	std	Y+1, r24	; 0x01
void BMP180_ReadCalb(void) {

	uint8_t Callib_Data[22] = { 0 };
	uint16_t Callib_Start = 0xAA;

	for (int i = 0; i < 22; i++) {
    36ce:	de 01       	movw	r26, r28
    36d0:	a7 58       	subi	r26, 0x87	; 135
    36d2:	bf 4f       	sbci	r27, 0xFF	; 255
    36d4:	fe 01       	movw	r30, r28
    36d6:	e7 58       	subi	r30, 0x87	; 135
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 81       	ld	r24, Z
    36dc:	91 81       	ldd	r25, Z+1	; 0x01
    36de:	01 96       	adiw	r24, 0x01	; 1
    36e0:	11 96       	adiw	r26, 0x01	; 1
    36e2:	9c 93       	st	X, r25
    36e4:	8e 93       	st	-X, r24
    36e6:	fe 01       	movw	r30, r28
    36e8:	e7 58       	subi	r30, 0x87	; 135
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	91 81       	ldd	r25, Z+1	; 0x01
    36f0:	86 31       	cpi	r24, 0x16	; 22
    36f2:	91 05       	cpc	r25, r1
    36f4:	0c f4       	brge	.+2      	; 0x36f8 <BMP180_ReadCalb+0xa0c>
    36f6:	1e cb       	rjmp	.-2500   	; 0x2d34 <BMP180_ReadCalb+0x48>
		_delay_us(10);
		TWI_Stop();
		_delay_us(10);
	}

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
    36f8:	fe 01       	movw	r30, r28
    36fa:	e3 58       	subi	r30, 0x83	; 131
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	80 81       	ld	r24, Z
    3700:	88 2f       	mov	r24, r24
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	38 2f       	mov	r19, r24
    3706:	22 27       	eor	r18, r18
    3708:	fe 01       	movw	r30, r28
    370a:	e3 58       	subi	r30, 0x83	; 131
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	81 81       	ldd	r24, Z+1	; 0x01
    3710:	88 2f       	mov	r24, r24
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	82 2b       	or	r24, r18
    3716:	93 2b       	or	r25, r19
    3718:	90 93 94 01 	sts	0x0194, r25
    371c:	80 93 93 01 	sts	0x0193, r24
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
    3720:	fe 01       	movw	r30, r28
    3722:	e3 58       	subi	r30, 0x83	; 131
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	88 2f       	mov	r24, r24
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	38 2f       	mov	r19, r24
    372e:	22 27       	eor	r18, r18
    3730:	fe 01       	movw	r30, r28
    3732:	e3 58       	subi	r30, 0x83	; 131
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	83 81       	ldd	r24, Z+3	; 0x03
    3738:	88 2f       	mov	r24, r24
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	82 2b       	or	r24, r18
    373e:	93 2b       	or	r25, r19
    3740:	90 93 96 01 	sts	0x0196, r25
    3744:	80 93 95 01 	sts	0x0195, r24
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
    3748:	fe 01       	movw	r30, r28
    374a:	e3 58       	subi	r30, 0x83	; 131
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	84 81       	ldd	r24, Z+4	; 0x04
    3750:	88 2f       	mov	r24, r24
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	38 2f       	mov	r19, r24
    3756:	22 27       	eor	r18, r18
    3758:	fe 01       	movw	r30, r28
    375a:	e3 58       	subi	r30, 0x83	; 131
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	85 81       	ldd	r24, Z+5	; 0x05
    3760:	88 2f       	mov	r24, r24
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	82 2b       	or	r24, r18
    3766:	93 2b       	or	r25, r19
    3768:	90 93 98 01 	sts	0x0198, r25
    376c:	80 93 97 01 	sts	0x0197, r24
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
    3770:	fe 01       	movw	r30, r28
    3772:	e3 58       	subi	r30, 0x83	; 131
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	86 81       	ldd	r24, Z+6	; 0x06
    3778:	88 2f       	mov	r24, r24
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	38 2f       	mov	r19, r24
    377e:	22 27       	eor	r18, r18
    3780:	fe 01       	movw	r30, r28
    3782:	e3 58       	subi	r30, 0x83	; 131
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	87 81       	ldd	r24, Z+7	; 0x07
    3788:	88 2f       	mov	r24, r24
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	82 2b       	or	r24, r18
    378e:	93 2b       	or	r25, r19
    3790:	90 93 a4 01 	sts	0x01A4, r25
    3794:	80 93 a3 01 	sts	0x01A3, r24
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
    3798:	fe 01       	movw	r30, r28
    379a:	e3 58       	subi	r30, 0x83	; 131
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 85       	ldd	r24, Z+8	; 0x08
    37a0:	88 2f       	mov	r24, r24
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	38 2f       	mov	r19, r24
    37a6:	22 27       	eor	r18, r18
    37a8:	fe 01       	movw	r30, r28
    37aa:	e3 58       	subi	r30, 0x83	; 131
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	81 85       	ldd	r24, Z+9	; 0x09
    37b0:	88 2f       	mov	r24, r24
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	82 2b       	or	r24, r18
    37b6:	93 2b       	or	r25, r19
    37b8:	90 93 a6 01 	sts	0x01A6, r25
    37bc:	80 93 a5 01 	sts	0x01A5, r24
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
    37c0:	fe 01       	movw	r30, r28
    37c2:	e3 58       	subi	r30, 0x83	; 131
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	82 85       	ldd	r24, Z+10	; 0x0a
    37c8:	88 2f       	mov	r24, r24
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	38 2f       	mov	r19, r24
    37ce:	22 27       	eor	r18, r18
    37d0:	fe 01       	movw	r30, r28
    37d2:	e3 58       	subi	r30, 0x83	; 131
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	83 85       	ldd	r24, Z+11	; 0x0b
    37d8:	88 2f       	mov	r24, r24
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	82 2b       	or	r24, r18
    37de:	93 2b       	or	r25, r19
    37e0:	90 93 a8 01 	sts	0x01A8, r25
    37e4:	80 93 a7 01 	sts	0x01A7, r24
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
    37e8:	fe 01       	movw	r30, r28
    37ea:	e3 58       	subi	r30, 0x83	; 131
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	84 85       	ldd	r24, Z+12	; 0x0c
    37f0:	88 2f       	mov	r24, r24
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	38 2f       	mov	r19, r24
    37f6:	22 27       	eor	r18, r18
    37f8:	fe 01       	movw	r30, r28
    37fa:	e3 58       	subi	r30, 0x83	; 131
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	85 85       	ldd	r24, Z+13	; 0x0d
    3800:	88 2f       	mov	r24, r24
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	82 2b       	or	r24, r18
    3806:	93 2b       	or	r25, r19
    3808:	90 93 9a 01 	sts	0x019A, r25
    380c:	80 93 99 01 	sts	0x0199, r24
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
    3810:	fe 01       	movw	r30, r28
    3812:	e3 58       	subi	r30, 0x83	; 131
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	86 85       	ldd	r24, Z+14	; 0x0e
    3818:	88 2f       	mov	r24, r24
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	38 2f       	mov	r19, r24
    381e:	22 27       	eor	r18, r18
    3820:	fe 01       	movw	r30, r28
    3822:	e3 58       	subi	r30, 0x83	; 131
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	87 85       	ldd	r24, Z+15	; 0x0f
    3828:	88 2f       	mov	r24, r24
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	82 2b       	or	r24, r18
    382e:	93 2b       	or	r25, r19
    3830:	90 93 9c 01 	sts	0x019C, r25
    3834:	80 93 9b 01 	sts	0x019B, r24
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
    3838:	fe 01       	movw	r30, r28
    383a:	e3 58       	subi	r30, 0x83	; 131
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 89       	ldd	r24, Z+16	; 0x10
    3840:	88 2f       	mov	r24, r24
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	38 2f       	mov	r19, r24
    3846:	22 27       	eor	r18, r18
    3848:	fe 01       	movw	r30, r28
    384a:	e3 58       	subi	r30, 0x83	; 131
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	81 89       	ldd	r24, Z+17	; 0x11
    3850:	88 2f       	mov	r24, r24
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	82 2b       	or	r24, r18
    3856:	93 2b       	or	r25, r19
    3858:	90 93 9e 01 	sts	0x019E, r25
    385c:	80 93 9d 01 	sts	0x019D, r24
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
    3860:	fe 01       	movw	r30, r28
    3862:	e3 58       	subi	r30, 0x83	; 131
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	82 89       	ldd	r24, Z+18	; 0x12
    3868:	88 2f       	mov	r24, r24
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	38 2f       	mov	r19, r24
    386e:	22 27       	eor	r18, r18
    3870:	fe 01       	movw	r30, r28
    3872:	e3 58       	subi	r30, 0x83	; 131
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	83 89       	ldd	r24, Z+19	; 0x13
    3878:	88 2f       	mov	r24, r24
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	82 2b       	or	r24, r18
    387e:	93 2b       	or	r25, r19
    3880:	90 93 a0 01 	sts	0x01A0, r25
    3884:	80 93 9f 01 	sts	0x019F, r24
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
    3888:	fe 01       	movw	r30, r28
    388a:	e3 58       	subi	r30, 0x83	; 131
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	84 89       	ldd	r24, Z+20	; 0x14
    3890:	88 2f       	mov	r24, r24
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	38 2f       	mov	r19, r24
    3896:	22 27       	eor	r18, r18
    3898:	fe 01       	movw	r30, r28
    389a:	e3 58       	subi	r30, 0x83	; 131
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	85 89       	ldd	r24, Z+21	; 0x15
    38a0:	88 2f       	mov	r24, r24
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	82 2b       	or	r24, r18
    38a6:	93 2b       	or	r25, r19
    38a8:	90 93 a2 01 	sts	0x01A2, r25
    38ac:	80 93 a1 01 	sts	0x01A1, r24

}
    38b0:	ce 56       	subi	r28, 0x6E	; 110
    38b2:	df 4f       	sbci	r29, 0xFF	; 255
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	1f 91       	pop	r17
    38c4:	0f 91       	pop	r16
    38c6:	08 95       	ret

000038c8 <Get_UP>:

uint32 Get_UP(void) {
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	66 97       	sbiw	r28, 0x16	; 22
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
	// calculate the value to write to the BMP180 control register based on the oversampling setting
	uint8 datatowrite = 0x34 + (OSS << 6);
    38dc:	84 e3       	ldi	r24, 0x34	; 52
    38de:	8b 8b       	std	Y+19, r24	; 0x13
	// array to store the raw pressure data
	uint8 Pressure_RAW[3] = { 0 };
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	fe 01       	movw	r30, r28
    38e4:	74 96       	adiw	r30, 0x14	; 20
    38e6:	df 01       	movw	r26, r30
    38e8:	98 2f       	mov	r25, r24
    38ea:	1d 92       	st	X+, r1
    38ec:	9a 95       	dec	r25
    38ee:	e9 f7       	brne	.-6      	; 0x38ea <Get_UP+0x22>

	uint32 data = 0;
    38f0:	1f 86       	std	Y+15, r1	; 0x0f
    38f2:	18 8a       	std	Y+16, r1	; 0x10
    38f4:	19 8a       	std	Y+17, r1	; 0x11
    38f6:	1a 8a       	std	Y+18, r1	; 0x12

	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    38f8:	8e ee       	ldi	r24, 0xEE	; 238
    38fa:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    38fe:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// send the address of the BMP180 control register to initiate the pressure measurement
	TWI_WriteByte(0xF4);
    3902:	84 ef       	ldi	r24, 0xF4	; 244
    3904:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3908:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// send the value calculated above to start the measurement with the selected oversampling setting
	TWI_WriteByte(datatowrite);
    390c:	8b 89       	ldd	r24, Y+19	; 0x13
    390e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3912:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    3916:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	a0 ea       	ldi	r26, 0xA0	; 160
    3920:	b0 e4       	ldi	r27, 0x40	; 64
    3922:	8b 87       	std	Y+11, r24	; 0x0b
    3924:	9c 87       	std	Y+12, r25	; 0x0c
    3926:	ad 87       	std	Y+13, r26	; 0x0d
    3928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    392a:	6b 85       	ldd	r22, Y+11	; 0x0b
    392c:	7c 85       	ldd	r23, Y+12	; 0x0c
    392e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3930:	9e 85       	ldd	r25, Y+14	; 0x0e
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a e7       	ldi	r20, 0x7A	; 122
    3938:	55 e4       	ldi	r21, 0x45	; 69
    393a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8f 83       	std	Y+7, r24	; 0x07
    3944:	98 87       	std	Y+8, r25	; 0x08
    3946:	a9 87       	std	Y+9, r26	; 0x09
    3948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    394a:	6f 81       	ldd	r22, Y+7	; 0x07
    394c:	78 85       	ldd	r23, Y+8	; 0x08
    394e:	89 85       	ldd	r24, Y+9	; 0x09
    3950:	9a 85       	ldd	r25, Y+10	; 0x0a
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e8       	ldi	r20, 0x80	; 128
    3958:	5f e3       	ldi	r21, 0x3F	; 63
    395a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395e:	88 23       	and	r24, r24
    3960:	2c f4       	brge	.+10     	; 0x396c <Get_UP+0xa4>
		__ticks = 1;
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9e 83       	std	Y+6, r25	; 0x06
    3968:	8d 83       	std	Y+5, r24	; 0x05
    396a:	3f c0       	rjmp	.+126    	; 0x39ea <Get_UP+0x122>
	else if (__tmp > 65535)
    396c:	6f 81       	ldd	r22, Y+7	; 0x07
    396e:	78 85       	ldd	r23, Y+8	; 0x08
    3970:	89 85       	ldd	r24, Y+9	; 0x09
    3972:	9a 85       	ldd	r25, Y+10	; 0x0a
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	3f ef       	ldi	r19, 0xFF	; 255
    3978:	4f e7       	ldi	r20, 0x7F	; 127
    397a:	57 e4       	ldi	r21, 0x47	; 71
    397c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3980:	18 16       	cp	r1, r24
    3982:	4c f5       	brge	.+82     	; 0x39d6 <Get_UP+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3984:	6b 85       	ldd	r22, Y+11	; 0x0b
    3986:	7c 85       	ldd	r23, Y+12	; 0x0c
    3988:	8d 85       	ldd	r24, Y+13	; 0x0d
    398a:	9e 85       	ldd	r25, Y+14	; 0x0e
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e2       	ldi	r20, 0x20	; 32
    3992:	51 e4       	ldi	r21, 0x41	; 65
    3994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	bc 01       	movw	r22, r24
    399e:	cd 01       	movw	r24, r26
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	9e 83       	std	Y+6, r25	; 0x06
    39aa:	8d 83       	std	Y+5, r24	; 0x05
    39ac:	0f c0       	rjmp	.+30     	; 0x39cc <Get_UP+0x104>
    39ae:	80 e9       	ldi	r24, 0x90	; 144
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	9c 83       	std	Y+4, r25	; 0x04
    39b4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39b6:	8b 81       	ldd	r24, Y+3	; 0x03
    39b8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ba:	01 97       	sbiw	r24, 0x01	; 1
    39bc:	f1 f7       	brne	.-4      	; 0x39ba <Get_UP+0xf2>
    39be:	9c 83       	std	Y+4, r25	; 0x04
    39c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c2:	8d 81       	ldd	r24, Y+5	; 0x05
    39c4:	9e 81       	ldd	r25, Y+6	; 0x06
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	9e 83       	std	Y+6, r25	; 0x06
    39ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39cc:	8d 81       	ldd	r24, Y+5	; 0x05
    39ce:	9e 81       	ldd	r25, Y+6	; 0x06
    39d0:	00 97       	sbiw	r24, 0x00	; 0
    39d2:	69 f7       	brne	.-38     	; 0x39ae <Get_UP+0xe6>
    39d4:	14 c0       	rjmp	.+40     	; 0x39fe <Get_UP+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d6:	6f 81       	ldd	r22, Y+7	; 0x07
    39d8:	78 85       	ldd	r23, Y+8	; 0x08
    39da:	89 85       	ldd	r24, Y+9	; 0x09
    39dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	9e 83       	std	Y+6, r25	; 0x06
    39e8:	8d 83       	std	Y+5, r24	; 0x05
    39ea:	8d 81       	ldd	r24, Y+5	; 0x05
    39ec:	9e 81       	ldd	r25, Y+6	; 0x06
    39ee:	9a 83       	std	Y+2, r25	; 0x02
    39f0:	89 83       	std	Y+1, r24	; 0x01
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	9a 81       	ldd	r25, Y+2	; 0x02
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <Get_UP+0x12e>
    39fa:	9a 83       	std	Y+2, r25	; 0x02
    39fc:	89 83       	std	Y+1, r24	; 0x01



	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    39fe:	8e ee       	ldi	r24, 0xEE	; 238
    3a00:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3a04:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_WriteByte(0xF6);
    3a08:	86 ef       	ldi	r24, 0xF6	; 246
    3a0a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3a0e:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3a12:	8f ee       	ldi	r24, 0xEF	; 239
    3a14:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3a18:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	Pressure_RAW[0] = TWI_ReadByteWithNACK();
    3a1c:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3a20:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    3a22:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Stop();
    3a26:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    3a2a:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3a2e:	8e ee       	ldi	r24, 0xEE	; 238
    3a30:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3a34:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_WriteByte(0xF7);
    3a38:	87 ef       	ldi	r24, 0xF7	; 247
    3a3a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3a3e:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3a42:	8f ee       	ldi	r24, 0xEF	; 239
    3a44:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3a48:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	Pressure_RAW[1] = TWI_ReadByteWithNACK();
    3a4c:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3a50:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    3a52:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Stop();
    3a56:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    3a5a:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// read the LSB of the raw pressure data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3a5e:	8e ee       	ldi	r24, 0xEE	; 238
    3a60:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3a64:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_WriteByte(0xF8);
    3a68:	88 ef       	ldi	r24, 0xF8	; 248
    3a6a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3a6e:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3a72:	8f ee       	ldi	r24, 0xEF	; 239
    3a74:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3a78:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	Pressure_RAW[2] = TWI_ReadByteWithNACK();
    3a7c:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3a80:	8e 8b       	std	Y+22, r24	; 0x16
	delay();
    3a82:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Stop();
    3a86:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	// combine the raw pressure data into a single 24-bit value and shift it right to adjust for the oversampling setting

	data |= ((uint32_t) Pressure_RAW[0] << 16);
    3a8a:	8c 89       	ldd	r24, Y+20	; 0x14
    3a8c:	88 2f       	mov	r24, r24
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	a0 e0       	ldi	r26, 0x00	; 0
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	ac 01       	movw	r20, r24
    3a96:	33 27       	eor	r19, r19
    3a98:	22 27       	eor	r18, r18
    3a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9c:	98 89       	ldd	r25, Y+16	; 0x10
    3a9e:	a9 89       	ldd	r26, Y+17	; 0x11
    3aa0:	ba 89       	ldd	r27, Y+18	; 0x12
    3aa2:	82 2b       	or	r24, r18
    3aa4:	93 2b       	or	r25, r19
    3aa6:	a4 2b       	or	r26, r20
    3aa8:	b5 2b       	or	r27, r21
    3aaa:	8f 87       	std	Y+15, r24	; 0x0f
    3aac:	98 8b       	std	Y+16, r25	; 0x10
    3aae:	a9 8b       	std	Y+17, r26	; 0x11
    3ab0:	ba 8b       	std	Y+18, r27	; 0x12
	data |= ((uint32_t) Pressure_RAW[1] << 8);
    3ab2:	8d 89       	ldd	r24, Y+21	; 0x15
    3ab4:	88 2f       	mov	r24, r24
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e0       	ldi	r26, 0x00	; 0
    3aba:	b0 e0       	ldi	r27, 0x00	; 0
    3abc:	22 27       	eor	r18, r18
    3abe:	38 2f       	mov	r19, r24
    3ac0:	49 2f       	mov	r20, r25
    3ac2:	5a 2f       	mov	r21, r26
    3ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac6:	98 89       	ldd	r25, Y+16	; 0x10
    3ac8:	a9 89       	ldd	r26, Y+17	; 0x11
    3aca:	ba 89       	ldd	r27, Y+18	; 0x12
    3acc:	82 2b       	or	r24, r18
    3ace:	93 2b       	or	r25, r19
    3ad0:	a4 2b       	or	r26, r20
    3ad2:	b5 2b       	or	r27, r21
    3ad4:	8f 87       	std	Y+15, r24	; 0x0f
    3ad6:	98 8b       	std	Y+16, r25	; 0x10
    3ad8:	a9 8b       	std	Y+17, r26	; 0x11
    3ada:	ba 8b       	std	Y+18, r27	; 0x12
	data |= (uint32_t) Pressure_RAW[2];
    3adc:	8e 89       	ldd	r24, Y+22	; 0x16
    3ade:	28 2f       	mov	r18, r24
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae8:	98 89       	ldd	r25, Y+16	; 0x10
    3aea:	a9 89       	ldd	r26, Y+17	; 0x11
    3aec:	ba 89       	ldd	r27, Y+18	; 0x12
    3aee:	82 2b       	or	r24, r18
    3af0:	93 2b       	or	r25, r19
    3af2:	a4 2b       	or	r26, r20
    3af4:	b5 2b       	or	r27, r21
    3af6:	8f 87       	std	Y+15, r24	; 0x0f
    3af8:	98 8b       	std	Y+16, r25	; 0x10
    3afa:	a9 8b       	std	Y+17, r26	; 0x11
    3afc:	ba 8b       	std	Y+18, r27	; 0x12
	data = data >> (8 - OSS);
    3afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b00:	98 89       	ldd	r25, Y+16	; 0x10
    3b02:	a9 89       	ldd	r26, Y+17	; 0x11
    3b04:	ba 89       	ldd	r27, Y+18	; 0x12
    3b06:	89 2f       	mov	r24, r25
    3b08:	9a 2f       	mov	r25, r26
    3b0a:	ab 2f       	mov	r26, r27
    3b0c:	bb 27       	eor	r27, r27
    3b0e:	8f 87       	std	Y+15, r24	; 0x0f
    3b10:	98 8b       	std	Y+16, r25	; 0x10
    3b12:	a9 8b       	std	Y+17, r26	; 0x11
    3b14:	ba 8b       	std	Y+18, r27	; 0x12
	//division by 2 power (8-oss which is in datasheet (0,1))

	return data;
    3b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b18:	98 89       	ldd	r25, Y+16	; 0x10
    3b1a:	a9 89       	ldd	r26, Y+17	; 0x11
    3b1c:	ba 89       	ldd	r27, Y+18	; 0x12
}
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	66 96       	adiw	r28, 0x16	; 22
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <Get_UT>:

uint32 Get_UT(void) {
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	65 97       	sbiw	r28, 0x15	; 21
    3b3e:	0f b6       	in	r0, 0x3f	; 63
    3b40:	f8 94       	cli
    3b42:	de bf       	out	0x3e, r29	; 62
    3b44:	0f be       	out	0x3f, r0	; 63
    3b46:	cd bf       	out	0x3d, r28	; 61
	uint32 data = 0;
    3b48:	18 8a       	std	Y+16, r1	; 0x10
    3b4a:	19 8a       	std	Y+17, r1	; 0x11
    3b4c:	1a 8a       	std	Y+18, r1	; 0x12
    3b4e:	1b 8a       	std	Y+19, r1	; 0x13

	uint8 datatowrite = 0x2E;
    3b50:	8e e2       	ldi	r24, 0x2E	; 46
    3b52:	8f 87       	std	Y+15, r24	; 0x0f
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = { 0 };
    3b54:	1d 8a       	std	Y+21, r1	; 0x15
    3b56:	1c 8a       	std	Y+20, r1	; 0x14
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    3b58:	8e ee       	ldi	r24, 0xEE	; 238
    3b5a:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    3b5e:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    3b62:	84 ef       	ldi	r24, 0xF4	; 244
    3b64:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3b68:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// send the value calculated above to start the measurement
	TWI_WriteByte(datatowrite);
    3b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b6e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3b72:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    3b76:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
    3b7e:	a0 ea       	ldi	r26, 0xA0	; 160
    3b80:	b0 e4       	ldi	r27, 0x40	; 64
    3b82:	8b 87       	std	Y+11, r24	; 0x0b
    3b84:	9c 87       	std	Y+12, r25	; 0x0c
    3b86:	ad 87       	std	Y+13, r26	; 0x0d
    3b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	4a e7       	ldi	r20, 0x7A	; 122
    3b98:	55 e4       	ldi	r21, 0x45	; 69
    3b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	8f 83       	std	Y+7, r24	; 0x07
    3ba4:	98 87       	std	Y+8, r25	; 0x08
    3ba6:	a9 87       	std	Y+9, r26	; 0x09
    3ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3baa:	6f 81       	ldd	r22, Y+7	; 0x07
    3bac:	78 85       	ldd	r23, Y+8	; 0x08
    3bae:	89 85       	ldd	r24, Y+9	; 0x09
    3bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	40 e8       	ldi	r20, 0x80	; 128
    3bb8:	5f e3       	ldi	r21, 0x3F	; 63
    3bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bbe:	88 23       	and	r24, r24
    3bc0:	2c f4       	brge	.+10     	; 0x3bcc <Get_UT+0x98>
		__ticks = 1;
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	9e 83       	std	Y+6, r25	; 0x06
    3bc8:	8d 83       	std	Y+5, r24	; 0x05
    3bca:	3f c0       	rjmp	.+126    	; 0x3c4a <Get_UT+0x116>
	else if (__tmp > 65535)
    3bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bce:	78 85       	ldd	r23, Y+8	; 0x08
    3bd0:	89 85       	ldd	r24, Y+9	; 0x09
    3bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	3f ef       	ldi	r19, 0xFF	; 255
    3bd8:	4f e7       	ldi	r20, 0x7F	; 127
    3bda:	57 e4       	ldi	r21, 0x47	; 71
    3bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3be0:	18 16       	cp	r1, r24
    3be2:	4c f5       	brge	.+82     	; 0x3c36 <Get_UT+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e2       	ldi	r20, 0x20	; 32
    3bf2:	51 e4       	ldi	r21, 0x41	; 65
    3bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	bc 01       	movw	r22, r24
    3bfe:	cd 01       	movw	r24, r26
    3c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	9e 83       	std	Y+6, r25	; 0x06
    3c0a:	8d 83       	std	Y+5, r24	; 0x05
    3c0c:	0f c0       	rjmp	.+30     	; 0x3c2c <Get_UT+0xf8>
    3c0e:	80 e9       	ldi	r24, 0x90	; 144
    3c10:	91 e0       	ldi	r25, 0x01	; 1
    3c12:	9c 83       	std	Y+4, r25	; 0x04
    3c14:	8b 83       	std	Y+3, r24	; 0x03
    3c16:	8b 81       	ldd	r24, Y+3	; 0x03
    3c18:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1a:	01 97       	sbiw	r24, 0x01	; 1
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <Get_UT+0xe6>
    3c1e:	9c 83       	std	Y+4, r25	; 0x04
    3c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
    3c24:	9e 81       	ldd	r25, Y+6	; 0x06
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	69 f7       	brne	.-38     	; 0x3c0e <Get_UT+0xda>
    3c34:	14 c0       	rjmp	.+40     	; 0x3c5e <Get_UT+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c36:	6f 81       	ldd	r22, Y+7	; 0x07
    3c38:	78 85       	ldd	r23, Y+8	; 0x08
    3c3a:	89 85       	ldd	r24, Y+9	; 0x09
    3c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	9e 83       	std	Y+6, r25	; 0x06
    3c48:	8d 83       	std	Y+5, r24	; 0x05
    3c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4e:	9a 83       	std	Y+2, r25	; 0x02
    3c50:	89 83       	std	Y+1, r24	; 0x01
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	9a 81       	ldd	r25, Y+2	; 0x02
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	f1 f7       	brne	.-4      	; 0x3c56 <Get_UT+0x122>
    3c5a:	9a 83       	std	Y+2, r25	; 0x02
    3c5c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw temperature data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3c5e:	8e ee       	ldi	r24, 0xEE	; 238
    3c60:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3c64:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_WriteByte(0xF6);
    3c68:	86 ef       	ldi	r24, 0xF6	; 246
    3c6a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3c6e:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3c72:	8f ee       	ldi	r24, 0xEF	; 239
    3c74:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3c78:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	Temperature_RAW[0] = TWI_ReadByteWithNACK();
    3c7c:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3c80:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    3c82:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Stop();
    3c86:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    3c8a:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	// read the LSB of the raw temperature data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3c8e:	8e ee       	ldi	r24, 0xEE	; 238
    3c90:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    3c94:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_WriteByte(0xF7);
    3c98:	87 ef       	ldi	r24, 0xF7	; 247
    3c9a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    3c9e:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3ca2:	8f ee       	ldi	r24, 0xEF	; 239
    3ca4:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    3ca8:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	Temperature_RAW[1] = TWI_ReadByteWithNACK();
    3cac:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    3cb0:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    3cb2:	0e 94 02 24 	call	0x4804	; 0x4804 <delay>
	TWI_Stop();
    3cb6:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	data |= ((uint32_t) Temperature_RAW[0] << 8);
    3cba:	8c 89       	ldd	r24, Y+20	; 0x14
    3cbc:	88 2f       	mov	r24, r24
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	a0 e0       	ldi	r26, 0x00	; 0
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	22 27       	eor	r18, r18
    3cc6:	38 2f       	mov	r19, r24
    3cc8:	49 2f       	mov	r20, r25
    3cca:	5a 2f       	mov	r21, r26
    3ccc:	88 89       	ldd	r24, Y+16	; 0x10
    3cce:	99 89       	ldd	r25, Y+17	; 0x11
    3cd0:	aa 89       	ldd	r26, Y+18	; 0x12
    3cd2:	bb 89       	ldd	r27, Y+19	; 0x13
    3cd4:	82 2b       	or	r24, r18
    3cd6:	93 2b       	or	r25, r19
    3cd8:	a4 2b       	or	r26, r20
    3cda:	b5 2b       	or	r27, r21
    3cdc:	88 8b       	std	Y+16, r24	; 0x10
    3cde:	99 8b       	std	Y+17, r25	; 0x11
    3ce0:	aa 8b       	std	Y+18, r26	; 0x12
    3ce2:	bb 8b       	std	Y+19, r27	; 0x13
	data |= (uint32_t) Temperature_RAW[1];
    3ce4:	8d 89       	ldd	r24, Y+21	; 0x15
    3ce6:	28 2f       	mov	r18, r24
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	50 e0       	ldi	r21, 0x00	; 0
    3cee:	88 89       	ldd	r24, Y+16	; 0x10
    3cf0:	99 89       	ldd	r25, Y+17	; 0x11
    3cf2:	aa 89       	ldd	r26, Y+18	; 0x12
    3cf4:	bb 89       	ldd	r27, Y+19	; 0x13
    3cf6:	82 2b       	or	r24, r18
    3cf8:	93 2b       	or	r25, r19
    3cfa:	a4 2b       	or	r26, r20
    3cfc:	b5 2b       	or	r27, r21
    3cfe:	88 8b       	std	Y+16, r24	; 0x10
    3d00:	99 8b       	std	Y+17, r25	; 0x11
    3d02:	aa 8b       	std	Y+18, r26	; 0x12
    3d04:	bb 8b       	std	Y+19, r27	; 0x13
	return data;
    3d06:	88 89       	ldd	r24, Y+16	; 0x10
    3d08:	99 89       	ldd	r25, Y+17	; 0x11
    3d0a:	aa 89       	ldd	r26, Y+18	; 0x12
    3d0c:	bb 89       	ldd	r27, Y+19	; 0x13
}
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	65 96       	adiw	r28, 0x15	; 21
    3d14:	0f b6       	in	r0, 0x3f	; 63
    3d16:	f8 94       	cli
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <BMP180_calculateTemperature>:

sint32 BMP180_calculateTemperature(void) {
    3d24:	ef 92       	push	r14
    3d26:	ff 92       	push	r15
    3d28:	0f 93       	push	r16
    3d2a:	1f 93       	push	r17
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <BMP180_calculateTemperature+0xe>
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <BMP180_calculateTemperature+0x10>
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62

	float32 temperature = 0;
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	a0 e0       	ldi	r26, 0x00	; 0
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	89 83       	std	Y+1, r24	; 0x01
    3d42:	9a 83       	std	Y+2, r25	; 0x02
    3d44:	ab 83       	std	Y+3, r26	; 0x03
    3d46:	bc 83       	std	Y+4, r27	; 0x04

	UT = Get_UT();
    3d48:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Get_UT>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	80 93 b5 01 	sts	0x01B5, r24
    3d54:	90 93 b6 01 	sts	0x01B6, r25
    3d58:	a0 93 b7 01 	sts	0x01B7, r26
    3d5c:	b0 93 b8 01 	sts	0x01B8, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    3d60:	20 91 b5 01 	lds	r18, 0x01B5
    3d64:	30 91 b6 01 	lds	r19, 0x01B6
    3d68:	40 91 b7 01 	lds	r20, 0x01B7
    3d6c:	50 91 b8 01 	lds	r21, 0x01B8
    3d70:	80 91 a7 01 	lds	r24, 0x01A7
    3d74:	90 91 a8 01 	lds	r25, 0x01A8
    3d78:	cc 01       	movw	r24, r24
    3d7a:	a0 e0       	ldi	r26, 0x00	; 0
    3d7c:	b0 e0       	ldi	r27, 0x00	; 0
    3d7e:	79 01       	movw	r14, r18
    3d80:	8a 01       	movw	r16, r20
    3d82:	e8 1a       	sub	r14, r24
    3d84:	f9 0a       	sbc	r15, r25
    3d86:	0a 0b       	sbc	r16, r26
    3d88:	1b 0b       	sbc	r17, r27
    3d8a:	d8 01       	movw	r26, r16
    3d8c:	c7 01       	movw	r24, r14
    3d8e:	bc 01       	movw	r22, r24
    3d90:	cd 01       	movw	r24, r26
    3d92:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3d96:	7b 01       	movw	r14, r22
    3d98:	8c 01       	movw	r16, r24
    3d9a:	80 91 a5 01 	lds	r24, 0x01A5
    3d9e:	90 91 a6 01 	lds	r25, 0x01A6
    3da2:	cc 01       	movw	r24, r24
    3da4:	a0 e0       	ldi	r26, 0x00	; 0
    3da6:	b0 e0       	ldi	r27, 0x00	; 0
    3da8:	bc 01       	movw	r22, r24
    3daa:	cd 01       	movw	r24, r26
    3dac:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	20 e0       	ldi	r18, 0x00	; 0
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	57 e4       	ldi	r21, 0x47	; 71
    3dc0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	9c 01       	movw	r18, r24
    3dca:	ad 01       	movw	r20, r26
    3dcc:	c8 01       	movw	r24, r16
    3dce:	b7 01       	movw	r22, r14
    3dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	bc 01       	movw	r22, r24
    3dda:	cd 01       	movw	r24, r26
    3ddc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	80 93 a9 01 	sts	0x01A9, r24
    3de8:	90 93 aa 01 	sts	0x01AA, r25
    3dec:	a0 93 ab 01 	sts	0x01AB, r26
    3df0:	b0 93 ac 01 	sts	0x01AC, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    3df4:	80 91 9f 01 	lds	r24, 0x019F
    3df8:	90 91 a0 01 	lds	r25, 0x01A0
    3dfc:	aa 27       	eor	r26, r26
    3dfe:	97 fd       	sbrc	r25, 7
    3e00:	a0 95       	com	r26
    3e02:	ba 2f       	mov	r27, r26
    3e04:	bc 01       	movw	r22, r24
    3e06:	cd 01       	movw	r24, r26
    3e08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	55 e4       	ldi	r21, 0x45	; 69
    3e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	7c 01       	movw	r14, r24
    3e26:	8d 01       	movw	r16, r26
    3e28:	80 91 a1 01 	lds	r24, 0x01A1
    3e2c:	90 91 a2 01 	lds	r25, 0x01A2
    3e30:	9c 01       	movw	r18, r24
    3e32:	44 27       	eor	r20, r20
    3e34:	37 fd       	sbrc	r19, 7
    3e36:	40 95       	com	r20
    3e38:	54 2f       	mov	r21, r20
    3e3a:	80 91 a9 01 	lds	r24, 0x01A9
    3e3e:	90 91 aa 01 	lds	r25, 0x01AA
    3e42:	a0 91 ab 01 	lds	r26, 0x01AB
    3e46:	b0 91 ac 01 	lds	r27, 0x01AC
    3e4a:	82 0f       	add	r24, r18
    3e4c:	93 1f       	adc	r25, r19
    3e4e:	a4 1f       	adc	r26, r20
    3e50:	b5 1f       	adc	r27, r21
    3e52:	bc 01       	movw	r22, r24
    3e54:	cd 01       	movw	r24, r26
    3e56:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3e5a:	9b 01       	movw	r18, r22
    3e5c:	ac 01       	movw	r20, r24
    3e5e:	c8 01       	movw	r24, r16
    3e60:	b7 01       	movw	r22, r14
    3e62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	bc 01       	movw	r22, r24
    3e6c:	cd 01       	movw	r24, r26
    3e6e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	80 93 ad 01 	sts	0x01AD, r24
    3e7a:	90 93 ae 01 	sts	0x01AE, r25
    3e7e:	a0 93 af 01 	sts	0x01AF, r26
    3e82:	b0 93 b0 01 	sts	0x01B0, r27
       	B5 = X1 + X2;
    3e86:	20 91 a9 01 	lds	r18, 0x01A9
    3e8a:	30 91 aa 01 	lds	r19, 0x01AA
    3e8e:	40 91 ab 01 	lds	r20, 0x01AB
    3e92:	50 91 ac 01 	lds	r21, 0x01AC
    3e96:	80 91 ad 01 	lds	r24, 0x01AD
    3e9a:	90 91 ae 01 	lds	r25, 0x01AE
    3e9e:	a0 91 af 01 	lds	r26, 0x01AF
    3ea2:	b0 91 b0 01 	lds	r27, 0x01B0
    3ea6:	82 0f       	add	r24, r18
    3ea8:	93 1f       	adc	r25, r19
    3eaa:	a4 1f       	adc	r26, r20
    3eac:	b5 1f       	adc	r27, r21
    3eae:	80 93 b1 01 	sts	0x01B1, r24
    3eb2:	90 93 b2 01 	sts	0x01B2, r25
    3eb6:	a0 93 b3 01 	sts	0x01B3, r26
    3eba:	b0 93 b4 01 	sts	0x01B4, r27
	temperature = (B5 + 8) / (pow(2, 4));
    3ebe:	80 91 b1 01 	lds	r24, 0x01B1
    3ec2:	90 91 b2 01 	lds	r25, 0x01B2
    3ec6:	a0 91 b3 01 	lds	r26, 0x01B3
    3eca:	b0 91 b4 01 	lds	r27, 0x01B4
    3ece:	08 96       	adiw	r24, 0x08	; 8
    3ed0:	a1 1d       	adc	r26, r1
    3ed2:	b1 1d       	adc	r27, r1
    3ed4:	bc 01       	movw	r22, r24
    3ed6:	cd 01       	movw	r24, r26
    3ed8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	bc 01       	movw	r22, r24
    3ee2:	cd 01       	movw	r24, r26
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	40 e8       	ldi	r20, 0x80	; 128
    3eea:	51 e4       	ldi	r21, 0x41	; 65
    3eec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	89 83       	std	Y+1, r24	; 0x01
    3ef6:	9a 83       	std	Y+2, r25	; 0x02
    3ef8:	ab 83       	std	Y+3, r26	; 0x03
    3efa:	bc 83       	std	Y+4, r27	; 0x04
	return temperature / 10.0;
    3efc:	69 81       	ldd	r22, Y+1	; 0x01
    3efe:	7a 81       	ldd	r23, Y+2	; 0x02
    3f00:	8b 81       	ldd	r24, Y+3	; 0x03
    3f02:	9c 81       	ldd	r25, Y+4	; 0x04
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e2       	ldi	r20, 0x20	; 32
    3f0a:	51 e4       	ldi	r21, 0x41	; 65
    3f0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	bc 01       	movw	r22, r24
    3f16:	cd 01       	movw	r24, r26
    3f18:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
}
    3f20:	bc 01       	movw	r22, r24
    3f22:	cd 01       	movw	r24, r26
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	0f 90       	pop	r0
    3f2a:	0f 90       	pop	r0
    3f2c:	cf 91       	pop	r28
    3f2e:	df 91       	pop	r29
    3f30:	1f 91       	pop	r17
    3f32:	0f 91       	pop	r16
    3f34:	ff 90       	pop	r15
    3f36:	ef 90       	pop	r14
    3f38:	08 95       	ret

00003f3a <BMP180_calculatePressure>:

sint32 BMP180_calculatePressure(void) {
    3f3a:	ef 92       	push	r14
    3f3c:	ff 92       	push	r15
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
	UP = Get_UP();
    3f4a:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <Get_UP>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	80 93 c9 01 	sts	0x01C9, r24
    3f56:	90 93 ca 01 	sts	0x01CA, r25
    3f5a:	a0 93 cb 01 	sts	0x01CB, r26
    3f5e:	b0 93 cc 01 	sts	0x01CC, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    3f62:	20 91 b5 01 	lds	r18, 0x01B5
    3f66:	30 91 b6 01 	lds	r19, 0x01B6
    3f6a:	40 91 b7 01 	lds	r20, 0x01B7
    3f6e:	50 91 b8 01 	lds	r21, 0x01B8
    3f72:	80 91 a7 01 	lds	r24, 0x01A7
    3f76:	90 91 a8 01 	lds	r25, 0x01A8
    3f7a:	cc 01       	movw	r24, r24
    3f7c:	a0 e0       	ldi	r26, 0x00	; 0
    3f7e:	b0 e0       	ldi	r27, 0x00	; 0
    3f80:	79 01       	movw	r14, r18
    3f82:	8a 01       	movw	r16, r20
    3f84:	e8 1a       	sub	r14, r24
    3f86:	f9 0a       	sbc	r15, r25
    3f88:	0a 0b       	sbc	r16, r26
    3f8a:	1b 0b       	sbc	r17, r27
    3f8c:	d8 01       	movw	r26, r16
    3f8e:	c7 01       	movw	r24, r14
    3f90:	bc 01       	movw	r22, r24
    3f92:	cd 01       	movw	r24, r26
    3f94:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3f98:	7b 01       	movw	r14, r22
    3f9a:	8c 01       	movw	r16, r24
    3f9c:	80 91 a5 01 	lds	r24, 0x01A5
    3fa0:	90 91 a6 01 	lds	r25, 0x01A6
    3fa4:	cc 01       	movw	r24, r24
    3fa6:	a0 e0       	ldi	r26, 0x00	; 0
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	bc 01       	movw	r22, r24
    3fac:	cd 01       	movw	r24, r26
    3fae:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	40 e0       	ldi	r20, 0x00	; 0
    3fc0:	57 e4       	ldi	r21, 0x47	; 71
    3fc2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	9c 01       	movw	r18, r24
    3fcc:	ad 01       	movw	r20, r26
    3fce:	c8 01       	movw	r24, r16
    3fd0:	b7 01       	movw	r22, r14
    3fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	bc 01       	movw	r22, r24
    3fdc:	cd 01       	movw	r24, r26
    3fde:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	80 93 a9 01 	sts	0x01A9, r24
    3fea:	90 93 aa 01 	sts	0x01AA, r25
    3fee:	a0 93 ab 01 	sts	0x01AB, r26
    3ff2:	b0 93 ac 01 	sts	0x01AC, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    3ff6:	80 91 9f 01 	lds	r24, 0x019F
    3ffa:	90 91 a0 01 	lds	r25, 0x01A0
    3ffe:	aa 27       	eor	r26, r26
    4000:	97 fd       	sbrc	r25, 7
    4002:	a0 95       	com	r26
    4004:	ba 2f       	mov	r27, r26
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	bc 01       	movw	r22, r24
    4014:	cd 01       	movw	r24, r26
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	40 e0       	ldi	r20, 0x00	; 0
    401c:	55 e4       	ldi	r21, 0x45	; 69
    401e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	7c 01       	movw	r14, r24
    4028:	8d 01       	movw	r16, r26
    402a:	80 91 a1 01 	lds	r24, 0x01A1
    402e:	90 91 a2 01 	lds	r25, 0x01A2
    4032:	9c 01       	movw	r18, r24
    4034:	44 27       	eor	r20, r20
    4036:	37 fd       	sbrc	r19, 7
    4038:	40 95       	com	r20
    403a:	54 2f       	mov	r21, r20
    403c:	80 91 a9 01 	lds	r24, 0x01A9
    4040:	90 91 aa 01 	lds	r25, 0x01AA
    4044:	a0 91 ab 01 	lds	r26, 0x01AB
    4048:	b0 91 ac 01 	lds	r27, 0x01AC
    404c:	82 0f       	add	r24, r18
    404e:	93 1f       	adc	r25, r19
    4050:	a4 1f       	adc	r26, r20
    4052:	b5 1f       	adc	r27, r21
    4054:	bc 01       	movw	r22, r24
    4056:	cd 01       	movw	r24, r26
    4058:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    405c:	9b 01       	movw	r18, r22
    405e:	ac 01       	movw	r20, r24
    4060:	c8 01       	movw	r24, r16
    4062:	b7 01       	movw	r22, r14
    4064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	bc 01       	movw	r22, r24
    406e:	cd 01       	movw	r24, r26
    4070:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	80 93 ad 01 	sts	0x01AD, r24
    407c:	90 93 ae 01 	sts	0x01AE, r25
    4080:	a0 93 af 01 	sts	0x01AF, r26
    4084:	b0 93 b0 01 	sts	0x01B0, r27
	B5 = X1 + X2;
    4088:	20 91 a9 01 	lds	r18, 0x01A9
    408c:	30 91 aa 01 	lds	r19, 0x01AA
    4090:	40 91 ab 01 	lds	r20, 0x01AB
    4094:	50 91 ac 01 	lds	r21, 0x01AC
    4098:	80 91 ad 01 	lds	r24, 0x01AD
    409c:	90 91 ae 01 	lds	r25, 0x01AE
    40a0:	a0 91 af 01 	lds	r26, 0x01AF
    40a4:	b0 91 b0 01 	lds	r27, 0x01B0
    40a8:	82 0f       	add	r24, r18
    40aa:	93 1f       	adc	r25, r19
    40ac:	a4 1f       	adc	r26, r20
    40ae:	b5 1f       	adc	r27, r21
    40b0:	80 93 b1 01 	sts	0x01B1, r24
    40b4:	90 93 b2 01 	sts	0x01B2, r25
    40b8:	a0 93 b3 01 	sts	0x01B3, r26
    40bc:	b0 93 b4 01 	sts	0x01B4, r27
	B6 = B5 - 4000;
    40c0:	80 91 b1 01 	lds	r24, 0x01B1
    40c4:	90 91 b2 01 	lds	r25, 0x01B2
    40c8:	a0 91 b3 01 	lds	r26, 0x01B3
    40cc:	b0 91 b4 01 	lds	r27, 0x01B4
    40d0:	80 5a       	subi	r24, 0xA0	; 160
    40d2:	9f 40       	sbci	r25, 0x0F	; 15
    40d4:	a0 40       	sbci	r26, 0x00	; 0
    40d6:	b0 40       	sbci	r27, 0x00	; 0
    40d8:	80 93 c1 01 	sts	0x01C1, r24
    40dc:	90 93 c2 01 	sts	0x01C2, r25
    40e0:	a0 93 c3 01 	sts	0x01C3, r26
    40e4:	b0 93 c4 01 	sts	0x01C4, r27
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
    40e8:	80 91 9b 01 	lds	r24, 0x019B
    40ec:	90 91 9c 01 	lds	r25, 0x019C
    40f0:	aa 27       	eor	r26, r26
    40f2:	97 fd       	sbrc	r25, 7
    40f4:	a0 95       	com	r26
    40f6:	ba 2f       	mov	r27, r26
    40f8:	bc 01       	movw	r22, r24
    40fa:	cd 01       	movw	r24, r26
    40fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4100:	7b 01       	movw	r14, r22
    4102:	8c 01       	movw	r16, r24
    4104:	80 91 c1 01 	lds	r24, 0x01C1
    4108:	90 91 c2 01 	lds	r25, 0x01C2
    410c:	a0 91 c3 01 	lds	r26, 0x01C3
    4110:	b0 91 c4 01 	lds	r27, 0x01C4
    4114:	20 91 c1 01 	lds	r18, 0x01C1
    4118:	30 91 c2 01 	lds	r19, 0x01C2
    411c:	40 91 c3 01 	lds	r20, 0x01C3
    4120:	50 91 c4 01 	lds	r21, 0x01C4
    4124:	bc 01       	movw	r22, r24
    4126:	cd 01       	movw	r24, r26
    4128:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	bc 01       	movw	r22, r24
    4132:	cd 01       	movw	r24, r26
    4134:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	40 e8       	ldi	r20, 0x80	; 128
    4146:	55 e4       	ldi	r21, 0x45	; 69
    4148:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	9c 01       	movw	r18, r24
    4152:	ad 01       	movw	r20, r26
    4154:	c8 01       	movw	r24, r16
    4156:	b7 01       	movw	r22, r14
    4158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	bc 01       	movw	r22, r24
    4162:	cd 01       	movw	r24, r26
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	55 e4       	ldi	r21, 0x45	; 69
    416c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	bc 01       	movw	r22, r24
    4176:	cd 01       	movw	r24, r26
    4178:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    417c:	dc 01       	movw	r26, r24
    417e:	cb 01       	movw	r24, r22
    4180:	80 93 a9 01 	sts	0x01A9, r24
    4184:	90 93 aa 01 	sts	0x01AA, r25
    4188:	a0 93 ab 01 	sts	0x01AB, r26
    418c:	b0 93 ac 01 	sts	0x01AC, r27
	X2 = AC2 * B6 / (pow(2, 11));
    4190:	80 91 95 01 	lds	r24, 0x0195
    4194:	90 91 96 01 	lds	r25, 0x0196
    4198:	aa 27       	eor	r26, r26
    419a:	97 fd       	sbrc	r25, 7
    419c:	a0 95       	com	r26
    419e:	ba 2f       	mov	r27, r26
    41a0:	20 91 c1 01 	lds	r18, 0x01C1
    41a4:	30 91 c2 01 	lds	r19, 0x01C2
    41a8:	40 91 c3 01 	lds	r20, 0x01C3
    41ac:	50 91 c4 01 	lds	r21, 0x01C4
    41b0:	bc 01       	movw	r22, r24
    41b2:	cd 01       	movw	r24, r26
    41b4:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	bc 01       	movw	r22, r24
    41be:	cd 01       	movw	r24, r26
    41c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e0       	ldi	r20, 0x00	; 0
    41d2:	55 e4       	ldi	r21, 0x45	; 69
    41d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	bc 01       	movw	r22, r24
    41de:	cd 01       	movw	r24, r26
    41e0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	80 93 ad 01 	sts	0x01AD, r24
    41ec:	90 93 ae 01 	sts	0x01AE, r25
    41f0:	a0 93 af 01 	sts	0x01AF, r26
    41f4:	b0 93 b0 01 	sts	0x01B0, r27
	X3 = X1 + X2;
    41f8:	20 91 a9 01 	lds	r18, 0x01A9
    41fc:	30 91 aa 01 	lds	r19, 0x01AA
    4200:	40 91 ab 01 	lds	r20, 0x01AB
    4204:	50 91 ac 01 	lds	r21, 0x01AC
    4208:	80 91 ad 01 	lds	r24, 0x01AD
    420c:	90 91 ae 01 	lds	r25, 0x01AE
    4210:	a0 91 af 01 	lds	r26, 0x01AF
    4214:	b0 91 b0 01 	lds	r27, 0x01B0
    4218:	82 0f       	add	r24, r18
    421a:	93 1f       	adc	r25, r19
    421c:	a4 1f       	adc	r26, r20
    421e:	b5 1f       	adc	r27, r21
    4220:	80 93 b9 01 	sts	0x01B9, r24
    4224:	90 93 ba 01 	sts	0x01BA, r25
    4228:	a0 93 bb 01 	sts	0x01BB, r26
    422c:	b0 93 bc 01 	sts	0x01BC, r27
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
    4230:	80 91 93 01 	lds	r24, 0x0193
    4234:	90 91 94 01 	lds	r25, 0x0194
    4238:	88 0f       	add	r24, r24
    423a:	99 1f       	adc	r25, r25
    423c:	88 0f       	add	r24, r24
    423e:	99 1f       	adc	r25, r25
    4240:	9c 01       	movw	r18, r24
    4242:	44 27       	eor	r20, r20
    4244:	37 fd       	sbrc	r19, 7
    4246:	40 95       	com	r20
    4248:	54 2f       	mov	r21, r20
    424a:	80 91 b9 01 	lds	r24, 0x01B9
    424e:	90 91 ba 01 	lds	r25, 0x01BA
    4252:	a0 91 bb 01 	lds	r26, 0x01BB
    4256:	b0 91 bc 01 	lds	r27, 0x01BC
    425a:	82 0f       	add	r24, r18
    425c:	93 1f       	adc	r25, r19
    425e:	a4 1f       	adc	r26, r20
    4260:	b5 1f       	adc	r27, r21
    4262:	02 96       	adiw	r24, 0x02	; 2
    4264:	a1 1d       	adc	r26, r1
    4266:	b1 1d       	adc	r27, r1
    4268:	24 e0       	ldi	r18, 0x04	; 4
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	50 e0       	ldi	r21, 0x00	; 0
    4270:	bc 01       	movw	r22, r24
    4272:	cd 01       	movw	r24, r26
    4274:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__divmodsi4>
    4278:	da 01       	movw	r26, r20
    427a:	c9 01       	movw	r24, r18
    427c:	80 93 bd 01 	sts	0x01BD, r24
    4280:	90 93 be 01 	sts	0x01BE, r25
    4284:	a0 93 bf 01 	sts	0x01BF, r26
    4288:	b0 93 c0 01 	sts	0x01C0, r27
	X1 = AC3 * B6 / (pow(2, 13));
    428c:	80 91 97 01 	lds	r24, 0x0197
    4290:	90 91 98 01 	lds	r25, 0x0198
    4294:	aa 27       	eor	r26, r26
    4296:	97 fd       	sbrc	r25, 7
    4298:	a0 95       	com	r26
    429a:	ba 2f       	mov	r27, r26
    429c:	20 91 c1 01 	lds	r18, 0x01C1
    42a0:	30 91 c2 01 	lds	r19, 0x01C2
    42a4:	40 91 c3 01 	lds	r20, 0x01C3
    42a8:	50 91 c4 01 	lds	r21, 0x01C4
    42ac:	bc 01       	movw	r22, r24
    42ae:	cd 01       	movw	r24, r26
    42b0:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	bc 01       	movw	r22, r24
    42c6:	cd 01       	movw	r24, r26
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	56 e4       	ldi	r21, 0x46	; 70
    42d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	bc 01       	movw	r22, r24
    42da:	cd 01       	movw	r24, r26
    42dc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    42e0:	dc 01       	movw	r26, r24
    42e2:	cb 01       	movw	r24, r22
    42e4:	80 93 a9 01 	sts	0x01A9, r24
    42e8:	90 93 aa 01 	sts	0x01AA, r25
    42ec:	a0 93 ab 01 	sts	0x01AB, r26
    42f0:	b0 93 ac 01 	sts	0x01AC, r27
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
    42f4:	80 91 99 01 	lds	r24, 0x0199
    42f8:	90 91 9a 01 	lds	r25, 0x019A
    42fc:	aa 27       	eor	r26, r26
    42fe:	97 fd       	sbrc	r25, 7
    4300:	a0 95       	com	r26
    4302:	ba 2f       	mov	r27, r26
    4304:	bc 01       	movw	r22, r24
    4306:	cd 01       	movw	r24, r26
    4308:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    430c:	7b 01       	movw	r14, r22
    430e:	8c 01       	movw	r16, r24
    4310:	80 91 c1 01 	lds	r24, 0x01C1
    4314:	90 91 c2 01 	lds	r25, 0x01C2
    4318:	a0 91 c3 01 	lds	r26, 0x01C3
    431c:	b0 91 c4 01 	lds	r27, 0x01C4
    4320:	20 91 c1 01 	lds	r18, 0x01C1
    4324:	30 91 c2 01 	lds	r19, 0x01C2
    4328:	40 91 c3 01 	lds	r20, 0x01C3
    432c:	50 91 c4 01 	lds	r21, 0x01C4
    4330:	bc 01       	movw	r22, r24
    4332:	cd 01       	movw	r24, r26
    4334:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	bc 01       	movw	r22, r24
    433e:	cd 01       	movw	r24, r26
    4340:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	bc 01       	movw	r22, r24
    434a:	cd 01       	movw	r24, r26
    434c:	20 e0       	ldi	r18, 0x00	; 0
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e8       	ldi	r20, 0x80	; 128
    4352:	55 e4       	ldi	r21, 0x45	; 69
    4354:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	9c 01       	movw	r18, r24
    435e:	ad 01       	movw	r20, r26
    4360:	c8 01       	movw	r24, r16
    4362:	b7 01       	movw	r22, r14
    4364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	bc 01       	movw	r22, r24
    436e:	cd 01       	movw	r24, r26
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	57 e4       	ldi	r21, 0x47	; 71
    4378:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	bc 01       	movw	r22, r24
    4382:	cd 01       	movw	r24, r26
    4384:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	80 93 ad 01 	sts	0x01AD, r24
    4390:	90 93 ae 01 	sts	0x01AE, r25
    4394:	a0 93 af 01 	sts	0x01AF, r26
    4398:	b0 93 b0 01 	sts	0x01B0, r27
	X3 = ((X1 + X2) + 2) / (pow(2, 2));
    439c:	20 91 a9 01 	lds	r18, 0x01A9
    43a0:	30 91 aa 01 	lds	r19, 0x01AA
    43a4:	40 91 ab 01 	lds	r20, 0x01AB
    43a8:	50 91 ac 01 	lds	r21, 0x01AC
    43ac:	80 91 ad 01 	lds	r24, 0x01AD
    43b0:	90 91 ae 01 	lds	r25, 0x01AE
    43b4:	a0 91 af 01 	lds	r26, 0x01AF
    43b8:	b0 91 b0 01 	lds	r27, 0x01B0
    43bc:	82 0f       	add	r24, r18
    43be:	93 1f       	adc	r25, r19
    43c0:	a4 1f       	adc	r26, r20
    43c2:	b5 1f       	adc	r27, r21
    43c4:	02 96       	adiw	r24, 0x02	; 2
    43c6:	a1 1d       	adc	r26, r1
    43c8:	b1 1d       	adc	r27, r1
    43ca:	bc 01       	movw	r22, r24
    43cc:	cd 01       	movw	r24, r26
    43ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	bc 01       	movw	r22, r24
    43d8:	cd 01       	movw	r24, r26
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e8       	ldi	r20, 0x80	; 128
    43e0:	50 e4       	ldi	r21, 0x40	; 64
    43e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	bc 01       	movw	r22, r24
    43ec:	cd 01       	movw	r24, r26
    43ee:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	80 93 b9 01 	sts	0x01B9, r24
    43fa:	90 93 ba 01 	sts	0x01BA, r25
    43fe:	a0 93 bb 01 	sts	0x01BB, r26
    4402:	b0 93 bc 01 	sts	0x01BC, r27
	B4 = (AC4 * (uint32) (X3 + 32768)) / (pow(2, 15));
    4406:	80 91 a3 01 	lds	r24, 0x01A3
    440a:	90 91 a4 01 	lds	r25, 0x01A4
    440e:	7c 01       	movw	r14, r24
    4410:	00 e0       	ldi	r16, 0x00	; 0
    4412:	10 e0       	ldi	r17, 0x00	; 0
    4414:	80 91 b9 01 	lds	r24, 0x01B9
    4418:	90 91 ba 01 	lds	r25, 0x01BA
    441c:	a0 91 bb 01 	lds	r26, 0x01BB
    4420:	b0 91 bc 01 	lds	r27, 0x01BC
    4424:	80 50       	subi	r24, 0x00	; 0
    4426:	90 48       	sbci	r25, 0x80	; 128
    4428:	af 4f       	sbci	r26, 0xFF	; 255
    442a:	bf 4f       	sbci	r27, 0xFF	; 255
    442c:	9c 01       	movw	r18, r24
    442e:	ad 01       	movw	r20, r26
    4430:	c8 01       	movw	r24, r16
    4432:	b7 01       	movw	r22, r14
    4434:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    4438:	dc 01       	movw	r26, r24
    443a:	cb 01       	movw	r24, r22
    443c:	bc 01       	movw	r22, r24
    443e:	cd 01       	movw	r24, r26
    4440:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	bc 01       	movw	r22, r24
    444a:	cd 01       	movw	r24, r26
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	40 e0       	ldi	r20, 0x00	; 0
    4452:	57 e4       	ldi	r21, 0x47	; 71
    4454:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	bc 01       	movw	r22, r24
    445e:	cd 01       	movw	r24, r26
    4460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4464:	dc 01       	movw	r26, r24
    4466:	cb 01       	movw	r24, r22
    4468:	80 93 cd 01 	sts	0x01CD, r24
    446c:	90 93 ce 01 	sts	0x01CE, r25
    4470:	a0 93 cf 01 	sts	0x01CF, r26
    4474:	b0 93 d0 01 	sts	0x01D0, r27
	B7 = ((uint32) UP - B3) * (50000 >> OSS);
    4478:	80 91 c9 01 	lds	r24, 0x01C9
    447c:	90 91 ca 01 	lds	r25, 0x01CA
    4480:	a0 91 cb 01 	lds	r26, 0x01CB
    4484:	b0 91 cc 01 	lds	r27, 0x01CC
    4488:	9c 01       	movw	r18, r24
    448a:	ad 01       	movw	r20, r26
    448c:	80 91 bd 01 	lds	r24, 0x01BD
    4490:	90 91 be 01 	lds	r25, 0x01BE
    4494:	a0 91 bf 01 	lds	r26, 0x01BF
    4498:	b0 91 c0 01 	lds	r27, 0x01C0
    449c:	79 01       	movw	r14, r18
    449e:	8a 01       	movw	r16, r20
    44a0:	e8 1a       	sub	r14, r24
    44a2:	f9 0a       	sbc	r15, r25
    44a4:	0a 0b       	sbc	r16, r26
    44a6:	1b 0b       	sbc	r17, r27
    44a8:	d8 01       	movw	r26, r16
    44aa:	c7 01       	movw	r24, r14
    44ac:	20 e5       	ldi	r18, 0x50	; 80
    44ae:	33 ec       	ldi	r19, 0xC3	; 195
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	50 e0       	ldi	r21, 0x00	; 0
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	80 93 d1 01 	sts	0x01D1, r24
    44c4:	90 93 d2 01 	sts	0x01D2, r25
    44c8:	a0 93 d3 01 	sts	0x01D3, r26
    44cc:	b0 93 d4 01 	sts	0x01D4, r27

	if (B7 < 0x80000000) {
    44d0:	80 91 d1 01 	lds	r24, 0x01D1
    44d4:	90 91 d2 01 	lds	r25, 0x01D2
    44d8:	a0 91 d3 01 	lds	r26, 0x01D3
    44dc:	b0 91 d4 01 	lds	r27, 0x01D4
    44e0:	bb 23       	and	r27, r27
    44e2:	1c f1       	brlt	.+70     	; 0x452a <BMP180_calculatePressure+0x5f0>
		P = (B7 * 2) / B4;
    44e4:	80 91 d1 01 	lds	r24, 0x01D1
    44e8:	90 91 d2 01 	lds	r25, 0x01D2
    44ec:	a0 91 d3 01 	lds	r26, 0x01D3
    44f0:	b0 91 d4 01 	lds	r27, 0x01D4
    44f4:	88 0f       	add	r24, r24
    44f6:	99 1f       	adc	r25, r25
    44f8:	aa 1f       	adc	r26, r26
    44fa:	bb 1f       	adc	r27, r27
    44fc:	20 91 cd 01 	lds	r18, 0x01CD
    4500:	30 91 ce 01 	lds	r19, 0x01CE
    4504:	40 91 cf 01 	lds	r20, 0x01CF
    4508:	50 91 d0 01 	lds	r21, 0x01D0
    450c:	bc 01       	movw	r22, r24
    450e:	cd 01       	movw	r24, r26
    4510:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__udivmodsi4>
    4514:	da 01       	movw	r26, r20
    4516:	c9 01       	movw	r24, r18
    4518:	80 93 c5 01 	sts	0x01C5, r24
    451c:	90 93 c6 01 	sts	0x01C6, r25
    4520:	a0 93 c7 01 	sts	0x01C7, r26
    4524:	b0 93 c8 01 	sts	0x01C8, r27
    4528:	22 c0       	rjmp	.+68     	; 0x456e <BMP180_calculatePressure+0x634>
	} else {
		P = (B7 / B4) * 2;
    452a:	80 91 d1 01 	lds	r24, 0x01D1
    452e:	90 91 d2 01 	lds	r25, 0x01D2
    4532:	a0 91 d3 01 	lds	r26, 0x01D3
    4536:	b0 91 d4 01 	lds	r27, 0x01D4
    453a:	20 91 cd 01 	lds	r18, 0x01CD
    453e:	30 91 ce 01 	lds	r19, 0x01CE
    4542:	40 91 cf 01 	lds	r20, 0x01CF
    4546:	50 91 d0 01 	lds	r21, 0x01D0
    454a:	bc 01       	movw	r22, r24
    454c:	cd 01       	movw	r24, r26
    454e:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__udivmodsi4>
    4552:	da 01       	movw	r26, r20
    4554:	c9 01       	movw	r24, r18
    4556:	88 0f       	add	r24, r24
    4558:	99 1f       	adc	r25, r25
    455a:	aa 1f       	adc	r26, r26
    455c:	bb 1f       	adc	r27, r27
    455e:	80 93 c5 01 	sts	0x01C5, r24
    4562:	90 93 c6 01 	sts	0x01C6, r25
    4566:	a0 93 c7 01 	sts	0x01C7, r26
    456a:	b0 93 c8 01 	sts	0x01C8, r27
	}
	X1 = (P / (pow(2, 8))) * (P / (pow(2, 8)));
    456e:	80 91 c5 01 	lds	r24, 0x01C5
    4572:	90 91 c6 01 	lds	r25, 0x01C6
    4576:	a0 91 c7 01 	lds	r26, 0x01C7
    457a:	b0 91 c8 01 	lds	r27, 0x01C8
    457e:	bc 01       	movw	r22, r24
    4580:	cd 01       	movw	r24, r26
    4582:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	bc 01       	movw	r22, r24
    458c:	cd 01       	movw	r24, r26
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e8       	ldi	r20, 0x80	; 128
    4594:	53 e4       	ldi	r21, 0x43	; 67
    4596:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	7c 01       	movw	r14, r24
    45a0:	8d 01       	movw	r16, r26
    45a2:	80 91 c5 01 	lds	r24, 0x01C5
    45a6:	90 91 c6 01 	lds	r25, 0x01C6
    45aa:	a0 91 c7 01 	lds	r26, 0x01C7
    45ae:	b0 91 c8 01 	lds	r27, 0x01C8
    45b2:	bc 01       	movw	r22, r24
    45b4:	cd 01       	movw	r24, r26
    45b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	bc 01       	movw	r22, r24
    45c0:	cd 01       	movw	r24, r26
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	40 e8       	ldi	r20, 0x80	; 128
    45c8:	53 e4       	ldi	r21, 0x43	; 67
    45ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	9c 01       	movw	r18, r24
    45d4:	ad 01       	movw	r20, r26
    45d6:	c8 01       	movw	r24, r16
    45d8:	b7 01       	movw	r22, r14
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	bc 01       	movw	r22, r24
    45e4:	cd 01       	movw	r24, r26
    45e6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	80 93 a9 01 	sts	0x01A9, r24
    45f2:	90 93 aa 01 	sts	0x01AA, r25
    45f6:	a0 93 ab 01 	sts	0x01AB, r26
    45fa:	b0 93 ac 01 	sts	0x01AC, r27
	X1 = (X1 * 3038) / (pow(2, 16));
    45fe:	80 91 a9 01 	lds	r24, 0x01A9
    4602:	90 91 aa 01 	lds	r25, 0x01AA
    4606:	a0 91 ab 01 	lds	r26, 0x01AB
    460a:	b0 91 ac 01 	lds	r27, 0x01AC
    460e:	2e ed       	ldi	r18, 0xDE	; 222
    4610:	3b e0       	ldi	r19, 0x0B	; 11
    4612:	40 e0       	ldi	r20, 0x00	; 0
    4614:	50 e0       	ldi	r21, 0x00	; 0
    4616:	bc 01       	movw	r22, r24
    4618:	cd 01       	movw	r24, r26
    461a:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	bc 01       	movw	r22, r24
    4624:	cd 01       	movw	r24, r26
    4626:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	bc 01       	movw	r22, r24
    4630:	cd 01       	movw	r24, r26
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	40 e8       	ldi	r20, 0x80	; 128
    4638:	57 e4       	ldi	r21, 0x47	; 71
    463a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	bc 01       	movw	r22, r24
    4644:	cd 01       	movw	r24, r26
    4646:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    464a:	dc 01       	movw	r26, r24
    464c:	cb 01       	movw	r24, r22
    464e:	80 93 a9 01 	sts	0x01A9, r24
    4652:	90 93 aa 01 	sts	0x01AA, r25
    4656:	a0 93 ab 01 	sts	0x01AB, r26
    465a:	b0 93 ac 01 	sts	0x01AC, r27
	X2 = (-7357 * P) / (pow(2, 16));
    465e:	80 91 c5 01 	lds	r24, 0x01C5
    4662:	90 91 c6 01 	lds	r25, 0x01C6
    4666:	a0 91 c7 01 	lds	r26, 0x01C7
    466a:	b0 91 c8 01 	lds	r27, 0x01C8
    466e:	23 e4       	ldi	r18, 0x43	; 67
    4670:	33 ee       	ldi	r19, 0xE3	; 227
    4672:	4f ef       	ldi	r20, 0xFF	; 255
    4674:	5f ef       	ldi	r21, 0xFF	; 255
    4676:	bc 01       	movw	r22, r24
    4678:	cd 01       	movw	r24, r26
    467a:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__mulsi3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	bc 01       	movw	r22, r24
    4684:	cd 01       	movw	r24, r26
    4686:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	bc 01       	movw	r22, r24
    4690:	cd 01       	movw	r24, r26
    4692:	20 e0       	ldi	r18, 0x00	; 0
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	40 e8       	ldi	r20, 0x80	; 128
    4698:	57 e4       	ldi	r21, 0x47	; 71
    469a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    469e:	dc 01       	movw	r26, r24
    46a0:	cb 01       	movw	r24, r22
    46a2:	bc 01       	movw	r22, r24
    46a4:	cd 01       	movw	r24, r26
    46a6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	80 93 ad 01 	sts	0x01AD, r24
    46b2:	90 93 ae 01 	sts	0x01AE, r25
    46b6:	a0 93 af 01 	sts	0x01AF, r26
    46ba:	b0 93 b0 01 	sts	0x01B0, r27
	P = P + (X1 + X2 + 3791) / (pow(2, 4));
    46be:	80 91 c5 01 	lds	r24, 0x01C5
    46c2:	90 91 c6 01 	lds	r25, 0x01C6
    46c6:	a0 91 c7 01 	lds	r26, 0x01C7
    46ca:	b0 91 c8 01 	lds	r27, 0x01C8
    46ce:	bc 01       	movw	r22, r24
    46d0:	cd 01       	movw	r24, r26
    46d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    46d6:	7b 01       	movw	r14, r22
    46d8:	8c 01       	movw	r16, r24
    46da:	20 91 a9 01 	lds	r18, 0x01A9
    46de:	30 91 aa 01 	lds	r19, 0x01AA
    46e2:	40 91 ab 01 	lds	r20, 0x01AB
    46e6:	50 91 ac 01 	lds	r21, 0x01AC
    46ea:	80 91 ad 01 	lds	r24, 0x01AD
    46ee:	90 91 ae 01 	lds	r25, 0x01AE
    46f2:	a0 91 af 01 	lds	r26, 0x01AF
    46f6:	b0 91 b0 01 	lds	r27, 0x01B0
    46fa:	82 0f       	add	r24, r18
    46fc:	93 1f       	adc	r25, r19
    46fe:	a4 1f       	adc	r26, r20
    4700:	b5 1f       	adc	r27, r21
    4702:	81 53       	subi	r24, 0x31	; 49
    4704:	91 4f       	sbci	r25, 0xF1	; 241
    4706:	af 4f       	sbci	r26, 0xFF	; 255
    4708:	bf 4f       	sbci	r27, 0xFF	; 255
    470a:	bc 01       	movw	r22, r24
    470c:	cd 01       	movw	r24, r26
    470e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4712:	dc 01       	movw	r26, r24
    4714:	cb 01       	movw	r24, r22
    4716:	bc 01       	movw	r22, r24
    4718:	cd 01       	movw	r24, r26
    471a:	20 e0       	ldi	r18, 0x00	; 0
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	40 e8       	ldi	r20, 0x80	; 128
    4720:	51 e4       	ldi	r21, 0x41	; 65
    4722:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4726:	dc 01       	movw	r26, r24
    4728:	cb 01       	movw	r24, r22
    472a:	9c 01       	movw	r18, r24
    472c:	ad 01       	movw	r20, r26
    472e:	c8 01       	movw	r24, r16
    4730:	b7 01       	movw	r22, r14
    4732:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	bc 01       	movw	r22, r24
    473c:	cd 01       	movw	r24, r26
    473e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4742:	dc 01       	movw	r26, r24
    4744:	cb 01       	movw	r24, r22
    4746:	80 93 c5 01 	sts	0x01C5, r24
    474a:	90 93 c6 01 	sts	0x01C6, r25
    474e:	a0 93 c7 01 	sts	0x01C7, r26
    4752:	b0 93 c8 01 	sts	0x01C8, r27

	P = P / 100;
    4756:	80 91 c5 01 	lds	r24, 0x01C5
    475a:	90 91 c6 01 	lds	r25, 0x01C6
    475e:	a0 91 c7 01 	lds	r26, 0x01C7
    4762:	b0 91 c8 01 	lds	r27, 0x01C8
    4766:	24 e6       	ldi	r18, 0x64	; 100
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	40 e0       	ldi	r20, 0x00	; 0
    476c:	50 e0       	ldi	r21, 0x00	; 0
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__divmodsi4>
    4776:	da 01       	movw	r26, r20
    4778:	c9 01       	movw	r24, r18
    477a:	80 93 c5 01 	sts	0x01C5, r24
    477e:	90 93 c6 01 	sts	0x01C6, r25
    4782:	a0 93 c7 01 	sts	0x01C7, r26
    4786:	b0 93 c8 01 	sts	0x01C8, r27

	return P;
    478a:	80 91 c5 01 	lds	r24, 0x01C5
    478e:	90 91 c6 01 	lds	r25, 0x01C6
    4792:	a0 91 c7 01 	lds	r26, 0x01C7
    4796:	b0 91 c8 01 	lds	r27, 0x01C8
}
    479a:	bc 01       	movw	r22, r24
    479c:	cd 01       	movw	r24, r26
    479e:	cf 91       	pop	r28
    47a0:	df 91       	pop	r29
    47a2:	1f 91       	pop	r17
    47a4:	0f 91       	pop	r16
    47a6:	ff 90       	pop	r15
    47a8:	ef 90       	pop	r14
    47aa:	08 95       	ret

000047ac <BMP180_calculate>:

void BMP180_calculate(tyreState * readings) {
    47ac:	df 93       	push	r29
    47ae:	cf 93       	push	r28
    47b0:	00 d0       	rcall	.+0      	; 0x47b2 <BMP180_calculate+0x6>
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
    47b6:	9a 83       	std	Y+2, r25	; 0x02
    47b8:	89 83       	std	Y+1, r24	; 0x01
	readings->temperature = BMP180_calculateTemperature();
    47ba:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <BMP180_calculateTemperature>
    47be:	dc 01       	movw	r26, r24
    47c0:	cb 01       	movw	r24, r22
    47c2:	e9 81       	ldd	r30, Y+1	; 0x01
    47c4:	fa 81       	ldd	r31, Y+2	; 0x02
    47c6:	80 83       	st	Z, r24
    47c8:	91 83       	std	Z+1, r25	; 0x01
    47ca:	a2 83       	std	Z+2, r26	; 0x02
    47cc:	b3 83       	std	Z+3, r27	; 0x03
	readings->pressure = BMP180_calculatePressure();
    47ce:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <BMP180_calculatePressure>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	e9 81       	ldd	r30, Y+1	; 0x01
    47d8:	fa 81       	ldd	r31, Y+2	; 0x02
    47da:	84 83       	std	Z+4, r24	; 0x04
    47dc:	95 83       	std	Z+5, r25	; 0x05
    47de:	a6 83       	std	Z+6, r26	; 0x06
    47e0:	b7 83       	std	Z+7, r27	; 0x07
	readings->wheel = FRONT_LEFT;
    47e2:	e9 81       	ldd	r30, Y+1	; 0x01
    47e4:	fa 81       	ldd	r31, Y+2	; 0x02
    47e6:	10 86       	std	Z+8, r1	; 0x08
}
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	cf 91       	pop	r28
    47ee:	df 91       	pop	r29
    47f0:	08 95       	ret

000047f2 <BMP180_Start>:

void BMP180_Start(void) {
    47f2:	df 93       	push	r29
    47f4:	cf 93       	push	r28
    47f6:	cd b7       	in	r28, 0x3d	; 61
    47f8:	de b7       	in	r29, 0x3e	; 62
	BMP180_ReadCalb();
    47fa:	0e 94 76 16 	call	0x2cec	; 0x2cec <BMP180_ReadCalb>
}
    47fe:	cf 91       	pop	r28
    4800:	df 91       	pop	r29
    4802:	08 95       	ret

00004804 <delay>:

void delay(void){
    4804:	df 93       	push	r29
    4806:	cf 93       	push	r28
    4808:	cd b7       	in	r28, 0x3d	; 61
    480a:	de b7       	in	r29, 0x3e	; 62
    480c:	68 97       	sbiw	r28, 0x18	; 24
    480e:	0f b6       	in	r0, 0x3f	; 63
    4810:	f8 94       	cli
    4812:	de bf       	out	0x3e, r29	; 62
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	cd bf       	out	0x3d, r28	; 61
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	a0 e2       	ldi	r26, 0x20	; 32
    481e:	b1 e4       	ldi	r27, 0x41	; 65
    4820:	8d 8b       	std	Y+21, r24	; 0x15
    4822:	9e 8b       	std	Y+22, r25	; 0x16
    4824:	af 8b       	std	Y+23, r26	; 0x17
    4826:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4828:	6d 89       	ldd	r22, Y+21	; 0x15
    482a:	7e 89       	ldd	r23, Y+22	; 0x16
    482c:	8f 89       	ldd	r24, Y+23	; 0x17
    482e:	98 8d       	ldd	r25, Y+24	; 0x18
    4830:	2b ea       	ldi	r18, 0xAB	; 171
    4832:	3a ea       	ldi	r19, 0xAA	; 170
    4834:	4a ea       	ldi	r20, 0xAA	; 170
    4836:	50 e4       	ldi	r21, 0x40	; 64
    4838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    483c:	dc 01       	movw	r26, r24
    483e:	cb 01       	movw	r24, r22
    4840:	89 8b       	std	Y+17, r24	; 0x11
    4842:	9a 8b       	std	Y+18, r25	; 0x12
    4844:	ab 8b       	std	Y+19, r26	; 0x13
    4846:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4848:	69 89       	ldd	r22, Y+17	; 0x11
    484a:	7a 89       	ldd	r23, Y+18	; 0x12
    484c:	8b 89       	ldd	r24, Y+19	; 0x13
    484e:	9c 89       	ldd	r25, Y+20	; 0x14
    4850:	20 e0       	ldi	r18, 0x00	; 0
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	40 e8       	ldi	r20, 0x80	; 128
    4856:	5f e3       	ldi	r21, 0x3F	; 63
    4858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    485c:	88 23       	and	r24, r24
    485e:	1c f4       	brge	.+6      	; 0x4866 <delay+0x62>
		__ticks = 1;
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	88 8b       	std	Y+16, r24	; 0x10
    4864:	91 c0       	rjmp	.+290    	; 0x4988 <delay+0x184>
	else if (__tmp > 255)
    4866:	69 89       	ldd	r22, Y+17	; 0x11
    4868:	7a 89       	ldd	r23, Y+18	; 0x12
    486a:	8b 89       	ldd	r24, Y+19	; 0x13
    486c:	9c 89       	ldd	r25, Y+20	; 0x14
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	4f e7       	ldi	r20, 0x7F	; 127
    4874:	53 e4       	ldi	r21, 0x43	; 67
    4876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    487a:	18 16       	cp	r1, r24
    487c:	0c f0       	brlt	.+2      	; 0x4880 <delay+0x7c>
    487e:	7b c0       	rjmp	.+246    	; 0x4976 <delay+0x172>
	{
		_delay_ms(__us / 1000.0);
    4880:	6d 89       	ldd	r22, Y+21	; 0x15
    4882:	7e 89       	ldd	r23, Y+22	; 0x16
    4884:	8f 89       	ldd	r24, Y+23	; 0x17
    4886:	98 8d       	ldd	r25, Y+24	; 0x18
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	4a e7       	ldi	r20, 0x7A	; 122
    488e:	54 e4       	ldi	r21, 0x44	; 68
    4890:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	8c 87       	std	Y+12, r24	; 0x0c
    489a:	9d 87       	std	Y+13, r25	; 0x0d
    489c:	ae 87       	std	Y+14, r26	; 0x0e
    489e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    48a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    48a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    48a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	4a e7       	ldi	r20, 0x7A	; 122
    48ae:	55 e4       	ldi	r21, 0x45	; 69
    48b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	88 87       	std	Y+8, r24	; 0x08
    48ba:	99 87       	std	Y+9, r25	; 0x09
    48bc:	aa 87       	std	Y+10, r26	; 0x0a
    48be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    48c0:	68 85       	ldd	r22, Y+8	; 0x08
    48c2:	79 85       	ldd	r23, Y+9	; 0x09
    48c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    48c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	40 e8       	ldi	r20, 0x80	; 128
    48ce:	5f e3       	ldi	r21, 0x3F	; 63
    48d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48d4:	88 23       	and	r24, r24
    48d6:	2c f4       	brge	.+10     	; 0x48e2 <delay+0xde>
		__ticks = 1;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	9f 83       	std	Y+7, r25	; 0x07
    48de:	8e 83       	std	Y+6, r24	; 0x06
    48e0:	3f c0       	rjmp	.+126    	; 0x4960 <delay+0x15c>
	else if (__tmp > 65535)
    48e2:	68 85       	ldd	r22, Y+8	; 0x08
    48e4:	79 85       	ldd	r23, Y+9	; 0x09
    48e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    48e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	57 e4       	ldi	r21, 0x47	; 71
    48f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	4c f5       	brge	.+82     	; 0x494c <delay+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    48fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    48fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    4900:	9f 85       	ldd	r25, Y+15	; 0x0f
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e2       	ldi	r20, 0x20	; 32
    4908:	51 e4       	ldi	r21, 0x41	; 65
    490a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	9f 83       	std	Y+7, r25	; 0x07
    4920:	8e 83       	std	Y+6, r24	; 0x06
    4922:	0f c0       	rjmp	.+30     	; 0x4942 <delay+0x13e>
    4924:	80 e9       	ldi	r24, 0x90	; 144
    4926:	91 e0       	ldi	r25, 0x01	; 1
    4928:	9d 83       	std	Y+5, r25	; 0x05
    492a:	8c 83       	std	Y+4, r24	; 0x04
    492c:	8c 81       	ldd	r24, Y+4	; 0x04
    492e:	9d 81       	ldd	r25, Y+5	; 0x05
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <delay+0x12c>
    4934:	9d 83       	std	Y+5, r25	; 0x05
    4936:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4938:	8e 81       	ldd	r24, Y+6	; 0x06
    493a:	9f 81       	ldd	r25, Y+7	; 0x07
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	9f 83       	std	Y+7, r25	; 0x07
    4940:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4942:	8e 81       	ldd	r24, Y+6	; 0x06
    4944:	9f 81       	ldd	r25, Y+7	; 0x07
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	69 f7       	brne	.-38     	; 0x4924 <delay+0x120>
    494a:	24 c0       	rjmp	.+72     	; 0x4994 <delay+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494c:	68 85       	ldd	r22, Y+8	; 0x08
    494e:	79 85       	ldd	r23, Y+9	; 0x09
    4950:	8a 85       	ldd	r24, Y+10	; 0x0a
    4952:	9b 85       	ldd	r25, Y+11	; 0x0b
    4954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	9f 83       	std	Y+7, r25	; 0x07
    495e:	8e 83       	std	Y+6, r24	; 0x06
    4960:	8e 81       	ldd	r24, Y+6	; 0x06
    4962:	9f 81       	ldd	r25, Y+7	; 0x07
    4964:	9b 83       	std	Y+3, r25	; 0x03
    4966:	8a 83       	std	Y+2, r24	; 0x02
    4968:	8a 81       	ldd	r24, Y+2	; 0x02
    496a:	9b 81       	ldd	r25, Y+3	; 0x03
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	f1 f7       	brne	.-4      	; 0x496c <delay+0x168>
    4970:	9b 83       	std	Y+3, r25	; 0x03
    4972:	8a 83       	std	Y+2, r24	; 0x02
    4974:	0f c0       	rjmp	.+30     	; 0x4994 <delay+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4976:	69 89       	ldd	r22, Y+17	; 0x11
    4978:	7a 89       	ldd	r23, Y+18	; 0x12
    497a:	8b 89       	ldd	r24, Y+19	; 0x13
    497c:	9c 89       	ldd	r25, Y+20	; 0x14
    497e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4982:	dc 01       	movw	r26, r24
    4984:	cb 01       	movw	r24, r22
    4986:	88 8b       	std	Y+16, r24	; 0x10
    4988:	88 89       	ldd	r24, Y+16	; 0x10
    498a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    498c:	89 81       	ldd	r24, Y+1	; 0x01
    498e:	8a 95       	dec	r24
    4990:	f1 f7       	brne	.-4      	; 0x498e <delay+0x18a>
    4992:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    4994:	68 96       	adiw	r28, 0x18	; 24
    4996:	0f b6       	in	r0, 0x3f	; 63
    4998:	f8 94       	cli
    499a:	de bf       	out	0x3e, r29	; 62
    499c:	0f be       	out	0x3f, r0	; 63
    499e:	cd bf       	out	0x3d, r28	; 61
    49a0:	cf 91       	pop	r28
    49a2:	df 91       	pop	r29
    49a4:	08 95       	ret

000049a6 <__mulsi3>:
    49a6:	62 9f       	mul	r22, r18
    49a8:	d0 01       	movw	r26, r0
    49aa:	73 9f       	mul	r23, r19
    49ac:	f0 01       	movw	r30, r0
    49ae:	82 9f       	mul	r24, r18
    49b0:	e0 0d       	add	r30, r0
    49b2:	f1 1d       	adc	r31, r1
    49b4:	64 9f       	mul	r22, r20
    49b6:	e0 0d       	add	r30, r0
    49b8:	f1 1d       	adc	r31, r1
    49ba:	92 9f       	mul	r25, r18
    49bc:	f0 0d       	add	r31, r0
    49be:	83 9f       	mul	r24, r19
    49c0:	f0 0d       	add	r31, r0
    49c2:	74 9f       	mul	r23, r20
    49c4:	f0 0d       	add	r31, r0
    49c6:	65 9f       	mul	r22, r21
    49c8:	f0 0d       	add	r31, r0
    49ca:	99 27       	eor	r25, r25
    49cc:	72 9f       	mul	r23, r18
    49ce:	b0 0d       	add	r27, r0
    49d0:	e1 1d       	adc	r30, r1
    49d2:	f9 1f       	adc	r31, r25
    49d4:	63 9f       	mul	r22, r19
    49d6:	b0 0d       	add	r27, r0
    49d8:	e1 1d       	adc	r30, r1
    49da:	f9 1f       	adc	r31, r25
    49dc:	bd 01       	movw	r22, r26
    49de:	cf 01       	movw	r24, r30
    49e0:	11 24       	eor	r1, r1
    49e2:	08 95       	ret

000049e4 <__udivmodsi4>:
    49e4:	a1 e2       	ldi	r26, 0x21	; 33
    49e6:	1a 2e       	mov	r1, r26
    49e8:	aa 1b       	sub	r26, r26
    49ea:	bb 1b       	sub	r27, r27
    49ec:	fd 01       	movw	r30, r26
    49ee:	0d c0       	rjmp	.+26     	; 0x4a0a <__udivmodsi4_ep>

000049f0 <__udivmodsi4_loop>:
    49f0:	aa 1f       	adc	r26, r26
    49f2:	bb 1f       	adc	r27, r27
    49f4:	ee 1f       	adc	r30, r30
    49f6:	ff 1f       	adc	r31, r31
    49f8:	a2 17       	cp	r26, r18
    49fa:	b3 07       	cpc	r27, r19
    49fc:	e4 07       	cpc	r30, r20
    49fe:	f5 07       	cpc	r31, r21
    4a00:	20 f0       	brcs	.+8      	; 0x4a0a <__udivmodsi4_ep>
    4a02:	a2 1b       	sub	r26, r18
    4a04:	b3 0b       	sbc	r27, r19
    4a06:	e4 0b       	sbc	r30, r20
    4a08:	f5 0b       	sbc	r31, r21

00004a0a <__udivmodsi4_ep>:
    4a0a:	66 1f       	adc	r22, r22
    4a0c:	77 1f       	adc	r23, r23
    4a0e:	88 1f       	adc	r24, r24
    4a10:	99 1f       	adc	r25, r25
    4a12:	1a 94       	dec	r1
    4a14:	69 f7       	brne	.-38     	; 0x49f0 <__udivmodsi4_loop>
    4a16:	60 95       	com	r22
    4a18:	70 95       	com	r23
    4a1a:	80 95       	com	r24
    4a1c:	90 95       	com	r25
    4a1e:	9b 01       	movw	r18, r22
    4a20:	ac 01       	movw	r20, r24
    4a22:	bd 01       	movw	r22, r26
    4a24:	cf 01       	movw	r24, r30
    4a26:	08 95       	ret

00004a28 <__divmodsi4>:
    4a28:	97 fb       	bst	r25, 7
    4a2a:	09 2e       	mov	r0, r25
    4a2c:	05 26       	eor	r0, r21
    4a2e:	0e d0       	rcall	.+28     	; 0x4a4c <__divmodsi4_neg1>
    4a30:	57 fd       	sbrc	r21, 7
    4a32:	04 d0       	rcall	.+8      	; 0x4a3c <__divmodsi4_neg2>
    4a34:	d7 df       	rcall	.-82     	; 0x49e4 <__udivmodsi4>
    4a36:	0a d0       	rcall	.+20     	; 0x4a4c <__divmodsi4_neg1>
    4a38:	00 1c       	adc	r0, r0
    4a3a:	38 f4       	brcc	.+14     	; 0x4a4a <__divmodsi4_exit>

00004a3c <__divmodsi4_neg2>:
    4a3c:	50 95       	com	r21
    4a3e:	40 95       	com	r20
    4a40:	30 95       	com	r19
    4a42:	21 95       	neg	r18
    4a44:	3f 4f       	sbci	r19, 0xFF	; 255
    4a46:	4f 4f       	sbci	r20, 0xFF	; 255
    4a48:	5f 4f       	sbci	r21, 0xFF	; 255

00004a4a <__divmodsi4_exit>:
    4a4a:	08 95       	ret

00004a4c <__divmodsi4_neg1>:
    4a4c:	f6 f7       	brtc	.-4      	; 0x4a4a <__divmodsi4_exit>
    4a4e:	90 95       	com	r25
    4a50:	80 95       	com	r24
    4a52:	70 95       	com	r23
    4a54:	61 95       	neg	r22
    4a56:	7f 4f       	sbci	r23, 0xFF	; 255
    4a58:	8f 4f       	sbci	r24, 0xFF	; 255
    4a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a5c:	08 95       	ret

00004a5e <__prologue_saves__>:
    4a5e:	2f 92       	push	r2
    4a60:	3f 92       	push	r3
    4a62:	4f 92       	push	r4
    4a64:	5f 92       	push	r5
    4a66:	6f 92       	push	r6
    4a68:	7f 92       	push	r7
    4a6a:	8f 92       	push	r8
    4a6c:	9f 92       	push	r9
    4a6e:	af 92       	push	r10
    4a70:	bf 92       	push	r11
    4a72:	cf 92       	push	r12
    4a74:	df 92       	push	r13
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
    4a86:	ca 1b       	sub	r28, r26
    4a88:	db 0b       	sbc	r29, r27
    4a8a:	0f b6       	in	r0, 0x3f	; 63
    4a8c:	f8 94       	cli
    4a8e:	de bf       	out	0x3e, r29	; 62
    4a90:	0f be       	out	0x3f, r0	; 63
    4a92:	cd bf       	out	0x3d, r28	; 61
    4a94:	09 94       	ijmp

00004a96 <__epilogue_restores__>:
    4a96:	2a 88       	ldd	r2, Y+18	; 0x12
    4a98:	39 88       	ldd	r3, Y+17	; 0x11
    4a9a:	48 88       	ldd	r4, Y+16	; 0x10
    4a9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4aa0:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aa2:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4aa6:	aa 84       	ldd	r10, Y+10	; 0x0a
    4aa8:	b9 84       	ldd	r11, Y+9	; 0x09
    4aaa:	c8 84       	ldd	r12, Y+8	; 0x08
    4aac:	df 80       	ldd	r13, Y+7	; 0x07
    4aae:	ee 80       	ldd	r14, Y+6	; 0x06
    4ab0:	fd 80       	ldd	r15, Y+5	; 0x05
    4ab2:	0c 81       	ldd	r16, Y+4	; 0x04
    4ab4:	1b 81       	ldd	r17, Y+3	; 0x03
    4ab6:	aa 81       	ldd	r26, Y+2	; 0x02
    4ab8:	b9 81       	ldd	r27, Y+1	; 0x01
    4aba:	ce 0f       	add	r28, r30
    4abc:	d1 1d       	adc	r29, r1
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	de bf       	out	0x3e, r29	; 62
    4ac4:	0f be       	out	0x3f, r0	; 63
    4ac6:	cd bf       	out	0x3d, r28	; 61
    4ac8:	ed 01       	movw	r28, r26
    4aca:	08 95       	ret

00004acc <_exit>:
    4acc:	f8 94       	cli

00004ace <__stop_program>:
    4ace:	ff cf       	rjmp	.-2      	; 0x4ace <__stop_program>
