
motor_GP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001662  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00001662  000016d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002898  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001272  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000030  00000000  00000000  00005266  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY
  6 .avr.prop     00000028  00000000  00000000  000052d4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  000052fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000057e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00005c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00005c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 93 05 	call	0xb26	; 0xb26 <main>
      7a:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	00 d0       	rcall	.+0      	; 0x88 <GPIO_setupPinDirection+0x6>
      88:	1f 92       	push	r1
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	89 83       	std	Y+1, r24	; 0x01
      90:	6a 83       	std	Y+2, r22	; 0x02
      92:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
      94:	8a 81       	ldd	r24, Y+2	; 0x02
      96:	88 30       	cpi	r24, 0x08	; 8
      98:	08 f0       	brcs	.+2      	; 0x9c <GPIO_setupPinDirection+0x1a>
      9a:	d9 c0       	rjmp	.+434    	; 0x24e <GPIO_setupPinDirection+0x1cc>
      9c:	89 81       	ldd	r24, Y+1	; 0x01
      9e:	84 30       	cpi	r24, 0x04	; 4
      a0:	08 f0       	brcs	.+2      	; 0xa4 <GPIO_setupPinDirection+0x22>
      a2:	d5 c0       	rjmp	.+426    	; 0x24e <GPIO_setupPinDirection+0x1cc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
      a4:	89 81       	ldd	r24, Y+1	; 0x01
      a6:	88 2f       	mov	r24, r24
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	81 30       	cpi	r24, 0x01	; 1
      ac:	91 05       	cpc	r25, r1
      ae:	09 f4       	brne	.+2      	; 0xb2 <GPIO_setupPinDirection+0x30>
      b0:	3e c0       	rjmp	.+124    	; 0x12e <GPIO_setupPinDirection+0xac>
      b2:	82 30       	cpi	r24, 0x02	; 2
      b4:	91 05       	cpc	r25, r1
      b6:	1c f4       	brge	.+6      	; 0xbe <GPIO_setupPinDirection+0x3c>
      b8:	89 2b       	or	r24, r25
      ba:	49 f0       	breq	.+18     	; 0xce <GPIO_setupPinDirection+0x4c>
				CLEAR_BIT(DDRD,pin_num);
			}
			break;
		}
	}
}
      bc:	c8 c0       	rjmp	.+400    	; 0x24e <GPIO_setupPinDirection+0x1cc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
      be:	82 30       	cpi	r24, 0x02	; 2
      c0:	91 05       	cpc	r25, r1
      c2:	09 f4       	brne	.+2      	; 0xc6 <GPIO_setupPinDirection+0x44>
      c4:	64 c0       	rjmp	.+200    	; 0x18e <GPIO_setupPinDirection+0x10c>
      c6:	03 97       	sbiw	r24, 0x03	; 3
      c8:	09 f4       	brne	.+2      	; 0xcc <GPIO_setupPinDirection+0x4a>
      ca:	91 c0       	rjmp	.+290    	; 0x1ee <GPIO_setupPinDirection+0x16c>
				CLEAR_BIT(DDRD,pin_num);
			}
			break;
		}
	}
}
      cc:	c0 c0       	rjmp	.+384    	; 0x24e <GPIO_setupPinDirection+0x1cc>
	{
		/* Setup the pin direction as required */
		switch(port_num)
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
      ce:	8b 81       	ldd	r24, Y+3	; 0x03
      d0:	81 30       	cpi	r24, 0x01	; 1
      d2:	b1 f4       	brne	.+44     	; 0x100 <GPIO_setupPinDirection+0x7e>
			{
				SET_BIT(DDRA,pin_num);
      d4:	8a e3       	ldi	r24, 0x3A	; 58
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	80 81       	ld	r24, Z
      dc:	48 2f       	mov	r20, r24
      de:	8a 81       	ldd	r24, Y+2	; 0x02
      e0:	28 2f       	mov	r18, r24
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_setupPinDirection+0x6c>
      ea:	88 0f       	add	r24, r24
      ec:	99 1f       	adc	r25, r25
      ee:	2a 95       	dec	r18
      f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_setupPinDirection+0x68>
      f2:	24 2f       	mov	r18, r20
      f4:	28 2b       	or	r18, r24
      f6:	8a e3       	ldi	r24, 0x3A	; 58
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
			}
			break;
      fe:	a7 c0       	rjmp	.+334    	; 0x24e <GPIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRA,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     100:	8a e3       	ldi	r24, 0x3A	; 58
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	fc 01       	movw	r30, r24
     106:	80 81       	ld	r24, Z
     108:	48 2f       	mov	r20, r24
     10a:	8a 81       	ldd	r24, Y+2	; 0x02
     10c:	28 2f       	mov	r18, r24
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	02 c0       	rjmp	.+4      	; 0x11a <GPIO_setupPinDirection+0x98>
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	2a 95       	dec	r18
     11c:	e2 f7       	brpl	.-8      	; 0x116 <GPIO_setupPinDirection+0x94>
     11e:	80 95       	com	r24
     120:	24 2f       	mov	r18, r20
     122:	28 23       	and	r18, r24
     124:	8a e3       	ldi	r24, 0x3A	; 58
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
			}
			break;
     12c:	90 c0       	rjmp	.+288    	; 0x24e <GPIO_setupPinDirection+0x1cc>
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	b1 f4       	brne	.+44     	; 0x160 <GPIO_setupPinDirection+0xde>
			{
				SET_BIT(DDRB,pin_num);
     134:	87 e3       	ldi	r24, 0x37	; 55
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	fc 01       	movw	r30, r24
     13a:	80 81       	ld	r24, Z
     13c:	48 2f       	mov	r20, r24
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
     140:	28 2f       	mov	r18, r24
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <GPIO_setupPinDirection+0xcc>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	2a 95       	dec	r18
     150:	e2 f7       	brpl	.-8      	; 0x14a <GPIO_setupPinDirection+0xc8>
     152:	24 2f       	mov	r18, r20
     154:	28 2b       	or	r18, r24
     156:	87 e3       	ldi	r24, 0x37	; 55
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
			}
			break;
     15e:	77 c0       	rjmp	.+238    	; 0x24e <GPIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRB,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     160:	87 e3       	ldi	r24, 0x37	; 55
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	48 2f       	mov	r20, r24
     16a:	8a 81       	ldd	r24, Y+2	; 0x02
     16c:	28 2f       	mov	r18, r24
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <GPIO_setupPinDirection+0xf8>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	2a 95       	dec	r18
     17c:	e2 f7       	brpl	.-8      	; 0x176 <GPIO_setupPinDirection+0xf4>
     17e:	80 95       	com	r24
     180:	24 2f       	mov	r18, r20
     182:	28 23       	and	r18, r24
     184:	87 e3       	ldi	r24, 0x37	; 55
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	fc 01       	movw	r30, r24
     18a:	20 83       	st	Z, r18
			}
			break;
     18c:	60 c0       	rjmp	.+192    	; 0x24e <GPIO_setupPinDirection+0x1cc>
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     18e:	8b 81       	ldd	r24, Y+3	; 0x03
     190:	81 30       	cpi	r24, 0x01	; 1
     192:	b1 f4       	brne	.+44     	; 0x1c0 <GPIO_setupPinDirection+0x13e>
			{
				SET_BIT(DDRC,pin_num);
     194:	84 e3       	ldi	r24, 0x34	; 52
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	fc 01       	movw	r30, r24
     19a:	80 81       	ld	r24, Z
     19c:	48 2f       	mov	r20, r24
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	28 2f       	mov	r18, r24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <GPIO_setupPinDirection+0x12c>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	2a 95       	dec	r18
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <GPIO_setupPinDirection+0x128>
     1b2:	24 2f       	mov	r18, r20
     1b4:	28 2b       	or	r18, r24
     1b6:	84 e3       	ldi	r24, 0x34	; 52
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
			}
			break;
     1be:	47 c0       	rjmp	.+142    	; 0x24e <GPIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRC,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     1c0:	84 e3       	ldi	r24, 0x34	; 52
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	80 81       	ld	r24, Z
     1c8:	48 2f       	mov	r20, r24
     1ca:	8a 81       	ldd	r24, Y+2	; 0x02
     1cc:	28 2f       	mov	r18, r24
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_setupPinDirection+0x158>
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	2a 95       	dec	r18
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_setupPinDirection+0x154>
     1de:	80 95       	com	r24
     1e0:	24 2f       	mov	r18, r20
     1e2:	28 23       	and	r18, r24
     1e4:	84 e3       	ldi	r24, 0x34	; 52
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18
			}
			break;
     1ec:	30 c0       	rjmp	.+96     	; 0x24e <GPIO_setupPinDirection+0x1cc>
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	b1 f4       	brne	.+44     	; 0x220 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     1f4:	81 e3       	ldi	r24, 0x31	; 49
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	48 2f       	mov	r20, r24
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	28 2f       	mov	r18, r24
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 c0       	rjmp	.+4      	; 0x20e <GPIO_setupPinDirection+0x18c>
     20a:	88 0f       	add	r24, r24
     20c:	99 1f       	adc	r25, r25
     20e:	2a 95       	dec	r18
     210:	e2 f7       	brpl	.-8      	; 0x20a <GPIO_setupPinDirection+0x188>
     212:	24 2f       	mov	r18, r20
     214:	28 2b       	or	r18, r24
     216:	81 e3       	ldi	r24, 0x31	; 49
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
			}
			break;
     21e:	16 c0       	rjmp	.+44     	; 0x24c <GPIO_setupPinDirection+0x1ca>
			{
				SET_BIT(DDRD,pin_num);
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     220:	81 e3       	ldi	r24, 0x31	; 49
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	48 2f       	mov	r20, r24
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	28 2f       	mov	r18, r24
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <GPIO_setupPinDirection+0x1b8>
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	2a 95       	dec	r18
     23c:	e2 f7       	brpl	.-8      	; 0x236 <GPIO_setupPinDirection+0x1b4>
     23e:	80 95       	com	r24
     240:	24 2f       	mov	r18, r20
     242:	28 23       	and	r18, r24
     244:	81 e3       	ldi	r24, 0x31	; 49
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
			}
			break;
     24c:	00 00       	nop
		}
	}
}
     24e:	00 00       	nop
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <GPIO_writePin+0x6>
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	6a 83       	std	Y+2, r22	; 0x02
     26c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     26e:	8a 81       	ldd	r24, Y+2	; 0x02
     270:	88 30       	cpi	r24, 0x08	; 8
     272:	08 f0       	brcs	.+2      	; 0x276 <GPIO_writePin+0x1a>
     274:	d9 c0       	rjmp	.+434    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	84 30       	cpi	r24, 0x04	; 4
     27a:	08 f0       	brcs	.+2      	; 0x27e <GPIO_writePin+0x22>
     27c:	d5 c0       	rjmp	.+426    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	91 05       	cpc	r25, r1
     288:	09 f4       	brne	.+2      	; 0x28c <GPIO_writePin+0x30>
     28a:	3e c0       	rjmp	.+124    	; 0x308 <GPIO_writePin+0xac>
     28c:	82 30       	cpi	r24, 0x02	; 2
     28e:	91 05       	cpc	r25, r1
     290:	1c f4       	brge	.+6      	; 0x298 <GPIO_writePin+0x3c>
     292:	89 2b       	or	r24, r25
     294:	49 f0       	breq	.+18     	; 0x2a8 <GPIO_writePin+0x4c>
			}
			break;
		}
	}

}
     296:	c8 c0       	rjmp	.+400    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	91 05       	cpc	r25, r1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <GPIO_writePin+0x44>
     29e:	64 c0       	rjmp	.+200    	; 0x368 <GPIO_writePin+0x10c>
     2a0:	03 97       	sbiw	r24, 0x03	; 3
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <GPIO_writePin+0x4a>
     2a4:	91 c0       	rjmp	.+290    	; 0x3c8 <GPIO_writePin+0x16c>
			}
			break;
		}
	}

}
     2a6:	c0 c0       	rjmp	.+384    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
		/* Setup the pin direction as required */
		switch(port_num)
		{
		case PORTA_ID:
			if (value==LOGIC_HIGH){
     2a8:	8b 81       	ldd	r24, Y+3	; 0x03
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	b1 f4       	brne	.+44     	; 0x2da <GPIO_writePin+0x7e>
				SET_BIT(PORTA,pin_num) ;
     2ae:	8b e3       	ldi	r24, 0x3B	; 59
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	48 2f       	mov	r20, r24
     2b8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ba:	28 2f       	mov	r18, r24
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <GPIO_writePin+0x6c>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	2a 95       	dec	r18
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <GPIO_writePin+0x68>
     2cc:	24 2f       	mov	r18, r20
     2ce:	28 2b       	or	r18, r24
     2d0:	8b e3       	ldi	r24, 0x3B	; 59
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;
     2d8:	a7 c0       	rjmp	.+334    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			if (value==LOGIC_HIGH){
				SET_BIT(PORTA,pin_num) ;
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     2da:	8b e3       	ldi	r24, 0x3B	; 59
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	fc 01       	movw	r30, r24
     2e0:	80 81       	ld	r24, Z
     2e2:	48 2f       	mov	r20, r24
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	28 2f       	mov	r18, r24
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <GPIO_writePin+0x98>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	2a 95       	dec	r18
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <GPIO_writePin+0x94>
     2f8:	80 95       	com	r24
     2fa:	24 2f       	mov	r18, r20
     2fc:	28 23       	and	r18, r24
     2fe:	8b e3       	ldi	r24, 0x3B	; 59
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
			}
			break;
     306:	90 c0       	rjmp	.+288    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case PORTB_ID:
			if (value==LOGIC_HIGH){
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	b1 f4       	brne	.+44     	; 0x33a <GPIO_writePin+0xde>
				SET_BIT(PORTB,pin_num) ;
     30e:	88 e3       	ldi	r24, 0x38	; 56
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	48 2f       	mov	r20, r24
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	28 2f       	mov	r18, r24
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	02 c0       	rjmp	.+4      	; 0x328 <GPIO_writePin+0xcc>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	2a 95       	dec	r18
     32a:	e2 f7       	brpl	.-8      	; 0x324 <GPIO_writePin+0xc8>
     32c:	24 2f       	mov	r18, r20
     32e:	28 2b       	or	r18, r24
     330:	88 e3       	ldi	r24, 0x38	; 56
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
			}
			break;
     338:	77 c0       	rjmp	.+238    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			if (value==LOGIC_HIGH){
				SET_BIT(PORTB,pin_num) ;
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     33a:	88 e3       	ldi	r24, 0x38	; 56
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	fc 01       	movw	r30, r24
     340:	80 81       	ld	r24, Z
     342:	48 2f       	mov	r20, r24
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	28 2f       	mov	r18, r24
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <GPIO_writePin+0xf8>
     350:	88 0f       	add	r24, r24
     352:	99 1f       	adc	r25, r25
     354:	2a 95       	dec	r18
     356:	e2 f7       	brpl	.-8      	; 0x350 <GPIO_writePin+0xf4>
     358:	80 95       	com	r24
     35a:	24 2f       	mov	r18, r20
     35c:	28 23       	and	r18, r24
     35e:	88 e3       	ldi	r24, 0x38	; 56
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
			}
			break;
     366:	60 c0       	rjmp	.+192    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case PORTC_ID:
			if (value==LOGIC_HIGH){
     368:	8b 81       	ldd	r24, Y+3	; 0x03
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	b1 f4       	brne	.+44     	; 0x39a <GPIO_writePin+0x13e>
				SET_BIT(PORTC,pin_num) ;
     36e:	85 e3       	ldi	r24, 0x35	; 53
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	48 2f       	mov	r20, r24
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	28 2f       	mov	r18, r24
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <GPIO_writePin+0x12c>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	2a 95       	dec	r18
     38a:	e2 f7       	brpl	.-8      	; 0x384 <GPIO_writePin+0x128>
     38c:	24 2f       	mov	r18, r20
     38e:	28 2b       	or	r18, r24
     390:	85 e3       	ldi	r24, 0x35	; 53
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
			}
			break;
     398:	47 c0       	rjmp	.+142    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			if (value==LOGIC_HIGH){
				SET_BIT(PORTC,pin_num) ;
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     39a:	85 e3       	ldi	r24, 0x35	; 53
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	48 2f       	mov	r20, r24
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	28 2f       	mov	r18, r24
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <GPIO_writePin+0x158>
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	2a 95       	dec	r18
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <GPIO_writePin+0x154>
     3b8:	80 95       	com	r24
     3ba:	24 2f       	mov	r18, r20
     3bc:	28 23       	and	r18, r24
     3be:	85 e3       	ldi	r24, 0x35	; 53
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
			}
			break;
     3c6:	30 c0       	rjmp	.+96     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		case PORTD_ID:
			if (value==LOGIC_HIGH){
     3c8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	b1 f4       	brne	.+44     	; 0x3fa <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num) ;
     3ce:	82 e3       	ldi	r24, 0x32	; 50
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	80 81       	ld	r24, Z
     3d6:	48 2f       	mov	r20, r24
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	28 2f       	mov	r18, r24
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <GPIO_writePin+0x18c>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	2a 95       	dec	r18
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <GPIO_writePin+0x188>
     3ec:	24 2f       	mov	r18, r20
     3ee:	28 2b       	or	r18, r24
     3f0:	82 e3       	ldi	r24, 0x32	; 50
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
			}
			break;
     3f8:	16 c0       	rjmp	.+44     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
			if (value==LOGIC_HIGH){
				SET_BIT(PORTD,pin_num) ;
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	48 2f       	mov	r20, r24
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	28 2f       	mov	r18, r24
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     410:	88 0f       	add	r24, r24
     412:	99 1f       	adc	r25, r25
     414:	2a 95       	dec	r18
     416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     418:	80 95       	com	r24
     41a:	24 2f       	mov	r18, r20
     41c:	28 23       	and	r18, r24
     41e:	82 e3       	ldi	r24, 0x32	; 50
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
			}
			break;
     426:	00 00       	nop
		}
	}

}
     428:	00 00       	nop
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	00 d0       	rcall	.+0      	; 0x43c <GPIO_readPin+0x6>
     43c:	00 d0       	rcall	.+0      	; 0x43e <GPIO_readPin+0x8>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	8b 83       	std	Y+3, r24	; 0x03
     444:	6c 83       	std	Y+4, r22	; 0x04
	int flag=0;
     446:	1a 82       	std	Y+2, r1	; 0x02
     448:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     44a:	8c 81       	ldd	r24, Y+4	; 0x04
     44c:	88 30       	cpi	r24, 0x08	; 8
     44e:	18 f4       	brcc	.+6      	; 0x456 <GPIO_readPin+0x20>
     450:	8b 81       	ldd	r24, Y+3	; 0x03
     452:	84 30       	cpi	r24, 0x04	; 4
     454:	18 f0       	brcs	.+6      	; 0x45c <GPIO_readPin+0x26>
	{
		flag=0;
     456:	1a 82       	std	Y+2, r1	; 0x02
     458:	19 82       	std	Y+1, r1	; 0x01
     45a:	7b c0       	rjmp	.+246    	; 0x552 <GPIO_readPin+0x11c>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	88 2f       	mov	r24, r24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	91 05       	cpc	r25, r1
     466:	39 f1       	breq	.+78     	; 0x4b6 <GPIO_readPin+0x80>
     468:	82 30       	cpi	r24, 0x02	; 2
     46a:	91 05       	cpc	r25, r1
     46c:	1c f4       	brge	.+6      	; 0x474 <GPIO_readPin+0x3e>
     46e:	89 2b       	or	r24, r25
     470:	41 f0       	breq	.+16     	; 0x482 <GPIO_readPin+0x4c>
     472:	6f c0       	rjmp	.+222    	; 0x552 <GPIO_readPin+0x11c>
     474:	82 30       	cpi	r24, 0x02	; 2
     476:	91 05       	cpc	r25, r1
     478:	c1 f1       	breq	.+112    	; 0x4ea <GPIO_readPin+0xb4>
     47a:	03 97       	sbiw	r24, 0x03	; 3
     47c:	09 f4       	brne	.+2      	; 0x480 <GPIO_readPin+0x4a>
     47e:	4f c0       	rjmp	.+158    	; 0x51e <GPIO_readPin+0xe8>
     480:	68 c0       	rjmp	.+208    	; 0x552 <GPIO_readPin+0x11c>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA,pin_num)){
     482:	89 e3       	ldi	r24, 0x39	; 57
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	2c 81       	ldd	r18, Y+4	; 0x04
     490:	22 2f       	mov	r18, r18
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	02 c0       	rjmp	.+4      	; 0x49a <GPIO_readPin+0x64>
     496:	95 95       	asr	r25
     498:	87 95       	ror	r24
     49a:	2a 95       	dec	r18
     49c:	e2 f7       	brpl	.-8      	; 0x496 <GPIO_readPin+0x60>
     49e:	81 70       	andi	r24, 0x01	; 1
     4a0:	99 27       	eor	r25, r25
     4a2:	89 2b       	or	r24, r25
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <GPIO_readPin+0x7a>
				flag=1;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9a 83       	std	Y+2, r25	; 0x02
     4ac:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				flag=0;
			}
			break;
     4ae:	51 c0       	rjmp	.+162    	; 0x552 <GPIO_readPin+0x11c>
			if (BIT_IS_SET(PINA,pin_num)){
				flag=1;
			}
			else
			{
				flag=0;
     4b0:	1a 82       	std	Y+2, r1	; 0x02
     4b2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     4b4:	4e c0       	rjmp	.+156    	; 0x552 <GPIO_readPin+0x11c>
		case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num)){
     4b6:	86 e3       	ldi	r24, 0x36	; 54
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	fc 01       	movw	r30, r24
     4bc:	80 81       	ld	r24, Z
     4be:	88 2f       	mov	r24, r24
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	2c 81       	ldd	r18, Y+4	; 0x04
     4c4:	22 2f       	mov	r18, r18
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <GPIO_readPin+0x98>
     4ca:	95 95       	asr	r25
     4cc:	87 95       	ror	r24
     4ce:	2a 95       	dec	r18
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <GPIO_readPin+0x94>
     4d2:	81 70       	andi	r24, 0x01	; 1
     4d4:	99 27       	eor	r25, r25
     4d6:	89 2b       	or	r24, r25
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <GPIO_readPin+0xae>
				flag=1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				flag=0;
			}
			break;
     4e2:	37 c0       	rjmp	.+110    	; 0x552 <GPIO_readPin+0x11c>
			if (BIT_IS_SET(PINB,pin_num)){
				flag=1;
			}
			else
			{
				flag=0;
     4e4:	1a 82       	std	Y+2, r1	; 0x02
     4e6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     4e8:	34 c0       	rjmp	.+104    	; 0x552 <GPIO_readPin+0x11c>
		case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num)){
     4ea:	83 e3       	ldi	r24, 0x33	; 51
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	2c 81       	ldd	r18, Y+4	; 0x04
     4f8:	22 2f       	mov	r18, r18
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <GPIO_readPin+0xcc>
     4fe:	95 95       	asr	r25
     500:	87 95       	ror	r24
     502:	2a 95       	dec	r18
     504:	e2 f7       	brpl	.-8      	; 0x4fe <GPIO_readPin+0xc8>
     506:	81 70       	andi	r24, 0x01	; 1
     508:	99 27       	eor	r25, r25
     50a:	89 2b       	or	r24, r25
     50c:	29 f0       	breq	.+10     	; 0x518 <GPIO_readPin+0xe2>
				flag=1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	9a 83       	std	Y+2, r25	; 0x02
     514:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				flag=0;
			}
			break;
     516:	1d c0       	rjmp	.+58     	; 0x552 <GPIO_readPin+0x11c>
			if (BIT_IS_SET(PINC,pin_num)){
				flag=1;
			}
			else
			{
				flag=0;
     518:	1a 82       	std	Y+2, r1	; 0x02
     51a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     51c:	1a c0       	rjmp	.+52     	; 0x552 <GPIO_readPin+0x11c>
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num)){
     51e:	80 e3       	ldi	r24, 0x30	; 48
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	88 2f       	mov	r24, r24
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	2c 81       	ldd	r18, Y+4	; 0x04
     52c:	22 2f       	mov	r18, r18
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <GPIO_readPin+0x100>
     532:	95 95       	asr	r25
     534:	87 95       	ror	r24
     536:	2a 95       	dec	r18
     538:	e2 f7       	brpl	.-8      	; 0x532 <GPIO_readPin+0xfc>
     53a:	81 70       	andi	r24, 0x01	; 1
     53c:	99 27       	eor	r25, r25
     53e:	89 2b       	or	r24, r25
     540:	29 f0       	breq	.+10     	; 0x54c <GPIO_readPin+0x116>
				flag=1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				flag=0;
			}
			break;
     54a:	02 c0       	rjmp	.+4      	; 0x550 <GPIO_readPin+0x11a>
			if (BIT_IS_SET(PIND,pin_num)){
				flag=1;
			}
			else
			{
				flag=0;
     54c:	1a 82       	std	Y+2, r1	; 0x02
     54e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     550:	00 00       	nop
		}

	}
	return flag ;
     552:	89 81       	ldd	r24, Y+1	; 0x01
}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	00 d0       	rcall	.+0      	; 0x568 <GPIO_setupPortDirection+0x6>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	84 30       	cpi	r24, 0x04	; 4
     574:	50 f5       	brcc	.+84     	; 0x5ca <GPIO_setupPortDirection+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	91 05       	cpc	r25, r1
     580:	91 f0       	breq	.+36     	; 0x5a6 <GPIO_setupPortDirection+0x44>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	91 05       	cpc	r25, r1
     586:	1c f4       	brge	.+6      	; 0x58e <GPIO_setupPortDirection+0x2c>
     588:	89 2b       	or	r24, r25
     58a:	39 f0       	breq	.+14     	; 0x59a <GPIO_setupPortDirection+0x38>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     58c:	1e c0       	rjmp	.+60     	; 0x5ca <GPIO_setupPortDirection+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	91 05       	cpc	r25, r1
     592:	79 f0       	breq	.+30     	; 0x5b2 <GPIO_setupPortDirection+0x50>
     594:	03 97       	sbiw	r24, 0x03	; 3
     596:	99 f0       	breq	.+38     	; 0x5be <GPIO_setupPortDirection+0x5c>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     598:	18 c0       	rjmp	.+48     	; 0x5ca <GPIO_setupPortDirection+0x68>
	{
		/* Setup the port direction as required */
		switch(port_num)
		{
		case PORTA_ID:
			DDRA = direction;
     59a:	8a e3       	ldi	r24, 0x3A	; 58
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	2a 81       	ldd	r18, Y+2	; 0x02
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 83       	st	Z, r18
			break;
     5a4:	12 c0       	rjmp	.+36     	; 0x5ca <GPIO_setupPortDirection+0x68>
		case PORTB_ID:
			DDRB = direction;
     5a6:	87 e3       	ldi	r24, 0x37	; 55
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	2a 81       	ldd	r18, Y+2	; 0x02
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18
			break;
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <GPIO_setupPortDirection+0x68>
		case PORTC_ID:
			DDRC = direction;
     5b2:	84 e3       	ldi	r24, 0x34	; 52
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	2a 81       	ldd	r18, Y+2	; 0x02
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
			break;
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <GPIO_setupPortDirection+0x68>
		case PORTD_ID:
			DDRD = direction;
     5be:	81 e3       	ldi	r24, 0x31	; 49
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	2a 81       	ldd	r18, Y+2	; 0x02
     5c4:	fc 01       	movw	r30, r24
     5c6:	20 83       	st	Z, r18
			break;
     5c8:	00 00       	nop
		}
	}
}
     5ca:	00 00       	nop
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	00 d0       	rcall	.+0      	; 0x5dc <GPIO_writePort+0x6>
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	84 30       	cpi	r24, 0x04	; 4
     5e8:	50 f5       	brcc	.+84     	; 0x63e <GPIO_writePort+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	88 2f       	mov	r24, r24
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	91 05       	cpc	r25, r1
     5f4:	91 f0       	breq	.+36     	; 0x61a <GPIO_writePort+0x44>
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	91 05       	cpc	r25, r1
     5fa:	1c f4       	brge	.+6      	; 0x602 <GPIO_writePort+0x2c>
     5fc:	89 2b       	or	r24, r25
     5fe:	39 f0       	breq	.+14     	; 0x60e <GPIO_writePort+0x38>
			PORTD = value;
			break;
		}
	}

}
     600:	1e c0       	rjmp	.+60     	; 0x63e <GPIO_writePort+0x68>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     602:	82 30       	cpi	r24, 0x02	; 2
     604:	91 05       	cpc	r25, r1
     606:	79 f0       	breq	.+30     	; 0x626 <GPIO_writePort+0x50>
     608:	03 97       	sbiw	r24, 0x03	; 3
     60a:	99 f0       	breq	.+38     	; 0x632 <GPIO_writePort+0x5c>
			PORTD = value;
			break;
		}
	}

}
     60c:	18 c0       	rjmp	.+48     	; 0x63e <GPIO_writePort+0x68>
	{
		/* Setup the port direction as required */
		switch(port_num)
		{
		case PORTA_ID:
			PORTA = value;
     60e:	8b e3       	ldi	r24, 0x3B	; 59
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2a 81       	ldd	r18, Y+2	; 0x02
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
			break;
     618:	12 c0       	rjmp	.+36     	; 0x63e <GPIO_writePort+0x68>
		case PORTB_ID:
			PORTB = value;
     61a:	88 e3       	ldi	r24, 0x38	; 56
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	2a 81       	ldd	r18, Y+2	; 0x02
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
			break;
     624:	0c c0       	rjmp	.+24     	; 0x63e <GPIO_writePort+0x68>
		case PORTC_ID:
			PORTC = value;
     626:	85 e3       	ldi	r24, 0x35	; 53
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	2a 81       	ldd	r18, Y+2	; 0x02
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
			break;
     630:	06 c0       	rjmp	.+12     	; 0x63e <GPIO_writePort+0x68>
		case PORTD_ID:
			PORTD = value;
     632:	82 e3       	ldi	r24, 0x32	; 50
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	2a 81       	ldd	r18, Y+2	; 0x02
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
			break;
     63c:	00 00       	nop
		}
	}

}
     63e:	00 00       	nop
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <GPIO_readPort+0x6>
     650:	1f 92       	push	r1
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	8b 83       	std	Y+3, r24	; 0x03
	int var_Port =0;
     658:	1a 82       	std	Y+2, r1	; 0x02
     65a:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	84 30       	cpi	r24, 0x04	; 4
     660:	18 f0       	brcs	.+6      	; 0x668 <GPIO_readPort+0x1e>
	{
		var_Port =0;
     662:	1a 82       	std	Y+2, r1	; 0x02
     664:	19 82       	std	Y+1, r1	; 0x01
     666:	36 c0       	rjmp	.+108    	; 0x6d4 <GPIO_readPort+0x8a>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	91 05       	cpc	r25, r1
     672:	a9 f0       	breq	.+42     	; 0x69e <GPIO_readPort+0x54>
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	91 05       	cpc	r25, r1
     678:	1c f4       	brge	.+6      	; 0x680 <GPIO_readPort+0x36>
     67a:	89 2b       	or	r24, r25
     67c:	39 f0       	breq	.+14     	; 0x68c <GPIO_readPort+0x42>
     67e:	2a c0       	rjmp	.+84     	; 0x6d4 <GPIO_readPort+0x8a>
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	91 05       	cpc	r25, r1
     684:	a9 f0       	breq	.+42     	; 0x6b0 <GPIO_readPort+0x66>
     686:	03 97       	sbiw	r24, 0x03	; 3
     688:	e1 f0       	breq	.+56     	; 0x6c2 <GPIO_readPort+0x78>
     68a:	24 c0       	rjmp	.+72     	; 0x6d4 <GPIO_readPort+0x8a>
		{
		case PORTA_ID:
			var_Port = PINA;
     68c:	89 e3       	ldi	r24, 0x39	; 57
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	fc 01       	movw	r30, r24
     692:	80 81       	ld	r24, Z
     694:	88 2f       	mov	r24, r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
			break;
     69c:	1b c0       	rjmp	.+54     	; 0x6d4 <GPIO_readPort+0x8a>
		case PORTB_ID:
			var_Port = PINB;
     69e:	86 e3       	ldi	r24, 0x36	; 54
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
			break;
     6ae:	12 c0       	rjmp	.+36     	; 0x6d4 <GPIO_readPort+0x8a>
		case PORTC_ID:
			var_Port = PINC;
     6b0:	83 e3       	ldi	r24, 0x33	; 51
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	fc 01       	movw	r30, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	9a 83       	std	Y+2, r25	; 0x02
     6be:	89 83       	std	Y+1, r24	; 0x01
			break;
     6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <GPIO_readPort+0x8a>
		case PORTD_ID:
			var_Port =PIND;
     6c2:	80 e3       	ldi	r24, 0x30	; 48
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	80 81       	ld	r24, Z
     6ca:	88 2f       	mov	r24, r24
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9a 83       	std	Y+2, r25	; 0x02
     6d0:	89 83       	std	Y+1, r24	; 0x01
			break;
     6d2:	00 00       	nop
		}
	}
	return var_Port;
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <delay>:
 *      Author: Mahmoud Qotp
*/
#include "hc05.h"

void delay(uint8 seconds)
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	63 97       	sbiw	r28, 0x13	; 19
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 i = 0;
     6f8:	1a 82       	std	Y+2, r1	; 0x02
     6fa:	19 82       	std	Y+1, r1	; 0x01
	uint16 quarterSeconds = seconds*4;
     6fc:	8b 89       	ldd	r24, Y+19	; 0x13
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	9c 83       	std	Y+4, r25	; 0x04
     70c:	8b 83       	std	Y+3, r24	; 0x03
	while(i < quarterSeconds)
     70e:	77 c0       	rjmp	.+238    	; 0x7fe <delay+0x11c>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	aa e7       	ldi	r26, 0x7A	; 122
     716:	b3 e4       	ldi	r27, 0x43	; 67
     718:	8d 83       	std	Y+5, r24	; 0x05
     71a:	9e 83       	std	Y+6, r25	; 0x06
     71c:	af 83       	std	Y+7, r26	; 0x07
     71e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	4a e7       	ldi	r20, 0x7A	; 122
     726:	55 e4       	ldi	r21, 0x45	; 69
     728:	6d 81       	ldd	r22, Y+5	; 0x05
     72a:	7e 81       	ldd	r23, Y+6	; 0x06
     72c:	8f 81       	ldd	r24, Y+7	; 0x07
     72e:	98 85       	ldd	r25, Y+8	; 0x08
     730:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	89 87       	std	Y+9, r24	; 0x09
     73a:	9a 87       	std	Y+10, r25	; 0x0a
     73c:	ab 87       	std	Y+11, r26	; 0x0b
     73e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	69 85       	ldd	r22, Y+9	; 0x09
     74a:	7a 85       	ldd	r23, Y+10	; 0x0a
     74c:	8b 85       	ldd	r24, Y+11	; 0x0b
     74e:	9c 85       	ldd	r25, Y+12	; 0x0c
     750:	0e 94 14 0a 	call	0x1428	; 0x1428 <__cmpsf2>
     754:	88 23       	and	r24, r24
     756:	2c f4       	brge	.+10     	; 0x762 <delay+0x80>
		__ticks = 1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9e 87       	std	Y+14, r25	; 0x0e
     75e:	8d 87       	std	Y+13, r24	; 0x0d
     760:	3f c0       	rjmp	.+126    	; 0x7e0 <delay+0xfe>
	else if (__tmp > 65535)
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	3f ef       	ldi	r19, 0xFF	; 255
     766:	4f e7       	ldi	r20, 0x7F	; 127
     768:	57 e4       	ldi	r21, 0x47	; 71
     76a:	69 85       	ldd	r22, Y+9	; 0x09
     76c:	7a 85       	ldd	r23, Y+10	; 0x0a
     76e:	8b 85       	ldd	r24, Y+11	; 0x0b
     770:	9c 85       	ldd	r25, Y+12	; 0x0c
     772:	0e 94 95 0a 	call	0x152a	; 0x152a <__gesf2>
     776:	18 16       	cp	r1, r24
     778:	4c f5       	brge	.+82     	; 0x7cc <delay+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e2       	ldi	r20, 0x20	; 32
     780:	51 e4       	ldi	r21, 0x41	; 65
     782:	6d 81       	ldd	r22, Y+5	; 0x05
     784:	7e 81       	ldd	r23, Y+6	; 0x06
     786:	8f 81       	ldd	r24, Y+7	; 0x07
     788:	98 85       	ldd	r25, Y+8	; 0x08
     78a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     78e:	dc 01       	movw	r26, r24
     790:	cb 01       	movw	r24, r22
     792:	bc 01       	movw	r22, r24
     794:	cd 01       	movw	r24, r26
     796:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     79a:	dc 01       	movw	r26, r24
     79c:	cb 01       	movw	r24, r22
     79e:	9e 87       	std	Y+14, r25	; 0x0e
     7a0:	8d 87       	std	Y+13, r24	; 0x0d
     7a2:	0f c0       	rjmp	.+30     	; 0x7c2 <delay+0xe0>
     7a4:	80 e9       	ldi	r24, 0x90	; 144
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	98 8b       	std	Y+16, r25	; 0x10
     7aa:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ae:	98 89       	ldd	r25, Y+16	; 0x10
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <delay+0xce>
     7b4:	98 8b       	std	Y+16, r25	; 0x10
     7b6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	9e 87       	std	Y+14, r25	; 0x0e
     7c0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7c6:	89 2b       	or	r24, r25
     7c8:	69 f7       	brne	.-38     	; 0x7a4 <delay+0xc2>
     7ca:	14 c0       	rjmp	.+40     	; 0x7f4 <delay+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7cc:	69 85       	ldd	r22, Y+9	; 0x09
     7ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7d4:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	9e 87       	std	Y+14, r25	; 0x0e
     7de:	8d 87       	std	Y+13, r24	; 0x0d
     7e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     7e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7e4:	9a 8b       	std	Y+18, r25	; 0x12
     7e6:	89 8b       	std	Y+17, r24	; 0x11
     7e8:	89 89       	ldd	r24, Y+17	; 0x11
     7ea:	9a 89       	ldd	r25, Y+18	; 0x12
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <delay+0x10a>
     7f0:	9a 8b       	std	Y+18, r25	; 0x12
     7f2:	89 8b       	std	Y+17, r24	; 0x11
	{
		_delay_ms(250);
		i++;
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	9a 83       	std	Y+2, r25	; 0x02
     7fc:	89 83       	std	Y+1, r24	; 0x01

void delay(uint8 seconds)
{
	uint16 i = 0;
	uint16 quarterSeconds = seconds*4;
	while(i < quarterSeconds)
     7fe:	29 81       	ldd	r18, Y+1	; 0x01
     800:	3a 81       	ldd	r19, Y+2	; 0x02
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	28 17       	cp	r18, r24
     808:	39 07       	cpc	r19, r25
     80a:	08 f4       	brcc	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	81 cf       	rjmp	.-254    	; 0x710 <delay+0x2e>
	{
		_delay_ms(250);
		i++;
	}
}
     80e:	00 00       	nop
     810:	63 96       	adiw	r28, 0x13	; 19
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <HC05_init>:

/*Operating UART: 115200*/
void HC05_init(role Role)
{
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	6d 97       	sbiw	r28, 0x1d	; 29
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	8d 8f       	std	Y+29, r24	; 0x1d
	UART_init(HC05_COMMANDS_BAUD_RATE);
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	76 e9       	ldi	r23, 0x96	; 150
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 ff 08 	call	0x11fe	; 0x11fe <UART_init>
	GPIO_setupPinDirection(EN_PORT,EN_PIN,PIN_OUTPUT);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	62 e0       	ldi	r22, 0x02	; 2
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(VCC_PORT,VCC_PIN,PIN_OUTPUT);
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	67 e0       	ldi	r22, 0x07	; 7
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_writePin(EN_PORT,EN_PIN,LOGIC_LOW);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	62 e0       	ldi	r22, 0x02	; 2
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	0e 94 2e 01 	call	0x25c	; 0x25c <GPIO_writePin>
	GPIO_writePin(VCC_PORT,VCC_PIN,LOGIC_LOW);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	67 e0       	ldi	r22, 0x07	; 7
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	0e 94 2e 01 	call	0x25c	; 0x25c <GPIO_writePin>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a0 e4       	ldi	r26, 0x40	; 64
     872:	b0 e4       	ldi	r27, 0x40	; 64
     874:	8f 87       	std	Y+15, r24	; 0x0f
     876:	98 8b       	std	Y+16, r25	; 0x10
     878:	a9 8b       	std	Y+17, r26	; 0x11
     87a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	4a e7       	ldi	r20, 0x7A	; 122
     882:	55 e4       	ldi	r21, 0x45	; 69
     884:	6f 85       	ldd	r22, Y+15	; 0x0f
     886:	78 89       	ldd	r23, Y+16	; 0x10
     888:	89 89       	ldd	r24, Y+17	; 0x11
     88a:	9a 89       	ldd	r25, Y+18	; 0x12
     88c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	8b 8b       	std	Y+19, r24	; 0x13
     896:	9c 8b       	std	Y+20, r25	; 0x14
     898:	ad 8b       	std	Y+21, r26	; 0x15
     89a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	5f e3       	ldi	r21, 0x3F	; 63
     8a4:	6b 89       	ldd	r22, Y+19	; 0x13
     8a6:	7c 89       	ldd	r23, Y+20	; 0x14
     8a8:	8d 89       	ldd	r24, Y+21	; 0x15
     8aa:	9e 89       	ldd	r25, Y+22	; 0x16
     8ac:	0e 94 14 0a 	call	0x1428	; 0x1428 <__cmpsf2>
     8b0:	88 23       	and	r24, r24
     8b2:	2c f4       	brge	.+10     	; 0x8be <__stack+0x5f>
		__ticks = 1;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	98 8f       	std	Y+24, r25	; 0x18
     8ba:	8f 8b       	std	Y+23, r24	; 0x17
     8bc:	3f c0       	rjmp	.+126    	; 0x93c <__stack+0xdd>
	else if (__tmp > 65535)
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	3f ef       	ldi	r19, 0xFF	; 255
     8c2:	4f e7       	ldi	r20, 0x7F	; 127
     8c4:	57 e4       	ldi	r21, 0x47	; 71
     8c6:	6b 89       	ldd	r22, Y+19	; 0x13
     8c8:	7c 89       	ldd	r23, Y+20	; 0x14
     8ca:	8d 89       	ldd	r24, Y+21	; 0x15
     8cc:	9e 89       	ldd	r25, Y+22	; 0x16
     8ce:	0e 94 95 0a 	call	0x152a	; 0x152a <__gesf2>
     8d2:	18 16       	cp	r1, r24
     8d4:	4c f5       	brge	.+82     	; 0x928 <__stack+0xc9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e2       	ldi	r20, 0x20	; 32
     8dc:	51 e4       	ldi	r21, 0x41	; 65
     8de:	6f 85       	ldd	r22, Y+15	; 0x0f
     8e0:	78 89       	ldd	r23, Y+16	; 0x10
     8e2:	89 89       	ldd	r24, Y+17	; 0x11
     8e4:	9a 89       	ldd	r25, Y+18	; 0x12
     8e6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	bc 01       	movw	r22, r24
     8f0:	cd 01       	movw	r24, r26
     8f2:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	98 8f       	std	Y+24, r25	; 0x18
     8fc:	8f 8b       	std	Y+23, r24	; 0x17
     8fe:	0f c0       	rjmp	.+30     	; 0x91e <__stack+0xbf>
     900:	80 e9       	ldi	r24, 0x90	; 144
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9a 8f       	std	Y+26, r25	; 0x1a
     906:	89 8f       	std	Y+25, r24	; 0x19
     908:	89 8d       	ldd	r24, Y+25	; 0x19
     90a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <__stack+0xad>
     910:	9a 8f       	std	Y+26, r25	; 0x1a
     912:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     914:	8f 89       	ldd	r24, Y+23	; 0x17
     916:	98 8d       	ldd	r25, Y+24	; 0x18
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	98 8f       	std	Y+24, r25	; 0x18
     91c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91e:	8f 89       	ldd	r24, Y+23	; 0x17
     920:	98 8d       	ldd	r25, Y+24	; 0x18
     922:	89 2b       	or	r24, r25
     924:	69 f7       	brne	.-38     	; 0x900 <__stack+0xa1>
     926:	14 c0       	rjmp	.+40     	; 0x950 <__stack+0xf1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     928:	6b 89       	ldd	r22, Y+19	; 0x13
     92a:	7c 89       	ldd	r23, Y+20	; 0x14
     92c:	8d 89       	ldd	r24, Y+21	; 0x15
     92e:	9e 89       	ldd	r25, Y+22	; 0x16
     930:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     934:	dc 01       	movw	r26, r24
     936:	cb 01       	movw	r24, r22
     938:	98 8f       	std	Y+24, r25	; 0x18
     93a:	8f 8b       	std	Y+23, r24	; 0x17
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	9c 8f       	std	Y+28, r25	; 0x1c
     942:	8b 8f       	std	Y+27, r24	; 0x1b
     944:	8b 8d       	ldd	r24, Y+27	; 0x1b
     946:	9c 8d       	ldd	r25, Y+28	; 0x1c
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	f1 f7       	brne	.-4      	; 0x948 <__stack+0xe9>
     94c:	9c 8f       	std	Y+28, r25	; 0x1c
     94e:	8b 8f       	std	Y+27, r24	; 0x1b
	 * OR 5,6,7- RESET MODULE
	 * */

	/*OPEN COMMAND MODE*/
	_delay_ms(3);
	GPIO_writePin(EN_PORT,EN_PIN,LOGIC_HIGH);
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	62 e0       	ldi	r22, 0x02	; 2
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	0e 94 2e 01 	call	0x25c	; 0x25c <GPIO_writePin>
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	a0 ea       	ldi	r26, 0xA0	; 160
     960:	b0 e4       	ldi	r27, 0x40	; 64
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	9a 83       	std	Y+2, r25	; 0x02
     966:	ab 83       	std	Y+3, r26	; 0x03
     968:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	4a e7       	ldi	r20, 0x7A	; 122
     970:	55 e4       	ldi	r21, 0x45	; 69
     972:	69 81       	ldd	r22, Y+1	; 0x01
     974:	7a 81       	ldd	r23, Y+2	; 0x02
     976:	8b 81       	ldd	r24, Y+3	; 0x03
     978:	9c 81       	ldd	r25, Y+4	; 0x04
     97a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	8d 83       	std	Y+5, r24	; 0x05
     984:	9e 83       	std	Y+6, r25	; 0x06
     986:	af 83       	std	Y+7, r26	; 0x07
     988:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e8       	ldi	r20, 0x80	; 128
     990:	5f e3       	ldi	r21, 0x3F	; 63
     992:	6d 81       	ldd	r22, Y+5	; 0x05
     994:	7e 81       	ldd	r23, Y+6	; 0x06
     996:	8f 81       	ldd	r24, Y+7	; 0x07
     998:	98 85       	ldd	r25, Y+8	; 0x08
     99a:	0e 94 14 0a 	call	0x1428	; 0x1428 <__cmpsf2>
     99e:	88 23       	and	r24, r24
     9a0:	2c f4       	brge	.+10     	; 0x9ac <__stack+0x14d>
		__ticks = 1;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	9a 87       	std	Y+10, r25	; 0x0a
     9a8:	89 87       	std	Y+9, r24	; 0x09
     9aa:	3f c0       	rjmp	.+126    	; 0xa2a <__stack+0x1cb>
	else if (__tmp > 65535)
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	3f ef       	ldi	r19, 0xFF	; 255
     9b0:	4f e7       	ldi	r20, 0x7F	; 127
     9b2:	57 e4       	ldi	r21, 0x47	; 71
     9b4:	6d 81       	ldd	r22, Y+5	; 0x05
     9b6:	7e 81       	ldd	r23, Y+6	; 0x06
     9b8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ba:	98 85       	ldd	r25, Y+8	; 0x08
     9bc:	0e 94 95 0a 	call	0x152a	; 0x152a <__gesf2>
     9c0:	18 16       	cp	r1, r24
     9c2:	4c f5       	brge	.+82     	; 0xa16 <__stack+0x1b7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	40 e2       	ldi	r20, 0x20	; 32
     9ca:	51 e4       	ldi	r21, 0x41	; 65
     9cc:	69 81       	ldd	r22, Y+1	; 0x01
     9ce:	7a 81       	ldd	r23, Y+2	; 0x02
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	bc 01       	movw	r22, r24
     9de:	cd 01       	movw	r24, r26
     9e0:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	9a 87       	std	Y+10, r25	; 0x0a
     9ea:	89 87       	std	Y+9, r24	; 0x09
     9ec:	0f c0       	rjmp	.+30     	; 0xa0c <__stack+0x1ad>
     9ee:	80 e9       	ldi	r24, 0x90	; 144
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	9c 87       	std	Y+12, r25	; 0x0c
     9f4:	8b 87       	std	Y+11, r24	; 0x0b
     9f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	f1 f7       	brne	.-4      	; 0x9fa <__stack+0x19b>
     9fe:	9c 87       	std	Y+12, r25	; 0x0c
     a00:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	9a 85       	ldd	r25, Y+10	; 0x0a
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	9a 87       	std	Y+10, r25	; 0x0a
     a0a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a0c:	89 85       	ldd	r24, Y+9	; 0x09
     a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a10:	89 2b       	or	r24, r25
     a12:	69 f7       	brne	.-38     	; 0x9ee <__stack+0x18f>
     a14:	14 c0       	rjmp	.+40     	; 0xa3e <__stack+0x1df>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a16:	6d 81       	ldd	r22, Y+5	; 0x05
     a18:	7e 81       	ldd	r23, Y+6	; 0x06
     a1a:	8f 81       	ldd	r24, Y+7	; 0x07
     a1c:	98 85       	ldd	r25, Y+8	; 0x08
     a1e:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	9a 87       	std	Y+10, r25	; 0x0a
     a28:	89 87       	std	Y+9, r24	; 0x09
     a2a:	89 85       	ldd	r24, Y+9	; 0x09
     a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2e:	9e 87       	std	Y+14, r25	; 0x0e
     a30:	8d 87       	std	Y+13, r24	; 0x0d
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	f1 f7       	brne	.-4      	; 0xa36 <__stack+0x1d7>
     a3a:	9e 87       	std	Y+14, r25	; 0x0e
     a3c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(5);
	GPIO_writePin(VCC_PORT,VCC_PIN,LOGIC_HIGH);
     a3e:	41 e0       	ldi	r20, 0x01	; 1
     a40:	67 e0       	ldi	r22, 0x07	; 7
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	0e 94 2e 01 	call	0x25c	; 0x25c <GPIO_writePin>
	delay(1); /*Optimized.*/
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <delay>
	GPIO_writePin(EN_PORT,EN_PIN,LOGIC_LOW);
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	0e 94 2e 01 	call	0x25c	; 0x25c <GPIO_writePin>
	delay(2); /*Optimized.*/
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <delay>

	/*"AT+UART=115200,1,0\r\n"*/
	UART_sendString(AT_COMMAND_SET_BAUD_RATE);
     a5e:	80 e6       	ldi	r24, 0x60	; 96
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>

	/*AT+PSWD=9999\r\n*/
	UART_sendString("AT+PSWD=1234\r\n");
     a66:	85 e7       	ldi	r24, 0x75	; 117
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>

	/*AT+CMODE=0*/
	UART_sendString(AT_COMMAND_CONNECT_FIXED_ADDRESS);
     a6e:	84 e8       	ldi	r24, 0x84	; 132
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>

	/*AT+ROLE=Role\r\n*/
	switch(Role)
     a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a78:	88 2f       	mov	r24, r24
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	19 f0       	breq	.+6      	; 0xa86 <__stack+0x227>
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	31 f0       	breq	.+12     	; 0xa90 <__stack+0x231>
     a84:	12 c0       	rjmp	.+36     	; 0xaaa <__stack+0x24b>
	{
	case SLAVE:
		UART_sendString(AT_COMMAND_TO_SET_ROLE_AS_SLAVE);
     a86:	81 e9       	ldi	r24, 0x91	; 145
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>
		break;
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <__stack+0x255>
	case MASTER:
		UART_sendString(AT_COMMAND_TO_SET_ROLE_AS_MASTER);
     a90:	8d e9       	ldi	r24, 0x9D	; 157
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>
		UART_sendString(AT_COMMAND_BIND_TO_SLAVE_2);
     a98:	89 ea       	ldi	r24, 0xA9	; 169
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>
		UART_sendString(AT_COMMAND_LINK_TO_SLAVE_2);
     aa0:	82 ec       	ldi	r24, 0xC2	; 194
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>
		break;
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__stack+0x255>
	default:
		/*Default is Slave*/
		UART_sendString(AT_COMMAND_TO_SET_ROLE_AS_SLAVE);
     aaa:	81 e9       	ldi	r24, 0x91	; 145
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>
		break;
     ab2:	00 00       	nop
	/*AT+BIND? -> returns IP that you are connected to*/


	/*CLOSE COMMAND MODE*/

	UART_sendString(AT_COMMAND_RESET_MODULE);
     ab4:	8b ed       	ldi	r24, 0xDB	; 219
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <UART_sendString>
	while(1)
	{
		if(UART_receiveByte() == 'O')
     abc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <UART_receiveByte>
     ac0:	8f 34       	cpi	r24, 0x4F	; 79
     ac2:	e1 f7       	brne	.-8      	; 0xabc <__stack+0x25d>
		{
			if(UART_receiveByte() == 'K')
     ac4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <UART_receiveByte>
     ac8:	8b 34       	cpi	r24, 0x4B	; 75
     aca:	09 f0       	breq	.+2      	; 0xace <__stack+0x26f>
	/*CLOSE COMMAND MODE*/

	UART_sendString(AT_COMMAND_RESET_MODULE);
	while(1)
	{
		if(UART_receiveByte() == 'O')
     acc:	f7 cf       	rjmp	.-18     	; 0xabc <__stack+0x25d>
		{
			if(UART_receiveByte() == 'K')
			{
				break;
     ace:	00 00       	nop
			}
		}
	}
	UART_init(DEFAULT_BAUD_RATE);
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	72 ec       	ldi	r23, 0xC2	; 194
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <UART_init>
}
     adc:	00 00       	nop
     ade:	6d 96       	adiw	r28, 0x1d	; 29
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <HC05_sendByte>:

/*Master Function to send data*/
void HC05_sendByte(uint8 byteToSend)
{
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(byteToSend);
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	0e 94 51 09 	call	0x12a2	; 0x12a2 <UART_sendByte>
}
     b02:	00 00       	nop
     b04:	0f 90       	pop	r0
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <HC05_receiveByte>:

/*Slave Function to receive data*/
uint8 HC05_receiveByte(void)
{
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	1f 92       	push	r1
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
	uint8 receivedChar = UART_receiveByte();
     b16:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <UART_receiveByte>
     b1a:	89 83       	std	Y+1, r24	; 0x01
	return receivedChar;
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <main>:
#include "hc05.h"




int main(void) {
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	2e 97       	sbiw	r28, 0x0e	; 14
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
	delay(1);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <delay>
	HC05_init(SLAVE);
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 11 04 	call	0x822	; 0x822 <HC05_init>
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	a6 e9       	ldi	r26, 0x96	; 150
     b4c:	b3 e4       	ldi	r27, 0x43	; 67
     b4e:	89 83       	std	Y+1, r24	; 0x01
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	ab 83       	std	Y+3, r26	; 0x03
     b54:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	4a e7       	ldi	r20, 0x7A	; 122
     b5c:	55 e4       	ldi	r21, 0x45	; 69
     b5e:	69 81       	ldd	r22, Y+1	; 0x01
     b60:	7a 81       	ldd	r23, Y+2	; 0x02
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	9e 83       	std	Y+6, r25	; 0x06
     b72:	af 83       	std	Y+7, r26	; 0x07
     b74:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e8       	ldi	r20, 0x80	; 128
     b7c:	5f e3       	ldi	r21, 0x3F	; 63
     b7e:	6d 81       	ldd	r22, Y+5	; 0x05
     b80:	7e 81       	ldd	r23, Y+6	; 0x06
     b82:	8f 81       	ldd	r24, Y+7	; 0x07
     b84:	98 85       	ldd	r25, Y+8	; 0x08
     b86:	0e 94 14 0a 	call	0x1428	; 0x1428 <__cmpsf2>
     b8a:	88 23       	and	r24, r24
     b8c:	2c f4       	brge	.+10     	; 0xb98 <main+0x72>
		__ticks = 1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9a 87       	std	Y+10, r25	; 0x0a
     b94:	89 87       	std	Y+9, r24	; 0x09
     b96:	3f c0       	rjmp	.+126    	; 0xc16 <main+0xf0>
	else if (__tmp > 65535)
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	4f e7       	ldi	r20, 0x7F	; 127
     b9e:	57 e4       	ldi	r21, 0x47	; 71
     ba0:	6d 81       	ldd	r22, Y+5	; 0x05
     ba2:	7e 81       	ldd	r23, Y+6	; 0x06
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	0e 94 95 0a 	call	0x152a	; 0x152a <__gesf2>
     bac:	18 16       	cp	r1, r24
     bae:	4c f5       	brge	.+82     	; 0xc02 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e2       	ldi	r20, 0x20	; 32
     bb6:	51 e4       	ldi	r21, 0x41	; 65
     bb8:	69 81       	ldd	r22, Y+1	; 0x01
     bba:	7a 81       	ldd	r23, Y+2	; 0x02
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	9c 81       	ldd	r25, Y+4	; 0x04
     bc0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	bc 01       	movw	r22, r24
     bca:	cd 01       	movw	r24, r26
     bcc:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	9a 87       	std	Y+10, r25	; 0x0a
     bd6:	89 87       	std	Y+9, r24	; 0x09
     bd8:	0f c0       	rjmp	.+30     	; 0xbf8 <main+0xd2>
     bda:	80 e9       	ldi	r24, 0x90	; 144
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	8b 87       	std	Y+11, r24	; 0x0b
     be2:	8b 85       	ldd	r24, Y+11	; 0x0b
     be4:	9c 85       	ldd	r25, Y+12	; 0x0c
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <main+0xc0>
     bea:	9c 87       	std	Y+12, r25	; 0x0c
     bec:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bee:	89 85       	ldd	r24, Y+9	; 0x09
     bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	9a 87       	std	Y+10, r25	; 0x0a
     bf6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
     bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfc:	89 2b       	or	r24, r25
     bfe:	69 f7       	brne	.-38     	; 0xbda <main+0xb4>
     c00:	14 c0       	rjmp	.+40     	; 0xc2a <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c02:	6d 81       	ldd	r22, Y+5	; 0x05
     c04:	7e 81       	ldd	r23, Y+6	; 0x06
     c06:	8f 81       	ldd	r24, Y+7	; 0x07
     c08:	98 85       	ldd	r25, Y+8	; 0x08
     c0a:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fixunssfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	9a 87       	std	Y+10, r25	; 0x0a
     c14:	89 87       	std	Y+9, r24	; 0x09
     c16:	89 85       	ldd	r24, Y+9	; 0x09
     c18:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1a:	9e 87       	std	Y+14, r25	; 0x0e
     c1c:	8d 87       	std	Y+13, r24	; 0x0d
     c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c20:	9e 85       	ldd	r25, Y+14	; 0x0e
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <main+0xfc>
     c26:	9e 87       	std	Y+14, r25	; 0x0e
     c28:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(300);

	DC_Motor_Init();
     c2a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <DC_Motor_Init>
	PWM_Timer0_Init(speed_50);
     c2e:	80 e8       	ldi	r24, 0x80	; 128
     c30:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	while (1) {
		move_car();
     c34:	0e 94 53 08 	call	0x10a6	; 0x10a6 <move_car>
     c38:	fd cf       	rjmp	.-6      	; 0xc34 <main+0x10e>

00000c3a <PWM_Timer0_Init>:
#include "motor_rc.h"
//static uint8 g_direction_current_state = "S" ;
//static uint8 g_direction_previous_state = "S" ;

void PWM_Timer0_Init(unsigned char set_duty_cycle) {
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	1f 92       	push	r1
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial v	alue
     c46:	82 e5       	ldi	r24, 0x52	; 82
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	fc 01       	movw	r30, r24
     c4c:	10 82       	st	Z, r1

	OCR0 = set_duty_cycle; // Set Compare Value
     c4e:	8c e5       	ldi	r24, 0x5C	; 92
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	29 81       	ldd	r18, Y+1	; 0x01
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18

	DDRB = DDRB | (1 << PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
     c58:	87 e3       	ldi	r24, 0x37	; 55
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 81       	ld	r18, Z
     c60:	87 e3       	ldi	r24, 0x37	; 55
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	28 60       	ori	r18, 0x08	; 8
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
     c6a:	83 e5       	ldi	r24, 0x53	; 83
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	2a e6       	ldi	r18, 0x6A	; 106
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18
}
     c74:	00 00       	nop
     c76:	0f 90       	pop	r0
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <DC_Motor_Init>:

void DC_Motor_Init(void) {
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	/*setup the direction for motor1 pins through the GPIO driver.*/
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR1_PIN1, PIN_OUTPUT);
     c86:	8b e3       	ldi	r24, 0x3B	; 59
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR1_PIN2, PIN_OUTPUT);
     c96:	8b e3       	ldi	r24, 0x3B	; 59
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	fc 01       	movw	r30, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	/*setup the direction for motor2 pins through the GPIO driver.*/
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR2_PIN1, PIN_OUTPUT);
     ca6:	8b e3       	ldi	r24, 0x3B	; 59
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	fc 01       	movw	r30, r24
     cac:	80 81       	ld	r24, Z
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR2_PIN2, PIN_OUTPUT);
     cb6:	8b e3       	ldi	r24, 0x3B	; 59
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	/*setup the direction for motor3 pins through the GPIO driver.*/
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR3_PIN1, PIN_OUTPUT);
     cc6:	8b e3       	ldi	r24, 0x3B	; 59
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	64 e0       	ldi	r22, 0x04	; 4
     cd2:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR3_PIN2, PIN_OUTPUT);
     cd6:	8b e3       	ldi	r24, 0x3B	; 59
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	fc 01       	movw	r30, r24
     cdc:	80 81       	ld	r24, Z
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	/*setup the direction for motor4 pins through the GPIO driver.*/
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR4_PIN1, PIN_OUTPUT);
     ce6:	8b e3       	ldi	r24, 0x3B	; 59
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	66 e0       	ldi	r22, 0x06	; 6
     cf2:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, MOTOR4_PIN2, PIN_OUTPUT);
     cf6:	8b e3       	ldi	r24, 0x3B	; 59
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	67 e0       	ldi	r22, 0x07	; 7
     d02:	0e 94 41 00 	call	0x82	; 0x82 <GPIO_setupPinDirection>

	/*Stop at the DC-Motor at the beginning through the GPIO driver.*/
	set_car_direction(Brake);
     d06:	86 e0       	ldi	r24, 0x06	; 6
     d08:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
}
     d0c:	00 00       	nop
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <set_motor_direction>:
void set_motor_direction(Motor_ID motor, Wheel_directions direction) {
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	00 d0       	rcall	.+0      	; 0xd1a <set_motor_direction+0x6>
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	6a 83       	std	Y+2, r22	; 0x02
		switch (motor) {
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <set_motor_direction+0x1c>
     d2e:	51 c0       	rjmp	.+162    	; 0xdd2 <set_motor_direction+0xbe>
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	91 05       	cpc	r25, r1
     d34:	1c f4       	brge	.+6      	; 0xd3c <set_motor_direction+0x28>
     d36:	89 2b       	or	r24, r25
     d38:	49 f0       	breq	.+18     	; 0xd4c <set_motor_direction+0x38>
		}
		break;

	default:
		/* Do Nothing */
		break;
     d3a:	14 c1       	rjmp	.+552    	; 0xf64 <set_motor_direction+0x250>

	/*Stop at the DC-Motor at the beginning through the GPIO driver.*/
	set_car_direction(Brake);
}
void set_motor_direction(Motor_ID motor, Wheel_directions direction) {
		switch (motor) {
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <set_motor_direction+0x30>
     d42:	8a c0       	rjmp	.+276    	; 0xe58 <set_motor_direction+0x144>
     d44:	03 97       	sbiw	r24, 0x03	; 3
     d46:	09 f4       	brne	.+2      	; 0xd4a <set_motor_direction+0x36>
     d48:	ca c0       	rjmp	.+404    	; 0xede <set_motor_direction+0x1ca>
		}
		break;

	default:
		/* Do Nothing */
		break;
     d4a:	0c c1       	rjmp	.+536    	; 0xf64 <set_motor_direction+0x250>
	set_car_direction(Brake);
}
void set_motor_direction(Motor_ID motor, Wheel_directions direction) {
		switch (motor) {
	case MOTOR1:
		switch (direction) {
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	91 05       	cpc	r25, r1
     d56:	19 f0       	breq	.+6      	; 0xd5e <set_motor_direction+0x4a>
     d58:	02 97       	sbiw	r24, 0x02	; 2
     d5a:	a1 f0       	breq	.+40     	; 0xd84 <set_motor_direction+0x70>
     d5c:	26 c0       	rjmp	.+76     	; 0xdaa <set_motor_direction+0x96>
		case CLOCKWISE:
			DC_MOTOR_PORT |= (1 << MOTOR1_PIN1);
     d5e:	8b e3       	ldi	r24, 0x3B	; 59
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	fc 01       	movw	r30, r24
     d64:	20 81       	ld	r18, Z
     d66:	8b e3       	ldi	r24, 0x3B	; 59
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	21 60       	ori	r18, 0x01	; 1
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR1_PIN2);
     d70:	8b e3       	ldi	r24, 0x3B	; 59
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	fc 01       	movw	r30, r24
     d76:	20 81       	ld	r18, Z
     d78:	8b e3       	ldi	r24, 0x3B	; 59
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	2d 7f       	andi	r18, 0xFD	; 253
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
			break;
     d82:	26 c0       	rjmp	.+76     	; 0xdd0 <set_motor_direction+0xbc>
		case ANTI_CLOCKWISE:
			DC_MOTOR_PORT &= ~(1 << MOTOR1_PIN1);
     d84:	8b e3       	ldi	r24, 0x3B	; 59
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	fc 01       	movw	r30, r24
     d8a:	20 81       	ld	r18, Z
     d8c:	8b e3       	ldi	r24, 0x3B	; 59
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	2e 7f       	andi	r18, 0xFE	; 254
     d92:	fc 01       	movw	r30, r24
     d94:	20 83       	st	Z, r18
			DC_MOTOR_PORT |= (1 << MOTOR1_PIN2);
     d96:	8b e3       	ldi	r24, 0x3B	; 59
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	20 81       	ld	r18, Z
     d9e:	8b e3       	ldi	r24, 0x3B	; 59
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	22 60       	ori	r18, 0x02	; 2
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
			break;
     da8:	13 c0       	rjmp	.+38     	; 0xdd0 <set_motor_direction+0xbc>
		default:
			DC_MOTOR_PORT &= ~(1 << MOTOR1_PIN1);
     daa:	8b e3       	ldi	r24, 0x3B	; 59
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	fc 01       	movw	r30, r24
     db0:	20 81       	ld	r18, Z
     db2:	8b e3       	ldi	r24, 0x3B	; 59
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	2e 7f       	andi	r18, 0xFE	; 254
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR1_PIN2);
     dbc:	8b e3       	ldi	r24, 0x3B	; 59
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 81       	ld	r18, Z
     dc4:	8b e3       	ldi	r24, 0x3B	; 59
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	2d 7f       	andi	r18, 0xFD	; 253
     dca:	fc 01       	movw	r30, r24
     dcc:	20 83       	st	Z, r18
			break;
     dce:	00 00       	nop
		}
		break;
     dd0:	c9 c0       	rjmp	.+402    	; 0xf64 <set_motor_direction+0x250>

	case MOTOR2:
		switch (direction) {
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	19 f0       	breq	.+6      	; 0xde4 <set_motor_direction+0xd0>
     dde:	02 97       	sbiw	r24, 0x02	; 2
     de0:	a1 f0       	breq	.+40     	; 0xe0a <set_motor_direction+0xf6>
     de2:	26 c0       	rjmp	.+76     	; 0xe30 <set_motor_direction+0x11c>
		case CLOCKWISE:
			DC_MOTOR_PORT |= (1 << MOTOR2_PIN1);
     de4:	8b e3       	ldi	r24, 0x3B	; 59
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	fc 01       	movw	r30, r24
     dea:	20 81       	ld	r18, Z
     dec:	8b e3       	ldi	r24, 0x3B	; 59
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	21 60       	ori	r18, 0x01	; 1
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR2_PIN2);
     df6:	8b e3       	ldi	r24, 0x3B	; 59
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 81       	ld	r18, Z
     dfe:	8b e3       	ldi	r24, 0x3B	; 59
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	2d 7f       	andi	r18, 0xFD	; 253
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
			break;
     e08:	26 c0       	rjmp	.+76     	; 0xe56 <set_motor_direction+0x142>
		case ANTI_CLOCKWISE:
			DC_MOTOR_PORT &= ~(1 << MOTOR2_PIN1);
     e0a:	8b e3       	ldi	r24, 0x3B	; 59
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fc 01       	movw	r30, r24
     e10:	20 81       	ld	r18, Z
     e12:	8b e3       	ldi	r24, 0x3B	; 59
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	2e 7f       	andi	r18, 0xFE	; 254
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
			DC_MOTOR_PORT |= (1 << MOTOR2_PIN2);
     e1c:	8b e3       	ldi	r24, 0x3B	; 59
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	fc 01       	movw	r30, r24
     e22:	20 81       	ld	r18, Z
     e24:	8b e3       	ldi	r24, 0x3B	; 59
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	22 60       	ori	r18, 0x02	; 2
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18
			break;
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <set_motor_direction+0x142>
		default:
			DC_MOTOR_PORT &= ~(1 << MOTOR2_PIN1);
     e30:	8b e3       	ldi	r24, 0x3B	; 59
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	fc 01       	movw	r30, r24
     e36:	20 81       	ld	r18, Z
     e38:	8b e3       	ldi	r24, 0x3B	; 59
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	2e 7f       	andi	r18, 0xFE	; 254
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR2_PIN2);
     e42:	8b e3       	ldi	r24, 0x3B	; 59
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	20 81       	ld	r18, Z
     e4a:	8b e3       	ldi	r24, 0x3B	; 59
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	2d 7f       	andi	r18, 0xFD	; 253
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
			break;
     e54:	00 00       	nop
		}
		break;
     e56:	86 c0       	rjmp	.+268    	; 0xf64 <set_motor_direction+0x250>

	case MOTOR3:
		switch (direction) {
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	19 f0       	breq	.+6      	; 0xe6a <set_motor_direction+0x156>
     e64:	02 97       	sbiw	r24, 0x02	; 2
     e66:	a1 f0       	breq	.+40     	; 0xe90 <set_motor_direction+0x17c>
     e68:	26 c0       	rjmp	.+76     	; 0xeb6 <set_motor_direction+0x1a2>
		case CLOCKWISE:
			DC_MOTOR_PORT |= (1 << MOTOR3_PIN1);
     e6a:	8b e3       	ldi	r24, 0x3B	; 59
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	20 81       	ld	r18, Z
     e72:	8b e3       	ldi	r24, 0x3B	; 59
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	20 61       	ori	r18, 0x10	; 16
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR3_PIN2);
     e7c:	8b e3       	ldi	r24, 0x3B	; 59
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	fc 01       	movw	r30, r24
     e82:	20 81       	ld	r18, Z
     e84:	8b e3       	ldi	r24, 0x3B	; 59
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	2f 7d       	andi	r18, 0xDF	; 223
     e8a:	fc 01       	movw	r30, r24
     e8c:	20 83       	st	Z, r18
			break;
     e8e:	26 c0       	rjmp	.+76     	; 0xedc <set_motor_direction+0x1c8>
		case ANTI_CLOCKWISE:
			DC_MOTOR_PORT &= ~(1 << MOTOR3_PIN1);
     e90:	8b e3       	ldi	r24, 0x3B	; 59
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	fc 01       	movw	r30, r24
     e96:	20 81       	ld	r18, Z
     e98:	8b e3       	ldi	r24, 0x3B	; 59
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	2f 7e       	andi	r18, 0xEF	; 239
     e9e:	fc 01       	movw	r30, r24
     ea0:	20 83       	st	Z, r18
			DC_MOTOR_PORT |= (1 << MOTOR3_PIN2);
     ea2:	8b e3       	ldi	r24, 0x3B	; 59
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 81       	ld	r18, Z
     eaa:	8b e3       	ldi	r24, 0x3B	; 59
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	20 62       	ori	r18, 0x20	; 32
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
			break;
     eb4:	13 c0       	rjmp	.+38     	; 0xedc <set_motor_direction+0x1c8>
		default:
			DC_MOTOR_PORT &= ~(1 << MOTOR3_PIN1);
     eb6:	8b e3       	ldi	r24, 0x3B	; 59
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	fc 01       	movw	r30, r24
     ebc:	20 81       	ld	r18, Z
     ebe:	8b e3       	ldi	r24, 0x3B	; 59
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2f 7e       	andi	r18, 0xEF	; 239
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR3_PIN2);
     ec8:	8b e3       	ldi	r24, 0x3B	; 59
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	fc 01       	movw	r30, r24
     ece:	20 81       	ld	r18, Z
     ed0:	8b e3       	ldi	r24, 0x3B	; 59
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	2f 7d       	andi	r18, 0xDF	; 223
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
			break;
     eda:	00 00       	nop
		}
		break;
     edc:	43 c0       	rjmp	.+134    	; 0xf64 <set_motor_direction+0x250>

	case MOTOR4:
		switch (direction) {
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	19 f0       	breq	.+6      	; 0xef0 <set_motor_direction+0x1dc>
     eea:	02 97       	sbiw	r24, 0x02	; 2
     eec:	a1 f0       	breq	.+40     	; 0xf16 <set_motor_direction+0x202>
     eee:	26 c0       	rjmp	.+76     	; 0xf3c <set_motor_direction+0x228>
		case CLOCKWISE:
			DC_MOTOR_PORT |= (1 << MOTOR4_PIN1);
     ef0:	8b e3       	ldi	r24, 0x3B	; 59
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 81       	ld	r18, Z
     ef8:	8b e3       	ldi	r24, 0x3B	; 59
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	20 64       	ori	r18, 0x40	; 64
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR4_PIN2);
     f02:	8b e3       	ldi	r24, 0x3B	; 59
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	fc 01       	movw	r30, r24
     f08:	20 81       	ld	r18, Z
     f0a:	8b e3       	ldi	r24, 0x3B	; 59
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	2f 77       	andi	r18, 0x7F	; 127
     f10:	fc 01       	movw	r30, r24
     f12:	20 83       	st	Z, r18
			break;
     f14:	26 c0       	rjmp	.+76     	; 0xf62 <set_motor_direction+0x24e>
		case ANTI_CLOCKWISE:
			DC_MOTOR_PORT &= ~(1 << MOTOR4_PIN1);
     f16:	8b e3       	ldi	r24, 0x3B	; 59
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 81       	ld	r18, Z
     f1e:	8b e3       	ldi	r24, 0x3B	; 59
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	2f 7b       	andi	r18, 0xBF	; 191
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
			DC_MOTOR_PORT |= (1 << MOTOR4_PIN2);
     f28:	8b e3       	ldi	r24, 0x3B	; 59
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 81       	ld	r18, Z
     f30:	8b e3       	ldi	r24, 0x3B	; 59
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	20 68       	ori	r18, 0x80	; 128
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18
			break;
     f3a:	13 c0       	rjmp	.+38     	; 0xf62 <set_motor_direction+0x24e>
		default:
			DC_MOTOR_PORT &= ~(1 << MOTOR4_PIN1);
     f3c:	8b e3       	ldi	r24, 0x3B	; 59
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	fc 01       	movw	r30, r24
     f42:	20 81       	ld	r18, Z
     f44:	8b e3       	ldi	r24, 0x3B	; 59
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	2f 7b       	andi	r18, 0xBF	; 191
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
			DC_MOTOR_PORT &= ~(1 << MOTOR4_PIN2);
     f4e:	8b e3       	ldi	r24, 0x3B	; 59
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	20 81       	ld	r18, Z
     f56:	8b e3       	ldi	r24, 0x3B	; 59
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	2f 77       	andi	r18, 0x7F	; 127
     f5c:	fc 01       	movw	r30, r24
     f5e:	20 83       	st	Z, r18
			break;
     f60:	00 00       	nop
		}
		break;
     f62:	00 00       	nop

	default:
		/* Do Nothing */
		break;
}
}
     f64:	00 00       	nop
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <set_car_direction>:

void set_car_direction(Car_directions Car_direction) {
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	1f 92       	push	r1
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	89 83       	std	Y+1, r24	; 0x01
	switch (Car_direction) {
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	09 2e       	mov	r0, r25
     f84:	00 0c       	add	r0, r0
     f86:	aa 0b       	sbc	r26, r26
     f88:	bb 0b       	sbc	r27, r27
     f8a:	87 30       	cpi	r24, 0x07	; 7
     f8c:	91 05       	cpc	r25, r1
     f8e:	a1 05       	cpc	r26, r1
     f90:	b1 05       	cpc	r27, r1
     f92:	08 f0       	brcs	.+2      	; 0xf96 <set_car_direction+0x26>
     f94:	83 c0       	rjmp	.+262    	; 0x109c <set_car_direction+0x12c>
     f96:	80 53       	subi	r24, 0x30	; 48
     f98:	98 4f       	sbci	r25, 0xF8	; 248
     f9a:	fc 01       	movw	r30, r24
     f9c:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__tablejump2__>
     fa0:	d7 07       	cpc	r29, r23
     fa2:	e8 07       	cpc	r30, r24
     fa4:	f9 07       	cpc	r31, r25
     fa6:	0a 08       	sbc	r0, r10
     fa8:	1b 08       	sbc	r1, r11
     faa:	2c 08       	sbc	r2, r12
     fac:	3d 08       	sbc	r3, r13
	case Forward: {
		set_motor_direction(MOTOR1, CLOCKWISE);
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR2, CLOCKWISE);
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR3, CLOCKWISE);
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR4, CLOCKWISE);
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		break;
     fce:	66 c0       	rjmp	.+204    	; 0x109c <set_car_direction+0x12c>
	}

	case Backward: {
		set_motor_direction(MOTOR1, ANTI_CLOCKWISE);
     fd0:	62 e0       	ldi	r22, 0x02	; 2
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR2, ANTI_CLOCKWISE);
     fd8:	62 e0       	ldi	r22, 0x02	; 2
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR3, ANTI_CLOCKWISE);
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR4, ANTI_CLOCKWISE);
     fe8:	62 e0       	ldi	r22, 0x02	; 2
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		break;
     ff0:	55 c0       	rjmp	.+170    	; 0x109c <set_car_direction+0x12c>
	}
	case Right: {
		set_motor_direction(MOTOR1, CLOCKWISE);
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR2, CLOCKWISE);
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR3, CLOCKWISE);
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR4, STOP);
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		break;
    1012:	44 c0       	rjmp	.+136    	; 0x109c <set_car_direction+0x12c>
	}
	case Left: {
		set_motor_direction(MOTOR1, CLOCKWISE);
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR2, CLOCKWISE);
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR4, CLOCKWISE);
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR3, STOP);
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		
		break;
    1034:	33 c0       	rjmp	.+102    	; 0x109c <set_car_direction+0x12c>
	}
	case Left_Back: {
		set_motor_direction(MOTOR1, ANTI_CLOCKWISE);
    1036:	62 e0       	ldi	r22, 0x02	; 2
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR2, ANTI_CLOCKWISE);
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR4, ANTI_CLOCKWISE);
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR3, STOP);
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		
		break;
    1056:	22 c0       	rjmp	.+68     	; 0x109c <set_car_direction+0x12c>
	}
	case Right_Back: {
			set_motor_direction(MOTOR1, ANTI_CLOCKWISE);
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
			set_motor_direction(MOTOR2, ANTI_CLOCKWISE);
    1060:	62 e0       	ldi	r22, 0x02	; 2
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
			set_motor_direction(MOTOR3, ANTI_CLOCKWISE);
    1068:	62 e0       	ldi	r22, 0x02	; 2
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
			set_motor_direction(MOTOR4, STOP);
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
			break;
    1078:	11 c0       	rjmp	.+34     	; 0x109c <set_car_direction+0x12c>
		}
	case Brake: {
		set_motor_direction(MOTOR1, STOP);
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR2, STOP);
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR3, STOP);
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		set_motor_direction(MOTOR4, STOP);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	0e 94 8a 06 	call	0xd14	; 0xd14 <set_motor_direction>
		break;
    109a:	00 00       	nop
	}
	}
}
    109c:	00 00       	nop
    109e:	0f 90       	pop	r0
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <move_car>:

void move_car(void) {
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	1f 92       	push	r1
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	uint8 car_info = HC05_receiveByte();
    10b0:	0e 94 86 05 	call	0xb0c	; 0xb0c <HC05_receiveByte>
    10b4:	89 83       	std	Y+1, r24	; 0x01
	switch (car_info) {
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	09 2e       	mov	r0, r25
    10be:	00 0c       	add	r0, r0
    10c0:	aa 0b       	sbc	r26, r26
    10c2:	bb 0b       	sbc	r27, r27
    10c4:	c0 97       	sbiw	r24, 0x30	; 48
    10c6:	a1 09       	sbc	r26, r1
    10c8:	b1 09       	sbc	r27, r1
    10ca:	82 34       	cpi	r24, 0x42	; 66
    10cc:	91 05       	cpc	r25, r1
    10ce:	a1 05       	cpc	r26, r1
    10d0:	b1 05       	cpc	r27, r1
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <move_car+0x30>
    10d4:	8f c0       	rjmp	.+286    	; 0x11f4 <move_car+0x14e>
    10d6:	80 59       	subi	r24, 0x90	; 144
    10d8:	97 4f       	sbci	r25, 0xF7	; 247
    10da:	fc 01       	movw	r30, r24
    10dc:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__tablejump2__>
    10e0:	ce 08       	sbc	r12, r14
    10e2:	d2 08       	sbc	r13, r2
    10e4:	d6 08       	sbc	r13, r6
    10e6:	da 08       	sbc	r13, r10
    10e8:	de 08       	sbc	r13, r14
    10ea:	e2 08       	sbc	r14, r2
    10ec:	e6 08       	sbc	r14, r6
    10ee:	ea 08       	sbc	r14, r10
    10f0:	ee 08       	sbc	r14, r14
    10f2:	f2 08       	sbc	r15, r2
    10f4:	fa 08       	sbc	r15, r10
    10f6:	fa 08       	sbc	r15, r10
    10f8:	fa 08       	sbc	r15, r10
    10fa:	fa 08       	sbc	r15, r10
    10fc:	fa 08       	sbc	r15, r10
    10fe:	fa 08       	sbc	r15, r10
    1100:	fa 08       	sbc	r15, r10
    1102:	fa 08       	sbc	r15, r10
    1104:	ba 08       	sbc	r11, r10
    1106:	fa 08       	sbc	r15, r10
    1108:	b2 08       	sbc	r11, r2
    110a:	fa 08       	sbc	r15, r10
    110c:	b6 08       	sbc	r11, r6
    110e:	c6 08       	sbc	r12, r6
    1110:	be 08       	sbc	r11, r14
    1112:	ca 08       	sbc	r12, r10
    1114:	c2 08       	sbc	r12, r2
    1116:	fa 08       	sbc	r15, r10
    1118:	c6 08       	sbc	r12, r6
    111a:	fa 08       	sbc	r15, r10
    111c:	fa 08       	sbc	r15, r10
    111e:	fa 08       	sbc	r15, r10
    1120:	fa 08       	sbc	r15, r10
    1122:	fa 08       	sbc	r15, r10
    1124:	ca 08       	sbc	r12, r10
    1126:	b2 08       	sbc	r11, r2
    1128:	fa 08       	sbc	r15, r10
    112a:	fa 08       	sbc	r15, r10
    112c:	fa 08       	sbc	r15, r10
    112e:	fa 08       	sbc	r15, r10
    1130:	fa 08       	sbc	r15, r10
    1132:	fa 08       	sbc	r15, r10
    1134:	fa 08       	sbc	r15, r10
    1136:	fa 08       	sbc	r15, r10
    1138:	fa 08       	sbc	r15, r10
    113a:	fa 08       	sbc	r15, r10
    113c:	fa 08       	sbc	r15, r10
    113e:	fa 08       	sbc	r15, r10
    1140:	fa 08       	sbc	r15, r10
    1142:	fa 08       	sbc	r15, r10
    1144:	fa 08       	sbc	r15, r10
    1146:	fa 08       	sbc	r15, r10
    1148:	fa 08       	sbc	r15, r10
    114a:	fa 08       	sbc	r15, r10
    114c:	fa 08       	sbc	r15, r10
    114e:	fa 08       	sbc	r15, r10
    1150:	fa 08       	sbc	r15, r10
    1152:	fa 08       	sbc	r15, r10
    1154:	fa 08       	sbc	r15, r10
    1156:	fa 08       	sbc	r15, r10
    1158:	fa 08       	sbc	r15, r10
    115a:	fa 08       	sbc	r15, r10
    115c:	fa 08       	sbc	r15, r10
    115e:	fa 08       	sbc	r15, r10
    1160:	fa 08       	sbc	r15, r10
    1162:	f6 08       	sbc	r15, r6
	case 'S':
	case 'D':
	{
		set_car_direction(Brake);
    1164:	86 e0       	ldi	r24, 0x06	; 6
    1166:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
		//g_direction_current_state = g_direction_previous_state;

	}
		break;
    116a:	44 c0       	rjmp	.+136    	; 0x11f4 <move_car+0x14e>
	case 'F': {
		set_car_direction(Forward);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
		//g_direction_current_state = "F";
	}
		break;
    1172:	40 c0       	rjmp	.+128    	; 0x11f4 <move_car+0x14e>
	case 'B': {
		set_car_direction(Backward);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
		//g_direction_current_state = "B";
	}
		break;
    117a:	3c c0       	rjmp	.+120    	; 0x11f4 <move_car+0x14e>
	case 'H': {
			set_car_direction(Left_Back);
    117c:	84 e0       	ldi	r24, 0x04	; 4
    117e:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
		}
		break;
    1182:	38 c0       	rjmp	.+112    	; 0x11f4 <move_car+0x14e>
	case 'J': {
				set_car_direction(Right_Back);
    1184:	85 e0       	ldi	r24, 0x05	; 5
    1186:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
				//g_direction_current_state = "B";
			}
			break;
    118a:	34 c0       	rjmp	.+104    	; 0x11f4 <move_car+0x14e>
	case 'L':
	case 'G':
	{
		set_car_direction(Left);
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
		//g_direction_current_state = "L";
	}
		break;
    1192:	30 c0       	rjmp	.+96     	; 0x11f4 <move_car+0x14e>
	case 'R':
	case 'I':{
		set_car_direction(Right);
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	0e 94 b8 07 	call	0xf70	; 0xf70 <set_car_direction>
		//g_direction_current_state = "L";
	}
		break;
    119a:	2c c0       	rjmp	.+88     	; 0x11f4 <move_car+0x14e>
	case '0': {
		PWM_Timer0_Init(speed_0);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11a2:	28 c0       	rjmp	.+80     	; 0x11f4 <move_car+0x14e>
	case '1': {
		PWM_Timer0_Init(speed_10);
    11a4:	80 e1       	ldi	r24, 0x10	; 16
    11a6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11aa:	24 c0       	rjmp	.+72     	; 0x11f4 <move_car+0x14e>
	case '2': {
		PWM_Timer0_Init(speed_20);
    11ac:	80 e2       	ldi	r24, 0x20	; 32
    11ae:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11b2:	20 c0       	rjmp	.+64     	; 0x11f4 <move_car+0x14e>
	case '3': {
		PWM_Timer0_Init(speed_30);
    11b4:	80 e4       	ldi	r24, 0x40	; 64
    11b6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11ba:	1c c0       	rjmp	.+56     	; 0x11f4 <move_car+0x14e>
	case '4': {
		PWM_Timer0_Init(speed_40);
    11bc:	80 e5       	ldi	r24, 0x50	; 80
    11be:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11c2:	18 c0       	rjmp	.+48     	; 0x11f4 <move_car+0x14e>
	case '5': {
		PWM_Timer0_Init(speed_50);
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11ca:	14 c0       	rjmp	.+40     	; 0x11f4 <move_car+0x14e>
	case '6': {
		PWM_Timer0_Init(speed_60);
    11cc:	80 e9       	ldi	r24, 0x90	; 144
    11ce:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11d2:	10 c0       	rjmp	.+32     	; 0x11f4 <move_car+0x14e>
	case '7': {
		PWM_Timer0_Init(speed_70);
    11d4:	80 eb       	ldi	r24, 0xB0	; 176
    11d6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11da:	0c c0       	rjmp	.+24     	; 0x11f4 <move_car+0x14e>
	case '8': {
		PWM_Timer0_Init(speed_80);
    11dc:	80 ed       	ldi	r24, 0xD0	; 208
    11de:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <move_car+0x14e>
	case '9': {
		PWM_Timer0_Init(speed_90);
    11e4:	80 ee       	ldi	r24, 0xE0	; 224
    11e6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <move_car+0x14e>
	case 'q': {
		PWM_Timer0_Init(speed_100);
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	0e 94 1d 06 	call	0xc3a	; 0xc3a <PWM_Timer0_Init>
	}
		break;
    11f2:	00 00       	nop
	}

}
    11f4:	00 00       	nop
    11f6:	0f 90       	pop	r0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	00 d0       	rcall	.+0      	; 0x1204 <UART_init+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <UART_init+0x8>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <UART_init+0xa>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	6b 83       	std	Y+3, r22	; 0x03
    120e:	7c 83       	std	Y+4, r23	; 0x04
    1210:	8d 83       	std	Y+5, r24	; 0x05
    1212:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    1214:	1a 82       	std	Y+2, r1	; 0x02
    1216:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1218:	8b e2       	ldi	r24, 0x2B	; 43
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	22 e0       	ldi	r18, 0x02	; 2
    121e:	fc 01       	movw	r30, r24
    1220:	20 83       	st	Z, r18
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1222:	8a e2       	ldi	r24, 0x2A	; 42
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	28 e1       	ldi	r18, 0x18	; 24
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    122c:	80 e4       	ldi	r24, 0x40	; 64
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	26 e8       	ldi	r18, 0x86	; 134
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	ad 81       	ldd	r26, Y+5	; 0x05
    123c:	be 81       	ldd	r27, Y+6	; 0x06
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	aa 1f       	adc	r26, r26
    1244:	bb 1f       	adc	r27, r27
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	aa 1f       	adc	r26, r26
    124c:	bb 1f       	adc	r27, r27
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	aa 1f       	adc	r26, r26
    1254:	bb 1f       	adc	r27, r27
    1256:	9c 01       	movw	r18, r24
    1258:	ad 01       	movw	r20, r26
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	94 e2       	ldi	r25, 0x24	; 36
    125e:	a4 ef       	ldi	r26, 0xF4	; 244
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__udivmodsi4>
    126a:	da 01       	movw	r26, r20
    126c:	c9 01       	movw	r24, r18
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	29 2f       	mov	r18, r25
    127a:	33 27       	eor	r19, r19
    127c:	80 e4       	ldi	r24, 0x40	; 64
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
	UBRRL = ubrr_value;
    1284:	89 e2       	ldi	r24, 0x29	; 41
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	29 81       	ldd	r18, Y+1	; 0x01
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
}
    128e:	00 00       	nop
    1290:	26 96       	adiw	r28, 0x06	; 6
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	1f 92       	push	r1
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    12ae:	00 00       	nop
    12b0:	8b e2       	ldi	r24, 0x2B	; 43
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	fc 01       	movw	r30, r24
    12b6:	80 81       	ld	r24, Z
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	80 72       	andi	r24, 0x20	; 32
    12be:	99 27       	eor	r25, r25
    12c0:	89 2b       	or	r24, r25
    12c2:	b1 f3       	breq	.-20     	; 0x12b0 <UART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    12c4:	8c e2       	ldi	r24, 0x2C	; 44
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	29 81       	ldd	r18, Y+1	; 0x01
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    12ce:	00 00       	nop
    12d0:	0f 90       	pop	r0
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    12e0:	00 00       	nop
    12e2:	8b e2       	ldi	r24, 0x2B	; 43
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	fc 01       	movw	r30, r24
    12e8:	80 81       	ld	r24, Z
    12ea:	88 23       	and	r24, r24
    12ec:	d4 f7       	brge	.-12     	; 0x12e2 <UART_receiveByte+0xa>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    12ee:	8c e2       	ldi	r24, 0x2C	; 44
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	fc 01       	movw	r30, r24
    12f4:	80 81       	ld	r24, Z
}
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <UART_sendString+0x6>
    1302:	1f 92       	push	r1
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	9b 83       	std	Y+3, r25	; 0x03
    130a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    130c:	19 82       	std	Y+1, r1	; 0x01

	/* Send the whole string */
	while(Str[i] != '\0')
    130e:	0e c0       	rjmp	.+28     	; 0x132c <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	2a 81       	ldd	r18, Y+2	; 0x02
    1318:	3b 81       	ldd	r19, Y+3	; 0x03
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	0e 94 51 09 	call	0x12a2	; 0x12a2 <UART_sendByte>
		i++;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	2a 81       	ldd	r18, Y+2	; 0x02
    1334:	3b 81       	ldd	r19, Y+3	; 0x03
    1336:	82 0f       	add	r24, r18
    1338:	93 1f       	adc	r25, r19
    133a:	fc 01       	movw	r30, r24
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	39 f7       	brne	.-50     	; 0x1310 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1342:	00 00       	nop
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	00 d0       	rcall	.+0      	; 0x135a <UART_receiveString+0xa>
    135a:	1f 92       	push	r1
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9b 83       	std	Y+3, r25	; 0x03
    1362:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1364:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	2a 81       	ldd	r18, Y+2	; 0x02
    136e:	3b 81       	ldd	r19, Y+3	; 0x03
    1370:	89 01       	movw	r16, r18
    1372:	08 0f       	add	r16, r24
    1374:	19 1f       	adc	r17, r25
    1376:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <UART_receiveByte>
    137a:	f8 01       	movw	r30, r16
    137c:	80 83       	st	Z, r24

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    137e:	0f c0       	rjmp	.+30     	; 0x139e <UART_receiveString+0x4e>
	{
		i++;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	2a 81       	ldd	r18, Y+2	; 0x02
    138e:	3b 81       	ldd	r19, Y+3	; 0x03
    1390:	89 01       	movw	r16, r18
    1392:	08 0f       	add	r16, r24
    1394:	19 1f       	adc	r17, r25
    1396:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <UART_receiveByte>
    139a:	f8 01       	movw	r30, r16
    139c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	2a 81       	ldd	r18, Y+2	; 0x02
    13a6:	3b 81       	ldd	r19, Y+3	; 0x03
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	fc 01       	movw	r30, r24
    13ae:	80 81       	ld	r24, Z
    13b0:	83 32       	cpi	r24, 0x23	; 35
    13b2:	31 f7       	brne	.-52     	; 0x1380 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	2a 81       	ldd	r18, Y+2	; 0x02
    13bc:	3b 81       	ldd	r19, Y+3	; 0x03
    13be:	82 0f       	add	r24, r18
    13c0:	93 1f       	adc	r25, r19
    13c2:	fc 01       	movw	r30, r24
    13c4:	10 82       	st	Z, r1
}
    13c6:	00 00       	nop
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <__udivmodsi4>:
    13d8:	a1 e2       	ldi	r26, 0x21	; 33
    13da:	1a 2e       	mov	r1, r26
    13dc:	aa 1b       	sub	r26, r26
    13de:	bb 1b       	sub	r27, r27
    13e0:	fd 01       	movw	r30, r26
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <__udivmodsi4_ep>

000013e4 <__udivmodsi4_loop>:
    13e4:	aa 1f       	adc	r26, r26
    13e6:	bb 1f       	adc	r27, r27
    13e8:	ee 1f       	adc	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	a2 17       	cp	r26, r18
    13ee:	b3 07       	cpc	r27, r19
    13f0:	e4 07       	cpc	r30, r20
    13f2:	f5 07       	cpc	r31, r21
    13f4:	20 f0       	brcs	.+8      	; 0x13fe <__udivmodsi4_ep>
    13f6:	a2 1b       	sub	r26, r18
    13f8:	b3 0b       	sbc	r27, r19
    13fa:	e4 0b       	sbc	r30, r20
    13fc:	f5 0b       	sbc	r31, r21

000013fe <__udivmodsi4_ep>:
    13fe:	66 1f       	adc	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	1a 94       	dec	r1
    1408:	69 f7       	brne	.-38     	; 0x13e4 <__udivmodsi4_loop>
    140a:	60 95       	com	r22
    140c:	70 95       	com	r23
    140e:	80 95       	com	r24
    1410:	90 95       	com	r25
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	bd 01       	movw	r22, r26
    1418:	cf 01       	movw	r24, r30
    141a:	08 95       	ret

0000141c <__tablejump2__>:
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	05 90       	lpm	r0, Z+
    1422:	f4 91       	lpm	r31, Z
    1424:	e0 2d       	mov	r30, r0
    1426:	09 94       	ijmp

00001428 <__cmpsf2>:
    1428:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_cmp>
    142c:	08 f4       	brcc	.+2      	; 0x1430 <__cmpsf2+0x8>
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	08 95       	ret

00001432 <__fixunssfsi>:
    1432:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__fp_splitA>
    1436:	88 f0       	brcs	.+34     	; 0x145a <__fixunssfsi+0x28>
    1438:	9f 57       	subi	r25, 0x7F	; 127
    143a:	98 f0       	brcs	.+38     	; 0x1462 <__fixunssfsi+0x30>
    143c:	b9 2f       	mov	r27, r25
    143e:	99 27       	eor	r25, r25
    1440:	b7 51       	subi	r27, 0x17	; 23
    1442:	b0 f0       	brcs	.+44     	; 0x1470 <__fixunssfsi+0x3e>
    1444:	e1 f0       	breq	.+56     	; 0x147e <__fixunssfsi+0x4c>
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	1a f0       	brmi	.+6      	; 0x1456 <__fixunssfsi+0x24>
    1450:	ba 95       	dec	r27
    1452:	c9 f7       	brne	.-14     	; 0x1446 <__fixunssfsi+0x14>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <__fixunssfsi+0x4c>
    1456:	b1 30       	cpi	r27, 0x01	; 1
    1458:	91 f0       	breq	.+36     	; 0x147e <__fixunssfsi+0x4c>
    145a:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_zero>
    145e:	b1 e0       	ldi	r27, 0x01	; 1
    1460:	08 95       	ret
    1462:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__fp_zero>
    1466:	67 2f       	mov	r22, r23
    1468:	78 2f       	mov	r23, r24
    146a:	88 27       	eor	r24, r24
    146c:	b8 5f       	subi	r27, 0xF8	; 248
    146e:	39 f0       	breq	.+14     	; 0x147e <__fixunssfsi+0x4c>
    1470:	b9 3f       	cpi	r27, 0xF9	; 249
    1472:	cc f3       	brlt	.-14     	; 0x1466 <__fixunssfsi+0x34>
    1474:	86 95       	lsr	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b3 95       	inc	r27
    147c:	d9 f7       	brne	.-10     	; 0x1474 <__fixunssfsi+0x42>
    147e:	3e f4       	brtc	.+14     	; 0x148e <__fixunssfsi+0x5c>
    1480:	90 95       	com	r25
    1482:	80 95       	com	r24
    1484:	70 95       	com	r23
    1486:	61 95       	neg	r22
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	8f 4f       	sbci	r24, 0xFF	; 255
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	08 95       	ret

00001490 <__fp_cmp>:
    1490:	99 0f       	add	r25, r25
    1492:	00 08       	sbc	r0, r0
    1494:	55 0f       	add	r21, r21
    1496:	aa 0b       	sbc	r26, r26
    1498:	e0 e8       	ldi	r30, 0x80	; 128
    149a:	fe ef       	ldi	r31, 0xFE	; 254
    149c:	16 16       	cp	r1, r22
    149e:	17 06       	cpc	r1, r23
    14a0:	e8 07       	cpc	r30, r24
    14a2:	f9 07       	cpc	r31, r25
    14a4:	c0 f0       	brcs	.+48     	; 0x14d6 <__fp_cmp+0x46>
    14a6:	12 16       	cp	r1, r18
    14a8:	13 06       	cpc	r1, r19
    14aa:	e4 07       	cpc	r30, r20
    14ac:	f5 07       	cpc	r31, r21
    14ae:	98 f0       	brcs	.+38     	; 0x14d6 <__fp_cmp+0x46>
    14b0:	62 1b       	sub	r22, r18
    14b2:	73 0b       	sbc	r23, r19
    14b4:	84 0b       	sbc	r24, r20
    14b6:	95 0b       	sbc	r25, r21
    14b8:	39 f4       	brne	.+14     	; 0x14c8 <__fp_cmp+0x38>
    14ba:	0a 26       	eor	r0, r26
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <__fp_cmp+0x46>
    14be:	23 2b       	or	r18, r19
    14c0:	24 2b       	or	r18, r20
    14c2:	25 2b       	or	r18, r21
    14c4:	21 f4       	brne	.+8      	; 0x14ce <__fp_cmp+0x3e>
    14c6:	08 95       	ret
    14c8:	0a 26       	eor	r0, r26
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__fp_cmp+0x3e>
    14cc:	a1 40       	sbci	r26, 0x01	; 1
    14ce:	a6 95       	lsr	r26
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	81 1d       	adc	r24, r1
    14d4:	81 1d       	adc	r24, r1
    14d6:	08 95       	ret

000014d8 <__fp_split3>:
    14d8:	57 fd       	sbrc	r21, 7
    14da:	90 58       	subi	r25, 0x80	; 128
    14dc:	44 0f       	add	r20, r20
    14de:	55 1f       	adc	r21, r21
    14e0:	59 f0       	breq	.+22     	; 0x14f8 <__fp_splitA+0x10>
    14e2:	5f 3f       	cpi	r21, 0xFF	; 255
    14e4:	71 f0       	breq	.+28     	; 0x1502 <__fp_splitA+0x1a>
    14e6:	47 95       	ror	r20

000014e8 <__fp_splitA>:
    14e8:	88 0f       	add	r24, r24
    14ea:	97 fb       	bst	r25, 7
    14ec:	99 1f       	adc	r25, r25
    14ee:	61 f0       	breq	.+24     	; 0x1508 <__fp_splitA+0x20>
    14f0:	9f 3f       	cpi	r25, 0xFF	; 255
    14f2:	79 f0       	breq	.+30     	; 0x1512 <__fp_splitA+0x2a>
    14f4:	87 95       	ror	r24
    14f6:	08 95       	ret
    14f8:	12 16       	cp	r1, r18
    14fa:	13 06       	cpc	r1, r19
    14fc:	14 06       	cpc	r1, r20
    14fe:	55 1f       	adc	r21, r21
    1500:	f2 cf       	rjmp	.-28     	; 0x14e6 <__fp_split3+0xe>
    1502:	46 95       	lsr	r20
    1504:	f1 df       	rcall	.-30     	; 0x14e8 <__fp_splitA>
    1506:	08 c0       	rjmp	.+16     	; 0x1518 <__fp_splitA+0x30>
    1508:	16 16       	cp	r1, r22
    150a:	17 06       	cpc	r1, r23
    150c:	18 06       	cpc	r1, r24
    150e:	99 1f       	adc	r25, r25
    1510:	f1 cf       	rjmp	.-30     	; 0x14f4 <__fp_splitA+0xc>
    1512:	86 95       	lsr	r24
    1514:	71 05       	cpc	r23, r1
    1516:	61 05       	cpc	r22, r1
    1518:	08 94       	sec
    151a:	08 95       	ret

0000151c <__fp_zero>:
    151c:	e8 94       	clt

0000151e <__fp_szero>:
    151e:	bb 27       	eor	r27, r27
    1520:	66 27       	eor	r22, r22
    1522:	77 27       	eor	r23, r23
    1524:	cb 01       	movw	r24, r22
    1526:	97 f9       	bld	r25, 7
    1528:	08 95       	ret

0000152a <__gesf2>:
    152a:	0e 94 48 0a 	call	0x1490	; 0x1490 <__fp_cmp>
    152e:	08 f4       	brcc	.+2      	; 0x1532 <__gesf2+0x8>
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	08 95       	ret

00001534 <__mulsf3>:
    1534:	0e 94 ad 0a 	call	0x155a	; 0x155a <__mulsf3x>
    1538:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_round>
    153c:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_pscA>
    1540:	38 f0       	brcs	.+14     	; 0x1550 <__mulsf3+0x1c>
    1542:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_pscB>
    1546:	20 f0       	brcs	.+8      	; 0x1550 <__mulsf3+0x1c>
    1548:	95 23       	and	r25, r21
    154a:	11 f0       	breq	.+4      	; 0x1550 <__mulsf3+0x1c>
    154c:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__fp_inf>
    1550:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <__fp_nan>
    1554:	11 24       	eor	r1, r1
    1556:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__fp_szero>

0000155a <__mulsf3x>:
    155a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_split3>
    155e:	70 f3       	brcs	.-36     	; 0x153c <__mulsf3+0x8>

00001560 <__mulsf3_pse>:
    1560:	95 9f       	mul	r25, r21
    1562:	c1 f3       	breq	.-16     	; 0x1554 <__mulsf3+0x20>
    1564:	95 0f       	add	r25, r21
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	55 1f       	adc	r21, r21
    156a:	62 9f       	mul	r22, r18
    156c:	f0 01       	movw	r30, r0
    156e:	72 9f       	mul	r23, r18
    1570:	bb 27       	eor	r27, r27
    1572:	f0 0d       	add	r31, r0
    1574:	b1 1d       	adc	r27, r1
    1576:	63 9f       	mul	r22, r19
    1578:	aa 27       	eor	r26, r26
    157a:	f0 0d       	add	r31, r0
    157c:	b1 1d       	adc	r27, r1
    157e:	aa 1f       	adc	r26, r26
    1580:	64 9f       	mul	r22, r20
    1582:	66 27       	eor	r22, r22
    1584:	b0 0d       	add	r27, r0
    1586:	a1 1d       	adc	r26, r1
    1588:	66 1f       	adc	r22, r22
    158a:	82 9f       	mul	r24, r18
    158c:	22 27       	eor	r18, r18
    158e:	b0 0d       	add	r27, r0
    1590:	a1 1d       	adc	r26, r1
    1592:	62 1f       	adc	r22, r18
    1594:	73 9f       	mul	r23, r19
    1596:	b0 0d       	add	r27, r0
    1598:	a1 1d       	adc	r26, r1
    159a:	62 1f       	adc	r22, r18
    159c:	83 9f       	mul	r24, r19
    159e:	a0 0d       	add	r26, r0
    15a0:	61 1d       	adc	r22, r1
    15a2:	22 1f       	adc	r18, r18
    15a4:	74 9f       	mul	r23, r20
    15a6:	33 27       	eor	r19, r19
    15a8:	a0 0d       	add	r26, r0
    15aa:	61 1d       	adc	r22, r1
    15ac:	23 1f       	adc	r18, r19
    15ae:	84 9f       	mul	r24, r20
    15b0:	60 0d       	add	r22, r0
    15b2:	21 1d       	adc	r18, r1
    15b4:	82 2f       	mov	r24, r18
    15b6:	76 2f       	mov	r23, r22
    15b8:	6a 2f       	mov	r22, r26
    15ba:	11 24       	eor	r1, r1
    15bc:	9f 57       	subi	r25, 0x7F	; 127
    15be:	50 40       	sbci	r21, 0x00	; 0
    15c0:	9a f0       	brmi	.+38     	; 0x15e8 <__mulsf3_pse+0x88>
    15c2:	f1 f0       	breq	.+60     	; 0x1600 <__mulsf3_pse+0xa0>
    15c4:	88 23       	and	r24, r24
    15c6:	4a f0       	brmi	.+18     	; 0x15da <__mulsf3_pse+0x7a>
    15c8:	ee 0f       	add	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	bb 1f       	adc	r27, r27
    15ce:	66 1f       	adc	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	91 50       	subi	r25, 0x01	; 1
    15d6:	50 40       	sbci	r21, 0x00	; 0
    15d8:	a9 f7       	brne	.-22     	; 0x15c4 <__mulsf3_pse+0x64>
    15da:	9e 3f       	cpi	r25, 0xFE	; 254
    15dc:	51 05       	cpc	r21, r1
    15de:	80 f0       	brcs	.+32     	; 0x1600 <__mulsf3_pse+0xa0>
    15e0:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__fp_inf>
    15e4:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <__fp_szero>
    15e8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ea:	e4 f3       	brlt	.-8      	; 0x15e4 <__mulsf3_pse+0x84>
    15ec:	98 3e       	cpi	r25, 0xE8	; 232
    15ee:	d4 f3       	brlt	.-12     	; 0x15e4 <__mulsf3_pse+0x84>
    15f0:	86 95       	lsr	r24
    15f2:	77 95       	ror	r23
    15f4:	67 95       	ror	r22
    15f6:	b7 95       	ror	r27
    15f8:	f7 95       	ror	r31
    15fa:	e7 95       	ror	r30
    15fc:	9f 5f       	subi	r25, 0xFF	; 255
    15fe:	c1 f7       	brne	.-16     	; 0x15f0 <__mulsf3_pse+0x90>
    1600:	fe 2b       	or	r31, r30
    1602:	88 0f       	add	r24, r24
    1604:	91 1d       	adc	r25, r1
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	97 f9       	bld	r25, 7
    160c:	08 95       	ret

0000160e <__fp_inf>:
    160e:	97 f9       	bld	r25, 7
    1610:	9f 67       	ori	r25, 0x7F	; 127
    1612:	80 e8       	ldi	r24, 0x80	; 128
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	08 95       	ret

0000161a <__fp_nan>:
    161a:	9f ef       	ldi	r25, 0xFF	; 255
    161c:	80 ec       	ldi	r24, 0xC0	; 192
    161e:	08 95       	ret

00001620 <__fp_pscA>:
    1620:	00 24       	eor	r0, r0
    1622:	0a 94       	dec	r0
    1624:	16 16       	cp	r1, r22
    1626:	17 06       	cpc	r1, r23
    1628:	18 06       	cpc	r1, r24
    162a:	09 06       	cpc	r0, r25
    162c:	08 95       	ret

0000162e <__fp_pscB>:
    162e:	00 24       	eor	r0, r0
    1630:	0a 94       	dec	r0
    1632:	12 16       	cp	r1, r18
    1634:	13 06       	cpc	r1, r19
    1636:	14 06       	cpc	r1, r20
    1638:	05 06       	cpc	r0, r21
    163a:	08 95       	ret

0000163c <__fp_round>:
    163c:	09 2e       	mov	r0, r25
    163e:	03 94       	inc	r0
    1640:	00 0c       	add	r0, r0
    1642:	11 f4       	brne	.+4      	; 0x1648 <__fp_round+0xc>
    1644:	88 23       	and	r24, r24
    1646:	52 f0       	brmi	.+20     	; 0x165c <__fp_round+0x20>
    1648:	bb 0f       	add	r27, r27
    164a:	40 f4       	brcc	.+16     	; 0x165c <__fp_round+0x20>
    164c:	bf 2b       	or	r27, r31
    164e:	11 f4       	brne	.+4      	; 0x1654 <__fp_round+0x18>
    1650:	60 ff       	sbrs	r22, 0
    1652:	04 c0       	rjmp	.+8      	; 0x165c <__fp_round+0x20>
    1654:	6f 5f       	subi	r22, 0xFF	; 255
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	8f 4f       	sbci	r24, 0xFF	; 255
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	08 95       	ret

0000165e <_exit>:
    165e:	f8 94       	cli

00001660 <__stop_program>:
    1660:	ff cf       	rjmp	.-2      	; 0x1660 <__stop_program>
