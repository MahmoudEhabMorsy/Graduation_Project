
WaterCoool.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000530a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000530a  0000539e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  0080008e  0080008e  000053cc  2**0
                  ALLOC
  3 .stab         00005b2c  00000000  00000000  000053cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002403  00000000  00000000  0000aef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  0000d2fb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000d32c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000d368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000d84e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000dcf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000dd0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_4>
      14:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_9>
      28:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_10>
      2c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <main>
      8a:	0c 94 83 29 	jmp	0x5306	; 0x5306 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TWI_init>:
 * 																		*
 * [Args]							*
 * [Return]															*
 *======================================================================*/

void TWI_init(void) {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate Configuration */
#if BIT_RATE >= MINIMUM_BIT_RATE
	TWBR = BIT_RATE;
      9a:	80 e2       	ldi	r24, 0x20	; 32
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	28 e4       	ldi	r18, 0x48	; 72
      a0:	fc 01       	movw	r30, r24
      a2:	20 83       	st	Z, r18
#else
#error "Invalid I2C bit rate configuration. Minimum bit rate allowed is 10."
#endif
	/* Prescaler Configuration */
#if PRESCALER_1 == PRESCALER
	CLEAR_BIT(TWSR, TWPS1);
      a4:	81 e2       	ldi	r24, 0x21	; 33
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	fc 01       	movw	r30, r24
      aa:	20 81       	ld	r18, Z
      ac:	81 e2       	ldi	r24, 0x21	; 33
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	2d 7f       	andi	r18, 0xFD	; 253
      b2:	fc 01       	movw	r30, r24
      b4:	20 83       	st	Z, r18
	CLEAR_BIT(TWSR, TWPS0);
      b6:	81 e2       	ldi	r24, 0x21	; 33
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	fc 01       	movw	r30, r24
      bc:	20 81       	ld	r18, Z
      be:	81 e2       	ldi	r24, 0x21	; 33
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	2e 7f       	andi	r18, 0xFE	; 254
      c4:	fc 01       	movw	r30, r24
      c6:	20 83       	st	Z, r18
#else
#error "Invalid I2C prescaler configuration"
#endif
	/* Slave Address Configuration */
#if SLAVE_ADDRESS >= MINIMUM_ADDRESS && SLAVE_ADDRESS <= MAXIMUM_ADDRESS
	TWAR = (SLAVE_ADDRESS << 1);
      c8:	82 e2       	ldi	r24, 0x22	; 34
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	26 e0       	ldi	r18, 0x06	; 6
      ce:	fc 01       	movw	r30, r24
      d0:	20 83       	st	Z, r18
#error "Invalid I2C slave address configuration (out of range)."
#endif
#if ENABLE_GENERAL_CALL == GENERAL_CALL
	SET_BIT(TWAR, TWGCE);
#elif DISABLE_GENERAL_CALL == GENERAL_CALL
	CLEAR_BIT(TWAR, TWGCE);
      d2:	82 e2       	ldi	r24, 0x22	; 34
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	fc 01       	movw	r30, r24
      d8:	20 81       	ld	r18, Z
      da:	82 e2       	ldi	r24, 0x22	; 34
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	2e 7f       	andi	r18, 0xFE	; 254
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
#else
#error "Invalid general call configuration"
#endif
	/* Enable I2C Peripheral */
	SET_BIT(TWCR, TWEN);
      e4:	86 e5       	ldi	r24, 0x56	; 86
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	fc 01       	movw	r30, r24
      ea:	20 81       	ld	r18, Z
      ec:	86 e5       	ldi	r24, 0x56	; 86
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	24 60       	ori	r18, 0x04	; 4
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
}
      f6:	00 00       	nop
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <TWI_Start>:
 * 																		*
 * [Args]		uint8 slave_write_adress						*
 * [Return]															*
 *======================================================================*/

uint8 TWI_Start(uint8 slave_write_adress) {
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	00 d0       	rcall	.+0      	; 0x104 <TWI_Start+0x6>
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     10a:	86 e5       	ldi	r24, 0x56	; 86
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	24 ea       	ldi	r18, 0xA4	; 164
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     114:	00 00       	nop
     116:	86 e5       	ldi	r24, 0x56	; 86
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	fc 01       	movw	r30, r24
     11c:	80 81       	ld	r24, Z
     11e:	88 23       	and	r24, r24
     120:	d4 f7       	brge	.-12     	; 0x116 <TWI_Start+0x18>
		;
	status = TWI_getStatus();
     122:	0e 94 93 01 	call	0x326	; 0x326 <TWI_getStatus>
     126:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	88 30       	cpi	r24, 0x08	; 8
     12c:	11 f0       	breq	.+4      	; 0x132 <TWI_Start+0x34>
		return 0;
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	1f c0       	rjmp	.+62     	; 0x170 <TWI_Start+0x72>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     132:	83 e2       	ldi	r24, 0x23	; 35
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	2a 81       	ldd	r18, Y+2	; 0x02
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     13c:	86 e5       	ldi	r24, 0x56	; 86
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	24 e8       	ldi	r18, 0x84	; 132
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
	while (BIT_IS_CLEAR(TWCR, TWINT))
     146:	00 00       	nop
     148:	86 e5       	ldi	r24, 0x56	; 86
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	fc 01       	movw	r30, r24
     14e:	80 81       	ld	r24, Z
     150:	88 23       	and	r24, r24
     152:	d4 f7       	brge	.-12     	; 0x148 <TWI_Start+0x4a>
		;
	status = TWI_getStatus();
     154:	0e 94 93 01 	call	0x326	; 0x326 <TWI_getStatus>
     158:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	88 31       	cpi	r24, 0x18	; 24
     15e:	11 f4       	brne	.+4      	; 0x164 <TWI_Start+0x66>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	06 c0       	rjmp	.+12     	; 0x170 <TWI_Start+0x72>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	80 32       	cpi	r24, 0x20	; 32
     168:	11 f4       	brne	.+4      	; 0x16e <TWI_Start+0x70>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	01 c0       	rjmp	.+2      	; 0x170 <TWI_Start+0x72>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     16e:	83 e0       	ldi	r24, 0x03	; 3
}
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <TWI_Repeated_start>:
 * [Description]:	Function responsible for re-start the TWI communication.*
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
uint8 TWI_Repeated_start(uint8 slave_write_adress) {
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	00 d0       	rcall	.+0      	; 0x180 <TWI_Repeated_start+0x6>
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     186:	86 e5       	ldi	r24, 0x56	; 86
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	24 ea       	ldi	r18, 0xA4	; 164
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     190:	00 00       	nop
     192:	86 e5       	ldi	r24, 0x56	; 86
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	88 23       	and	r24, r24
     19c:	d4 f7       	brge	.-12     	; 0x192 <TWI_Repeated_start+0x18>
		;
	status = TWI_getStatus();
     19e:	0e 94 93 01 	call	0x326	; 0x326 <TWI_getStatus>
     1a2:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_REP_START) /* Check weather start condition transmitted successfully or not? */
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	80 31       	cpi	r24, 0x10	; 16
     1a8:	11 f0       	breq	.+4      	; 0x1ae <TWI_Repeated_start+0x34>
		return 0;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	1f c0       	rjmp	.+62     	; 0x1ec <TWI_Repeated_start+0x72>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     1ae:	83 e2       	ldi	r24, 0x23	; 35
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	2a 81       	ldd	r18, Y+2	; 0x02
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     1b8:	86 e5       	ldi	r24, 0x56	; 86
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	24 e8       	ldi	r18, 0x84	; 132
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
	while (BIT_IS_CLEAR(TWCR, TWINT))
     1c2:	00 00       	nop
     1c4:	86 e5       	ldi	r24, 0x56	; 86
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	fc 01       	movw	r30, r24
     1ca:	80 81       	ld	r24, Z
     1cc:	88 23       	and	r24, r24
     1ce:	d4 f7       	brge	.-12     	; 0x1c4 <TWI_Repeated_start+0x4a>
		;
	status = TWI_getStatus();
     1d0:	0e 94 93 01 	call	0x326	; 0x326 <TWI_getStatus>
     1d4:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_R_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	80 34       	cpi	r24, 0x40	; 64
     1da:	11 f4       	brne	.+4      	; 0x1e0 <TWI_Repeated_start+0x66>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	06 c0       	rjmp	.+12     	; 0x1ec <TWI_Repeated_start+0x72>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	80 32       	cpi	r24, 0x20	; 32
     1e4:	11 f4       	brne	.+4      	; 0x1ea <TWI_Repeated_start+0x70>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <TWI_Repeated_start+0x72>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     1ea:	83 e0       	ldi	r24, 0x03	; 3
}
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <TWI_Start_Wait>:
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <TWI_Start_Wait+0x6>
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
     202:	86 e5       	ldi	r24, 0x56	; 86
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	24 ea       	ldi	r18, 0xA4	; 164
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
		while (BIT_IS_CLEAR(TWCR, TWINT))
     20c:	00 00       	nop
     20e:	86 e5       	ldi	r24, 0x56	; 86
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	fc 01       	movw	r30, r24
     214:	80 81       	ld	r24, Z
     216:	88 23       	and	r24, r24
     218:	d4 f7       	brge	.-12     	; 0x20e <TWI_Start_Wait+0x18>
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
     21a:	81 e2       	ldi	r24, 0x21	; 33
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	fc 01       	movw	r30, r24
     220:	80 81       	ld	r24, Z
     222:	88 7f       	andi	r24, 0xF8	; 248
     224:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	88 30       	cpi	r24, 0x08	; 8
     22a:	e9 f4       	brne	.+58     	; 0x266 <TWI_Start_Wait+0x70>
			continue; /* If no then continue with start loop again */
		TWDR = slave_write_address; /* If yes then write SLA+W in TWI data register */
     22c:	83 e2       	ldi	r24, 0x23	; 35
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	2a 81       	ldd	r18, Y+2	; 0x02
     232:	fc 01       	movw	r30, r24
     234:	20 83       	st	Z, r18
		TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     236:	86 e5       	ldi	r24, 0x56	; 86
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	24 e8       	ldi	r18, 0x84	; 132
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
		while (BIT_IS_CLEAR(TWCR, TWINT))
     240:	00 00       	nop
     242:	86 e5       	ldi	r24, 0x56	; 86
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	fc 01       	movw	r30, r24
     248:	80 81       	ld	r24, Z
     24a:	88 23       	and	r24, r24
     24c:	d4 f7       	brge	.-12     	; 0x242 <TWI_Start_Wait+0x4c>
			; /* Wait until TWI finish its current job (Write operation) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
     24e:	81 e2       	ldi	r24, 0x21	; 33
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 7f       	andi	r24, 0xF8	; 248
     258:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	88 31       	cpi	r24, 0x18	; 24
     25e:	29 f0       	breq	.+10     	; 0x26a <TWI_Start_Wait+0x74>
		{
			TWI_Stop(); /* If not then generate stop condition */
     260:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
			continue; /* continue with start loop again */
     264:	01 c0       	rjmp	.+2      	; 0x268 <TWI_Start_Wait+0x72>
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
		while (BIT_IS_CLEAR(TWCR, TWINT))
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
			continue; /* If no then continue with start loop again */
     266:	00 00       	nop
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
     268:	cc cf       	rjmp	.-104    	; 0x202 <TWI_Start_Wait+0xc>
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
		{
			TWI_Stop(); /* If not then generate stop condition */
			continue; /* continue with start loop again */
		}
		break; /* If yes then break loop */
     26a:	00 00       	nop
	}
}
     26c:	00 00       	nop
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <TWI_Stop>:
 * [Description]:	Function responsible for stop the TWI communication *
 * 																*
 * [Args]		void											*
 * [Return]			void										*
 *======================================================================*/
void TWI_Stop(void) {
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     280:	86 e5       	ldi	r24, 0x56	; 86
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	24 e9       	ldi	r18, 0x94	; 148
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
}
     28a:	00 00       	nop
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <TWI_WriteByte>:
 * [Description]:	Function responsible for sending 1 byte *
 * 																*
 * [Args]		uint8 data											*
 * [Return]			void										*
 *======================================================================*/
void TWI_WriteByte(uint8 data) {
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	1f 92       	push	r1
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
     29e:	83 e2       	ldi	r24, 0x23	; 35
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	29 81       	ldd	r18, Y+1	; 0x01
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     2a8:	86 e5       	ldi	r24, 0x56	; 86
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	24 e8       	ldi	r18, 0x84	; 132
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     2b2:	00 00       	nop
     2b4:	86 e5       	ldi	r24, 0x56	; 86
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	d4 f7       	brge	.-12     	; 0x2b4 <TWI_WriteByte+0x22>
		;
}
     2c0:	00 00       	nop
     2c2:	0f 90       	pop	r0
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <TWI_ReadByteWithACK>:
 * [Description]:	Function responsible for reading 1 byte with ack *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithACK(void) {
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     2d2:	86 e5       	ldi	r24, 0x56	; 86
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	24 ec       	ldi	r18, 0xC4	; 196
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     2dc:	00 00       	nop
     2de:	86 e5       	ldi	r24, 0x56	; 86
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	88 23       	and	r24, r24
     2e8:	d4 f7       	brge	.-12     	; 0x2de <TWI_ReadByteWithACK+0x14>
		;
	/* Read Data */
	return TWDR;
     2ea:	83 e2       	ldi	r24, 0x23	; 35
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	fc 01       	movw	r30, r24
     2f0:	80 81       	ld	r24, Z
}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <TWI_ReadByteWithNACK>:
 * [Description]:	Function responsible for reading 1 byte with NACK *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithNACK(void) {
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     300:	86 e5       	ldi	r24, 0x56	; 86
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	24 e8       	ldi	r18, 0x84	; 132
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     30a:	00 00       	nop
     30c:	86 e5       	ldi	r24, 0x56	; 86
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	fc 01       	movw	r30, r24
     312:	80 81       	ld	r24, Z
     314:	88 23       	and	r24, r24
     316:	d4 f7       	brge	.-12     	; 0x30c <TWI_ReadByteWithNACK+0x14>
		;
	/* Read Data */
	return TWDR;
     318:	83 e2       	ldi	r24, 0x23	; 35
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <TWI_getStatus>:
 * [Description]:	FET STATUS from TWSR register *
 * 																*
 * [Args]													*
 * [Return]			uint8 status									*
 *======================================================================*/
uint8 TWI_getStatus(void) {
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	1f 92       	push	r1
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
     330:	81 e2       	ldi	r24, 0x21	; 33
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	88 7f       	andi	r24, 0xF8	; 248
     33a:	89 83       	std	Y+1, r24	; 0x01
	return status;
     33c:	89 81       	ldd	r24, Y+1	; 0x01
}
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <__vector_11>:
/********************************************************/
/*                     ISRs                              */
/********************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
     370:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     374:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     378:	89 2b       	or	r24, r25
     37a:	31 f0       	breq	.+12     	; 0x388 <__vector_11+0x42>
		(*g_Timer0CallBackPtr)();
     37c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     380:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     384:	fc 01       	movw	r30, r24
     386:	09 95       	icall
	}
}
     388:	00 00       	nop
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	ff 91       	pop	r31
     390:	ef 91       	pop	r30
     392:	bf 91       	pop	r27
     394:	af 91       	pop	r26
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	7f 91       	pop	r23
     39c:	6f 91       	pop	r22
     39e:	5f 91       	pop	r21
     3a0:	4f 91       	pop	r20
     3a2:	3f 91       	pop	r19
     3a4:	2f 91       	pop	r18
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti

000003b0 <__vector_10>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
     3b0:	1f 92       	push	r1
     3b2:	0f 92       	push	r0
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	0f 92       	push	r0
     3b8:	11 24       	eor	r1, r1
     3ba:	2f 93       	push	r18
     3bc:	3f 93       	push	r19
     3be:	4f 93       	push	r20
     3c0:	5f 93       	push	r21
     3c2:	6f 93       	push	r22
     3c4:	7f 93       	push	r23
     3c6:	8f 93       	push	r24
     3c8:	9f 93       	push	r25
     3ca:	af 93       	push	r26
     3cc:	bf 93       	push	r27
     3ce:	ef 93       	push	r30
     3d0:	ff 93       	push	r31
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
     3da:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     3de:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     3e2:	89 2b       	or	r24, r25
     3e4:	31 f0       	breq	.+12     	; 0x3f2 <__vector_10+0x42>
		(*g_Timer0CallBackPtr)();
     3e6:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     3ea:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__data_end+0x1>
     3ee:	fc 01       	movw	r30, r24
     3f0:	09 95       	icall
	}
}
     3f2:	00 00       	nop
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	bf 91       	pop	r27
     3fe:	af 91       	pop	r26
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	7f 91       	pop	r23
     406:	6f 91       	pop	r22
     408:	5f 91       	pop	r21
     40a:	4f 91       	pop	r20
     40c:	3f 91       	pop	r19
     40e:	2f 91       	pop	r18
     410:	0f 90       	pop	r0
     412:	0f be       	out	0x3f, r0	; 63
     414:	0f 90       	pop	r0
     416:	1f 90       	pop	r1
     418:	18 95       	reti

0000041a <__vector_9>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
     41a:	1f 92       	push	r1
     41c:	0f 92       	push	r0
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	0f 92       	push	r0
     422:	11 24       	eor	r1, r1
     424:	2f 93       	push	r18
     426:	3f 93       	push	r19
     428:	4f 93       	push	r20
     42a:	5f 93       	push	r21
     42c:	6f 93       	push	r22
     42e:	7f 93       	push	r23
     430:	8f 93       	push	r24
     432:	9f 93       	push	r25
     434:	af 93       	push	r26
     436:	bf 93       	push	r27
     438:	ef 93       	push	r30
     43a:	ff 93       	push	r31
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
     444:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <g_Timer1CallBackPtr>
     448:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <g_Timer1CallBackPtr+0x1>
     44c:	89 2b       	or	r24, r25
     44e:	31 f0       	breq	.+12     	; 0x45c <__vector_9+0x42>
		(*g_Timer1CallBackPtr)();
     450:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <g_Timer1CallBackPtr>
     454:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <g_Timer1CallBackPtr+0x1>
     458:	fc 01       	movw	r30, r24
     45a:	09 95       	icall
	}
}
     45c:	00 00       	nop
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	11 24       	eor	r1, r1
     48e:	2f 93       	push	r18
     490:	3f 93       	push	r19
     492:	4f 93       	push	r20
     494:	5f 93       	push	r21
     496:	6f 93       	push	r22
     498:	7f 93       	push	r23
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25
     49e:	af 93       	push	r26
     4a0:	bf 93       	push	r27
     4a2:	ef 93       	push	r30
     4a4:	ff 93       	push	r31
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
     4ae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <g_Timer1CallBackPtr>
     4b2:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <g_Timer1CallBackPtr+0x1>
     4b6:	89 2b       	or	r24, r25
     4b8:	31 f0       	breq	.+12     	; 0x4c6 <__vector_7+0x42>
		(*g_Timer1CallBackPtr)();
     4ba:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <g_Timer1CallBackPtr>
     4be:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <g_Timer1CallBackPtr+0x1>
     4c2:	fc 01       	movw	r30, r24
     4c4:	09 95       	icall
	}
}
     4c6:	00 00       	nop
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	ff 91       	pop	r31
     4ce:	ef 91       	pop	r30
     4d0:	bf 91       	pop	r27
     4d2:	af 91       	pop	r26
     4d4:	9f 91       	pop	r25
     4d6:	8f 91       	pop	r24
     4d8:	7f 91       	pop	r23
     4da:	6f 91       	pop	r22
     4dc:	5f 91       	pop	r21
     4de:	4f 91       	pop	r20
     4e0:	3f 91       	pop	r19
     4e2:	2f 91       	pop	r18
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <__vector_5>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	2f 93       	push	r18
     4fa:	3f 93       	push	r19
     4fc:	4f 93       	push	r20
     4fe:	5f 93       	push	r21
     500:	6f 93       	push	r22
     502:	7f 93       	push	r23
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	af 93       	push	r26
     50a:	bf 93       	push	r27
     50c:	ef 93       	push	r30
     50e:	ff 93       	push	r31
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
     518:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_Timer2CallBackPtr>
     51c:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <g_Timer2CallBackPtr+0x1>
     520:	89 2b       	or	r24, r25
     522:	31 f0       	breq	.+12     	; 0x530 <__vector_5+0x42>
		(*g_Timer2CallBackPtr)();
     524:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_Timer2CallBackPtr>
     528:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <g_Timer2CallBackPtr+0x1>
     52c:	fc 01       	movw	r30, r24
     52e:	09 95       	icall
	}
}
     530:	00 00       	nop
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	ff 91       	pop	r31
     538:	ef 91       	pop	r30
     53a:	bf 91       	pop	r27
     53c:	af 91       	pop	r26
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	7f 91       	pop	r23
     544:	6f 91       	pop	r22
     546:	5f 91       	pop	r21
     548:	4f 91       	pop	r20
     54a:	3f 91       	pop	r19
     54c:	2f 91       	pop	r18
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	0f 90       	pop	r0
     554:	1f 90       	pop	r1
     556:	18 95       	reti

00000558 <__vector_4>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
     558:	1f 92       	push	r1
     55a:	0f 92       	push	r0
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	0f 92       	push	r0
     560:	11 24       	eor	r1, r1
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	4f 93       	push	r20
     568:	5f 93       	push	r21
     56a:	6f 93       	push	r22
     56c:	7f 93       	push	r23
     56e:	8f 93       	push	r24
     570:	9f 93       	push	r25
     572:	af 93       	push	r26
     574:	bf 93       	push	r27
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
     582:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_Timer2CallBackPtr>
     586:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <g_Timer2CallBackPtr+0x1>
     58a:	89 2b       	or	r24, r25
     58c:	31 f0       	breq	.+12     	; 0x59a <__vector_4+0x42>
		(*g_Timer2CallBackPtr)();
     58e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_Timer2CallBackPtr>
     592:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <g_Timer2CallBackPtr+0x1>
     596:	fc 01       	movw	r30, r24
     598:	09 95       	icall
	}
}
     59a:	00 00       	nop
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	ff 91       	pop	r31
     5a2:	ef 91       	pop	r30
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	0f 90       	pop	r0
     5be:	1f 90       	pop	r1
     5c0:	18 95       	reti

000005c2 <Timer_init>:

/********************************************************/
/* Functions Implementation */
/********************************************************/

void Timer_init(const Timer_configuration *timer_config){
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	00 d0       	rcall	.+0      	; 0x5c8 <Timer_init+0x6>
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	9a 83       	std	Y+2, r25	; 0x02
     5ce:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	fc 01       	movw	r30, r24
     5d6:	80 81       	ld	r24, Z
     5d8:	88 23       	and	r24, r24
     5da:	09 f0       	breq	.+2      	; 0x5de <Timer_init+0x1c>
     5dc:	79 c0       	rjmp	.+242    	; 0x6d0 <Timer_init+0x10e>

		TCNT0 = timer_config->initialValue;
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	9a 81       	ldd	r25, Y+2	; 0x02
     5e2:	fc 01       	movw	r30, r24
     5e4:	22 81       	ldd	r18, Z+2	; 0x02
     5e6:	33 81       	ldd	r19, Z+3	; 0x03
     5e8:	82 e5       	ldi	r24, 0x52	; 82
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
		TCCR0 = 0;
     5f0:	83 e5       	ldi	r24, 0x53	; 83
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	fc 01       	movw	r30, r24
     5f6:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
     5f8:	83 e5       	ldi	r24, 0x53	; 83
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	fc 01       	movw	r30, r24
     5fe:	30 81       	ld	r19, Z
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	fc 01       	movw	r30, r24
     606:	26 81       	ldd	r18, Z+6	; 0x06
     608:	83 e5       	ldi	r24, 0x53	; 83
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	23 2b       	or	r18, r19
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18

		if (timer_config->mode == Normal){
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	fc 01       	movw	r30, r24
     618:	81 81       	ldd	r24, Z+1	; 0x01
     61a:	88 23       	and	r24, r24
     61c:	e1 f4       	brne	.+56     	; 0x656 <Timer_init+0x94>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
     61e:	83 e5       	ldi	r24, 0x53	; 83
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	fc 01       	movw	r30, r24
     624:	20 81       	ld	r18, Z
     626:	83 e5       	ldi	r24, 0x53	; 83
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	20 68       	ori	r18, 0x80	; 128
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
     630:	89 e5       	ldi	r24, 0x59	; 89
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	20 81       	ld	r18, Z
     638:	89 e5       	ldi	r24, 0x59	; 89
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	21 60       	ori	r18, 0x01	; 1
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
     642:	88 e5       	ldi	r24, 0x58	; 88
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	fc 01       	movw	r30, r24
     648:	20 81       	ld	r18, Z
     64a:	88 e5       	ldi	r24, 0x58	; 88
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	21 60       	ori	r18, 0x01	; 1
     650:	fc 01       	movw	r30, r24
     652:	20 83       	st	Z, r18
     654:	33 c0       	rjmp	.+102    	; 0x6bc <Timer_init+0xfa>

		}else if (timer_config->mode == CTC){
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	9a 81       	ldd	r25, Y+2	; 0x02
     65a:	fc 01       	movw	r30, r24
     65c:	81 81       	ldd	r24, Z+1	; 0x01
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	69 f5       	brne	.+90     	; 0x6bc <Timer_init+0xfa>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
     662:	83 e5       	ldi	r24, 0x53	; 83
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	fc 01       	movw	r30, r24
     668:	20 81       	ld	r18, Z
     66a:	83 e5       	ldi	r24, 0x53	; 83
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	20 68       	ori	r18, 0x80	; 128
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
			SET_BIT(TCCR0,WGM01);
     674:	83 e5       	ldi	r24, 0x53	; 83
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	fc 01       	movw	r30, r24
     67a:	20 81       	ld	r18, Z
     67c:	83 e5       	ldi	r24, 0x53	; 83
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	28 60       	ori	r18, 0x08	; 8
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
			OCR0 = timer_config->compareValue;
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	fc 01       	movw	r30, r24
     68c:	24 81       	ldd	r18, Z+4	; 0x04
     68e:	35 81       	ldd	r19, Z+5	; 0x05
     690:	8c e5       	ldi	r24, 0x5C	; 92
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
     698:	89 e5       	ldi	r24, 0x59	; 89
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	fc 01       	movw	r30, r24
     69e:	20 81       	ld	r18, Z
     6a0:	89 e5       	ldi	r24, 0x59	; 89
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	22 60       	ori	r18, 0x02	; 2
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
     6aa:	88 e5       	ldi	r24, 0x58	; 88
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 81       	ld	r18, Z
     6b2:	88 e5       	ldi	r24, 0x58	; 88
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	22 60       	ori	r18, 0x02	; 2
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	fc 01       	movw	r30, r24
     6c2:	87 81       	ldd	r24, Z+7	; 0x07
     6c4:	90 85       	ldd	r25, Z+8	; 0x08
     6c6:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x1>
     6ca:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
	}
}
     6ce:	f3 c0       	rjmp	.+486    	; 0x8b6 <__stack+0x57>
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */


	}else if (timer_config->timer_ID == Timer1){
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	fc 01       	movw	r30, r24
     6d6:	80 81       	ld	r24, Z
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	09 f0       	breq	.+2      	; 0x6de <Timer_init+0x11c>
     6dc:	76 c0       	rjmp	.+236    	; 0x7ca <Timer_init+0x208>
		TCCR1A =0;
     6de:	8f e4       	ldi	r24, 0x4F	; 79
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	fc 01       	movw	r30, r24
     6e4:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
     6e6:	8f e4       	ldi	r24, 0x4F	; 79
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 81       	ld	r18, Z
     6ee:	8f e4       	ldi	r24, 0x4F	; 79
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	28 60       	ori	r18, 0x08	; 8
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
		SET_BIT(TCCR1A,FOC1B);
     6f8:	8f e4       	ldi	r24, 0x4F	; 79
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 81       	ld	r18, Z
     700:	8f e4       	ldi	r24, 0x4F	; 79
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	24 60       	ori	r18, 0x04	; 4
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
		TCCR1B = timer_config->prescaler;
     70a:	8e e4       	ldi	r24, 0x4E	; 78
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	29 81       	ldd	r18, Y+1	; 0x01
     710:	3a 81       	ldd	r19, Y+2	; 0x02
     712:	f9 01       	movw	r30, r18
     714:	26 81       	ldd	r18, Z+6	; 0x06
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
		TCNT1 = timer_config->initialValue;
     71a:	8c e4       	ldi	r24, 0x4C	; 76
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	29 81       	ldd	r18, Y+1	; 0x01
     720:	3a 81       	ldd	r19, Y+2	; 0x02
     722:	f9 01       	movw	r30, r18
     724:	22 81       	ldd	r18, Z+2	; 0x02
     726:	33 81       	ldd	r19, Z+3	; 0x03
     728:	fc 01       	movw	r30, r24
     72a:	31 83       	std	Z+1, r19	; 0x01
     72c:	20 83       	st	Z, r18

		if (timer_config->mode == Normal) {
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	9a 81       	ldd	r25, Y+2	; 0x02
     732:	fc 01       	movw	r30, r24
     734:	81 81       	ldd	r24, Z+1	; 0x01
     736:	88 23       	and	r24, r24
     738:	99 f4       	brne	.+38     	; 0x760 <Timer_init+0x19e>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
     73a:	89 e5       	ldi	r24, 0x59	; 89
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	fc 01       	movw	r30, r24
     740:	20 81       	ld	r18, Z
     742:	89 e5       	ldi	r24, 0x59	; 89
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	24 60       	ori	r18, 0x04	; 4
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
			SET_BIT(TIFR,TOV1);
     74c:	88 e5       	ldi	r24, 0x58	; 88
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	fc 01       	movw	r30, r24
     752:	20 81       	ld	r18, Z
     754:	88 e5       	ldi	r24, 0x58	; 88
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	24 60       	ori	r18, 0x04	; 4
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
     75e:	2b c0       	rjmp	.+86     	; 0x7b6 <Timer_init+0x1f4>

		} else if (timer_config->mode == CTC) {
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	fc 01       	movw	r30, r24
     766:	81 81       	ldd	r24, Z+1	; 0x01
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	29 f5       	brne	.+74     	; 0x7b6 <Timer_init+0x1f4>
			SET_BIT(TCCR1B, WGM12);
     76c:	8e e4       	ldi	r24, 0x4E	; 78
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	20 81       	ld	r18, Z
     774:	8e e4       	ldi	r24, 0x4E	; 78
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	28 60       	ori	r18, 0x08	; 8
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
			OCR1A = timer_config->compareValue;
     77e:	8a e4       	ldi	r24, 0x4A	; 74
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	29 81       	ldd	r18, Y+1	; 0x01
     784:	3a 81       	ldd	r19, Y+2	; 0x02
     786:	f9 01       	movw	r30, r18
     788:	24 81       	ldd	r18, Z+4	; 0x04
     78a:	35 81       	ldd	r19, Z+5	; 0x05
     78c:	fc 01       	movw	r30, r24
     78e:	31 83       	std	Z+1, r19	; 0x01
     790:	20 83       	st	Z, r18
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
     792:	89 e5       	ldi	r24, 0x59	; 89
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	fc 01       	movw	r30, r24
     798:	20 81       	ld	r18, Z
     79a:	89 e5       	ldi	r24, 0x59	; 89
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	20 61       	ori	r18, 0x10	; 16
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
     7a4:	88 e5       	ldi	r24, 0x58	; 88
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 81       	ld	r18, Z
     7ac:	88 e5       	ldi	r24, 0x58	; 88
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	20 61       	ori	r18, 0x10	; 16
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	fc 01       	movw	r30, r24
     7bc:	87 81       	ldd	r24, Z+7	; 0x07
     7be:	90 85       	ldd	r25, Z+8	; 0x08
     7c0:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <g_Timer1CallBackPtr+0x1>
     7c4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <g_Timer1CallBackPtr>
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
	}
}
     7c8:	76 c0       	rjmp	.+236    	; 0x8b6 <__stack+0x57>
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;


	}else if (timer_config->timer_ID == Timer2){
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	9a 81       	ldd	r25, Y+2	; 0x02
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <Timer_init+0x216>
     7d6:	6f c0       	rjmp	.+222    	; 0x8b6 <__stack+0x57>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
     7d8:	85 e4       	ldi	r24, 0x45	; 69
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	20 81       	ld	r18, Z
     7e0:	85 e4       	ldi	r24, 0x45	; 69
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	20 68       	ori	r18, 0x80	; 128
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
		TCNT2 = timer_config->initialValue;
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	22 81       	ldd	r18, Z+2	; 0x02
     7f2:	33 81       	ldd	r19, Z+3	; 0x03
     7f4:	84 e4       	ldi	r24, 0x44	; 68
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
		TCCR2 = 0;
     7fc:	85 e4       	ldi	r24, 0x45	; 69
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	fc 01       	movw	r30, r24
     802:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
     804:	85 e4       	ldi	r24, 0x45	; 69
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	30 81       	ld	r19, Z
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	fc 01       	movw	r30, r24
     812:	26 81       	ldd	r18, Z+6	; 0x06
     814:	85 e4       	ldi	r24, 0x45	; 69
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	23 2b       	or	r18, r19
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18

		if (timer_config->mode == Normal) {
     81e:	89 81       	ldd	r24, Y+1	; 0x01
     820:	9a 81       	ldd	r25, Y+2	; 0x02
     822:	fc 01       	movw	r30, r24
     824:	81 81       	ldd	r24, Z+1	; 0x01
     826:	88 23       	and	r24, r24
     828:	99 f4       	brne	.+38     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
     82a:	89 e5       	ldi	r24, 0x59	; 89
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	fc 01       	movw	r30, r24
     830:	20 81       	ld	r18, Z
     832:	89 e5       	ldi	r24, 0x59	; 89
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	20 64       	ori	r18, 0x40	; 64
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
     83c:	88 e5       	ldi	r24, 0x58	; 88
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	fc 01       	movw	r30, r24
     842:	20 81       	ld	r18, Z
     844:	88 e5       	ldi	r24, 0x58	; 88
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	20 64       	ori	r18, 0x40	; 64
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
     84e:	2a c0       	rjmp	.+84     	; 0x8a4 <__stack+0x45>

		} else if (timer_config->mode == CTC) {
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	fc 01       	movw	r30, r24
     856:	81 81       	ldd	r24, Z+1	; 0x01
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	21 f5       	brne	.+72     	; 0x8a4 <__stack+0x45>
			SET_BIT(TCCR0, WGM21);
     85c:	83 e5       	ldi	r24, 0x53	; 83
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	fc 01       	movw	r30, r24
     862:	20 81       	ld	r18, Z
     864:	83 e5       	ldi	r24, 0x53	; 83
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	28 60       	ori	r18, 0x08	; 8
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
			OCR2 = timer_config->compareValue;
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	9a 81       	ldd	r25, Y+2	; 0x02
     872:	fc 01       	movw	r30, r24
     874:	24 81       	ldd	r18, Z+4	; 0x04
     876:	35 81       	ldd	r19, Z+5	; 0x05
     878:	83 e4       	ldi	r24, 0x43	; 67
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
     880:	89 e5       	ldi	r24, 0x59	; 89
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	fc 01       	movw	r30, r24
     886:	20 81       	ld	r18, Z
     888:	89 e5       	ldi	r24, 0x59	; 89
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	20 68       	ori	r18, 0x80	; 128
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
     892:	88 e5       	ldi	r24, 0x58	; 88
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	fc 01       	movw	r30, r24
     898:	20 81       	ld	r18, Z
     89a:	88 e5       	ldi	r24, 0x58	; 88
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	20 68       	ori	r18, 0x80	; 128
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	9a 81       	ldd	r25, Y+2	; 0x02
     8a8:	fc 01       	movw	r30, r24
     8aa:	87 81       	ldd	r24, Z+7	; 0x07
     8ac:	90 85       	ldd	r25, Z+8	; 0x08
     8ae:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <g_Timer2CallBackPtr+0x1>
     8b2:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <g_Timer2CallBackPtr>
	}
}
     8b6:	00 00       	nop
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	1f 92       	push	r1
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	88 23       	and	r24, r24
     8d2:	19 f5       	brne	.+70     	; 0x91a <Timer_deInit+0x58>
		TCCR0 = 0;
     8d4:	83 e5       	ldi	r24, 0x53	; 83
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	fc 01       	movw	r30, r24
     8da:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
     8dc:	82 e5       	ldi	r24, 0x52	; 82
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	fc 01       	movw	r30, r24
     8e2:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
     8e4:	8c e5       	ldi	r24, 0x5C	; 92
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
     8ec:	89 e5       	ldi	r24, 0x59	; 89
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 81       	ld	r18, Z
     8f4:	89 e5       	ldi	r24, 0x59	; 89
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	2d 7f       	andi	r18, 0xFD	; 253
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
     8fe:	89 e5       	ldi	r24, 0x59	; 89
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	fc 01       	movw	r30, r24
     904:	20 81       	ld	r18, Z
     906:	89 e5       	ldi	r24, 0x59	; 89
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	2e 7f       	andi	r18, 0xFE	; 254
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
     910:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <__data_end+0x1>
     914:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <__data_end>
		OCR2 = 0; /* clear compare value for CTC mode*/
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
		g_Timer2CallBackPtr = NULL_PTR;
	}
}
     918:	51 c0       	rjmp	.+162    	; 0x9bc <Timer_deInit+0xfa>
		OCR0 = 0; /* clear compare value for CTC mode*/
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */

	}else if (timer_ID == Timer1){
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	49 f5       	brne	.+82     	; 0x972 <Timer_deInit+0xb0>
		TCCR1A =0;
     920:	8f e4       	ldi	r24, 0x4F	; 79
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	fc 01       	movw	r30, r24
     926:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
     928:	8e e4       	ldi	r24, 0x4E	; 78
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	10 82       	st	Z, r1
		TCNT1 = 0;
     930:	8c e4       	ldi	r24, 0x4C	; 76
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	fc 01       	movw	r30, r24
     936:	11 82       	std	Z+1, r1	; 0x01
     938:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
     93a:	89 e5       	ldi	r24, 0x59	; 89
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	fc 01       	movw	r30, r24
     940:	20 81       	ld	r18, Z
     942:	89 e5       	ldi	r24, 0x59	; 89
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	2b 7f       	andi	r18, 0xFB	; 251
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
		OCR1A = 0;  /* clear compare value for CTC mode */
     94c:	8a e4       	ldi	r24, 0x4A	; 74
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	fc 01       	movw	r30, r24
     952:	11 82       	std	Z+1, r1	; 0x01
     954:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
     956:	89 e5       	ldi	r24, 0x59	; 89
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	fc 01       	movw	r30, r24
     95c:	20 81       	ld	r18, Z
     95e:	89 e5       	ldi	r24, 0x59	; 89
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	2f 7e       	andi	r18, 0xEF	; 239
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
		g_Timer1CallBackPtr = NULL_PTR;
     968:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <g_Timer1CallBackPtr+0x1>
     96c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <g_Timer1CallBackPtr>
		OCR2 = 0; /* clear compare value for CTC mode*/
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
		g_Timer2CallBackPtr = NULL_PTR;
	}
}
     970:	25 c0       	rjmp	.+74     	; 0x9bc <Timer_deInit+0xfa>
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
		OCR1A = 0;  /* clear compare value for CTC mode */
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
		g_Timer1CallBackPtr = NULL_PTR;

	}else if (timer_ID == Timer2){
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	11 f5       	brne	.+68     	; 0x9bc <Timer_deInit+0xfa>
		TCCR2 = 0;
     978:	85 e4       	ldi	r24, 0x45	; 69
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	fc 01       	movw	r30, r24
     97e:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
     980:	84 e4       	ldi	r24, 0x44	; 68
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
     988:	83 e4       	ldi	r24, 0x43	; 67
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
     990:	89 e5       	ldi	r24, 0x59	; 89
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	20 81       	ld	r18, Z
     998:	89 e5       	ldi	r24, 0x59	; 89
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	2f 77       	andi	r18, 0x7F	; 127
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
     9a2:	89 e5       	ldi	r24, 0x59	; 89
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 81       	ld	r18, Z
     9aa:	89 e5       	ldi	r24, 0x59	; 89
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	2f 7b       	andi	r18, 0xBF	; 191
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
		g_Timer2CallBackPtr = NULL_PTR;
     9b4:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <g_Timer2CallBackPtr+0x1>
     9b8:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <g_Timer2CallBackPtr>
	}
}
     9bc:	00 00       	nop
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <DIO_setupPinDirection>:
 *      Author: MR.MAHMOUD
 */

#include"dio.h"
#include "../../CommonDef/common_macros.h"
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number, uint8 direction){
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <DIO_setupPinDirection+0x6>
     9cc:	1f 92       	push	r1
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	6a 83       	std	Y+2, r22	; 0x02
     9d6:	4b 83       	std	Y+3, r20	; 0x03
/*
 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	88 30       	cpi	r24, 0x08	; 8
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <DIO_setupPinDirection+0x1a>
     9de:	d9 c0       	rjmp	.+434    	; 0xb92 <DIO_setupPinDirection+0x1cc>
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <DIO_setupPinDirection+0x22>
     9e6:	d5 c0       	rjmp	.+426    	; 0xb92 <DIO_setupPinDirection+0x1cc>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	91 05       	cpc	r25, r1
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <DIO_setupPinDirection+0x30>
     9f4:	3e c0       	rjmp	.+124    	; 0xa72 <DIO_setupPinDirection+0xac>
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	91 05       	cpc	r25, r1
     9fa:	1c f4       	brge	.+6      	; 0xa02 <DIO_setupPinDirection+0x3c>
     9fc:	89 2b       	or	r24, r25
     9fe:	49 f0       	breq	.+18     	; 0xa12 <DIO_setupPinDirection+0x4c>
			}
			break;
		}
	}

}
     a00:	c8 c0       	rjmp	.+400    	; 0xb92 <DIO_setupPinDirection+0x1cc>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	91 05       	cpc	r25, r1
     a06:	09 f4       	brne	.+2      	; 0xa0a <DIO_setupPinDirection+0x44>
     a08:	64 c0       	rjmp	.+200    	; 0xad2 <DIO_setupPinDirection+0x10c>
     a0a:	03 97       	sbiw	r24, 0x03	; 3
     a0c:	09 f4       	brne	.+2      	; 0xa10 <DIO_setupPinDirection+0x4a>
     a0e:	91 c0       	rjmp	.+290    	; 0xb32 <DIO_setupPinDirection+0x16c>
			}
			break;
		}
	}

}
     a10:	c0 c0       	rjmp	.+384    	; 0xb92 <DIO_setupPinDirection+0x1cc>
	{
		/* Setup the pin direction*/
		switch (port_number)
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	b1 f4       	brne	.+44     	; 0xa44 <DIO_setupPinDirection+0x7e>
			{
				SET_BIT(DDRA, pin_number);
     a18:	8a e3       	ldi	r24, 0x3A	; 58
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	48 2f       	mov	r20, r24
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	28 2f       	mov	r18, r24
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <DIO_setupPinDirection+0x6c>
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	2a 95       	dec	r18
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <DIO_setupPinDirection+0x68>
     a36:	24 2f       	mov	r18, r20
     a38:	28 2b       	or	r18, r24
     a3a:	8a e3       	ldi	r24, 0x3A	; 58
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
			}
			break;
     a42:	a7 c0       	rjmp	.+334    	; 0xb92 <DIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRA, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
     a44:	8a e3       	ldi	r24, 0x3A	; 58
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	fc 01       	movw	r30, r24
     a4a:	80 81       	ld	r24, Z
     a4c:	48 2f       	mov	r20, r24
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	28 2f       	mov	r18, r24
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_setupPinDirection+0x98>
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	2a 95       	dec	r18
     a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_setupPinDirection+0x94>
     a62:	80 95       	com	r24
     a64:	24 2f       	mov	r18, r20
     a66:	28 23       	and	r18, r24
     a68:	8a e3       	ldi	r24, 0x3A	; 58
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18
			}
			break;
     a70:	90 c0       	rjmp	.+288    	; 0xb92 <DIO_setupPinDirection+0x1cc>
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	b1 f4       	brne	.+44     	; 0xaa4 <DIO_setupPinDirection+0xde>
			{
				SET_BIT(DDRB, pin_number);
     a78:	87 e3       	ldi	r24, 0x37	; 55
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fc 01       	movw	r30, r24
     a7e:	80 81       	ld	r24, Z
     a80:	48 2f       	mov	r20, r24
     a82:	8a 81       	ldd	r24, Y+2	; 0x02
     a84:	28 2f       	mov	r18, r24
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <DIO_setupPinDirection+0xcc>
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	2a 95       	dec	r18
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <DIO_setupPinDirection+0xc8>
     a96:	24 2f       	mov	r18, r20
     a98:	28 2b       	or	r18, r24
     a9a:	87 e3       	ldi	r24, 0x37	; 55
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
			}
			break;
     aa2:	77 c0       	rjmp	.+238    	; 0xb92 <DIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRB, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
     aa4:	87 e3       	ldi	r24, 0x37	; 55
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	80 81       	ld	r24, Z
     aac:	48 2f       	mov	r20, r24
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <DIO_setupPinDirection+0xf8>
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	2a 95       	dec	r18
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <DIO_setupPinDirection+0xf4>
     ac2:	80 95       	com	r24
     ac4:	24 2f       	mov	r18, r20
     ac6:	28 23       	and	r18, r24
     ac8:	87 e3       	ldi	r24, 0x37	; 55
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	fc 01       	movw	r30, r24
     ace:	20 83       	st	Z, r18
			}
			break;
     ad0:	60 c0       	rjmp	.+192    	; 0xb92 <DIO_setupPinDirection+0x1cc>
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	b1 f4       	brne	.+44     	; 0xb04 <DIO_setupPinDirection+0x13e>
			{
				SET_BIT(DDRC, pin_number);
     ad8:	84 e3       	ldi	r24, 0x34	; 52
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	fc 01       	movw	r30, r24
     ade:	80 81       	ld	r24, Z
     ae0:	48 2f       	mov	r20, r24
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	28 2f       	mov	r18, r24
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <DIO_setupPinDirection+0x12c>
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	2a 95       	dec	r18
     af4:	e2 f7       	brpl	.-8      	; 0xaee <DIO_setupPinDirection+0x128>
     af6:	24 2f       	mov	r18, r20
     af8:	28 2b       	or	r18, r24
     afa:	84 e3       	ldi	r24, 0x34	; 52
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
			}
			break;
     b02:	47 c0       	rjmp	.+142    	; 0xb92 <DIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRC, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
     b04:	84 e3       	ldi	r24, 0x34	; 52
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	fc 01       	movw	r30, r24
     b0a:	80 81       	ld	r24, Z
     b0c:	48 2f       	mov	r20, r24
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	28 2f       	mov	r18, r24
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <DIO_setupPinDirection+0x158>
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	2a 95       	dec	r18
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <DIO_setupPinDirection+0x154>
     b22:	80 95       	com	r24
     b24:	24 2f       	mov	r18, r20
     b26:	28 23       	and	r18, r24
     b28:	84 e3       	ldi	r24, 0x34	; 52
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
			}
			break;
     b30:	30 c0       	rjmp	.+96     	; 0xb92 <DIO_setupPinDirection+0x1cc>
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	b1 f4       	brne	.+44     	; 0xb64 <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD, pin_number);
     b38:	81 e3       	ldi	r24, 0x31	; 49
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	fc 01       	movw	r30, r24
     b3e:	80 81       	ld	r24, Z
     b40:	48 2f       	mov	r20, r24
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	28 2f       	mov	r18, r24
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <DIO_setupPinDirection+0x18c>
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	2a 95       	dec	r18
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <DIO_setupPinDirection+0x188>
     b56:	24 2f       	mov	r18, r20
     b58:	28 2b       	or	r18, r24
     b5a:	81 e3       	ldi	r24, 0x31	; 49
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
			}
			break;
     b62:	16 c0       	rjmp	.+44     	; 0xb90 <DIO_setupPinDirection+0x1ca>
			{
				SET_BIT(DDRD, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
     b64:	81 e3       	ldi	r24, 0x31	; 49
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	fc 01       	movw	r30, r24
     b6a:	80 81       	ld	r24, Z
     b6c:	48 2f       	mov	r20, r24
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	28 2f       	mov	r18, r24
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <DIO_setupPinDirection+0x1b8>
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	2a 95       	dec	r18
     b80:	e2 f7       	brpl	.-8      	; 0xb7a <DIO_setupPinDirection+0x1b4>
     b82:	80 95       	com	r24
     b84:	24 2f       	mov	r18, r20
     b86:	28 23       	and	r18, r24
     b88:	81 e3       	ldi	r24, 0x31	; 49
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 83       	st	Z, r18
			}
			break;
     b90:	00 00       	nop
		}
	}

}
     b92:	00 00       	nop
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <DIO_writePin>:
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value){
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <DIO_writePin+0x6>
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	6a 83       	std	Y+2, r22	; 0x02
     bb0:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	88 30       	cpi	r24, 0x08	; 8
     bb6:	08 f0       	brcs	.+2      	; 0xbba <DIO_writePin+0x1a>
     bb8:	d9 c0       	rjmp	.+434    	; 0xd6c <DIO_writePin+0x1cc>
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	08 f0       	brcs	.+2      	; 0xbc2 <DIO_writePin+0x22>
     bc0:	d5 c0       	rjmp	.+426    	; 0xd6c <DIO_writePin+0x1cc>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	91 05       	cpc	r25, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <DIO_writePin+0x30>
     bce:	3e c0       	rjmp	.+124    	; 0xc4c <DIO_writePin+0xac>
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	91 05       	cpc	r25, r1
     bd4:	1c f4       	brge	.+6      	; 0xbdc <DIO_writePin+0x3c>
     bd6:	89 2b       	or	r24, r25
     bd8:	49 f0       	breq	.+18     	; 0xbec <DIO_writePin+0x4c>
				CLEAR_BIT(PORTD, pin_number);
			}
			break;
		}
	}
}
     bda:	c8 c0       	rjmp	.+400    	; 0xd6c <DIO_writePin+0x1cc>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	91 05       	cpc	r25, r1
     be0:	09 f4       	brne	.+2      	; 0xbe4 <DIO_writePin+0x44>
     be2:	64 c0       	rjmp	.+200    	; 0xcac <DIO_writePin+0x10c>
     be4:	03 97       	sbiw	r24, 0x03	; 3
     be6:	09 f4       	brne	.+2      	; 0xbea <DIO_writePin+0x4a>
     be8:	91 c0       	rjmp	.+290    	; 0xd0c <DIO_writePin+0x16c>
				CLEAR_BIT(PORTD, pin_number);
			}
			break;
		}
	}
}
     bea:	c0 c0       	rjmp	.+384    	; 0xd6c <DIO_writePin+0x1cc>
	{
		/* Write the pin value*/
		switch (port_number)
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	b1 f4       	brne	.+44     	; 0xc1e <DIO_writePin+0x7e>
			{
				SET_BIT(PORTA, pin_number);
     bf2:	8b e3       	ldi	r24, 0x3B	; 59
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	fc 01       	movw	r30, r24
     bf8:	80 81       	ld	r24, Z
     bfa:	48 2f       	mov	r20, r24
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_writePin+0x6c>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	2a 95       	dec	r18
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_writePin+0x68>
     c10:	24 2f       	mov	r18, r20
     c12:	28 2b       	or	r18, r24
     c14:	8b e3       	ldi	r24, 0x3B	; 59
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
			}
			break;
     c1c:	a7 c0       	rjmp	.+334    	; 0xd6c <DIO_writePin+0x1cc>
			{
				SET_BIT(PORTA, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
     c1e:	8b e3       	ldi	r24, 0x3B	; 59
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_writePin+0x98>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	2a 95       	dec	r18
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_writePin+0x94>
     c3c:	80 95       	com	r24
     c3e:	24 2f       	mov	r18, r20
     c40:	28 23       	and	r18, r24
     c42:	8b e3       	ldi	r24, 0x3B	; 59
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	fc 01       	movw	r30, r24
     c48:	20 83       	st	Z, r18
			}
			break;
     c4a:	90 c0       	rjmp	.+288    	; 0xd6c <DIO_writePin+0x1cc>
		case PORTB_ID:
			if (value == LOGIC_HIGH)
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	b1 f4       	brne	.+44     	; 0xc7e <DIO_writePin+0xde>
			{
				SET_BIT(PORTB, pin_number);
     c52:	88 e3       	ldi	r24, 0x38	; 56
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	80 81       	ld	r24, Z
     c5a:	48 2f       	mov	r20, r24
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_writePin+0xcc>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	2a 95       	dec	r18
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_writePin+0xc8>
     c70:	24 2f       	mov	r18, r20
     c72:	28 2b       	or	r18, r24
     c74:	88 e3       	ldi	r24, 0x38	; 56
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
			}
			break;
     c7c:	77 c0       	rjmp	.+238    	; 0xd6c <DIO_writePin+0x1cc>
			{
				SET_BIT(PORTB, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
     c7e:	88 e3       	ldi	r24, 0x38	; 56
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_writePin+0xf8>
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	2a 95       	dec	r18
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_writePin+0xf4>
     c9c:	80 95       	com	r24
     c9e:	24 2f       	mov	r18, r20
     ca0:	28 23       	and	r18, r24
     ca2:	88 e3       	ldi	r24, 0x38	; 56
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
			}
			break;
     caa:	60 c0       	rjmp	.+192    	; 0xd6c <DIO_writePin+0x1cc>
		case PORTC_ID:
			if (value == LOGIC_HIGH)
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	b1 f4       	brne	.+44     	; 0xcde <DIO_writePin+0x13e>
			{
				SET_BIT(PORTC, pin_number);
     cb2:	85 e3       	ldi	r24, 0x35	; 53
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	fc 01       	movw	r30, r24
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_writePin+0x12c>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	2a 95       	dec	r18
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_writePin+0x128>
     cd0:	24 2f       	mov	r18, r20
     cd2:	28 2b       	or	r18, r24
     cd4:	85 e3       	ldi	r24, 0x35	; 53
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
			}
			break;
     cdc:	47 c0       	rjmp	.+142    	; 0xd6c <DIO_writePin+0x1cc>
			{
				SET_BIT(PORTC, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
     cde:	85 e3       	ldi	r24, 0x35	; 53
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fc 01       	movw	r30, r24
     ce4:	80 81       	ld	r24, Z
     ce6:	48 2f       	mov	r20, r24
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_writePin+0x158>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	2a 95       	dec	r18
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_writePin+0x154>
     cfc:	80 95       	com	r24
     cfe:	24 2f       	mov	r18, r20
     d00:	28 23       	and	r18, r24
     d02:	85 e3       	ldi	r24, 0x35	; 53
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
			}
			break;
     d0a:	30 c0       	rjmp	.+96     	; 0xd6c <DIO_writePin+0x1cc>
		case PORTD_ID:
			if (value == LOGIC_HIGH)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	b1 f4       	brne	.+44     	; 0xd3e <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_number);
     d12:	82 e3       	ldi	r24, 0x32	; 50
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	fc 01       	movw	r30, r24
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_writePin+0x18c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	2a 95       	dec	r18
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_writePin+0x188>
     d30:	24 2f       	mov	r18, r20
     d32:	28 2b       	or	r18, r24
     d34:	82 e3       	ldi	r24, 0x32	; 50
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
			}
			break;
     d3c:	16 c0       	rjmp	.+44     	; 0xd6a <DIO_writePin+0x1ca>
			{
				SET_BIT(PORTD, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
     d3e:	82 e3       	ldi	r24, 0x32	; 50
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_writePin+0x1b8>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	2a 95       	dec	r18
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_writePin+0x1b4>
     d5c:	80 95       	com	r24
     d5e:	24 2f       	mov	r18, r20
     d60:	28 23       	and	r18, r24
     d62:	82 e3       	ldi	r24, 0x32	; 50
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
			}
			break;
     d6a:	00 00       	nop
		}
	}
}
     d6c:	00 00       	nop
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <DIO_readPin>:
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_readPin+0x6>
     d80:	1f 92       	push	r1
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     d8a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	88 30       	cpi	r24, 0x08	; 8
     d90:	08 f0       	brcs	.+2      	; 0xd94 <DIO_readPin+0x1a>
     d92:	73 c0       	rjmp	.+230    	; 0xe7a <DIO_readPin+0x100>
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	08 f0       	brcs	.+2      	; 0xd9c <DIO_readPin+0x22>
     d9a:	6f c0       	rjmp	.+222    	; 0xe7a <DIO_readPin+0x100>
	
	}
	else
	{
		/* Read the pin value*/
		switch (port_number)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	21 f1       	breq	.+72     	; 0xdf0 <DIO_readPin+0x76>
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	91 05       	cpc	r25, r1
     dac:	1c f4       	brge	.+6      	; 0xdb4 <DIO_readPin+0x3a>
     dae:	89 2b       	or	r24, r25
     db0:	41 f0       	breq	.+16     	; 0xdc2 <DIO_readPin+0x48>
     db2:	63 c0       	rjmp	.+198    	; 0xe7a <DIO_readPin+0x100>
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	91 05       	cpc	r25, r1
     db8:	91 f1       	breq	.+100    	; 0xe1e <DIO_readPin+0xa4>
     dba:	03 97       	sbiw	r24, 0x03	; 3
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <DIO_readPin+0x46>
     dbe:	46 c0       	rjmp	.+140    	; 0xe4c <DIO_readPin+0xd2>
     dc0:	5c c0       	rjmp	.+184    	; 0xe7a <DIO_readPin+0x100>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_number))
     dc2:	89 e3       	ldi	r24, 0x39	; 57
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	fc 01       	movw	r30, r24
     dc8:	80 81       	ld	r24, Z
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	2b 81       	ldd	r18, Y+3	; 0x03
     dd0:	22 2f       	mov	r18, r18
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_readPin+0x60>
     dd6:	95 95       	asr	r25
     dd8:	87 95       	ror	r24
     dda:	2a 95       	dec	r18
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_readPin+0x5c>
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	99 27       	eor	r25, r25
     de2:	89 2b       	or	r24, r25
     de4:	19 f0       	breq	.+6      	; 0xdec <DIO_readPin+0x72>
			{
				pin_value = LOGIC_HIGH;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     dea:	47 c0       	rjmp	.+142    	; 0xe7a <DIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     dec:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     dee:	45 c0       	rjmp	.+138    	; 0xe7a <DIO_readPin+0x100>
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_number))
     df0:	86 e3       	ldi	r24, 0x36	; 54
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	fc 01       	movw	r30, r24
     df6:	80 81       	ld	r24, Z
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	2b 81       	ldd	r18, Y+3	; 0x03
     dfe:	22 2f       	mov	r18, r18
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_readPin+0x8e>
     e04:	95 95       	asr	r25
     e06:	87 95       	ror	r24
     e08:	2a 95       	dec	r18
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_readPin+0x8a>
     e0c:	81 70       	andi	r24, 0x01	; 1
     e0e:	99 27       	eor	r25, r25
     e10:	89 2b       	or	r24, r25
     e12:	19 f0       	breq	.+6      	; 0xe1a <DIO_readPin+0xa0>
			{
				pin_value = LOGIC_HIGH;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     e18:	30 c0       	rjmp	.+96     	; 0xe7a <DIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     e1a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     e1c:	2e c0       	rjmp	.+92     	; 0xe7a <DIO_readPin+0x100>
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_number))
     e1e:	83 e3       	ldi	r24, 0x33	; 51
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	fc 01       	movw	r30, r24
     e24:	80 81       	ld	r24, Z
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	2b 81       	ldd	r18, Y+3	; 0x03
     e2c:	22 2f       	mov	r18, r18
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_readPin+0xbc>
     e32:	95 95       	asr	r25
     e34:	87 95       	ror	r24
     e36:	2a 95       	dec	r18
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_readPin+0xb8>
     e3a:	81 70       	andi	r24, 0x01	; 1
     e3c:	99 27       	eor	r25, r25
     e3e:	89 2b       	or	r24, r25
     e40:	19 f0       	breq	.+6      	; 0xe48 <DIO_readPin+0xce>
			{
				pin_value = LOGIC_HIGH;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     e46:	19 c0       	rjmp	.+50     	; 0xe7a <DIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     e48:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     e4a:	17 c0       	rjmp	.+46     	; 0xe7a <DIO_readPin+0x100>
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_number))
     e4c:	80 e3       	ldi	r24, 0x30	; 48
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	88 2f       	mov	r24, r24
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	22 2f       	mov	r18, r18
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_readPin+0xea>
     e60:	95 95       	asr	r25
     e62:	87 95       	ror	r24
     e64:	2a 95       	dec	r18
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_readPin+0xe6>
     e68:	81 70       	andi	r24, 0x01	; 1
     e6a:	99 27       	eor	r25, r25
     e6c:	89 2b       	or	r24, r25
     e6e:	19 f0       	breq	.+6      	; 0xe76 <DIO_readPin+0xfc>
			{
				pin_value = LOGIC_HIGH;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <DIO_readPin+0xfe>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     e76:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     e78:	00 00       	nop
		}
	}

	return pin_value;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <DIO_setupPortDirection>:
void DIO_setupPortDirection(uint8 port_number, GPIO_PortDirectionType direction)
{
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <DIO_setupPortDirection+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_number >= NUM_OF_PORTS)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	50 f5       	brcc	.+84     	; 0xef0 <DIO_setupPortDirection+0x68>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	91 f0       	breq	.+36     	; 0xecc <DIO_setupPortDirection+0x44>
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	91 05       	cpc	r25, r1
     eac:	1c f4       	brge	.+6      	; 0xeb4 <DIO_setupPortDirection+0x2c>
     eae:	89 2b       	or	r24, r25
     eb0:	39 f0       	breq	.+14     	; 0xec0 <DIO_setupPortDirection+0x38>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     eb2:	1e c0       	rjmp	.+60     	; 0xef0 <DIO_setupPortDirection+0x68>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	91 05       	cpc	r25, r1
     eb8:	79 f0       	breq	.+30     	; 0xed8 <DIO_setupPortDirection+0x50>
     eba:	03 97       	sbiw	r24, 0x03	; 3
     ebc:	99 f0       	breq	.+38     	; 0xee4 <DIO_setupPortDirection+0x5c>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     ebe:	18 c0       	rjmp	.+48     	; 0xef0 <DIO_setupPortDirection+0x68>
	{
		/* Setup the port direction*/
		switch (port_number)
		{
		case PORTA_ID:
			DDRA = direction;
     ec0:	8a e3       	ldi	r24, 0x3A	; 58
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	2a 81       	ldd	r18, Y+2	; 0x02
     ec6:	fc 01       	movw	r30, r24
     ec8:	20 83       	st	Z, r18
			break;
     eca:	12 c0       	rjmp	.+36     	; 0xef0 <DIO_setupPortDirection+0x68>
		case PORTB_ID:
			DDRB = direction;
     ecc:	87 e3       	ldi	r24, 0x37	; 55
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	2a 81       	ldd	r18, Y+2	; 0x02
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18
			break;
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <DIO_setupPortDirection+0x68>
		case PORTC_ID:
			DDRC = direction;
     ed8:	84 e3       	ldi	r24, 0x34	; 52
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2a 81       	ldd	r18, Y+2	; 0x02
     ede:	fc 01       	movw	r30, r24
     ee0:	20 83       	st	Z, r18
			break;
     ee2:	06 c0       	rjmp	.+12     	; 0xef0 <DIO_setupPortDirection+0x68>
		case PORTD_ID:
			DDRD = direction;
     ee4:	81 e3       	ldi	r24, 0x31	; 49
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	2a 81       	ldd	r18, Y+2	; 0x02
     eea:	fc 01       	movw	r30, r24
     eec:	20 83       	st	Z, r18
			break;
     eee:	00 00       	nop
		}
	}
}
     ef0:	00 00       	nop
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_number, uint8 value)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	00 d0       	rcall	.+0      	; 0xf02 <DIO_writePort+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	50 f5       	brcc	.+84     	; 0xf64 <DIO_writePort+0x68>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	91 f0       	breq	.+36     	; 0xf40 <DIO_writePort+0x44>
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	91 05       	cpc	r25, r1
     f20:	1c f4       	brge	.+6      	; 0xf28 <DIO_writePort+0x2c>
     f22:	89 2b       	or	r24, r25
     f24:	39 f0       	breq	.+14     	; 0xf34 <DIO_writePort+0x38>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     f26:	1e c0       	rjmp	.+60     	; 0xf64 <DIO_writePort+0x68>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	91 05       	cpc	r25, r1
     f2c:	79 f0       	breq	.+30     	; 0xf4c <DIO_writePort+0x50>
     f2e:	03 97       	sbiw	r24, 0x03	; 3
     f30:	99 f0       	breq	.+38     	; 0xf58 <DIO_writePort+0x5c>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     f32:	18 c0       	rjmp	.+48     	; 0xf64 <DIO_writePort+0x68>
	{
		/* Write the port value*/
		switch (port_number)
		{
		case PORTA_ID:
			PORTA = value;
     f34:	8b e3       	ldi	r24, 0x3B	; 59
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	2a 81       	ldd	r18, Y+2	; 0x02
     f3a:	fc 01       	movw	r30, r24
     f3c:	20 83       	st	Z, r18
			break;
     f3e:	12 c0       	rjmp	.+36     	; 0xf64 <DIO_writePort+0x68>
		case PORTB_ID:
			PORTB = value;
     f40:	88 e3       	ldi	r24, 0x38	; 56
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	2a 81       	ldd	r18, Y+2	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
			break;
     f4a:	0c c0       	rjmp	.+24     	; 0xf64 <DIO_writePort+0x68>
		case PORTC_ID:
			PORTC = value;
     f4c:	85 e3       	ldi	r24, 0x35	; 53
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	2a 81       	ldd	r18, Y+2	; 0x02
     f52:	fc 01       	movw	r30, r24
     f54:	20 83       	st	Z, r18
			break;
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <DIO_writePort+0x68>
		case PORTD_ID:
			PORTD = value;
     f58:	82 e3       	ldi	r24, 0x32	; 50
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	2a 81       	ldd	r18, Y+2	; 0x02
     f5e:	fc 01       	movw	r30, r24
     f60:	20 83       	st	Z, r18
			break;
     f62:	00 00       	nop
		}
	}
}
     f64:	00 00       	nop
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_number)
{
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_readPort+0x6>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     f7c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	50 f5       	brcc	.+84     	; 0xfd8 <DIO_readPort+0x68>
		
	}
	else
	{
		/* Read the port value*/
		switch (port_number)
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	91 05       	cpc	r25, r1
     f8e:	91 f0       	breq	.+36     	; 0xfb4 <DIO_readPort+0x44>
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	91 05       	cpc	r25, r1
     f94:	1c f4       	brge	.+6      	; 0xf9c <DIO_readPort+0x2c>
     f96:	89 2b       	or	r24, r25
     f98:	39 f0       	breq	.+14     	; 0xfa8 <DIO_readPort+0x38>
     f9a:	1e c0       	rjmp	.+60     	; 0xfd8 <DIO_readPort+0x68>
     f9c:	82 30       	cpi	r24, 0x02	; 2
     f9e:	91 05       	cpc	r25, r1
     fa0:	79 f0       	breq	.+30     	; 0xfc0 <DIO_readPort+0x50>
     fa2:	03 97       	sbiw	r24, 0x03	; 3
     fa4:	99 f0       	breq	.+38     	; 0xfcc <DIO_readPort+0x5c>
     fa6:	18 c0       	rjmp	.+48     	; 0xfd8 <DIO_readPort+0x68>
		{
		case PORTA_ID:
			value = PINA;
     fa8:	89 e3       	ldi	r24, 0x39	; 57
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	89 83       	std	Y+1, r24	; 0x01
			break;
     fb2:	12 c0       	rjmp	.+36     	; 0xfd8 <DIO_readPort+0x68>
		case PORTB_ID:
			value = PINB;
     fb4:	86 e3       	ldi	r24, 0x36	; 54
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	fc 01       	movw	r30, r24
     fba:	80 81       	ld	r24, Z
     fbc:	89 83       	std	Y+1, r24	; 0x01
			break;
     fbe:	0c c0       	rjmp	.+24     	; 0xfd8 <DIO_readPort+0x68>
		case PORTC_ID:
			value = PINC;
     fc0:	83 e3       	ldi	r24, 0x33	; 51
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	fc 01       	movw	r30, r24
     fc6:	80 81       	ld	r24, Z
     fc8:	89 83       	std	Y+1, r24	; 0x01
			break;
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <DIO_readPort+0x68>
		case PORTD_ID:
			value = PIND;
     fcc:	80 e3       	ldi	r24, 0x30	; 48
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	fc 01       	movw	r30, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	89 83       	std	Y+1, r24	; 0x01
			break;
     fd6:	00 00       	nop
		}
	}

	return value;
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <__vector_1>:
/*------------------------------------------------------------------------------
 |                          ISR's Definitions                                  |
 ------------------------------------------------------------------------------*/

/* ISR for INT0 external interrupt triggered by WSS */
ISR(INT0_vect) {
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	0f 92       	push	r0
     fec:	11 24       	eor	r1, r1
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	/* checks on the flag if flag = 1 the one second must be elapsed */
	if (g_oneSecFlag == 1) {
     ffa:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <g_oneSecFlag>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	79 f4       	brne	.+30     	; 0x1020 <__vector_1+0x3c>
		/* Store number of wheel pulses in one second */
		g_pulsesPerSecond = g_revolutions;
    1002:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <g_revolutions>
    1006:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <g_revolutions+0x1>
    100a:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <g_pulsesPerSecond+0x1>
    100e:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <g_pulsesPerSecond>

		/* Reset one second flag of the timer */
		g_oneSecFlag = 0;
    1012:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <g_oneSecFlag>

		/* Reset the number of revolutions of the wheel */
		g_revolutions = 0;
    1016:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <g_revolutions+0x1>
    101a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <g_revolutions>
	}
	/* if flag not equal to one then continue counting revolutions */
	else if (g_oneSecFlag == 0) {
		g_revolutions++;
	}
}
    101e:	0d c0       	rjmp	.+26     	; 0x103a <__vector_1+0x56>

		/* Reset the number of revolutions of the wheel */
		g_revolutions = 0;
	}
	/* if flag not equal to one then continue counting revolutions */
	else if (g_oneSecFlag == 0) {
    1020:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <g_oneSecFlag>
    1024:	88 23       	and	r24, r24
    1026:	49 f4       	brne	.+18     	; 0x103a <__vector_1+0x56>
		g_revolutions++;
    1028:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <g_revolutions>
    102c:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <g_revolutions+0x1>
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <g_revolutions+0x1>
    1036:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <g_revolutions>
	}
}
    103a:	00 00       	nop
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <INT0_Init>:
 * 					for WSS. 											*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void INT0_Init(void) {
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	/* Set the direction of external interrupt 0 to be input */
	DIO_setupPinDirection(INT0_PORT_ID, INT0_PIN_ID, PIN_INPUT);
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	83 e0       	ldi	r24, 0x03	; 3
    105c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>

	/************************** MCUCR Description **************************
	 * ISC00:01	= 1	The rising edge of INT0 generates an interrupt request
	 ***********************************************************************/
	MCUCR |= (1 << ISC01) | (1 << ISC00);
    1060:	85 e5       	ldi	r24, 0x55	; 85
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	fc 01       	movw	r30, r24
    1066:	20 81       	ld	r18, Z
    1068:	85 e5       	ldi	r24, 0x55	; 85
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	23 60       	ori	r18, 0x03	; 3
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18

	/************************** GICR Description **************************
	 * INT0	= 1	External Interrupt Request 0 Enable
	 **********************************************************************/
	GICR |= (1 << INT0);
    1072:	8b e5       	ldi	r24, 0x5B	; 91
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	fc 01       	movw	r30, r24
    1078:	20 81       	ld	r18, Z
    107a:	8b e5       	ldi	r24, 0x5B	; 91
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	20 68       	ori	r18, 0x80	; 128
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18

	//SREG |= (1<<7);
}
    1084:	00 00       	nop
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <WSS_timeCounter>:
 * 					to set one second timer flag 						*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void WSS_timeCounter(void) {
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	/* Set one second timer flag */
	g_oneSecFlag = 1;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <g_oneSecFlag>
}
    109a:	00 00       	nop
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <WSS_Init>:
 * [Description]:	Function to initialize WSS module.				 	*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void WSS_Init(void) {
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	29 97       	sbiw	r28, 0x09	; 9
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	cd bf       	out	0x3d, r28	; 61
	/* Timer configuration struct specifying which Timer, mode of
	 * operation, initial count value, compare value (corresponding
	 * to one second), prescaler value, and ISR */
	Timer_configuration Config =
    10b6:	29 e0       	ldi	r18, 0x09	; 9
    10b8:	e0 e6       	ldi	r30, 0x60	; 96
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	dc 01       	movw	r26, r24
    10c2:	01 90       	ld	r0, Z+
    10c4:	0d 92       	st	X+, r0
    10c6:	2a 95       	dec	r18
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <WSS_Init+0x20>
			{ Timer1, CTC, 0, 15625, 1024, WSS_timeCounter };

	INT0_Init();
    10ca:	0e 94 27 08 	call	0x104e	; 0x104e <INT0_Init>
}
    10ce:	00 00       	nop
    10d0:	29 96       	adiw	r28, 0x09	; 9
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <WSS_getRPM>:
 * 					which means RPM										*
 * 																		*
 * [Args]			void												*
 * [Return]			RPM value											*
 *======================================================================*/
uint16 WSS_getRPM(void) {
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <WSS_getRPM+0x6>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	uint16 rpm = 0;
    10ec:	1a 82       	std	Y+2, r1	; 0x02
    10ee:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate wheel speed in pulses per minute */
	rpm = g_pulsesPerSecond * 60;
    10f0:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <g_pulsesPerSecond>
    10f4:	30 91 98 00 	lds	r19, 0x0098	; 0x800098 <g_pulsesPerSecond+0x1>
    10f8:	4c e3       	ldi	r20, 0x3C	; 60
    10fa:	42 9f       	mul	r20, r18
    10fc:	c0 01       	movw	r24, r0
    10fe:	43 9f       	mul	r20, r19
    1100:	90 0d       	add	r25, r0
    1102:	11 24       	eor	r1, r1
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	89 83       	std	Y+1, r24	; 0x01

	/* Convert pulses per minute to RPM */
	rpm = rpm / PULSEPERREVOLUTION;

	return rpm;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the DIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	2e 97       	sbiw	r28, 0x0e	; 14
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	DIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    112a:	41 e0       	ldi	r20, 0x01	; 1
    112c:	63 e0       	ldi	r22, 0x03	; 3
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	62 e0       	ldi	r22, 0x02	; 2
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a0 ea       	ldi	r26, 0xA0	; 160
    1144:	b1 e4       	ldi	r27, 0x41	; 65
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	ab 83       	std	Y+3, r26	; 0x03
    114c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a e7       	ldi	r20, 0x7A	; 122
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	69 81       	ldd	r22, Y+1	; 0x01
    1158:	7a 81       	ldd	r23, Y+2	; 0x02
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	af 83       	std	Y+7, r26	; 0x07
    116c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	6d 81       	ldd	r22, Y+5	; 0x05
    1178:	7e 81       	ldd	r23, Y+6	; 0x06
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	98 85       	ldd	r25, Y+8	; 0x08
    117e:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    1182:	88 23       	and	r24, r24
    1184:	2c f4       	brge	.+10     	; 0x1190 <LCD_init+0x7a>
		__ticks = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9a 87       	std	Y+10, r25	; 0x0a
    118c:	89 87       	std	Y+9, r24	; 0x09
    118e:	3f c0       	rjmp	.+126    	; 0x120e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	6d 81       	ldd	r22, Y+5	; 0x05
    119a:	7e 81       	ldd	r23, Y+6	; 0x06
    119c:	8f 81       	ldd	r24, Y+7	; 0x07
    119e:	98 85       	ldd	r25, Y+8	; 0x08
    11a0:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    11a4:	18 16       	cp	r1, r24
    11a6:	4c f5       	brge	.+82     	; 0x11fa <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	69 81       	ldd	r22, Y+1	; 0x01
    11b2:	7a 81       	ldd	r23, Y+2	; 0x02
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9a 87       	std	Y+10, r25	; 0x0a
    11ce:	89 87       	std	Y+9, r24	; 0x09
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <LCD_init+0xda>
    11d2:	80 e9       	ldi	r24, 0x90	; 144
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	9c 87       	std	Y+12, r25	; 0x0c
    11d8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11da:	8b 85       	ldd	r24, Y+11	; 0x0b
    11dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <LCD_init+0xc8>
    11e2:	9c 87       	std	Y+12, r25	; 0x0c
    11e4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	9a 87       	std	Y+10, r25	; 0x0a
    11ee:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	89 2b       	or	r24, r25
    11f6:	69 f7       	brne	.-38     	; 0x11d2 <LCD_init+0xbc>
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fa:	6d 81       	ldd	r22, Y+5	; 0x05
    11fc:	7e 81       	ldd	r23, Y+6	; 0x06
    11fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1200:	98 85       	ldd	r25, Y+8	; 0x08
    1202:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9a 87       	std	Y+10, r25	; 0x0a
    120c:	89 87       	std	Y+9, r24	; 0x09
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	9e 87       	std	Y+14, r25	; 0x0e
    1214:	8d 87       	std	Y+13, r24	; 0x0d
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <LCD_init+0x104>
    121e:	9e 87       	std	Y+14, r25	; 0x0e
    1220:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	62 e0       	ldi	r22, 0x02	; 2
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	64 e0       	ldi	r22, 0x04	; 4
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    124a:	83 e3       	ldi	r24, 0x33	; 51
    124c:	0e 94 3e 09 	call	0x127c	; 0x127c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1250:	82 e3       	ldi	r24, 0x32	; 50
    1252:	0e 94 3e 09 	call	0x127c	; 0x127c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1256:	88 e2       	ldi	r24, 0x28	; 40
    1258:	0e 94 3e 09 	call	0x127c	; 0x127c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    125c:	8c e0       	ldi	r24, 0x0C	; 12
    125e:	0e 94 3e 09 	call	0x127c	; 0x127c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	0e 94 3e 09 	call	0x127c	; 0x127c <LCD_sendCommand>
}
    1268:	00 00       	nop
    126a:	2e 96       	adiw	r28, 0x0e	; 14
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	c3 56       	subi	r28, 0x63	; 99
    128a:	d1 09       	sbc	r29, r1
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	9e 01       	movw	r18, r28
    1298:	2d 59       	subi	r18, 0x9D	; 157
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	f9 01       	movw	r30, r18
    129e:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	63 e0       	ldi	r22, 0x03	; 3
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    12aa:	9e 01       	movw	r18, r28
    12ac:	2b 5a       	subi	r18, 0xAB	; 171
    12ae:	3f 4f       	sbci	r19, 0xFF	; 255
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a0 e8       	ldi	r26, 0x80	; 128
    12b6:	bf e3       	ldi	r27, 0x3F	; 63
    12b8:	f9 01       	movw	r30, r18
    12ba:	80 83       	st	Z, r24
    12bc:	91 83       	std	Z+1, r25	; 0x01
    12be:	a2 83       	std	Z+2, r26	; 0x02
    12c0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	8e 01       	movw	r16, r28
    12c4:	07 5a       	subi	r16, 0xA7	; 167
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	8b 5a       	subi	r24, 0xAB	; 171
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	4a e7       	ldi	r20, 0x7A	; 122
    12d4:	55 e4       	ldi	r21, 0x45	; 69
    12d6:	fc 01       	movw	r30, r24
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	f8 01       	movw	r30, r16
    12ea:	80 83       	st	Z, r24
    12ec:	91 83       	std	Z+1, r25	; 0x01
    12ee:	a2 83       	std	Z+2, r26	; 0x02
    12f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12f2:	ce 01       	movw	r24, r28
    12f4:	87 5a       	subi	r24, 0xA7	; 167
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	fc 01       	movw	r30, r24
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    130e:	88 23       	and	r24, r24
    1310:	4c f4       	brge	.+18     	; 0x1324 <LCD_sendCommand+0xa8>
		__ticks = 1;
    1312:	ce 01       	movw	r24, r28
    1314:	83 5a       	subi	r24, 0xA3	; 163
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	21 e0       	ldi	r18, 0x01	; 1
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	fc 01       	movw	r30, r24
    131e:	31 83       	std	Z+1, r19	; 0x01
    1320:	20 83       	st	Z, r18
    1322:	6d c0       	rjmp	.+218    	; 0x13fe <LCD_sendCommand+0x182>
	else if (__tmp > 65535)
    1324:	ce 01       	movw	r24, r28
    1326:	87 5a       	subi	r24, 0xA7	; 167
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	fc 01       	movw	r30, r24
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    1340:	18 16       	cp	r1, r24
    1342:	0c f0       	brlt	.+2      	; 0x1346 <LCD_sendCommand+0xca>
    1344:	4a c0       	rjmp	.+148    	; 0x13da <LCD_sendCommand+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	ce 01       	movw	r24, r28
    1348:	8b 5a       	subi	r24, 0xAB	; 171
    134a:	9f 4f       	sbci	r25, 0xFF	; 255
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	fc 01       	movw	r30, r24
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8e 01       	movw	r16, r28
    1368:	03 5a       	subi	r16, 0xA3	; 163
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	f8 01       	movw	r30, r16
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	24 c0       	rjmp	.+72     	; 0x13c8 <LCD_sendCommand+0x14c>
    1380:	ce 01       	movw	r24, r28
    1382:	81 5a       	subi	r24, 0xA1	; 161
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	20 e9       	ldi	r18, 0x90	; 144
    1388:	31 e0       	ldi	r19, 0x01	; 1
    138a:	fc 01       	movw	r30, r24
    138c:	31 83       	std	Z+1, r19	; 0x01
    138e:	20 83       	st	Z, r18
    1390:	ce 01       	movw	r24, r28
    1392:	81 5a       	subi	r24, 0xA1	; 161
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	fc 01       	movw	r30, r24
    1398:	80 81       	ld	r24, Z
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <LCD_sendCommand+0x120>
    13a0:	9e 01       	movw	r18, r28
    13a2:	21 5a       	subi	r18, 0xA1	; 161
    13a4:	3f 4f       	sbci	r19, 0xFF	; 255
    13a6:	f9 01       	movw	r30, r18
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	ce 01       	movw	r24, r28
    13ae:	83 5a       	subi	r24, 0xA3	; 163
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	9e 01       	movw	r18, r28
    13b4:	23 5a       	subi	r18, 0xA3	; 163
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	f9 01       	movw	r30, r18
    13ba:	20 81       	ld	r18, Z
    13bc:	31 81       	ldd	r19, Z+1	; 0x01
    13be:	21 50       	subi	r18, 0x01	; 1
    13c0:	31 09       	sbc	r19, r1
    13c2:	fc 01       	movw	r30, r24
    13c4:	31 83       	std	Z+1, r19	; 0x01
    13c6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	ce 01       	movw	r24, r28
    13ca:	83 5a       	subi	r24, 0xA3	; 163
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	fc 01       	movw	r30, r24
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	89 2b       	or	r24, r25
    13d6:	a1 f6       	brne	.-88     	; 0x1380 <LCD_sendCommand+0x104>
    13d8:	2c c0       	rjmp	.+88     	; 0x1432 <LCD_sendCommand+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13da:	8e 01       	movw	r16, r28
    13dc:	03 5a       	subi	r16, 0xA3	; 163
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	ce 01       	movw	r24, r28
    13e2:	87 5a       	subi	r24, 0xA7	; 167
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	fc 01       	movw	r30, r24
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	f8 01       	movw	r30, r16
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	80 83       	st	Z, r24
    13fe:	ce 01       	movw	r24, r28
    1400:	8f 59       	subi	r24, 0x9F	; 159
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	9e 01       	movw	r18, r28
    1406:	23 5a       	subi	r18, 0xA3	; 163
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	f9 01       	movw	r30, r18
    140c:	20 81       	ld	r18, Z
    140e:	31 81       	ldd	r19, Z+1	; 0x01
    1410:	fc 01       	movw	r30, r24
    1412:	31 83       	std	Z+1, r19	; 0x01
    1414:	20 83       	st	Z, r18
    1416:	ce 01       	movw	r24, r28
    1418:	8f 59       	subi	r24, 0x9F	; 159
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	fc 01       	movw	r30, r24
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <LCD_sendCommand+0x1a6>
    1426:	9e 01       	movw	r18, r28
    1428:	2f 59       	subi	r18, 0x9F	; 159
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	f9 01       	movw	r30, r18
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	62 e0       	ldi	r22, 0x02	; 2
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    143c:	9e 01       	movw	r18, r28
    143e:	29 5b       	subi	r18, 0xB9	; 185
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a0 e8       	ldi	r26, 0x80	; 128
    1448:	bf e3       	ldi	r27, 0x3F	; 63
    144a:	f9 01       	movw	r30, r18
    144c:	80 83       	st	Z, r24
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	a2 83       	std	Z+2, r26	; 0x02
    1452:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1454:	8e 01       	movw	r16, r28
    1456:	05 5b       	subi	r16, 0xB5	; 181
    1458:	1f 4f       	sbci	r17, 0xFF	; 255
    145a:	ce 01       	movw	r24, r28
    145c:	89 5b       	subi	r24, 0xB9	; 185
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a e7       	ldi	r20, 0x7A	; 122
    1466:	55 e4       	ldi	r21, 0x45	; 69
    1468:	fc 01       	movw	r30, r24
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	f8 01       	movw	r30, r16
    147c:	80 83       	st	Z, r24
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	a2 83       	std	Z+2, r26	; 0x02
    1482:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1484:	ce 01       	movw	r24, r28
    1486:	85 5b       	subi	r24, 0xB5	; 181
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	fc 01       	movw	r30, r24
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	4c f4       	brge	.+18     	; 0x14b6 <LCD_sendCommand+0x23a>
		__ticks = 1;
    14a4:	ce 01       	movw	r24, r28
    14a6:	81 5b       	subi	r24, 0xB1	; 177
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	21 e0       	ldi	r18, 0x01	; 1
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	fc 01       	movw	r30, r24
    14b0:	31 83       	std	Z+1, r19	; 0x01
    14b2:	20 83       	st	Z, r18
    14b4:	6d c0       	rjmp	.+218    	; 0x1590 <LCD_sendCommand+0x314>
	else if (__tmp > 65535)
    14b6:	ce 01       	movw	r24, r28
    14b8:	85 5b       	subi	r24, 0xB5	; 181
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	fc 01       	movw	r30, r24
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	0c f0       	brlt	.+2      	; 0x14d8 <LCD_sendCommand+0x25c>
    14d6:	4a c0       	rjmp	.+148    	; 0x156c <LCD_sendCommand+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d8:	ce 01       	movw	r24, r28
    14da:	89 5b       	subi	r24, 0xB9	; 185
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	51 e4       	ldi	r21, 0x41	; 65
    14e6:	fc 01       	movw	r30, r24
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8e 01       	movw	r16, r28
    14fa:	01 5b       	subi	r16, 0xB1	; 177
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	f8 01       	movw	r30, r16
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
    1510:	24 c0       	rjmp	.+72     	; 0x155a <LCD_sendCommand+0x2de>
    1512:	ce 01       	movw	r24, r28
    1514:	8f 5a       	subi	r24, 0xAF	; 175
    1516:	9f 4f       	sbci	r25, 0xFF	; 255
    1518:	20 e9       	ldi	r18, 0x90	; 144
    151a:	31 e0       	ldi	r19, 0x01	; 1
    151c:	fc 01       	movw	r30, r24
    151e:	31 83       	std	Z+1, r19	; 0x01
    1520:	20 83       	st	Z, r18
    1522:	ce 01       	movw	r24, r28
    1524:	8f 5a       	subi	r24, 0xAF	; 175
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <LCD_sendCommand+0x2b2>
    1532:	9e 01       	movw	r18, r28
    1534:	2f 5a       	subi	r18, 0xAF	; 175
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	f9 01       	movw	r30, r18
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	ce 01       	movw	r24, r28
    1540:	81 5b       	subi	r24, 0xB1	; 177
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	9e 01       	movw	r18, r28
    1546:	21 5b       	subi	r18, 0xB1	; 177
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	f9 01       	movw	r30, r18
    154c:	20 81       	ld	r18, Z
    154e:	31 81       	ldd	r19, Z+1	; 0x01
    1550:	21 50       	subi	r18, 0x01	; 1
    1552:	31 09       	sbc	r19, r1
    1554:	fc 01       	movw	r30, r24
    1556:	31 83       	std	Z+1, r19	; 0x01
    1558:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	ce 01       	movw	r24, r28
    155c:	81 5b       	subi	r24, 0xB1	; 177
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	fc 01       	movw	r30, r24
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	89 2b       	or	r24, r25
    1568:	a1 f6       	brne	.-88     	; 0x1512 <LCD_sendCommand+0x296>
    156a:	2c c0       	rjmp	.+88     	; 0x15c4 <LCD_sendCommand+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	8e 01       	movw	r16, r28
    156e:	01 5b       	subi	r16, 0xB1	; 177
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	ce 01       	movw	r24, r28
    1574:	85 5b       	subi	r24, 0xB5	; 181
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	fc 01       	movw	r30, r24
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	f8 01       	movw	r30, r16
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
    1590:	ce 01       	movw	r24, r28
    1592:	8d 5a       	subi	r24, 0xAD	; 173
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	9e 01       	movw	r18, r28
    1598:	21 5b       	subi	r18, 0xB1	; 177
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	f9 01       	movw	r30, r18
    159e:	20 81       	ld	r18, Z
    15a0:	31 81       	ldd	r19, Z+1	; 0x01
    15a2:	fc 01       	movw	r30, r24
    15a4:	31 83       	std	Z+1, r19	; 0x01
    15a6:	20 83       	st	Z, r18
    15a8:	ce 01       	movw	r24, r28
    15aa:	8d 5a       	subi	r24, 0xAD	; 173
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	fc 01       	movw	r30, r24
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <LCD_sendCommand+0x338>
    15b8:	9e 01       	movw	r18, r28
    15ba:	2d 5a       	subi	r18, 0xAD	; 173
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	f9 01       	movw	r30, r18
    15c0:	91 83       	std	Z+1, r25	; 0x01
    15c2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    15c4:	ce 01       	movw	r24, r28
    15c6:	8d 59       	subi	r24, 0x9D	; 157
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	fc 01       	movw	r30, r24
    15cc:	80 81       	ld	r24, Z
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	95 95       	asr	r25
    15d4:	87 95       	ror	r24
    15d6:	95 95       	asr	r25
    15d8:	87 95       	ror	r24
    15da:	95 95       	asr	r25
    15dc:	87 95       	ror	r24
    15de:	95 95       	asr	r25
    15e0:	87 95       	ror	r24
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	48 2f       	mov	r20, r24
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    15ee:	ce 01       	movw	r24, r28
    15f0:	8d 59       	subi	r24, 0x9D	; 157
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	fc 01       	movw	r30, r24
    15f6:	80 81       	ld	r24, Z
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	95 95       	asr	r25
    15fe:	87 95       	ror	r24
    1600:	95 95       	asr	r25
    1602:	87 95       	ror	r24
    1604:	95 95       	asr	r25
    1606:	87 95       	ror	r24
    1608:	95 95       	asr	r25
    160a:	87 95       	ror	r24
    160c:	95 95       	asr	r25
    160e:	87 95       	ror	r24
    1610:	81 70       	andi	r24, 0x01	; 1
    1612:	48 2f       	mov	r20, r24
    1614:	61 e0       	ldi	r22, 0x01	; 1
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    161c:	ce 01       	movw	r24, r28
    161e:	8d 59       	subi	r24, 0x9D	; 157
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	fc 01       	movw	r30, r24
    1624:	80 81       	ld	r24, Z
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	08 2e       	mov	r0, r24
    162c:	89 2f       	mov	r24, r25
    162e:	00 0c       	add	r0, r0
    1630:	88 1f       	adc	r24, r24
    1632:	99 0b       	sbc	r25, r25
    1634:	00 0c       	add	r0, r0
    1636:	88 1f       	adc	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	81 70       	andi	r24, 0x01	; 1
    163c:	48 2f       	mov	r20, r24
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1646:	ce 01       	movw	r24, r28
    1648:	8d 59       	subi	r24, 0x9D	; 157
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	fc 01       	movw	r30, r24
    164e:	80 81       	ld	r24, Z
    1650:	88 1f       	adc	r24, r24
    1652:	88 27       	eor	r24, r24
    1654:	88 1f       	adc	r24, r24
    1656:	48 2f       	mov	r20, r24
    1658:	64 e0       	ldi	r22, 0x04	; 4
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e8       	ldi	r26, 0x80	; 128
    1666:	bf e3       	ldi	r27, 0x3F	; 63
    1668:	89 af       	std	Y+57, r24	; 0x39
    166a:	9a af       	std	Y+58, r25	; 0x3a
    166c:	ab af       	std	Y+59, r26	; 0x3b
    166e:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a e7       	ldi	r20, 0x7A	; 122
    1676:	55 e4       	ldi	r21, 0x45	; 69
    1678:	69 ad       	ldd	r22, Y+57	; 0x39
    167a:	7a ad       	ldd	r23, Y+58	; 0x3a
    167c:	8b ad       	ldd	r24, Y+59	; 0x3b
    167e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1680:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 01       	movw	r18, r28
    168a:	23 5c       	subi	r18, 0xC3	; 195
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	f9 01       	movw	r30, r18
    1690:	80 83       	st	Z, r24
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	a2 83       	std	Z+2, r26	; 0x02
    1696:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	40 e8       	ldi	r20, 0x80	; 128
    169e:	5f e3       	ldi	r21, 0x3F	; 63
    16a0:	ce 01       	movw	r24, r28
    16a2:	cd 96       	adiw	r24, 0x3d	; 61
    16a4:	fc 01       	movw	r30, r24
    16a6:	60 81       	ld	r22, Z
    16a8:	71 81       	ldd	r23, Z+1	; 0x01
    16aa:	82 81       	ldd	r24, Z+2	; 0x02
    16ac:	93 81       	ldd	r25, Z+3	; 0x03
    16ae:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	4c f4       	brge	.+18     	; 0x16c8 <LCD_sendCommand+0x44c>
		__ticks = 1;
    16b6:	ce 01       	movw	r24, r28
    16b8:	8f 5b       	subi	r24, 0xBF	; 191
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	fc 01       	movw	r30, r24
    16c2:	31 83       	std	Z+1, r19	; 0x01
    16c4:	20 83       	st	Z, r18
    16c6:	67 c0       	rjmp	.+206    	; 0x1796 <LCD_sendCommand+0x51a>
	else if (__tmp > 65535)
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	ce 01       	movw	r24, r28
    16d2:	cd 96       	adiw	r24, 0x3d	; 61
    16d4:	fc 01       	movw	r30, r24
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	0c f0       	brlt	.+2      	; 0x16e8 <LCD_sendCommand+0x46c>
    16e6:	46 c0       	rjmp	.+140    	; 0x1774 <LCD_sendCommand+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	69 ad       	ldd	r22, Y+57	; 0x39
    16f2:	7a ad       	ldd	r23, Y+58	; 0x3a
    16f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    16f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    16f8:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8e 01       	movw	r16, r28
    1702:	0f 5b       	subi	r16, 0xBF	; 191
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	f8 01       	movw	r30, r16
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	24 c0       	rjmp	.+72     	; 0x1762 <LCD_sendCommand+0x4e6>
    171a:	ce 01       	movw	r24, r28
    171c:	8d 5b       	subi	r24, 0xBD	; 189
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	20 e9       	ldi	r18, 0x90	; 144
    1722:	31 e0       	ldi	r19, 0x01	; 1
    1724:	fc 01       	movw	r30, r24
    1726:	31 83       	std	Z+1, r19	; 0x01
    1728:	20 83       	st	Z, r18
    172a:	ce 01       	movw	r24, r28
    172c:	8d 5b       	subi	r24, 0xBD	; 189
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	fc 01       	movw	r30, r24
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_sendCommand+0x4ba>
    173a:	9e 01       	movw	r18, r28
    173c:	2d 5b       	subi	r18, 0xBD	; 189
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	f9 01       	movw	r30, r18
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	ce 01       	movw	r24, r28
    1748:	8f 5b       	subi	r24, 0xBF	; 191
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	9e 01       	movw	r18, r28
    174e:	2f 5b       	subi	r18, 0xBF	; 191
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	f9 01       	movw	r30, r18
    1754:	20 81       	ld	r18, Z
    1756:	31 81       	ldd	r19, Z+1	; 0x01
    1758:	21 50       	subi	r18, 0x01	; 1
    175a:	31 09       	sbc	r19, r1
    175c:	fc 01       	movw	r30, r24
    175e:	31 83       	std	Z+1, r19	; 0x01
    1760:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	ce 01       	movw	r24, r28
    1764:	8f 5b       	subi	r24, 0xBF	; 191
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	fc 01       	movw	r30, r24
    176a:	80 81       	ld	r24, Z
    176c:	91 81       	ldd	r25, Z+1	; 0x01
    176e:	89 2b       	or	r24, r25
    1770:	a1 f6       	brne	.-88     	; 0x171a <LCD_sendCommand+0x49e>
    1772:	2b c0       	rjmp	.+86     	; 0x17ca <LCD_sendCommand+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1774:	8e 01       	movw	r16, r28
    1776:	0f 5b       	subi	r16, 0xBF	; 191
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	ce 01       	movw	r24, r28
    177c:	cd 96       	adiw	r24, 0x3d	; 61
    177e:	fc 01       	movw	r30, r24
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24
    1796:	ce 01       	movw	r24, r28
    1798:	8b 5b       	subi	r24, 0xBB	; 187
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	9e 01       	movw	r18, r28
    179e:	2f 5b       	subi	r18, 0xBF	; 191
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	f9 01       	movw	r30, r18
    17a4:	20 81       	ld	r18, Z
    17a6:	31 81       	ldd	r19, Z+1	; 0x01
    17a8:	fc 01       	movw	r30, r24
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
    17ae:	ce 01       	movw	r24, r28
    17b0:	8b 5b       	subi	r24, 0xBB	; 187
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	fc 01       	movw	r30, r24
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <LCD_sendCommand+0x53e>
    17be:	9e 01       	movw	r18, r28
    17c0:	2b 5b       	subi	r18, 0xBB	; 187
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	f9 01       	movw	r30, r18
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	62 e0       	ldi	r22, 0x02	; 2
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e8       	ldi	r26, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	8b a7       	std	Y+43, r24	; 0x2b
    17de:	9c a7       	std	Y+44, r25	; 0x2c
    17e0:	ad a7       	std	Y+45, r26	; 0x2d
    17e2:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a e7       	ldi	r20, 0x7A	; 122
    17ea:	55 e4       	ldi	r21, 0x45	; 69
    17ec:	6b a5       	ldd	r22, Y+43	; 0x2b
    17ee:	7c a5       	ldd	r23, Y+44	; 0x2c
    17f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    17f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    17f4:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8f a7       	std	Y+47, r24	; 0x2f
    17fe:	98 ab       	std	Y+48, r25	; 0x30
    1800:	a9 ab       	std	Y+49, r26	; 0x31
    1802:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	6f a5       	ldd	r22, Y+47	; 0x2f
    180e:	78 a9       	ldd	r23, Y+48	; 0x30
    1810:	89 a9       	ldd	r24, Y+49	; 0x31
    1812:	9a a9       	ldd	r25, Y+50	; 0x32
    1814:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_sendCommand+0x5aa>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c ab       	std	Y+52, r25	; 0x34
    1822:	8b ab       	std	Y+51, r24	; 0x33
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <LCD_sendCommand+0x628>
	else if (__tmp > 65535)
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1830:	78 a9       	ldd	r23, Y+48	; 0x30
    1832:	89 a9       	ldd	r24, Y+49	; 0x31
    1834:	9a a9       	ldd	r25, Y+50	; 0x32
    1836:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <LCD_sendCommand+0x614>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	6b a5       	ldd	r22, Y+43	; 0x2b
    1848:	7c a5       	ldd	r23, Y+44	; 0x2c
    184a:	8d a5       	ldd	r24, Y+45	; 0x2d
    184c:	9e a5       	ldd	r25, Y+46	; 0x2e
    184e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9c ab       	std	Y+52, r25	; 0x34
    1864:	8b ab       	std	Y+51, r24	; 0x33
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <LCD_sendCommand+0x60a>
    1868:	80 e9       	ldi	r24, 0x90	; 144
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	9e ab       	std	Y+54, r25	; 0x36
    186e:	8d ab       	std	Y+53, r24	; 0x35
    1870:	8d a9       	ldd	r24, Y+53	; 0x35
    1872:	9e a9       	ldd	r25, Y+54	; 0x36
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_sendCommand+0x5f8>
    1878:	9e ab       	std	Y+54, r25	; 0x36
    187a:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8b a9       	ldd	r24, Y+51	; 0x33
    187e:	9c a9       	ldd	r25, Y+52	; 0x34
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9c ab       	std	Y+52, r25	; 0x34
    1884:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8b a9       	ldd	r24, Y+51	; 0x33
    1888:	9c a9       	ldd	r25, Y+52	; 0x34
    188a:	89 2b       	or	r24, r25
    188c:	69 f7       	brne	.-38     	; 0x1868 <LCD_sendCommand+0x5ec>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <LCD_sendCommand+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	6f a5       	ldd	r22, Y+47	; 0x2f
    1892:	78 a9       	ldd	r23, Y+48	; 0x30
    1894:	89 a9       	ldd	r24, Y+49	; 0x31
    1896:	9a a9       	ldd	r25, Y+50	; 0x32
    1898:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9c ab       	std	Y+52, r25	; 0x34
    18a2:	8b ab       	std	Y+51, r24	; 0x33
    18a4:	8b a9       	ldd	r24, Y+51	; 0x33
    18a6:	9c a9       	ldd	r25, Y+52	; 0x34
    18a8:	98 af       	std	Y+56, r25	; 0x38
    18aa:	8f ab       	std	Y+55, r24	; 0x37
    18ac:	8f a9       	ldd	r24, Y+55	; 0x37
    18ae:	98 ad       	ldd	r25, Y+56	; 0x38
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_sendCommand+0x634>
    18b4:	98 af       	std	Y+56, r25	; 0x38
    18b6:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e8       	ldi	r26, 0x80	; 128
    18c8:	bf e3       	ldi	r27, 0x3F	; 63
    18ca:	8d 8f       	std	Y+29, r24	; 0x1d
    18cc:	9e 8f       	std	Y+30, r25	; 0x1e
    18ce:	af 8f       	std	Y+31, r26	; 0x1f
    18d0:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a e7       	ldi	r20, 0x7A	; 122
    18d8:	55 e4       	ldi	r21, 0x45	; 69
    18da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    18dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    18de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e0:	98 a1       	ldd	r25, Y+32	; 0x20
    18e2:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	89 a3       	std	Y+33, r24	; 0x21
    18ec:	9a a3       	std	Y+34, r25	; 0x22
    18ee:	ab a3       	std	Y+35, r26	; 0x23
    18f0:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	69 a1       	ldd	r22, Y+33	; 0x21
    18fc:	7a a1       	ldd	r23, Y+34	; 0x22
    18fe:	8b a1       	ldd	r24, Y+35	; 0x23
    1900:	9c a1       	ldd	r25, Y+36	; 0x24
    1902:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_sendCommand+0x698>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9e a3       	std	Y+38, r25	; 0x26
    1910:	8d a3       	std	Y+37, r24	; 0x25
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_sendCommand+0x716>
	else if (__tmp > 65535)
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	69 a1       	ldd	r22, Y+33	; 0x21
    191e:	7a a1       	ldd	r23, Y+34	; 0x22
    1920:	8b a1       	ldd	r24, Y+35	; 0x23
    1922:	9c a1       	ldd	r25, Y+36	; 0x24
    1924:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_sendCommand+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1936:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1938:	8f 8d       	ldd	r24, Y+31	; 0x1f
    193a:	98 a1       	ldd	r25, Y+32	; 0x20
    193c:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9e a3       	std	Y+38, r25	; 0x26
    1952:	8d a3       	std	Y+37, r24	; 0x25
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_sendCommand+0x6f8>
    1956:	80 e9       	ldi	r24, 0x90	; 144
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	98 a7       	std	Y+40, r25	; 0x28
    195c:	8f a3       	std	Y+39, r24	; 0x27
    195e:	8f a1       	ldd	r24, Y+39	; 0x27
    1960:	98 a5       	ldd	r25, Y+40	; 0x28
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_sendCommand+0x6e6>
    1966:	98 a7       	std	Y+40, r25	; 0x28
    1968:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8d a1       	ldd	r24, Y+37	; 0x25
    196c:	9e a1       	ldd	r25, Y+38	; 0x26
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9e a3       	std	Y+38, r25	; 0x26
    1972:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8d a1       	ldd	r24, Y+37	; 0x25
    1976:	9e a1       	ldd	r25, Y+38	; 0x26
    1978:	89 2b       	or	r24, r25
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_sendCommand+0x6da>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <LCD_sendCommand+0x72a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	69 a1       	ldd	r22, Y+33	; 0x21
    1980:	7a a1       	ldd	r23, Y+34	; 0x22
    1982:	8b a1       	ldd	r24, Y+35	; 0x23
    1984:	9c a1       	ldd	r25, Y+36	; 0x24
    1986:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e a3       	std	Y+38, r25	; 0x26
    1990:	8d a3       	std	Y+37, r24	; 0x25
    1992:	8d a1       	ldd	r24, Y+37	; 0x25
    1994:	9e a1       	ldd	r25, Y+38	; 0x26
    1996:	9a a7       	std	Y+42, r25	; 0x2a
    1998:	89 a7       	std	Y+41, r24	; 0x29
    199a:	89 a5       	ldd	r24, Y+41	; 0x29
    199c:	9a a5       	ldd	r25, Y+42	; 0x2a
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_sendCommand+0x722>
    19a2:	9a a7       	std	Y+42, r25	; 0x2a
    19a4:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    19a6:	ce 01       	movw	r24, r28
    19a8:	8d 59       	subi	r24, 0x9D	; 157
    19aa:	9f 4f       	sbci	r25, 0xFF	; 255
    19ac:	fc 01       	movw	r30, r24
    19ae:	80 81       	ld	r24, Z
    19b0:	81 70       	andi	r24, 0x01	; 1
    19b2:	48 2f       	mov	r20, r24
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    19bc:	ce 01       	movw	r24, r28
    19be:	8d 59       	subi	r24, 0x9D	; 157
    19c0:	9f 4f       	sbci	r25, 0xFF	; 255
    19c2:	fc 01       	movw	r30, r24
    19c4:	80 81       	ld	r24, Z
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	95 95       	asr	r25
    19cc:	87 95       	ror	r24
    19ce:	81 70       	andi	r24, 0x01	; 1
    19d0:	48 2f       	mov	r20, r24
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    19da:	ce 01       	movw	r24, r28
    19dc:	8d 59       	subi	r24, 0x9D	; 157
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	fc 01       	movw	r30, r24
    19e2:	80 81       	ld	r24, Z
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	95 95       	asr	r25
    19ea:	87 95       	ror	r24
    19ec:	95 95       	asr	r25
    19ee:	87 95       	ror	r24
    19f0:	81 70       	andi	r24, 0x01	; 1
    19f2:	48 2f       	mov	r20, r24
    19f4:	62 e0       	ldi	r22, 0x02	; 2
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    19fc:	ce 01       	movw	r24, r28
    19fe:	8d 59       	subi	r24, 0x9D	; 157
    1a00:	9f 4f       	sbci	r25, 0xFF	; 255
    1a02:	fc 01       	movw	r30, r24
    1a04:	80 81       	ld	r24, Z
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	95 95       	asr	r25
    1a0c:	87 95       	ror	r24
    1a0e:	95 95       	asr	r25
    1a10:	87 95       	ror	r24
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	48 2f       	mov	r20, r24
    1a1a:	64 e0       	ldi	r22, 0x04	; 4
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e8       	ldi	r26, 0x80	; 128
    1a28:	bf e3       	ldi	r27, 0x3F	; 63
    1a2a:	8f 87       	std	Y+15, r24	; 0x0f
    1a2c:	98 8b       	std	Y+16, r25	; 0x10
    1a2e:	a9 8b       	std	Y+17, r26	; 0x11
    1a30:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a e7       	ldi	r20, 0x7A	; 122
    1a38:	55 e4       	ldi	r21, 0x45	; 69
    1a3a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a3c:	78 89       	ldd	r23, Y+16	; 0x10
    1a3e:	89 89       	ldd	r24, Y+17	; 0x11
    1a40:	9a 89       	ldd	r25, Y+18	; 0x12
    1a42:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	ad 8b       	std	Y+21, r26	; 0x15
    1a50:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	6b 89       	ldd	r22, Y+19	; 0x13
    1a5c:	7c 89       	ldd	r23, Y+20	; 0x14
    1a5e:	8d 89       	ldd	r24, Y+21	; 0x15
    1a60:	9e 89       	ldd	r25, Y+22	; 0x16
    1a62:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <LCD_sendCommand+0x7f8>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	98 8f       	std	Y+24, r25	; 0x18
    1a70:	8f 8b       	std	Y+23, r24	; 0x17
    1a72:	3f c0       	rjmp	.+126    	; 0x1af2 <LCD_sendCommand+0x876>
	else if (__tmp > 65535)
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	6b 89       	ldd	r22, Y+19	; 0x13
    1a7e:	7c 89       	ldd	r23, Y+20	; 0x14
    1a80:	8d 89       	ldd	r24, Y+21	; 0x15
    1a82:	9e 89       	ldd	r25, Y+22	; 0x16
    1a84:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	4c f5       	brge	.+82     	; 0x1ade <LCD_sendCommand+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a96:	78 89       	ldd	r23, Y+16	; 0x10
    1a98:	89 89       	ldd	r24, Y+17	; 0x11
    1a9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a9c:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	98 8f       	std	Y+24, r25	; 0x18
    1ab2:	8f 8b       	std	Y+23, r24	; 0x17
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <LCD_sendCommand+0x858>
    1ab6:	80 e9       	ldi	r24, 0x90	; 144
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	9a 8f       	std	Y+26, r25	; 0x1a
    1abc:	89 8f       	std	Y+25, r24	; 0x19
    1abe:	89 8d       	ldd	r24, Y+25	; 0x19
    1ac0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_sendCommand+0x846>
    1ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	98 8f       	std	Y+24, r25	; 0x18
    1ad2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad8:	89 2b       	or	r24, r25
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <LCD_sendCommand+0x83a>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <LCD_sendCommand+0x88a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	6b 89       	ldd	r22, Y+19	; 0x13
    1ae0:	7c 89       	ldd	r23, Y+20	; 0x14
    1ae2:	8d 89       	ldd	r24, Y+21	; 0x15
    1ae4:	9e 89       	ldd	r25, Y+22	; 0x16
    1ae6:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	98 8f       	std	Y+24, r25	; 0x18
    1af0:	8f 8b       	std	Y+23, r24	; 0x17
    1af2:	8f 89       	ldd	r24, Y+23	; 0x17
    1af4:	98 8d       	ldd	r25, Y+24	; 0x18
    1af6:	9c 8f       	std	Y+28, r25	; 0x1c
    1af8:	8b 8f       	std	Y+27, r24	; 0x1b
    1afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_sendCommand+0x882>
    1b02:	9c 8f       	std	Y+28, r25	; 0x1c
    1b04:	8b 8f       	std	Y+27, r24	; 0x1b

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e8       	ldi	r26, 0x80	; 128
    1b16:	bf e3       	ldi	r27, 0x3F	; 63
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	ab 83       	std	Y+3, r26	; 0x03
    1b1e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a e7       	ldi	r20, 0x7A	; 122
    1b26:	55 e4       	ldi	r21, 0x45	; 69
    1b28:	69 81       	ldd	r22, Y+1	; 0x01
    1b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	af 83       	std	Y+7, r26	; 0x07
    1b3e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	6d 81       	ldd	r22, Y+5	; 0x05
    1b4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1b4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4e:	98 85       	ldd	r25, Y+8	; 0x08
    1b50:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <LCD_sendCommand+0x8e6>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <LCD_sendCommand+0x964>
	else if (__tmp > 65535)
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b6c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b70:	98 85       	ldd	r25, Y+8	; 0x08
    1b72:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <LCD_sendCommand+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	69 81       	ldd	r22, Y+1	; 0x01
    1b84:	7a 81       	ldd	r23, Y+2	; 0x02
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9a 87       	std	Y+10, r25	; 0x0a
    1ba0:	89 87       	std	Y+9, r24	; 0x09
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <LCD_sendCommand+0x946>
    1ba4:	80 e9       	ldi	r24, 0x90	; 144
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	9c 87       	std	Y+12, r25	; 0x0c
    1baa:	8b 87       	std	Y+11, r24	; 0x0b
    1bac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bae:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <LCD_sendCommand+0x934>
    1bb4:	9c 87       	std	Y+12, r25	; 0x0c
    1bb6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	9a 87       	std	Y+10, r25	; 0x0a
    1bc0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	89 2b       	or	r24, r25
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <LCD_sendCommand+0x928>
	DIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <LCD_sendCommand+0x978>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	6d 81       	ldd	r22, Y+5	; 0x05
    1bce:	7e 81       	ldd	r23, Y+6	; 0x06
    1bd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd2:	98 85       	ldd	r25, Y+8	; 0x08
    1bd4:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9a 87       	std	Y+10, r25	; 0x0a
    1bde:	89 87       	std	Y+9, r24	; 0x09
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	9e 87       	std	Y+14, r25	; 0x0e
    1be6:	8d 87       	std	Y+13, r24	; 0x0d
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_sendCommand+0x970>
    1bf0:	9e 87       	std	Y+14, r25	; 0x0e
    1bf2:	8d 87       	std	Y+13, r24	; 0x0d
    1bf4:	00 00       	nop
    1bf6:	cd 59       	subi	r28, 0x9D	; 157
    1bf8:	df 4f       	sbci	r29, 0xFF	; 255
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	c3 56       	subi	r28, 0x63	; 99
    1c1c:	d1 09       	sbc	r29, r1
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	9e 01       	movw	r18, r28
    1c2a:	2d 59       	subi	r18, 0x9D	; 157
    1c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2e:	f9 01       	movw	r30, r18
    1c30:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	63 e0       	ldi	r22, 0x03	; 3
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    1c3c:	9e 01       	movw	r18, r28
    1c3e:	2b 5a       	subi	r18, 0xAB	; 171
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 e8       	ldi	r26, 0x80	; 128
    1c48:	bf e3       	ldi	r27, 0x3F	; 63
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	80 83       	st	Z, r24
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	a2 83       	std	Z+2, r26	; 0x02
    1c52:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	8e 01       	movw	r16, r28
    1c56:	07 5a       	subi	r16, 0xA7	; 167
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	8b 5a       	subi	r24, 0xAB	; 171
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	55 e4       	ldi	r21, 0x45	; 69
    1c68:	fc 01       	movw	r30, r24
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	80 83       	st	Z, r24
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	a2 83       	std	Z+2, r26	; 0x02
    1c82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c84:	ce 01       	movw	r24, r28
    1c86:	87 5a       	subi	r24, 0xA7	; 167
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	fc 01       	movw	r30, r24
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	4c f4       	brge	.+18     	; 0x1cb6 <LCD_displayCharacter+0xa8>
		__ticks = 1;
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	83 5a       	subi	r24, 0xA3	; 163
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	21 e0       	ldi	r18, 0x01	; 1
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	fc 01       	movw	r30, r24
    1cb0:	31 83       	std	Z+1, r19	; 0x01
    1cb2:	20 83       	st	Z, r18
    1cb4:	6d c0       	rjmp	.+218    	; 0x1d90 <LCD_displayCharacter+0x182>
	else if (__tmp > 65535)
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	87 5a       	subi	r24, 0xA7	; 167
    1cba:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	57 e4       	ldi	r21, 0x47	; 71
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	0c f0       	brlt	.+2      	; 0x1cd8 <LCD_displayCharacter+0xca>
    1cd6:	4a c0       	rjmp	.+148    	; 0x1d6c <LCD_displayCharacter+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	ce 01       	movw	r24, r28
    1cda:	8b 5a       	subi	r24, 0xAB	; 171
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8e 01       	movw	r16, r28
    1cfa:	03 5a       	subi	r16, 0xA3	; 163
    1cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	80 83       	st	Z, r24
    1d10:	24 c0       	rjmp	.+72     	; 0x1d5a <LCD_displayCharacter+0x14c>
    1d12:	ce 01       	movw	r24, r28
    1d14:	81 5a       	subi	r24, 0xA1	; 161
    1d16:	9f 4f       	sbci	r25, 0xFF	; 255
    1d18:	20 e9       	ldi	r18, 0x90	; 144
    1d1a:	31 e0       	ldi	r19, 0x01	; 1
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	31 83       	std	Z+1, r19	; 0x01
    1d20:	20 83       	st	Z, r18
    1d22:	ce 01       	movw	r24, r28
    1d24:	81 5a       	subi	r24, 0xA1	; 161
    1d26:	9f 4f       	sbci	r25, 0xFF	; 255
    1d28:	fc 01       	movw	r30, r24
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_displayCharacter+0x120>
    1d32:	9e 01       	movw	r18, r28
    1d34:	21 5a       	subi	r18, 0xA1	; 161
    1d36:	3f 4f       	sbci	r19, 0xFF	; 255
    1d38:	f9 01       	movw	r30, r18
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	ce 01       	movw	r24, r28
    1d40:	83 5a       	subi	r24, 0xA3	; 163
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	9e 01       	movw	r18, r28
    1d46:	23 5a       	subi	r18, 0xA3	; 163
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	20 81       	ld	r18, Z
    1d4e:	31 81       	ldd	r19, Z+1	; 0x01
    1d50:	21 50       	subi	r18, 0x01	; 1
    1d52:	31 09       	sbc	r19, r1
    1d54:	fc 01       	movw	r30, r24
    1d56:	31 83       	std	Z+1, r19	; 0x01
    1d58:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	83 5a       	subi	r24, 0xA3	; 163
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	fc 01       	movw	r30, r24
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	89 2b       	or	r24, r25
    1d68:	a1 f6       	brne	.-88     	; 0x1d12 <LCD_displayCharacter+0x104>
    1d6a:	2c c0       	rjmp	.+88     	; 0x1dc4 <LCD_displayCharacter+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	03 5a       	subi	r16, 0xA3	; 163
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	ce 01       	movw	r24, r28
    1d74:	87 5a       	subi	r24, 0xA7	; 167
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	fc 01       	movw	r30, r24
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	ce 01       	movw	r24, r28
    1d92:	8f 59       	subi	r24, 0x9F	; 159
    1d94:	9f 4f       	sbci	r25, 0xFF	; 255
    1d96:	9e 01       	movw	r18, r28
    1d98:	23 5a       	subi	r18, 0xA3	; 163
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	20 81       	ld	r18, Z
    1da0:	31 81       	ldd	r19, Z+1	; 0x01
    1da2:	fc 01       	movw	r30, r24
    1da4:	31 83       	std	Z+1, r19	; 0x01
    1da6:	20 83       	st	Z, r18
    1da8:	ce 01       	movw	r24, r28
    1daa:	8f 59       	subi	r24, 0x9F	; 159
    1dac:	9f 4f       	sbci	r25, 0xFF	; 255
    1dae:	fc 01       	movw	r30, r24
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_displayCharacter+0x1a6>
    1db8:	9e 01       	movw	r18, r28
    1dba:	2f 59       	subi	r18, 0x9F	; 159
    1dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbe:	f9 01       	movw	r30, r18
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	62 e0       	ldi	r22, 0x02	; 2
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    1dce:	9e 01       	movw	r18, r28
    1dd0:	29 5b       	subi	r18, 0xB9	; 185
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	a0 e8       	ldi	r26, 0x80	; 128
    1dda:	bf e3       	ldi	r27, 0x3F	; 63
    1ddc:	f9 01       	movw	r30, r18
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	8e 01       	movw	r16, r28
    1de8:	05 5b       	subi	r16, 0xB5	; 181
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	ce 01       	movw	r24, r28
    1dee:	89 5b       	subi	r24, 0xB9	; 185
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a e7       	ldi	r20, 0x7A	; 122
    1df8:	55 e4       	ldi	r21, 0x45	; 69
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	80 83       	st	Z, r24
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	a2 83       	std	Z+2, r26	; 0x02
    1e14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e16:	ce 01       	movw	r24, r28
    1e18:	85 5b       	subi	r24, 0xB5	; 181
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	5f e3       	ldi	r21, 0x3F	; 63
    1e24:	fc 01       	movw	r30, r24
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	4c f4       	brge	.+18     	; 0x1e48 <LCD_displayCharacter+0x23a>
		__ticks = 1;
    1e36:	ce 01       	movw	r24, r28
    1e38:	81 5b       	subi	r24, 0xB1	; 177
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	21 e0       	ldi	r18, 0x01	; 1
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	fc 01       	movw	r30, r24
    1e42:	31 83       	std	Z+1, r19	; 0x01
    1e44:	20 83       	st	Z, r18
    1e46:	6d c0       	rjmp	.+218    	; 0x1f22 <LCD_displayCharacter+0x314>
	else if (__tmp > 65535)
    1e48:	ce 01       	movw	r24, r28
    1e4a:	85 5b       	subi	r24, 0xB5	; 181
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	fc 01       	movw	r30, r24
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	0c f0       	brlt	.+2      	; 0x1e6a <LCD_displayCharacter+0x25c>
    1e68:	4a c0       	rjmp	.+148    	; 0x1efe <LCD_displayCharacter+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	89 5b       	subi	r24, 0xB9	; 185
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e2       	ldi	r20, 0x20	; 32
    1e76:	51 e4       	ldi	r21, 0x41	; 65
    1e78:	fc 01       	movw	r30, r24
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	01 5b       	subi	r16, 0xB1	; 177
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	24 c0       	rjmp	.+72     	; 0x1eec <LCD_displayCharacter+0x2de>
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	8f 5a       	subi	r24, 0xAF	; 175
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	20 e9       	ldi	r18, 0x90	; 144
    1eac:	31 e0       	ldi	r19, 0x01	; 1
    1eae:	fc 01       	movw	r30, r24
    1eb0:	31 83       	std	Z+1, r19	; 0x01
    1eb2:	20 83       	st	Z, r18
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	8f 5a       	subi	r24, 0xAF	; 175
    1eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eba:	fc 01       	movw	r30, r24
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_displayCharacter+0x2b2>
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	2f 5a       	subi	r18, 0xAF	; 175
    1ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eca:	f9 01       	movw	r30, r18
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	81 5b       	subi	r24, 0xB1	; 177
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	9e 01       	movw	r18, r28
    1ed8:	21 5b       	subi	r18, 0xB1	; 177
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	f9 01       	movw	r30, r18
    1ede:	20 81       	ld	r18, Z
    1ee0:	31 81       	ldd	r19, Z+1	; 0x01
    1ee2:	21 50       	subi	r18, 0x01	; 1
    1ee4:	31 09       	sbc	r19, r1
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	31 83       	std	Z+1, r19	; 0x01
    1eea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	ce 01       	movw	r24, r28
    1eee:	81 5b       	subi	r24, 0xB1	; 177
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	89 2b       	or	r24, r25
    1efa:	a1 f6       	brne	.-88     	; 0x1ea4 <LCD_displayCharacter+0x296>
    1efc:	2c c0       	rjmp	.+88     	; 0x1f56 <LCD_displayCharacter+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	8e 01       	movw	r16, r28
    1f00:	01 5b       	subi	r16, 0xB1	; 177
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	ce 01       	movw	r24, r28
    1f06:	85 5b       	subi	r24, 0xB5	; 181
    1f08:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	60 81       	ld	r22, Z
    1f0e:	71 81       	ldd	r23, Z+1	; 0x01
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	93 81       	ldd	r25, Z+3	; 0x03
    1f14:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	ce 01       	movw	r24, r28
    1f24:	8d 5a       	subi	r24, 0xAD	; 173
    1f26:	9f 4f       	sbci	r25, 0xFF	; 255
    1f28:	9e 01       	movw	r18, r28
    1f2a:	21 5b       	subi	r18, 0xB1	; 177
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	f9 01       	movw	r30, r18
    1f30:	20 81       	ld	r18, Z
    1f32:	31 81       	ldd	r19, Z+1	; 0x01
    1f34:	fc 01       	movw	r30, r24
    1f36:	31 83       	std	Z+1, r19	; 0x01
    1f38:	20 83       	st	Z, r18
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	8d 5a       	subi	r24, 0xAD	; 173
    1f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_displayCharacter+0x338>
    1f4a:	9e 01       	movw	r18, r28
    1f4c:	2d 5a       	subi	r18, 0xAD	; 173
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	f9 01       	movw	r30, r18
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    1f56:	ce 01       	movw	r24, r28
    1f58:	8d 59       	subi	r24, 0x9D	; 157
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	95 95       	asr	r25
    1f66:	87 95       	ror	r24
    1f68:	95 95       	asr	r25
    1f6a:	87 95       	ror	r24
    1f6c:	95 95       	asr	r25
    1f6e:	87 95       	ror	r24
    1f70:	95 95       	asr	r25
    1f72:	87 95       	ror	r24
    1f74:	81 70       	andi	r24, 0x01	; 1
    1f76:	48 2f       	mov	r20, r24
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    1f80:	ce 01       	movw	r24, r28
    1f82:	8d 59       	subi	r24, 0x9D	; 157
    1f84:	9f 4f       	sbci	r25, 0xFF	; 255
    1f86:	fc 01       	movw	r30, r24
    1f88:	80 81       	ld	r24, Z
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	95 95       	asr	r25
    1f90:	87 95       	ror	r24
    1f92:	95 95       	asr	r25
    1f94:	87 95       	ror	r24
    1f96:	95 95       	asr	r25
    1f98:	87 95       	ror	r24
    1f9a:	95 95       	asr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	95 95       	asr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	81 70       	andi	r24, 0x01	; 1
    1fa4:	48 2f       	mov	r20, r24
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    1fae:	ce 01       	movw	r24, r28
    1fb0:	8d 59       	subi	r24, 0x9D	; 157
    1fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	08 2e       	mov	r0, r24
    1fbe:	89 2f       	mov	r24, r25
    1fc0:	00 0c       	add	r0, r0
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	99 0b       	sbc	r25, r25
    1fc6:	00 0c       	add	r0, r0
    1fc8:	88 1f       	adc	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	81 70       	andi	r24, 0x01	; 1
    1fce:	48 2f       	mov	r20, r24
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    1fd8:	ce 01       	movw	r24, r28
    1fda:	8d 59       	subi	r24, 0x9D	; 157
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	fc 01       	movw	r30, r24
    1fe0:	80 81       	ld	r24, Z
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	88 27       	eor	r24, r24
    1fe6:	88 1f       	adc	r24, r24
    1fe8:	48 2f       	mov	r20, r24
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a0 e8       	ldi	r26, 0x80	; 128
    1ff8:	bf e3       	ldi	r27, 0x3F	; 63
    1ffa:	89 af       	std	Y+57, r24	; 0x39
    1ffc:	9a af       	std	Y+58, r25	; 0x3a
    1ffe:	ab af       	std	Y+59, r26	; 0x3b
    2000:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a e7       	ldi	r20, 0x7A	; 122
    2008:	55 e4       	ldi	r21, 0x45	; 69
    200a:	69 ad       	ldd	r22, Y+57	; 0x39
    200c:	7a ad       	ldd	r23, Y+58	; 0x3a
    200e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2010:	9c ad       	ldd	r25, Y+60	; 0x3c
    2012:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9e 01       	movw	r18, r28
    201c:	23 5c       	subi	r18, 0xC3	; 195
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	f9 01       	movw	r30, r18
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	a2 83       	std	Z+2, r26	; 0x02
    2028:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	ce 01       	movw	r24, r28
    2034:	cd 96       	adiw	r24, 0x3d	; 61
    2036:	fc 01       	movw	r30, r24
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    2044:	88 23       	and	r24, r24
    2046:	4c f4       	brge	.+18     	; 0x205a <LCD_displayCharacter+0x44c>
		__ticks = 1;
    2048:	ce 01       	movw	r24, r28
    204a:	8f 5b       	subi	r24, 0xBF	; 191
    204c:	9f 4f       	sbci	r25, 0xFF	; 255
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	fc 01       	movw	r30, r24
    2054:	31 83       	std	Z+1, r19	; 0x01
    2056:	20 83       	st	Z, r18
    2058:	67 c0       	rjmp	.+206    	; 0x2128 <LCD_displayCharacter+0x51a>
	else if (__tmp > 65535)
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	ce 01       	movw	r24, r28
    2064:	cd 96       	adiw	r24, 0x3d	; 61
    2066:	fc 01       	movw	r30, r24
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    2074:	18 16       	cp	r1, r24
    2076:	0c f0       	brlt	.+2      	; 0x207a <LCD_displayCharacter+0x46c>
    2078:	46 c0       	rjmp	.+140    	; 0x2106 <LCD_displayCharacter+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	69 ad       	ldd	r22, Y+57	; 0x39
    2084:	7a ad       	ldd	r23, Y+58	; 0x3a
    2086:	8b ad       	ldd	r24, Y+59	; 0x3b
    2088:	9c ad       	ldd	r25, Y+60	; 0x3c
    208a:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8e 01       	movw	r16, r28
    2094:	0f 5b       	subi	r16, 0xBF	; 191
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	24 c0       	rjmp	.+72     	; 0x20f4 <LCD_displayCharacter+0x4e6>
    20ac:	ce 01       	movw	r24, r28
    20ae:	8d 5b       	subi	r24, 0xBD	; 189
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	20 e9       	ldi	r18, 0x90	; 144
    20b4:	31 e0       	ldi	r19, 0x01	; 1
    20b6:	fc 01       	movw	r30, r24
    20b8:	31 83       	std	Z+1, r19	; 0x01
    20ba:	20 83       	st	Z, r18
    20bc:	ce 01       	movw	r24, r28
    20be:	8d 5b       	subi	r24, 0xBD	; 189
    20c0:	9f 4f       	sbci	r25, 0xFF	; 255
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_displayCharacter+0x4ba>
    20cc:	9e 01       	movw	r18, r28
    20ce:	2d 5b       	subi	r18, 0xBD	; 189
    20d0:	3f 4f       	sbci	r19, 0xFF	; 255
    20d2:	f9 01       	movw	r30, r18
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	ce 01       	movw	r24, r28
    20da:	8f 5b       	subi	r24, 0xBF	; 191
    20dc:	9f 4f       	sbci	r25, 0xFF	; 255
    20de:	9e 01       	movw	r18, r28
    20e0:	2f 5b       	subi	r18, 0xBF	; 191
    20e2:	3f 4f       	sbci	r19, 0xFF	; 255
    20e4:	f9 01       	movw	r30, r18
    20e6:	20 81       	ld	r18, Z
    20e8:	31 81       	ldd	r19, Z+1	; 0x01
    20ea:	21 50       	subi	r18, 0x01	; 1
    20ec:	31 09       	sbc	r19, r1
    20ee:	fc 01       	movw	r30, r24
    20f0:	31 83       	std	Z+1, r19	; 0x01
    20f2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	ce 01       	movw	r24, r28
    20f6:	8f 5b       	subi	r24, 0xBF	; 191
    20f8:	9f 4f       	sbci	r25, 0xFF	; 255
    20fa:	fc 01       	movw	r30, r24
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	89 2b       	or	r24, r25
    2102:	a1 f6       	brne	.-88     	; 0x20ac <LCD_displayCharacter+0x49e>
    2104:	2b c0       	rjmp	.+86     	; 0x215c <LCD_displayCharacter+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	8e 01       	movw	r16, r28
    2108:	0f 5b       	subi	r16, 0xBF	; 191
    210a:	1f 4f       	sbci	r17, 0xFF	; 255
    210c:	ce 01       	movw	r24, r28
    210e:	cd 96       	adiw	r24, 0x3d	; 61
    2110:	fc 01       	movw	r30, r24
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	f8 01       	movw	r30, r16
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	ce 01       	movw	r24, r28
    212a:	8b 5b       	subi	r24, 0xBB	; 187
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	9e 01       	movw	r18, r28
    2130:	2f 5b       	subi	r18, 0xBF	; 191
    2132:	3f 4f       	sbci	r19, 0xFF	; 255
    2134:	f9 01       	movw	r30, r18
    2136:	20 81       	ld	r18, Z
    2138:	31 81       	ldd	r19, Z+1	; 0x01
    213a:	fc 01       	movw	r30, r24
    213c:	31 83       	std	Z+1, r19	; 0x01
    213e:	20 83       	st	Z, r18
    2140:	ce 01       	movw	r24, r28
    2142:	8b 5b       	subi	r24, 0xBB	; 187
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	fc 01       	movw	r30, r24
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_displayCharacter+0x53e>
    2150:	9e 01       	movw	r18, r28
    2152:	2b 5b       	subi	r18, 0xBB	; 187
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	f9 01       	movw	r30, r18
    2158:	91 83       	std	Z+1, r25	; 0x01
    215a:	80 83       	st	Z, r24

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	62 e0       	ldi	r22, 0x02	; 2
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e8       	ldi	r26, 0x80	; 128
    216c:	bf e3       	ldi	r27, 0x3F	; 63
    216e:	8b a7       	std	Y+43, r24	; 0x2b
    2170:	9c a7       	std	Y+44, r25	; 0x2c
    2172:	ad a7       	std	Y+45, r26	; 0x2d
    2174:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a e7       	ldi	r20, 0x7A	; 122
    217c:	55 e4       	ldi	r21, 0x45	; 69
    217e:	6b a5       	ldd	r22, Y+43	; 0x2b
    2180:	7c a5       	ldd	r23, Y+44	; 0x2c
    2182:	8d a5       	ldd	r24, Y+45	; 0x2d
    2184:	9e a5       	ldd	r25, Y+46	; 0x2e
    2186:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8f a7       	std	Y+47, r24	; 0x2f
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	a9 ab       	std	Y+49, r26	; 0x31
    2194:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	6f a5       	ldd	r22, Y+47	; 0x2f
    21a0:	78 a9       	ldd	r23, Y+48	; 0x30
    21a2:	89 a9       	ldd	r24, Y+49	; 0x31
    21a4:	9a a9       	ldd	r25, Y+50	; 0x32
    21a6:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <LCD_displayCharacter+0x5aa>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9c ab       	std	Y+52, r25	; 0x34
    21b4:	8b ab       	std	Y+51, r24	; 0x33
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <LCD_displayCharacter+0x628>
	else if (__tmp > 65535)
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	6f a5       	ldd	r22, Y+47	; 0x2f
    21c2:	78 a9       	ldd	r23, Y+48	; 0x30
    21c4:	89 a9       	ldd	r24, Y+49	; 0x31
    21c6:	9a a9       	ldd	r25, Y+50	; 0x32
    21c8:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <LCD_displayCharacter+0x614>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	6b a5       	ldd	r22, Y+43	; 0x2b
    21da:	7c a5       	ldd	r23, Y+44	; 0x2c
    21dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21de:	9e a5       	ldd	r25, Y+46	; 0x2e
    21e0:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9c ab       	std	Y+52, r25	; 0x34
    21f6:	8b ab       	std	Y+51, r24	; 0x33
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <LCD_displayCharacter+0x60a>
    21fa:	80 e9       	ldi	r24, 0x90	; 144
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	9e ab       	std	Y+54, r25	; 0x36
    2200:	8d ab       	std	Y+53, r24	; 0x35
    2202:	8d a9       	ldd	r24, Y+53	; 0x35
    2204:	9e a9       	ldd	r25, Y+54	; 0x36
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_displayCharacter+0x5f8>
    220a:	9e ab       	std	Y+54, r25	; 0x36
    220c:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8b a9       	ldd	r24, Y+51	; 0x33
    2210:	9c a9       	ldd	r25, Y+52	; 0x34
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9c ab       	std	Y+52, r25	; 0x34
    2216:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8b a9       	ldd	r24, Y+51	; 0x33
    221a:	9c a9       	ldd	r25, Y+52	; 0x34
    221c:	89 2b       	or	r24, r25
    221e:	69 f7       	brne	.-38     	; 0x21fa <LCD_displayCharacter+0x5ec>
    2220:	14 c0       	rjmp	.+40     	; 0x224a <LCD_displayCharacter+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	6f a5       	ldd	r22, Y+47	; 0x2f
    2224:	78 a9       	ldd	r23, Y+48	; 0x30
    2226:	89 a9       	ldd	r24, Y+49	; 0x31
    2228:	9a a9       	ldd	r25, Y+50	; 0x32
    222a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9c ab       	std	Y+52, r25	; 0x34
    2234:	8b ab       	std	Y+51, r24	; 0x33
    2236:	8b a9       	ldd	r24, Y+51	; 0x33
    2238:	9c a9       	ldd	r25, Y+52	; 0x34
    223a:	98 af       	std	Y+56, r25	; 0x38
    223c:	8f ab       	std	Y+55, r24	; 0x37
    223e:	8f a9       	ldd	r24, Y+55	; 0x37
    2240:	98 ad       	ldd	r25, Y+56	; 0x38
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_displayCharacter+0x634>
    2246:	98 af       	std	Y+56, r25	; 0x38
    2248:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	62 e0       	ldi	r22, 0x02	; 2
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e8       	ldi	r26, 0x80	; 128
    225a:	bf e3       	ldi	r27, 0x3F	; 63
    225c:	8d 8f       	std	Y+29, r24	; 0x1d
    225e:	9e 8f       	std	Y+30, r25	; 0x1e
    2260:	af 8f       	std	Y+31, r26	; 0x1f
    2262:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a e7       	ldi	r20, 0x7A	; 122
    226a:	55 e4       	ldi	r21, 0x45	; 69
    226c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    226e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2270:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2272:	98 a1       	ldd	r25, Y+32	; 0x20
    2274:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	89 a3       	std	Y+33, r24	; 0x21
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	ab a3       	std	Y+35, r26	; 0x23
    2282:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	69 a1       	ldd	r22, Y+33	; 0x21
    228e:	7a a1       	ldd	r23, Y+34	; 0x22
    2290:	8b a1       	ldd	r24, Y+35	; 0x23
    2292:	9c a1       	ldd	r25, Y+36	; 0x24
    2294:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <LCD_displayCharacter+0x698>
		__ticks = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9e a3       	std	Y+38, r25	; 0x26
    22a2:	8d a3       	std	Y+37, r24	; 0x25
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <LCD_displayCharacter+0x716>
	else if (__tmp > 65535)
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	69 a1       	ldd	r22, Y+33	; 0x21
    22b0:	7a a1       	ldd	r23, Y+34	; 0x22
    22b2:	8b a1       	ldd	r24, Y+35	; 0x23
    22b4:	9c a1       	ldd	r25, Y+36	; 0x24
    22b6:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <LCD_displayCharacter+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22c8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22cc:	98 a1       	ldd	r25, Y+32	; 0x20
    22ce:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e a3       	std	Y+38, r25	; 0x26
    22e4:	8d a3       	std	Y+37, r24	; 0x25
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <LCD_displayCharacter+0x6f8>
    22e8:	80 e9       	ldi	r24, 0x90	; 144
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	98 a7       	std	Y+40, r25	; 0x28
    22ee:	8f a3       	std	Y+39, r24	; 0x27
    22f0:	8f a1       	ldd	r24, Y+39	; 0x27
    22f2:	98 a5       	ldd	r25, Y+40	; 0x28
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_displayCharacter+0x6e6>
    22f8:	98 a7       	std	Y+40, r25	; 0x28
    22fa:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fc:	8d a1       	ldd	r24, Y+37	; 0x25
    22fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9e a3       	std	Y+38, r25	; 0x26
    2304:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	8d a1       	ldd	r24, Y+37	; 0x25
    2308:	9e a1       	ldd	r25, Y+38	; 0x26
    230a:	89 2b       	or	r24, r25
    230c:	69 f7       	brne	.-38     	; 0x22e8 <LCD_displayCharacter+0x6da>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <LCD_displayCharacter+0x72a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	69 a1       	ldd	r22, Y+33	; 0x21
    2312:	7a a1       	ldd	r23, Y+34	; 0x22
    2314:	8b a1       	ldd	r24, Y+35	; 0x23
    2316:	9c a1       	ldd	r25, Y+36	; 0x24
    2318:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e a3       	std	Y+38, r25	; 0x26
    2322:	8d a3       	std	Y+37, r24	; 0x25
    2324:	8d a1       	ldd	r24, Y+37	; 0x25
    2326:	9e a1       	ldd	r25, Y+38	; 0x26
    2328:	9a a7       	std	Y+42, r25	; 0x2a
    232a:	89 a7       	std	Y+41, r24	; 0x29
    232c:	89 a5       	ldd	r24, Y+41	; 0x29
    232e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_displayCharacter+0x722>
    2334:	9a a7       	std	Y+42, r25	; 0x2a
    2336:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2338:	ce 01       	movw	r24, r28
    233a:	8d 59       	subi	r24, 0x9D	; 157
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	fc 01       	movw	r30, r24
    2340:	80 81       	ld	r24, Z
    2342:	81 70       	andi	r24, 0x01	; 1
    2344:	48 2f       	mov	r20, r24
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    234e:	ce 01       	movw	r24, r28
    2350:	8d 59       	subi	r24, 0x9D	; 157
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	fc 01       	movw	r30, r24
    2356:	80 81       	ld	r24, Z
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	95 95       	asr	r25
    235e:	87 95       	ror	r24
    2360:	81 70       	andi	r24, 0x01	; 1
    2362:	48 2f       	mov	r20, r24
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    236c:	ce 01       	movw	r24, r28
    236e:	8d 59       	subi	r24, 0x9D	; 157
    2370:	9f 4f       	sbci	r25, 0xFF	; 255
    2372:	fc 01       	movw	r30, r24
    2374:	80 81       	ld	r24, Z
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	95 95       	asr	r25
    237c:	87 95       	ror	r24
    237e:	95 95       	asr	r25
    2380:	87 95       	ror	r24
    2382:	81 70       	andi	r24, 0x01	; 1
    2384:	48 2f       	mov	r20, r24
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    238e:	ce 01       	movw	r24, r28
    2390:	8d 59       	subi	r24, 0x9D	; 157
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	fc 01       	movw	r30, r24
    2396:	80 81       	ld	r24, Z
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	95 95       	asr	r25
    239e:	87 95       	ror	r24
    23a0:	95 95       	asr	r25
    23a2:	87 95       	ror	r24
    23a4:	95 95       	asr	r25
    23a6:	87 95       	ror	r24
    23a8:	81 70       	andi	r24, 0x01	; 1
    23aa:	48 2f       	mov	r20, r24
    23ac:	64 e0       	ldi	r22, 0x04	; 4
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e8       	ldi	r26, 0x80	; 128
    23ba:	bf e3       	ldi	r27, 0x3F	; 63
    23bc:	8f 87       	std	Y+15, r24	; 0x0f
    23be:	98 8b       	std	Y+16, r25	; 0x10
    23c0:	a9 8b       	std	Y+17, r26	; 0x11
    23c2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    23ce:	78 89       	ldd	r23, Y+16	; 0x10
    23d0:	89 89       	ldd	r24, Y+17	; 0x11
    23d2:	9a 89       	ldd	r25, Y+18	; 0x12
    23d4:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	ad 8b       	std	Y+21, r26	; 0x15
    23e2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e8       	ldi	r20, 0x80	; 128
    23ea:	5f e3       	ldi	r21, 0x3F	; 63
    23ec:	6b 89       	ldd	r22, Y+19	; 0x13
    23ee:	7c 89       	ldd	r23, Y+20	; 0x14
    23f0:	8d 89       	ldd	r24, Y+21	; 0x15
    23f2:	9e 89       	ldd	r25, Y+22	; 0x16
    23f4:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	2c f4       	brge	.+10     	; 0x2406 <LCD_displayCharacter+0x7f8>
		__ticks = 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	98 8f       	std	Y+24, r25	; 0x18
    2402:	8f 8b       	std	Y+23, r24	; 0x17
    2404:	3f c0       	rjmp	.+126    	; 0x2484 <LCD_displayCharacter+0x876>
	else if (__tmp > 65535)
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	57 e4       	ldi	r21, 0x47	; 71
    240e:	6b 89       	ldd	r22, Y+19	; 0x13
    2410:	7c 89       	ldd	r23, Y+20	; 0x14
    2412:	8d 89       	ldd	r24, Y+21	; 0x15
    2414:	9e 89       	ldd	r25, Y+22	; 0x16
    2416:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    241a:	18 16       	cp	r1, r24
    241c:	4c f5       	brge	.+82     	; 0x2470 <LCD_displayCharacter+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e2       	ldi	r20, 0x20	; 32
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	6f 85       	ldd	r22, Y+15	; 0x0f
    2428:	78 89       	ldd	r23, Y+16	; 0x10
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	98 8f       	std	Y+24, r25	; 0x18
    2444:	8f 8b       	std	Y+23, r24	; 0x17
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <LCD_displayCharacter+0x858>
    2448:	80 e9       	ldi	r24, 0x90	; 144
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	9a 8f       	std	Y+26, r25	; 0x1a
    244e:	89 8f       	std	Y+25, r24	; 0x19
    2450:	89 8d       	ldd	r24, Y+25	; 0x19
    2452:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_displayCharacter+0x846>
    2458:	9a 8f       	std	Y+26, r25	; 0x1a
    245a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	8f 89       	ldd	r24, Y+23	; 0x17
    245e:	98 8d       	ldd	r25, Y+24	; 0x18
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	98 8f       	std	Y+24, r25	; 0x18
    2464:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	8f 89       	ldd	r24, Y+23	; 0x17
    2468:	98 8d       	ldd	r25, Y+24	; 0x18
    246a:	89 2b       	or	r24, r25
    246c:	69 f7       	brne	.-38     	; 0x2448 <LCD_displayCharacter+0x83a>
    246e:	14 c0       	rjmp	.+40     	; 0x2498 <LCD_displayCharacter+0x88a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2470:	6b 89       	ldd	r22, Y+19	; 0x13
    2472:	7c 89       	ldd	r23, Y+20	; 0x14
    2474:	8d 89       	ldd	r24, Y+21	; 0x15
    2476:	9e 89       	ldd	r25, Y+22	; 0x16
    2478:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	98 8f       	std	Y+24, r25	; 0x18
    2482:	8f 8b       	std	Y+23, r24	; 0x17
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	9c 8f       	std	Y+28, r25	; 0x1c
    248a:	8b 8f       	std	Y+27, r24	; 0x1b
    248c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_displayCharacter+0x882>
    2494:	9c 8f       	std	Y+28, r25	; 0x1c
    2496:	8b 8f       	std	Y+27, r24	; 0x1b

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	62 e0       	ldi	r22, 0x02	; 2
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e8       	ldi	r26, 0x80	; 128
    24a8:	bf e3       	ldi	r27, 0x3F	; 63
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	ab 83       	std	Y+3, r26	; 0x03
    24b0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a e7       	ldi	r20, 0x7A	; 122
    24b8:	55 e4       	ldi	r21, 0x45	; 69
    24ba:	69 81       	ldd	r22, Y+1	; 0x01
    24bc:	7a 81       	ldd	r23, Y+2	; 0x02
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	af 83       	std	Y+7, r26	; 0x07
    24d0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	6d 81       	ldd	r22, Y+5	; 0x05
    24dc:	7e 81       	ldd	r23, Y+6	; 0x06
    24de:	8f 81       	ldd	r24, Y+7	; 0x07
    24e0:	98 85       	ldd	r25, Y+8	; 0x08
    24e2:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <LCD_displayCharacter+0x8e6>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9a 87       	std	Y+10, r25	; 0x0a
    24f0:	89 87       	std	Y+9, r24	; 0x09
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <LCD_displayCharacter+0x964>
	else if (__tmp > 65535)
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	6d 81       	ldd	r22, Y+5	; 0x05
    24fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2500:	8f 81       	ldd	r24, Y+7	; 0x07
    2502:	98 85       	ldd	r25, Y+8	; 0x08
    2504:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <LCD_displayCharacter+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	69 81       	ldd	r22, Y+1	; 0x01
    2516:	7a 81       	ldd	r23, Y+2	; 0x02
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9a 87       	std	Y+10, r25	; 0x0a
    2532:	89 87       	std	Y+9, r24	; 0x09
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <LCD_displayCharacter+0x946>
    2536:	80 e9       	ldi	r24, 0x90	; 144
    2538:	91 e0       	ldi	r25, 0x01	; 1
    253a:	9c 87       	std	Y+12, r25	; 0x0c
    253c:	8b 87       	std	Y+11, r24	; 0x0b
    253e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2540:	9c 85       	ldd	r25, Y+12	; 0x0c
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_displayCharacter+0x934>
    2546:	9c 87       	std	Y+12, r25	; 0x0c
    2548:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	9a 87       	std	Y+10, r25	; 0x0a
    2552:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	9a 85       	ldd	r25, Y+10	; 0x0a
    2558:	89 2b       	or	r24, r25
    255a:	69 f7       	brne	.-38     	; 0x2536 <LCD_displayCharacter+0x928>
	DIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    255c:	14 c0       	rjmp	.+40     	; 0x2586 <LCD_displayCharacter+0x978>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	6d 81       	ldd	r22, Y+5	; 0x05
    2560:	7e 81       	ldd	r23, Y+6	; 0x06
    2562:	8f 81       	ldd	r24, Y+7	; 0x07
    2564:	98 85       	ldd	r25, Y+8	; 0x08
    2566:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9a 87       	std	Y+10, r25	; 0x0a
    2570:	89 87       	std	Y+9, r24	; 0x09
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	9e 87       	std	Y+14, r25	; 0x0e
    2578:	8d 87       	std	Y+13, r24	; 0x0d
    257a:	8d 85       	ldd	r24, Y+13	; 0x0d
    257c:	9e 85       	ldd	r25, Y+14	; 0x0e
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_displayCharacter+0x970>
    2582:	9e 87       	std	Y+14, r25	; 0x0e
    2584:	8d 87       	std	Y+13, r24	; 0x0d
    2586:	00 00       	nop
    2588:	cd 59       	subi	r28, 0x9D	; 157
    258a:	df 4f       	sbci	r29, 0xFF	; 255
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	08 95       	ret

000025a0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <LCD_displayString+0x6>
    25a6:	1f 92       	push	r1
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	9b 83       	std	Y+3, r25	; 0x03
    25ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25b0:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
    25b2:	0e c0       	rjmp	.+28     	; 0x25d0 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(Str[i]);
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	2a 81       	ldd	r18, Y+2	; 0x02
    25bc:	3b 81       	ldd	r19, Y+3	; 0x03
    25be:	82 0f       	add	r24, r18
    25c0:	93 1f       	adc	r25, r19
    25c2:	fc 01       	movw	r30, r24
    25c4:	80 81       	ld	r24, Z
    25c6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_displayCharacter>
		i++;
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	2a 81       	ldd	r18, Y+2	; 0x02
    25d8:	3b 81       	ldd	r19, Y+3	; 0x03
    25da:	82 0f       	add	r24, r18
    25dc:	93 1f       	adc	r25, r19
    25de:	fc 01       	movw	r30, r24
    25e0:	80 81       	ld	r24, Z
    25e2:	88 23       	and	r24, r24
    25e4:	39 f7       	brne	.-50     	; 0x25b4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25e6:	00 00       	nop
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	08 95       	ret

000025f4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <LCD_moveCursor+0x6>
    25fa:	1f 92       	push	r1
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	8a 83       	std	Y+2, r24	; 0x02
    2602:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	88 2f       	mov	r24, r24
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	91 05       	cpc	r25, r1
    260e:	79 f0       	breq	.+30     	; 0x262e <LCD_moveCursor+0x3a>
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	91 05       	cpc	r25, r1
    2614:	1c f4       	brge	.+6      	; 0x261c <LCD_moveCursor+0x28>
    2616:	89 2b       	or	r24, r25
    2618:	39 f0       	breq	.+14     	; 0x2628 <LCD_moveCursor+0x34>
    261a:	15 c0       	rjmp	.+42     	; 0x2646 <LCD_moveCursor+0x52>
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	91 05       	cpc	r25, r1
    2620:	51 f0       	breq	.+20     	; 0x2636 <LCD_moveCursor+0x42>
    2622:	03 97       	sbiw	r24, 0x03	; 3
    2624:	61 f0       	breq	.+24     	; 0x263e <LCD_moveCursor+0x4a>
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <LCD_moveCursor+0x52>
	{
		case 0:
			lcd_memory_address=col;
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	89 83       	std	Y+1, r24	; 0x01
				break;
    262c:	0c c0       	rjmp	.+24     	; 0x2646 <LCD_moveCursor+0x52>
		case 1:
			lcd_memory_address=col+0xC0;
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	80 54       	subi	r24, 0x40	; 64
    2632:	89 83       	std	Y+1, r24	; 0x01
				break;
    2634:	08 c0       	rjmp	.+16     	; 0x2646 <LCD_moveCursor+0x52>
		case 2:
			lcd_memory_address=col+0x94;
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	8c 56       	subi	r24, 0x6C	; 108
    263a:	89 83       	std	Y+1, r24	; 0x01
				break;
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <LCD_moveCursor+0x52>
		case 3:
			lcd_memory_address=col+0xD4;
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	8c 52       	subi	r24, 0x2C	; 44
    2642:	89 83       	std	Y+1, r24	; 0x01
				break;
    2644:	00 00       	nop
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	80 68       	ori	r24, 0x80	; 128
    264a:	0e 94 3e 09 	call	0x127c	; 0x127c <LCD_sendCommand>
}
    264e:	00 00       	nop
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	08 95       	ret

0000265c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    265c:	cf 93       	push	r28
    265e:	df 93       	push	r29
    2660:	00 d0       	rcall	.+0      	; 0x2662 <LCD_displayStringRowColumn+0x6>
    2662:	00 d0       	rcall	.+0      	; 0x2664 <LCD_displayStringRowColumn+0x8>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	6a 83       	std	Y+2, r22	; 0x02
    266c:	5c 83       	std	Y+4, r21	; 0x04
    266e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2670:	6a 81       	ldd	r22, Y+2	; 0x02
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
}
    2680:	00 00       	nop
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	08 95       	ret

00002690 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	62 97       	sbiw	r28, 0x12	; 18
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	9a 8b       	std	Y+18, r25	; 0x12
    26a6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26a8:	89 89       	ldd	r24, Y+17	; 0x11
    26aa:	9a 89       	ldd	r25, Y+18	; 0x12
    26ac:	4a e0       	ldi	r20, 0x0A	; 10
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	9e 01       	movw	r18, r28
    26b2:	2f 5f       	subi	r18, 0xFF	; 255
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	b9 01       	movw	r22, r18
    26b8:	0e 94 43 29 	call	0x5286	; 0x5286 <itoa>
   LCD_displayString(buff); /* Display the string */
    26bc:	ce 01       	movw	r24, r28
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
}
    26c4:	00 00       	nop
    26c6:	62 96       	adiw	r28, 0x12	; 18
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	08 95       	ret

000026d8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	0e 94 3e 09 	call	0x127c	; 0x127c <LCD_sendCommand>
}
    26e6:	00 00       	nop
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <BMP180_ReadCalb>:
/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;
void delay(void);
void BMP180_ReadCalb(void) {
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	ca 5b       	subi	r28, 0xBA	; 186
    26fc:	d1 09       	sbc	r29, r1
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61

	uint8_t Callib_Data[22] = { 0 };
    2708:	ce 01       	movw	r24, r28
    270a:	8b 55       	subi	r24, 0x5B	; 91
    270c:	9f 4f       	sbci	r25, 0xFF	; 255
    270e:	26 e1       	ldi	r18, 0x16	; 22
    2710:	fc 01       	movw	r30, r24
    2712:	32 2f       	mov	r19, r18
    2714:	11 92       	st	Z+, r1
    2716:	3a 95       	dec	r19
    2718:	e9 f7       	brne	.-6      	; 0x2714 <BMP180_ReadCalb+0x26>
	uint16_t Callib_Start = 0xAA;
    271a:	8a ea       	ldi	r24, 0xAA	; 170
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03

	for (int i = 0; i < 22; i++) {
    2722:	1a 82       	std	Y+2, r1	; 0x02
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	eb c6       	rjmp	.+3542   	; 0x34fe <BMP180_ReadCalb+0xe10>
		TWI_Start_Wait(BMP180_ADDRESS_W);// To write
    2728:	8e ee       	ldi	r24, 0xEE	; 238
    272a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Start_Wait>
    272e:	9e 01       	movw	r18, r28
    2730:	2b 57       	subi	r18, 0x7B	; 123
    2732:	3f 4f       	sbci	r19, 0xFF	; 255
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e2       	ldi	r26, 0x20	; 32
    273a:	b1 e4       	ldi	r27, 0x41	; 65
    273c:	f9 01       	movw	r30, r18
    273e:	80 83       	st	Z, r24
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	a2 83       	std	Z+2, r26	; 0x02
    2744:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2746:	8e 01       	movw	r16, r28
    2748:	07 57       	subi	r16, 0x77	; 119
    274a:	1f 4f       	sbci	r17, 0xFF	; 255
    274c:	ce 01       	movw	r24, r28
    274e:	8b 57       	subi	r24, 0x7B	; 123
    2750:	9f 4f       	sbci	r25, 0xFF	; 255
    2752:	2b ea       	ldi	r18, 0xAB	; 171
    2754:	3a ea       	ldi	r19, 0xAA	; 170
    2756:	4a ea       	ldi	r20, 0xAA	; 170
    2758:	50 e4       	ldi	r21, 0x40	; 64
    275a:	fc 01       	movw	r30, r24
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	f8 01       	movw	r30, r16
    276e:	80 83       	st	Z, r24
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	a2 83       	std	Z+2, r26	; 0x02
    2774:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2776:	8e 01       	movw	r16, r28
    2778:	03 57       	subi	r16, 0x73	; 115
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	ce 01       	movw	r24, r28
    277e:	8b 57       	subi	r24, 0x7B	; 123
    2780:	9f 4f       	sbci	r25, 0xFF	; 255
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	50 e4       	ldi	r21, 0x40	; 64
    278a:	fc 01       	movw	r30, r24
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	f8 01       	movw	r30, r16
    279e:	80 83       	st	Z, r24
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	a2 83       	std	Z+2, r26	; 0x02
    27a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a6:	ce 01       	movw	r24, r28
    27a8:	87 57       	subi	r24, 0x77	; 119
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	fc 01       	movw	r30, r24
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    27c2:	88 23       	and	r24, r24
    27c4:	3c f4       	brge	.+14     	; 0x27d4 <BMP180_ReadCalb+0xe6>
		__ticks = 1;
    27c6:	ce 01       	movw	r24, r28
    27c8:	8f 56       	subi	r24, 0x6F	; 111
    27ca:	9f 4f       	sbci	r25, 0xFF	; 255
    27cc:	21 e0       	ldi	r18, 0x01	; 1
    27ce:	fc 01       	movw	r30, r24
    27d0:	20 83       	st	Z, r18
    27d2:	30 c1       	rjmp	.+608    	; 0x2a34 <BMP180_ReadCalb+0x346>
	else if (__tmp2 > 65535)
    27d4:	ce 01       	movw	r24, r28
    27d6:	83 57       	subi	r24, 0x73	; 115
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	fc 01       	movw	r30, r24
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	0c f0       	brlt	.+2      	; 0x27f6 <BMP180_ReadCalb+0x108>
    27f4:	d1 c0       	rjmp	.+418    	; 0x2998 <BMP180_ReadCalb+0x2aa>
	{
		_delay_ms(__us / 1000.0);
    27f6:	ce 01       	movw	r24, r28
    27f8:	8b 57       	subi	r24, 0x7B	; 123
    27fa:	9f 4f       	sbci	r25, 0xFF	; 255
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4a e7       	ldi	r20, 0x7A	; 122
    2802:	54 e4       	ldi	r21, 0x44	; 68
    2804:	fc 01       	movw	r30, r24
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9e 01       	movw	r18, r28
    2818:	2e 56       	subi	r18, 0x6E	; 110
    281a:	3f 4f       	sbci	r19, 0xFF	; 255
    281c:	f9 01       	movw	r30, r18
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2826:	8e 01       	movw	r16, r28
    2828:	0a 56       	subi	r16, 0x6A	; 106
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	ce 01       	movw	r24, r28
    282e:	8e 56       	subi	r24, 0x6E	; 110
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4a e7       	ldi	r20, 0x7A	; 122
    2838:	55 e4       	ldi	r21, 0x45	; 69
    283a:	fc 01       	movw	r30, r24
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	f8 01       	movw	r30, r16
    284e:	80 83       	st	Z, r24
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	a2 83       	std	Z+2, r26	; 0x02
    2854:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2856:	ce 01       	movw	r24, r28
    2858:	8a 56       	subi	r24, 0x6A	; 106
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e8       	ldi	r20, 0x80	; 128
    2862:	5f e3       	ldi	r21, 0x3F	; 63
    2864:	fc 01       	movw	r30, r24
    2866:	60 81       	ld	r22, Z
    2868:	71 81       	ldd	r23, Z+1	; 0x01
    286a:	82 81       	ldd	r24, Z+2	; 0x02
    286c:	93 81       	ldd	r25, Z+3	; 0x03
    286e:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    2872:	88 23       	and	r24, r24
    2874:	4c f4       	brge	.+18     	; 0x2888 <BMP180_ReadCalb+0x19a>
		__ticks = 1;
    2876:	ce 01       	movw	r24, r28
    2878:	86 56       	subi	r24, 0x66	; 102
    287a:	9f 4f       	sbci	r25, 0xFF	; 255
    287c:	21 e0       	ldi	r18, 0x01	; 1
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	fc 01       	movw	r30, r24
    2882:	31 83       	std	Z+1, r19	; 0x01
    2884:	20 83       	st	Z, r18
    2886:	6d c0       	rjmp	.+218    	; 0x2962 <BMP180_ReadCalb+0x274>
	else if (__tmp > 65535)
    2888:	ce 01       	movw	r24, r28
    288a:	8a 56       	subi	r24, 0x6A	; 106
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	fc 01       	movw	r30, r24
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	0c f0       	brlt	.+2      	; 0x28aa <BMP180_ReadCalb+0x1bc>
    28a8:	4a c0       	rjmp	.+148    	; 0x293e <BMP180_ReadCalb+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	ce 01       	movw	r24, r28
    28ac:	8e 56       	subi	r24, 0x6E	; 110
    28ae:	9f 4f       	sbci	r25, 0xFF	; 255
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	fc 01       	movw	r30, r24
    28ba:	60 81       	ld	r22, Z
    28bc:	71 81       	ldd	r23, Z+1	; 0x01
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	93 81       	ldd	r25, Z+3	; 0x03
    28c2:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	8e 01       	movw	r16, r28
    28cc:	06 56       	subi	r16, 0x66	; 102
    28ce:	1f 4f       	sbci	r17, 0xFF	; 255
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	24 c0       	rjmp	.+72     	; 0x292c <BMP180_ReadCalb+0x23e>
    28e4:	ce 01       	movw	r24, r28
    28e6:	84 56       	subi	r24, 0x64	; 100
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	20 e9       	ldi	r18, 0x90	; 144
    28ec:	31 e0       	ldi	r19, 0x01	; 1
    28ee:	fc 01       	movw	r30, r24
    28f0:	31 83       	std	Z+1, r19	; 0x01
    28f2:	20 83       	st	Z, r18
    28f4:	ce 01       	movw	r24, r28
    28f6:	84 56       	subi	r24, 0x64	; 100
    28f8:	9f 4f       	sbci	r25, 0xFF	; 255
    28fa:	fc 01       	movw	r30, r24
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <BMP180_ReadCalb+0x212>
    2904:	9e 01       	movw	r18, r28
    2906:	24 56       	subi	r18, 0x64	; 100
    2908:	3f 4f       	sbci	r19, 0xFF	; 255
    290a:	f9 01       	movw	r30, r18
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2910:	ce 01       	movw	r24, r28
    2912:	86 56       	subi	r24, 0x66	; 102
    2914:	9f 4f       	sbci	r25, 0xFF	; 255
    2916:	9e 01       	movw	r18, r28
    2918:	26 56       	subi	r18, 0x66	; 102
    291a:	3f 4f       	sbci	r19, 0xFF	; 255
    291c:	f9 01       	movw	r30, r18
    291e:	20 81       	ld	r18, Z
    2920:	31 81       	ldd	r19, Z+1	; 0x01
    2922:	21 50       	subi	r18, 0x01	; 1
    2924:	31 09       	sbc	r19, r1
    2926:	fc 01       	movw	r30, r24
    2928:	31 83       	std	Z+1, r19	; 0x01
    292a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292c:	ce 01       	movw	r24, r28
    292e:	86 56       	subi	r24, 0x66	; 102
    2930:	9f 4f       	sbci	r25, 0xFF	; 255
    2932:	fc 01       	movw	r30, r24
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	89 2b       	or	r24, r25
    293a:	a1 f6       	brne	.-88     	; 0x28e4 <BMP180_ReadCalb+0x1f6>
    293c:	7b c0       	rjmp	.+246    	; 0x2a34 <BMP180_ReadCalb+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	8e 01       	movw	r16, r28
    2940:	06 56       	subi	r16, 0x66	; 102
    2942:	1f 4f       	sbci	r17, 0xFF	; 255
    2944:	ce 01       	movw	r24, r28
    2946:	8a 56       	subi	r24, 0x6A	; 106
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	fc 01       	movw	r30, r24
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	f8 01       	movw	r30, r16
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
    2962:	ce 01       	movw	r24, r28
    2964:	82 56       	subi	r24, 0x62	; 98
    2966:	9f 4f       	sbci	r25, 0xFF	; 255
    2968:	9e 01       	movw	r18, r28
    296a:	26 56       	subi	r18, 0x66	; 102
    296c:	3f 4f       	sbci	r19, 0xFF	; 255
    296e:	f9 01       	movw	r30, r18
    2970:	20 81       	ld	r18, Z
    2972:	31 81       	ldd	r19, Z+1	; 0x01
    2974:	fc 01       	movw	r30, r24
    2976:	31 83       	std	Z+1, r19	; 0x01
    2978:	20 83       	st	Z, r18
    297a:	ce 01       	movw	r24, r28
    297c:	82 56       	subi	r24, 0x62	; 98
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	fc 01       	movw	r30, r24
    2982:	80 81       	ld	r24, Z
    2984:	91 81       	ldd	r25, Z+1	; 0x01
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <BMP180_ReadCalb+0x298>
    298a:	9e 01       	movw	r18, r28
    298c:	22 56       	subi	r18, 0x62	; 98
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	f9 01       	movw	r30, r18
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	80 83       	st	Z, r24
    2996:	4e c0       	rjmp	.+156    	; 0x2a34 <BMP180_ReadCalb+0x346>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2998:	ce 01       	movw	r24, r28
    299a:	87 57       	subi	r24, 0x77	; 119
    299c:	9f 4f       	sbci	r25, 0xFF	; 255
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4f e7       	ldi	r20, 0x7F	; 127
    29a4:	53 e4       	ldi	r21, 0x43	; 67
    29a6:	fc 01       	movw	r30, r24
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	6c f5       	brge	.+90     	; 0x2a12 <BMP180_ReadCalb+0x324>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    29b8:	8e 01       	movw	r16, r28
    29ba:	00 56       	subi	r16, 0x60	; 96
    29bc:	1f 4f       	sbci	r17, 0xFF	; 255
    29be:	ce 01       	movw	r24, r28
    29c0:	83 57       	subi	r24, 0x73	; 115
    29c2:	9f 4f       	sbci	r25, 0xFF	; 255
    29c4:	fc 01       	movw	r30, r24
    29c6:	60 81       	ld	r22, Z
    29c8:	71 81       	ldd	r23, Z+1	; 0x01
    29ca:	82 81       	ldd	r24, Z+2	; 0x02
    29cc:	93 81       	ldd	r25, Z+3	; 0x03
    29ce:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	f8 01       	movw	r30, r16
    29d8:	91 83       	std	Z+1, r25	; 0x01
    29da:	80 83       	st	Z, r24
    29dc:	ce 01       	movw	r24, r28
    29de:	8e 55       	subi	r24, 0x5E	; 94
    29e0:	9f 4f       	sbci	r25, 0xFF	; 255
    29e2:	9e 01       	movw	r18, r28
    29e4:	20 56       	subi	r18, 0x60	; 96
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	f9 01       	movw	r30, r18
    29ea:	20 81       	ld	r18, Z
    29ec:	31 81       	ldd	r19, Z+1	; 0x01
    29ee:	fc 01       	movw	r30, r24
    29f0:	31 83       	std	Z+1, r19	; 0x01
    29f2:	20 83       	st	Z, r18
    29f4:	ce 01       	movw	r24, r28
    29f6:	8e 55       	subi	r24, 0x5E	; 94
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	fc 01       	movw	r30, r24
    29fc:	80 81       	ld	r24, Z
    29fe:	91 81       	ldd	r25, Z+1	; 0x01
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <BMP180_ReadCalb+0x312>
    2a04:	9e 01       	movw	r18, r28
    2a06:	2e 55       	subi	r18, 0x5E	; 94
    2a08:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0a:	f9 01       	movw	r30, r18
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
    2a10:	28 c0       	rjmp	.+80     	; 0x2a62 <BMP180_ReadCalb+0x374>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a12:	8e 01       	movw	r16, r28
    2a14:	0f 56       	subi	r16, 0x6F	; 111
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	ce 01       	movw	r24, r28
    2a1a:	87 57       	subi	r24, 0x77	; 119
    2a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1e:	fc 01       	movw	r30, r24
    2a20:	60 81       	ld	r22, Z
    2a22:	71 81       	ldd	r23, Z+1	; 0x01
    2a24:	82 81       	ldd	r24, Z+2	; 0x02
    2a26:	93 81       	ldd	r25, Z+3	; 0x03
    2a28:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	f8 01       	movw	r30, r16
    2a32:	80 83       	st	Z, r24
    2a34:	ce 01       	movw	r24, r28
    2a36:	8c 55       	subi	r24, 0x5C	; 92
    2a38:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3a:	9e 01       	movw	r18, r28
    2a3c:	2f 56       	subi	r18, 0x6F	; 111
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a40:	f9 01       	movw	r30, r18
    2a42:	20 81       	ld	r18, Z
    2a44:	fc 01       	movw	r30, r24
    2a46:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a48:	ce 01       	movw	r24, r28
    2a4a:	8c 55       	subi	r24, 0x5C	; 92
    2a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4e:	fc 01       	movw	r30, r24
    2a50:	80 81       	ld	r24, Z
    2a52:	28 2f       	mov	r18, r24
    2a54:	2a 95       	dec	r18
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <BMP180_ReadCalb+0x366>
    2a58:	ce 01       	movw	r24, r28
    2a5a:	8c 55       	subi	r24, 0x5C	; 92
    2a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5e:	fc 01       	movw	r30, r24
    2a60:	20 83       	st	Z, r18
		_delay_us(10);
		TWI_WriteByte(Callib_Start + i);
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	89 0f       	add	r24, r25
    2a68:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
    2a6c:	9e 01       	movw	r18, r28
    2a6e:	2b 59       	subi	r18, 0x9B	; 155
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 e2       	ldi	r26, 0x20	; 32
    2a78:	b1 e4       	ldi	r27, 0x41	; 65
    2a7a:	f9 01       	movw	r30, r18
    2a7c:	80 83       	st	Z, r24
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	a2 83       	std	Z+2, r26	; 0x02
    2a82:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2a84:	8e 01       	movw	r16, r28
    2a86:	07 59       	subi	r16, 0x97	; 151
    2a88:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	8b 59       	subi	r24, 0x9B	; 155
    2a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a90:	2b ea       	ldi	r18, 0xAB	; 171
    2a92:	3a ea       	ldi	r19, 0xAA	; 170
    2a94:	4a ea       	ldi	r20, 0xAA	; 170
    2a96:	50 e4       	ldi	r21, 0x40	; 64
    2a98:	fc 01       	movw	r30, r24
    2a9a:	60 81       	ld	r22, Z
    2a9c:	71 81       	ldd	r23, Z+1	; 0x01
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	f8 01       	movw	r30, r16
    2aac:	80 83       	st	Z, r24
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	a2 83       	std	Z+2, r26	; 0x02
    2ab2:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2ab4:	8e 01       	movw	r16, r28
    2ab6:	03 59       	subi	r16, 0x93	; 147
    2ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aba:	ce 01       	movw	r24, r28
    2abc:	8b 59       	subi	r24, 0x9B	; 155
    2abe:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	50 e4       	ldi	r21, 0x40	; 64
    2ac8:	fc 01       	movw	r30, r24
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	f8 01       	movw	r30, r16
    2adc:	80 83       	st	Z, r24
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	a2 83       	std	Z+2, r26	; 0x02
    2ae2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	87 59       	subi	r24, 0x97	; 151
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	fc 01       	movw	r30, r24
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    2b00:	88 23       	and	r24, r24
    2b02:	3c f4       	brge	.+14     	; 0x2b12 <BMP180_ReadCalb+0x424>
		__ticks = 1;
    2b04:	ce 01       	movw	r24, r28
    2b06:	8f 58       	subi	r24, 0x8F	; 143
    2b08:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0a:	21 e0       	ldi	r18, 0x01	; 1
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	20 83       	st	Z, r18
    2b10:	30 c1       	rjmp	.+608    	; 0x2d72 <BMP180_ReadCalb+0x684>
	else if (__tmp2 > 65535)
    2b12:	ce 01       	movw	r24, r28
    2b14:	83 59       	subi	r24, 0x93	; 147
    2b16:	9f 4f       	sbci	r25, 0xFF	; 255
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	fc 01       	movw	r30, r24
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	0c f0       	brlt	.+2      	; 0x2b34 <BMP180_ReadCalb+0x446>
    2b32:	d1 c0       	rjmp	.+418    	; 0x2cd6 <BMP180_ReadCalb+0x5e8>
	{
		_delay_ms(__us / 1000.0);
    2b34:	ce 01       	movw	r24, r28
    2b36:	8b 59       	subi	r24, 0x9B	; 155
    2b38:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4a e7       	ldi	r20, 0x7A	; 122
    2b40:	54 e4       	ldi	r21, 0x44	; 68
    2b42:	fc 01       	movw	r30, r24
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9e 01       	movw	r18, r28
    2b56:	2e 58       	subi	r18, 0x8E	; 142
    2b58:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5a:	f9 01       	movw	r30, r18
    2b5c:	80 83       	st	Z, r24
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	a2 83       	std	Z+2, r26	; 0x02
    2b62:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b64:	8e 01       	movw	r16, r28
    2b66:	0a 58       	subi	r16, 0x8A	; 138
    2b68:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	8e 58       	subi	r24, 0x8E	; 142
    2b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a e7       	ldi	r20, 0x7A	; 122
    2b76:	55 e4       	ldi	r21, 0x45	; 69
    2b78:	fc 01       	movw	r30, r24
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	80 83       	st	Z, r24
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	a2 83       	std	Z+2, r26	; 0x02
    2b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b94:	ce 01       	movw	r24, r28
    2b96:	8a 58       	subi	r24, 0x8A	; 138
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	5f e3       	ldi	r21, 0x3F	; 63
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	4c f4       	brge	.+18     	; 0x2bc6 <BMP180_ReadCalb+0x4d8>
		__ticks = 1;
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	86 58       	subi	r24, 0x86	; 134
    2bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bba:	21 e0       	ldi	r18, 0x01	; 1
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	31 83       	std	Z+1, r19	; 0x01
    2bc2:	20 83       	st	Z, r18
    2bc4:	6d c0       	rjmp	.+218    	; 0x2ca0 <BMP180_ReadCalb+0x5b2>
	else if (__tmp > 65535)
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	8a 58       	subi	r24, 0x8A	; 138
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	57 e4       	ldi	r21, 0x47	; 71
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <BMP180_ReadCalb+0x4fa>
    2be6:	4a c0       	rjmp	.+148    	; 0x2c7c <BMP180_ReadCalb+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be8:	ce 01       	movw	r24, r28
    2bea:	8e 58       	subi	r24, 0x8E	; 142
    2bec:	9f 4f       	sbci	r25, 0xFF	; 255
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	60 81       	ld	r22, Z
    2bfa:	71 81       	ldd	r23, Z+1	; 0x01
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	8e 01       	movw	r16, r28
    2c0a:	06 58       	subi	r16, 0x86	; 134
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	bc 01       	movw	r22, r24
    2c10:	cd 01       	movw	r24, r26
    2c12:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	80 83       	st	Z, r24
    2c20:	24 c0       	rjmp	.+72     	; 0x2c6a <BMP180_ReadCalb+0x57c>
    2c22:	ce 01       	movw	r24, r28
    2c24:	84 58       	subi	r24, 0x84	; 132
    2c26:	9f 4f       	sbci	r25, 0xFF	; 255
    2c28:	20 e9       	ldi	r18, 0x90	; 144
    2c2a:	31 e0       	ldi	r19, 0x01	; 1
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	31 83       	std	Z+1, r19	; 0x01
    2c30:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c32:	ce 01       	movw	r24, r28
    2c34:	84 58       	subi	r24, 0x84	; 132
    2c36:	9f 4f       	sbci	r25, 0xFF	; 255
    2c38:	fc 01       	movw	r30, r24
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <BMP180_ReadCalb+0x550>
    2c42:	9e 01       	movw	r18, r28
    2c44:	24 58       	subi	r18, 0x84	; 132
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	f9 01       	movw	r30, r18
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4e:	ce 01       	movw	r24, r28
    2c50:	86 58       	subi	r24, 0x86	; 134
    2c52:	9f 4f       	sbci	r25, 0xFF	; 255
    2c54:	9e 01       	movw	r18, r28
    2c56:	26 58       	subi	r18, 0x86	; 134
    2c58:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5a:	f9 01       	movw	r30, r18
    2c5c:	20 81       	ld	r18, Z
    2c5e:	31 81       	ldd	r19, Z+1	; 0x01
    2c60:	21 50       	subi	r18, 0x01	; 1
    2c62:	31 09       	sbc	r19, r1
    2c64:	fc 01       	movw	r30, r24
    2c66:	31 83       	std	Z+1, r19	; 0x01
    2c68:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	86 58       	subi	r24, 0x86	; 134
    2c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c70:	fc 01       	movw	r30, r24
    2c72:	80 81       	ld	r24, Z
    2c74:	91 81       	ldd	r25, Z+1	; 0x01
    2c76:	89 2b       	or	r24, r25
    2c78:	a1 f6       	brne	.-88     	; 0x2c22 <BMP180_ReadCalb+0x534>
    2c7a:	7b c0       	rjmp	.+246    	; 0x2d72 <BMP180_ReadCalb+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7c:	8e 01       	movw	r16, r28
    2c7e:	06 58       	subi	r16, 0x86	; 134
    2c80:	1f 4f       	sbci	r17, 0xFF	; 255
    2c82:	ce 01       	movw	r24, r28
    2c84:	8a 58       	subi	r24, 0x8A	; 138
    2c86:	9f 4f       	sbci	r25, 0xFF	; 255
    2c88:	fc 01       	movw	r30, r24
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	80 83       	st	Z, r24
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	82 58       	subi	r24, 0x82	; 130
    2ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca6:	9e 01       	movw	r18, r28
    2ca8:	26 58       	subi	r18, 0x86	; 134
    2caa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cac:	f9 01       	movw	r30, r18
    2cae:	20 81       	ld	r18, Z
    2cb0:	31 81       	ldd	r19, Z+1	; 0x01
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	31 83       	std	Z+1, r19	; 0x01
    2cb6:	20 83       	st	Z, r18
    2cb8:	ce 01       	movw	r24, r28
    2cba:	82 58       	subi	r24, 0x82	; 130
    2cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	80 81       	ld	r24, Z
    2cc2:	91 81       	ldd	r25, Z+1	; 0x01
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <BMP180_ReadCalb+0x5d6>
    2cc8:	9e 01       	movw	r18, r28
    2cca:	22 58       	subi	r18, 0x82	; 130
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	f9 01       	movw	r30, r18
    2cd0:	91 83       	std	Z+1, r25	; 0x01
    2cd2:	80 83       	st	Z, r24
    2cd4:	4e c0       	rjmp	.+156    	; 0x2d72 <BMP180_ReadCalb+0x684>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	87 59       	subi	r24, 0x97	; 151
    2cda:	9f 4f       	sbci	r25, 0xFF	; 255
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	53 e4       	ldi	r21, 0x43	; 67
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	6c f5       	brge	.+90     	; 0x2d50 <BMP180_ReadCalb+0x662>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2cf6:	8e 01       	movw	r16, r28
    2cf8:	00 58       	subi	r16, 0x80	; 128
    2cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	83 59       	subi	r24, 0x93	; 147
    2d00:	9f 4f       	sbci	r25, 0xFF	; 255
    2d02:	fc 01       	movw	r30, r24
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	f8 01       	movw	r30, r16
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	8e 57       	subi	r24, 0x7E	; 126
    2d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d20:	9e 01       	movw	r18, r28
    2d22:	20 58       	subi	r18, 0x80	; 128
    2d24:	3f 4f       	sbci	r19, 0xFF	; 255
    2d26:	f9 01       	movw	r30, r18
    2d28:	20 81       	ld	r18, Z
    2d2a:	31 81       	ldd	r19, Z+1	; 0x01
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	31 83       	std	Z+1, r19	; 0x01
    2d30:	20 83       	st	Z, r18
    2d32:	ce 01       	movw	r24, r28
    2d34:	8e 57       	subi	r24, 0x7E	; 126
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	fc 01       	movw	r30, r24
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <BMP180_ReadCalb+0x650>
    2d42:	9e 01       	movw	r18, r28
    2d44:	2e 57       	subi	r18, 0x7E	; 126
    2d46:	3f 4f       	sbci	r19, 0xFF	; 255
    2d48:	f9 01       	movw	r30, r18
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
    2d4e:	28 c0       	rjmp	.+80     	; 0x2da0 <BMP180_ReadCalb+0x6b2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d50:	8e 01       	movw	r16, r28
    2d52:	0f 58       	subi	r16, 0x8F	; 143
    2d54:	1f 4f       	sbci	r17, 0xFF	; 255
    2d56:	ce 01       	movw	r24, r28
    2d58:	87 59       	subi	r24, 0x97	; 151
    2d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	f8 01       	movw	r30, r16
    2d70:	80 83       	st	Z, r24
    2d72:	ce 01       	movw	r24, r28
    2d74:	8c 57       	subi	r24, 0x7C	; 124
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	9e 01       	movw	r18, r28
    2d7a:	2f 58       	subi	r18, 0x8F	; 143
    2d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7e:	f9 01       	movw	r30, r18
    2d80:	20 81       	ld	r18, Z
    2d82:	fc 01       	movw	r30, r24
    2d84:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d86:	ce 01       	movw	r24, r28
    2d88:	8c 57       	subi	r24, 0x7C	; 124
    2d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	80 81       	ld	r24, Z
    2d90:	28 2f       	mov	r18, r24
    2d92:	2a 95       	dec	r18
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <BMP180_ReadCalb+0x6a4>
    2d96:	ce 01       	movw	r24, r28
    2d98:	8c 57       	subi	r24, 0x7C	; 124
    2d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	20 83       	st	Z, r18
		_delay_us(10);
		TWI_Repeated_start(BMP180_ADDRESS_R);	// To read
    2da0:	8f ee       	ldi	r24, 0xEF	; 239
    2da2:	0e 94 bd 00 	call	0x17a	; 0x17a <TWI_Repeated_start>
    2da6:	9e 01       	movw	r18, r28
    2da8:	2b 5b       	subi	r18, 0xBB	; 187
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	a0 e2       	ldi	r26, 0x20	; 32
    2db2:	b1 e4       	ldi	r27, 0x41	; 65
    2db4:	f9 01       	movw	r30, r18
    2db6:	80 83       	st	Z, r24
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	a2 83       	std	Z+2, r26	; 0x02
    2dbc:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	07 5b       	subi	r16, 0xB7	; 183
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	8b 5b       	subi	r24, 0xBB	; 187
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	2b ea       	ldi	r18, 0xAB	; 171
    2dcc:	3a ea       	ldi	r19, 0xAA	; 170
    2dce:	4a ea       	ldi	r20, 0xAA	; 170
    2dd0:	50 e4       	ldi	r21, 0x40	; 64
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	60 81       	ld	r22, Z
    2dd6:	71 81       	ldd	r23, Z+1	; 0x01
    2dd8:	82 81       	ldd	r24, Z+2	; 0x02
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	f8 01       	movw	r30, r16
    2de6:	80 83       	st	Z, r24
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	a2 83       	std	Z+2, r26	; 0x02
    2dec:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2dee:	8e 01       	movw	r16, r28
    2df0:	03 5b       	subi	r16, 0xB3	; 179
    2df2:	1f 4f       	sbci	r17, 0xFF	; 255
    2df4:	ce 01       	movw	r24, r28
    2df6:	8b 5b       	subi	r24, 0xBB	; 187
    2df8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	50 e4       	ldi	r21, 0x40	; 64
    2e02:	fc 01       	movw	r30, r24
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	f8 01       	movw	r30, r16
    2e16:	80 83       	st	Z, r24
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	a2 83       	std	Z+2, r26	; 0x02
    2e1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e1e:	ce 01       	movw	r24, r28
    2e20:	87 5b       	subi	r24, 0xB7	; 183
    2e22:	9f 4f       	sbci	r25, 0xFF	; 255
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	3c f4       	brge	.+14     	; 0x2e4c <BMP180_ReadCalb+0x75e>
		__ticks = 1;
    2e3e:	ce 01       	movw	r24, r28
    2e40:	8f 5a       	subi	r24, 0xAF	; 175
    2e42:	9f 4f       	sbci	r25, 0xFF	; 255
    2e44:	21 e0       	ldi	r18, 0x01	; 1
    2e46:	fc 01       	movw	r30, r24
    2e48:	20 83       	st	Z, r18
    2e4a:	30 c1       	rjmp	.+608    	; 0x30ac <BMP180_ReadCalb+0x9be>
	else if (__tmp2 > 65535)
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	83 5b       	subi	r24, 0xB3	; 179
    2e50:	9f 4f       	sbci	r25, 0xFF	; 255
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	0c f0       	brlt	.+2      	; 0x2e6e <BMP180_ReadCalb+0x780>
    2e6c:	d1 c0       	rjmp	.+418    	; 0x3010 <BMP180_ReadCalb+0x922>
	{
		_delay_ms(__us / 1000.0);
    2e6e:	ce 01       	movw	r24, r28
    2e70:	8b 5b       	subi	r24, 0xBB	; 187
    2e72:	9f 4f       	sbci	r25, 0xFF	; 255
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	4a e7       	ldi	r20, 0x7A	; 122
    2e7a:	54 e4       	ldi	r21, 0x44	; 68
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	9e 01       	movw	r18, r28
    2e90:	2e 5a       	subi	r18, 0xAE	; 174
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	f9 01       	movw	r30, r18
    2e96:	80 83       	st	Z, r24
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	a2 83       	std	Z+2, r26	; 0x02
    2e9c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e9e:	8e 01       	movw	r16, r28
    2ea0:	0a 5a       	subi	r16, 0xAA	; 170
    2ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea4:	ce 01       	movw	r24, r28
    2ea6:	8e 5a       	subi	r24, 0xAE	; 174
    2ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	4a e7       	ldi	r20, 0x7A	; 122
    2eb0:	55 e4       	ldi	r21, 0x45	; 69
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	60 81       	ld	r22, Z
    2eb6:	71 81       	ldd	r23, Z+1	; 0x01
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	80 83       	st	Z, r24
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	a2 83       	std	Z+2, r26	; 0x02
    2ecc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ece:	ce 01       	movw	r24, r28
    2ed0:	8a 5a       	subi	r24, 0xAA	; 170
    2ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e8       	ldi	r20, 0x80	; 128
    2eda:	5f e3       	ldi	r21, 0x3F	; 63
    2edc:	fc 01       	movw	r30, r24
    2ede:	60 81       	ld	r22, Z
    2ee0:	71 81       	ldd	r23, Z+1	; 0x01
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	93 81       	ldd	r25, Z+3	; 0x03
    2ee6:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    2eea:	88 23       	and	r24, r24
    2eec:	4c f4       	brge	.+18     	; 0x2f00 <BMP180_ReadCalb+0x812>
		__ticks = 1;
    2eee:	ce 01       	movw	r24, r28
    2ef0:	86 5a       	subi	r24, 0xA6	; 166
    2ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef4:	21 e0       	ldi	r18, 0x01	; 1
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	fc 01       	movw	r30, r24
    2efa:	31 83       	std	Z+1, r19	; 0x01
    2efc:	20 83       	st	Z, r18
    2efe:	6d c0       	rjmp	.+218    	; 0x2fda <BMP180_ReadCalb+0x8ec>
	else if (__tmp > 65535)
    2f00:	ce 01       	movw	r24, r28
    2f02:	8a 5a       	subi	r24, 0xAA	; 170
    2f04:	9f 4f       	sbci	r25, 0xFF	; 255
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	3f ef       	ldi	r19, 0xFF	; 255
    2f0a:	4f e7       	ldi	r20, 0x7F	; 127
    2f0c:	57 e4       	ldi	r21, 0x47	; 71
    2f0e:	fc 01       	movw	r30, r24
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	93 81       	ldd	r25, Z+3	; 0x03
    2f18:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	0c f0       	brlt	.+2      	; 0x2f22 <BMP180_ReadCalb+0x834>
    2f20:	4a c0       	rjmp	.+148    	; 0x2fb6 <BMP180_ReadCalb+0x8c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f22:	ce 01       	movw	r24, r28
    2f24:	8e 5a       	subi	r24, 0xAE	; 174
    2f26:	9f 4f       	sbci	r25, 0xFF	; 255
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	fc 01       	movw	r30, r24
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	8e 01       	movw	r16, r28
    2f44:	06 5a       	subi	r16, 0xA6	; 166
    2f46:	1f 4f       	sbci	r17, 0xFF	; 255
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	f8 01       	movw	r30, r16
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	80 83       	st	Z, r24
    2f5a:	24 c0       	rjmp	.+72     	; 0x2fa4 <BMP180_ReadCalb+0x8b6>
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	84 5a       	subi	r24, 0xA4	; 164
    2f60:	9f 4f       	sbci	r25, 0xFF	; 255
    2f62:	20 e9       	ldi	r18, 0x90	; 144
    2f64:	31 e0       	ldi	r19, 0x01	; 1
    2f66:	fc 01       	movw	r30, r24
    2f68:	31 83       	std	Z+1, r19	; 0x01
    2f6a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	84 5a       	subi	r24, 0xA4	; 164
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	fc 01       	movw	r30, r24
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <BMP180_ReadCalb+0x88a>
    2f7c:	9e 01       	movw	r18, r28
    2f7e:	24 5a       	subi	r18, 0xA4	; 164
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	f9 01       	movw	r30, r18
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f88:	ce 01       	movw	r24, r28
    2f8a:	86 5a       	subi	r24, 0xA6	; 166
    2f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8e:	9e 01       	movw	r18, r28
    2f90:	26 5a       	subi	r18, 0xA6	; 166
    2f92:	3f 4f       	sbci	r19, 0xFF	; 255
    2f94:	f9 01       	movw	r30, r18
    2f96:	20 81       	ld	r18, Z
    2f98:	31 81       	ldd	r19, Z+1	; 0x01
    2f9a:	21 50       	subi	r18, 0x01	; 1
    2f9c:	31 09       	sbc	r19, r1
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	31 83       	std	Z+1, r19	; 0x01
    2fa2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	86 5a       	subi	r24, 0xA6	; 166
    2fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2faa:	fc 01       	movw	r30, r24
    2fac:	80 81       	ld	r24, Z
    2fae:	91 81       	ldd	r25, Z+1	; 0x01
    2fb0:	89 2b       	or	r24, r25
    2fb2:	a1 f6       	brne	.-88     	; 0x2f5c <BMP180_ReadCalb+0x86e>
    2fb4:	7b c0       	rjmp	.+246    	; 0x30ac <BMP180_ReadCalb+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	8e 01       	movw	r16, r28
    2fb8:	06 5a       	subi	r16, 0xA6	; 166
    2fba:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	8a 5a       	subi	r24, 0xAA	; 170
    2fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	91 83       	std	Z+1, r25	; 0x01
    2fd8:	80 83       	st	Z, r24
    2fda:	ce 01       	movw	r24, r28
    2fdc:	82 5a       	subi	r24, 0xA2	; 162
    2fde:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe0:	9e 01       	movw	r18, r28
    2fe2:	26 5a       	subi	r18, 0xA6	; 166
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	f9 01       	movw	r30, r18
    2fe8:	20 81       	ld	r18, Z
    2fea:	31 81       	ldd	r19, Z+1	; 0x01
    2fec:	fc 01       	movw	r30, r24
    2fee:	31 83       	std	Z+1, r19	; 0x01
    2ff0:	20 83       	st	Z, r18
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	82 5a       	subi	r24, 0xA2	; 162
    2ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <BMP180_ReadCalb+0x910>
    3002:	9e 01       	movw	r18, r28
    3004:	22 5a       	subi	r18, 0xA2	; 162
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	f9 01       	movw	r30, r18
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
    300e:	4e c0       	rjmp	.+156    	; 0x30ac <BMP180_ReadCalb+0x9be>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3010:	ce 01       	movw	r24, r28
    3012:	87 5b       	subi	r24, 0xB7	; 183
    3014:	9f 4f       	sbci	r25, 0xFF	; 255
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	4f e7       	ldi	r20, 0x7F	; 127
    301c:	53 e4       	ldi	r21, 0x43	; 67
    301e:	fc 01       	movw	r30, r24
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    302c:	18 16       	cp	r1, r24
    302e:	6c f5       	brge	.+90     	; 0x308a <BMP180_ReadCalb+0x99c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3030:	8e 01       	movw	r16, r28
    3032:	00 5a       	subi	r16, 0xA0	; 160
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	ce 01       	movw	r24, r28
    3038:	83 5b       	subi	r24, 0xB3	; 179
    303a:	9f 4f       	sbci	r25, 0xFF	; 255
    303c:	fc 01       	movw	r30, r24
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	f8 01       	movw	r30, r16
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
    3054:	ce 01       	movw	r24, r28
    3056:	8e 59       	subi	r24, 0x9E	; 158
    3058:	9f 4f       	sbci	r25, 0xFF	; 255
    305a:	9e 01       	movw	r18, r28
    305c:	20 5a       	subi	r18, 0xA0	; 160
    305e:	3f 4f       	sbci	r19, 0xFF	; 255
    3060:	f9 01       	movw	r30, r18
    3062:	20 81       	ld	r18, Z
    3064:	31 81       	ldd	r19, Z+1	; 0x01
    3066:	fc 01       	movw	r30, r24
    3068:	31 83       	std	Z+1, r19	; 0x01
    306a:	20 83       	st	Z, r18
    306c:	ce 01       	movw	r24, r28
    306e:	8e 59       	subi	r24, 0x9E	; 158
    3070:	9f 4f       	sbci	r25, 0xFF	; 255
    3072:	fc 01       	movw	r30, r24
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <BMP180_ReadCalb+0x98a>
    307c:	9e 01       	movw	r18, r28
    307e:	2e 59       	subi	r18, 0x9E	; 158
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	f9 01       	movw	r30, r18
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	80 83       	st	Z, r24
    3088:	28 c0       	rjmp	.+80     	; 0x30da <BMP180_ReadCalb+0x9ec>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    308a:	8e 01       	movw	r16, r28
    308c:	0f 5a       	subi	r16, 0xAF	; 175
    308e:	1f 4f       	sbci	r17, 0xFF	; 255
    3090:	ce 01       	movw	r24, r28
    3092:	87 5b       	subi	r24, 0xB7	; 183
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	fc 01       	movw	r30, r24
    3098:	60 81       	ld	r22, Z
    309a:	71 81       	ldd	r23, Z+1	; 0x01
    309c:	82 81       	ldd	r24, Z+2	; 0x02
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	f8 01       	movw	r30, r16
    30aa:	80 83       	st	Z, r24
    30ac:	ce 01       	movw	r24, r28
    30ae:	8c 59       	subi	r24, 0x9C	; 156
    30b0:	9f 4f       	sbci	r25, 0xFF	; 255
    30b2:	9e 01       	movw	r18, r28
    30b4:	2f 5a       	subi	r18, 0xAF	; 175
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	f9 01       	movw	r30, r18
    30ba:	20 81       	ld	r18, Z
    30bc:	fc 01       	movw	r30, r24
    30be:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30c0:	ce 01       	movw	r24, r28
    30c2:	8c 59       	subi	r24, 0x9C	; 156
    30c4:	9f 4f       	sbci	r25, 0xFF	; 255
    30c6:	fc 01       	movw	r30, r24
    30c8:	80 81       	ld	r24, Z
    30ca:	28 2f       	mov	r18, r24
    30cc:	2a 95       	dec	r18
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <BMP180_ReadCalb+0x9de>
    30d0:	ce 01       	movw	r24, r28
    30d2:	8c 59       	subi	r24, 0x9C	; 156
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	fc 01       	movw	r30, r24
    30d8:	20 83       	st	Z, r18
		_delay_us(10);
		Callib_Data[i] = TWI_ReadByteWithNACK();
    30da:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TWI_ReadByteWithNACK>
    30de:	48 2f       	mov	r20, r24
    30e0:	9e 01       	movw	r18, r28
    30e2:	2b 55       	subi	r18, 0x5B	; 91
    30e4:	3f 4f       	sbci	r19, 0xFF	; 255
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	82 0f       	add	r24, r18
    30ec:	93 1f       	adc	r25, r19
    30ee:	fc 01       	movw	r30, r24
    30f0:	40 83       	st	Z, r20
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a0 e2       	ldi	r26, 0x20	; 32
    30f8:	b1 e4       	ldi	r27, 0x41	; 65
    30fa:	8d a3       	std	Y+37, r24	; 0x25
    30fc:	9e a3       	std	Y+38, r25	; 0x26
    30fe:	af a3       	std	Y+39, r26	; 0x27
    3100:	b8 a7       	std	Y+40, r27	; 0x28
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    3102:	2b ea       	ldi	r18, 0xAB	; 171
    3104:	3a ea       	ldi	r19, 0xAA	; 170
    3106:	4a ea       	ldi	r20, 0xAA	; 170
    3108:	50 e4       	ldi	r21, 0x40	; 64
    310a:	6d a1       	ldd	r22, Y+37	; 0x25
    310c:	7e a1       	ldd	r23, Y+38	; 0x26
    310e:	8f a1       	ldd	r24, Y+39	; 0x27
    3110:	98 a5       	ldd	r25, Y+40	; 0x28
    3112:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	89 a7       	std	Y+41, r24	; 0x29
    311c:	9a a7       	std	Y+42, r25	; 0x2a
    311e:	ab a7       	std	Y+43, r26	; 0x2b
    3120:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e8       	ldi	r20, 0x80	; 128
    3128:	50 e4       	ldi	r21, 0x40	; 64
    312a:	6d a1       	ldd	r22, Y+37	; 0x25
    312c:	7e a1       	ldd	r23, Y+38	; 0x26
    312e:	8f a1       	ldd	r24, Y+39	; 0x27
    3130:	98 a5       	ldd	r25, Y+40	; 0x28
    3132:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	8d a7       	std	Y+45, r24	; 0x2d
    313c:	9e a7       	std	Y+46, r25	; 0x2e
    313e:	af a7       	std	Y+47, r26	; 0x2f
    3140:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e8       	ldi	r20, 0x80	; 128
    3148:	5f e3       	ldi	r21, 0x3F	; 63
    314a:	69 a5       	ldd	r22, Y+41	; 0x29
    314c:	7a a5       	ldd	r23, Y+42	; 0x2a
    314e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3150:	9c a5       	ldd	r25, Y+44	; 0x2c
    3152:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    3156:	88 23       	and	r24, r24
    3158:	1c f4       	brge	.+6      	; 0x3160 <BMP180_ReadCalb+0xa72>
		__ticks = 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	89 ab       	std	Y+49, r24	; 0x31
    315e:	c6 c0       	rjmp	.+396    	; 0x32ec <BMP180_ReadCalb+0xbfe>
	else if (__tmp2 > 65535)
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	4f e7       	ldi	r20, 0x7F	; 127
    3166:	57 e4       	ldi	r21, 0x47	; 71
    3168:	6d a5       	ldd	r22, Y+45	; 0x2d
    316a:	7e a5       	ldd	r23, Y+46	; 0x2e
    316c:	8f a5       	ldd	r24, Y+47	; 0x2f
    316e:	98 a9       	ldd	r25, Y+48	; 0x30
    3170:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    3174:	18 16       	cp	r1, r24
    3176:	0c f0       	brlt	.+2      	; 0x317a <BMP180_ReadCalb+0xa8c>
    3178:	7b c0       	rjmp	.+246    	; 0x3270 <BMP180_ReadCalb+0xb82>
	{
		_delay_ms(__us / 1000.0);
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	4a e7       	ldi	r20, 0x7A	; 122
    3180:	54 e4       	ldi	r21, 0x44	; 68
    3182:	6d a1       	ldd	r22, Y+37	; 0x25
    3184:	7e a1       	ldd	r23, Y+38	; 0x26
    3186:	8f a1       	ldd	r24, Y+39	; 0x27
    3188:	98 a5       	ldd	r25, Y+40	; 0x28
    318a:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	8a ab       	std	Y+50, r24	; 0x32
    3194:	9b ab       	std	Y+51, r25	; 0x33
    3196:	ac ab       	std	Y+52, r26	; 0x34
    3198:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	4a e7       	ldi	r20, 0x7A	; 122
    31a0:	55 e4       	ldi	r21, 0x45	; 69
    31a2:	6a a9       	ldd	r22, Y+50	; 0x32
    31a4:	7b a9       	ldd	r23, Y+51	; 0x33
    31a6:	8c a9       	ldd	r24, Y+52	; 0x34
    31a8:	9d a9       	ldd	r25, Y+53	; 0x35
    31aa:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	8e ab       	std	Y+54, r24	; 0x36
    31b4:	9f ab       	std	Y+55, r25	; 0x37
    31b6:	a8 af       	std	Y+56, r26	; 0x38
    31b8:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e8       	ldi	r20, 0x80	; 128
    31c0:	5f e3       	ldi	r21, 0x3F	; 63
    31c2:	6e a9       	ldd	r22, Y+54	; 0x36
    31c4:	7f a9       	ldd	r23, Y+55	; 0x37
    31c6:	88 ad       	ldd	r24, Y+56	; 0x38
    31c8:	99 ad       	ldd	r25, Y+57	; 0x39
    31ca:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    31ce:	88 23       	and	r24, r24
    31d0:	2c f4       	brge	.+10     	; 0x31dc <BMP180_ReadCalb+0xaee>
		__ticks = 1;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	9b af       	std	Y+59, r25	; 0x3b
    31d8:	8a af       	std	Y+58, r24	; 0x3a
    31da:	3f c0       	rjmp	.+126    	; 0x325a <BMP180_ReadCalb+0xb6c>
	else if (__tmp > 65535)
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	3f ef       	ldi	r19, 0xFF	; 255
    31e0:	4f e7       	ldi	r20, 0x7F	; 127
    31e2:	57 e4       	ldi	r21, 0x47	; 71
    31e4:	6e a9       	ldd	r22, Y+54	; 0x36
    31e6:	7f a9       	ldd	r23, Y+55	; 0x37
    31e8:	88 ad       	ldd	r24, Y+56	; 0x38
    31ea:	99 ad       	ldd	r25, Y+57	; 0x39
    31ec:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    31f0:	18 16       	cp	r1, r24
    31f2:	4c f5       	brge	.+82     	; 0x3246 <BMP180_ReadCalb+0xb58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	51 e4       	ldi	r21, 0x41	; 65
    31fc:	6a a9       	ldd	r22, Y+50	; 0x32
    31fe:	7b a9       	ldd	r23, Y+51	; 0x33
    3200:	8c a9       	ldd	r24, Y+52	; 0x34
    3202:	9d a9       	ldd	r25, Y+53	; 0x35
    3204:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9b af       	std	Y+59, r25	; 0x3b
    321a:	8a af       	std	Y+58, r24	; 0x3a
    321c:	0f c0       	rjmp	.+30     	; 0x323c <BMP180_ReadCalb+0xb4e>
    321e:	80 e9       	ldi	r24, 0x90	; 144
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	9d af       	std	Y+61, r25	; 0x3d
    3224:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3226:	8c ad       	ldd	r24, Y+60	; 0x3c
    3228:	9d ad       	ldd	r25, Y+61	; 0x3d
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <BMP180_ReadCalb+0xb3c>
    322e:	9d af       	std	Y+61, r25	; 0x3d
    3230:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3232:	8a ad       	ldd	r24, Y+58	; 0x3a
    3234:	9b ad       	ldd	r25, Y+59	; 0x3b
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	9b af       	std	Y+59, r25	; 0x3b
    323a:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323c:	8a ad       	ldd	r24, Y+58	; 0x3a
    323e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3240:	89 2b       	or	r24, r25
    3242:	69 f7       	brne	.-38     	; 0x321e <BMP180_ReadCalb+0xb30>
    3244:	53 c0       	rjmp	.+166    	; 0x32ec <BMP180_ReadCalb+0xbfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3246:	6e a9       	ldd	r22, Y+54	; 0x36
    3248:	7f a9       	ldd	r23, Y+55	; 0x37
    324a:	88 ad       	ldd	r24, Y+56	; 0x38
    324c:	99 ad       	ldd	r25, Y+57	; 0x39
    324e:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9b af       	std	Y+59, r25	; 0x3b
    3258:	8a af       	std	Y+58, r24	; 0x3a
    325a:	8a ad       	ldd	r24, Y+58	; 0x3a
    325c:	9b ad       	ldd	r25, Y+59	; 0x3b
    325e:	9f af       	std	Y+63, r25	; 0x3f
    3260:	8e af       	std	Y+62, r24	; 0x3e
    3262:	8e ad       	ldd	r24, Y+62	; 0x3e
    3264:	9f ad       	ldd	r25, Y+63	; 0x3f
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <BMP180_ReadCalb+0xb78>
    326a:	9f af       	std	Y+63, r25	; 0x3f
    326c:	8e af       	std	Y+62, r24	; 0x3e
    326e:	3e c0       	rjmp	.+124    	; 0x32ec <BMP180_ReadCalb+0xbfe>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	4f e7       	ldi	r20, 0x7F	; 127
    3276:	53 e4       	ldi	r21, 0x43	; 67
    3278:	69 a5       	ldd	r22, Y+41	; 0x29
    327a:	7a a5       	ldd	r23, Y+42	; 0x2a
    327c:	8b a5       	ldd	r24, Y+43	; 0x2b
    327e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3280:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    3284:	18 16       	cp	r1, r24
    3286:	4c f5       	brge	.+82     	; 0x32da <BMP180_ReadCalb+0xbec>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3288:	8e 01       	movw	r16, r28
    328a:	00 5c       	subi	r16, 0xC0	; 192
    328c:	1f 4f       	sbci	r17, 0xFF	; 255
    328e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3290:	7e a5       	ldd	r23, Y+46	; 0x2e
    3292:	8f a5       	ldd	r24, Y+47	; 0x2f
    3294:	98 a9       	ldd	r25, Y+48	; 0x30
    3296:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	f8 01       	movw	r30, r16
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	ce 01       	movw	r24, r28
    32a6:	8e 5b       	subi	r24, 0xBE	; 190
    32a8:	9f 4f       	sbci	r25, 0xFF	; 255
    32aa:	9e 01       	movw	r18, r28
    32ac:	20 5c       	subi	r18, 0xC0	; 192
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	f9 01       	movw	r30, r18
    32b2:	20 81       	ld	r18, Z
    32b4:	31 81       	ldd	r19, Z+1	; 0x01
    32b6:	fc 01       	movw	r30, r24
    32b8:	31 83       	std	Z+1, r19	; 0x01
    32ba:	20 83       	st	Z, r18
    32bc:	ce 01       	movw	r24, r28
    32be:	8e 5b       	subi	r24, 0xBE	; 190
    32c0:	9f 4f       	sbci	r25, 0xFF	; 255
    32c2:	fc 01       	movw	r30, r24
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <BMP180_ReadCalb+0xbda>
    32cc:	9e 01       	movw	r18, r28
    32ce:	2e 5b       	subi	r18, 0xBE	; 190
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	f9 01       	movw	r30, r18
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	80 83       	st	Z, r24
    32d8:	1c c0       	rjmp	.+56     	; 0x3312 <BMP180_ReadCalb+0xc24>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32da:	69 a5       	ldd	r22, Y+41	; 0x29
    32dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    32de:	8b a5       	ldd	r24, Y+43	; 0x2b
    32e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32e2:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	89 ab       	std	Y+49, r24	; 0x31
    32ec:	ce 01       	movw	r24, r28
    32ee:	8c 5b       	subi	r24, 0xBC	; 188
    32f0:	9f 4f       	sbci	r25, 0xFF	; 255
    32f2:	29 a9       	ldd	r18, Y+49	; 0x31
    32f4:	fc 01       	movw	r30, r24
    32f6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32f8:	ce 01       	movw	r24, r28
    32fa:	8c 5b       	subi	r24, 0xBC	; 188
    32fc:	9f 4f       	sbci	r25, 0xFF	; 255
    32fe:	fc 01       	movw	r30, r24
    3300:	80 81       	ld	r24, Z
    3302:	28 2f       	mov	r18, r24
    3304:	2a 95       	dec	r18
    3306:	f1 f7       	brne	.-4      	; 0x3304 <BMP180_ReadCalb+0xc16>
    3308:	ce 01       	movw	r24, r28
    330a:	8c 5b       	subi	r24, 0xBC	; 188
    330c:	9f 4f       	sbci	r25, 0xFF	; 255
    330e:	fc 01       	movw	r30, r24
    3310:	20 83       	st	Z, r18
		_delay_us(10);
		TWI_Stop();
    3312:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	a0 e2       	ldi	r26, 0x20	; 32
    331c:	b1 e4       	ldi	r27, 0x41	; 65
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	af 83       	std	Y+7, r26	; 0x07
    3324:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    3326:	2b ea       	ldi	r18, 0xAB	; 171
    3328:	3a ea       	ldi	r19, 0xAA	; 170
    332a:	4a ea       	ldi	r20, 0xAA	; 170
    332c:	50 e4       	ldi	r21, 0x40	; 64
    332e:	6d 81       	ldd	r22, Y+5	; 0x05
    3330:	7e 81       	ldd	r23, Y+6	; 0x06
    3332:	8f 81       	ldd	r24, Y+7	; 0x07
    3334:	98 85       	ldd	r25, Y+8	; 0x08
    3336:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	89 87       	std	Y+9, r24	; 0x09
    3340:	9a 87       	std	Y+10, r25	; 0x0a
    3342:	ab 87       	std	Y+11, r26	; 0x0b
    3344:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	50 e4       	ldi	r21, 0x40	; 64
    334e:	6d 81       	ldd	r22, Y+5	; 0x05
    3350:	7e 81       	ldd	r23, Y+6	; 0x06
    3352:	8f 81       	ldd	r24, Y+7	; 0x07
    3354:	98 85       	ldd	r25, Y+8	; 0x08
    3356:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	8d 87       	std	Y+13, r24	; 0x0d
    3360:	9e 87       	std	Y+14, r25	; 0x0e
    3362:	af 87       	std	Y+15, r26	; 0x0f
    3364:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e8       	ldi	r20, 0x80	; 128
    336c:	5f e3       	ldi	r21, 0x3F	; 63
    336e:	69 85       	ldd	r22, Y+9	; 0x09
    3370:	7a 85       	ldd	r23, Y+10	; 0x0a
    3372:	8b 85       	ldd	r24, Y+11	; 0x0b
    3374:	9c 85       	ldd	r25, Y+12	; 0x0c
    3376:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    337a:	88 23       	and	r24, r24
    337c:	1c f4       	brge	.+6      	; 0x3384 <BMP180_ReadCalb+0xc96>
		__ticks = 1;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	89 8b       	std	Y+17, r24	; 0x11
    3382:	b2 c0       	rjmp	.+356    	; 0x34e8 <BMP180_ReadCalb+0xdfa>
	else if (__tmp2 > 65535)
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	3f ef       	ldi	r19, 0xFF	; 255
    3388:	4f e7       	ldi	r20, 0x7F	; 127
    338a:	57 e4       	ldi	r21, 0x47	; 71
    338c:	6d 85       	ldd	r22, Y+13	; 0x0d
    338e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3390:	8f 85       	ldd	r24, Y+15	; 0x0f
    3392:	98 89       	ldd	r25, Y+16	; 0x10
    3394:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    3398:	18 16       	cp	r1, r24
    339a:	0c f0       	brlt	.+2      	; 0x339e <BMP180_ReadCalb+0xcb0>
    339c:	7b c0       	rjmp	.+246    	; 0x3494 <BMP180_ReadCalb+0xda6>
	{
		_delay_ms(__us / 1000.0);
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	54 e4       	ldi	r21, 0x44	; 68
    33a6:	6d 81       	ldd	r22, Y+5	; 0x05
    33a8:	7e 81       	ldd	r23, Y+6	; 0x06
    33aa:	8f 81       	ldd	r24, Y+7	; 0x07
    33ac:	98 85       	ldd	r25, Y+8	; 0x08
    33ae:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	8a 8b       	std	Y+18, r24	; 0x12
    33b8:	9b 8b       	std	Y+19, r25	; 0x13
    33ba:	ac 8b       	std	Y+20, r26	; 0x14
    33bc:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	4a e7       	ldi	r20, 0x7A	; 122
    33c4:	55 e4       	ldi	r21, 0x45	; 69
    33c6:	6a 89       	ldd	r22, Y+18	; 0x12
    33c8:	7b 89       	ldd	r23, Y+19	; 0x13
    33ca:	8c 89       	ldd	r24, Y+20	; 0x14
    33cc:	9d 89       	ldd	r25, Y+21	; 0x15
    33ce:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	8e 8b       	std	Y+22, r24	; 0x16
    33d8:	9f 8b       	std	Y+23, r25	; 0x17
    33da:	a8 8f       	std	Y+24, r26	; 0x18
    33dc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	6e 89       	ldd	r22, Y+22	; 0x16
    33e8:	7f 89       	ldd	r23, Y+23	; 0x17
    33ea:	88 8d       	ldd	r24, Y+24	; 0x18
    33ec:	99 8d       	ldd	r25, Y+25	; 0x19
    33ee:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    33f2:	88 23       	and	r24, r24
    33f4:	2c f4       	brge	.+10     	; 0x3400 <BMP180_ReadCalb+0xd12>
		__ticks = 1;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	9b 8f       	std	Y+27, r25	; 0x1b
    33fc:	8a 8f       	std	Y+26, r24	; 0x1a
    33fe:	3f c0       	rjmp	.+126    	; 0x347e <BMP180_ReadCalb+0xd90>
	else if (__tmp > 65535)
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	57 e4       	ldi	r21, 0x47	; 71
    3408:	6e 89       	ldd	r22, Y+22	; 0x16
    340a:	7f 89       	ldd	r23, Y+23	; 0x17
    340c:	88 8d       	ldd	r24, Y+24	; 0x18
    340e:	99 8d       	ldd	r25, Y+25	; 0x19
    3410:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    3414:	18 16       	cp	r1, r24
    3416:	4c f5       	brge	.+82     	; 0x346a <BMP180_ReadCalb+0xd7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e2       	ldi	r20, 0x20	; 32
    341e:	51 e4       	ldi	r21, 0x41	; 65
    3420:	6a 89       	ldd	r22, Y+18	; 0x12
    3422:	7b 89       	ldd	r23, Y+19	; 0x13
    3424:	8c 89       	ldd	r24, Y+20	; 0x14
    3426:	9d 89       	ldd	r25, Y+21	; 0x15
    3428:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	9b 8f       	std	Y+27, r25	; 0x1b
    343e:	8a 8f       	std	Y+26, r24	; 0x1a
    3440:	0f c0       	rjmp	.+30     	; 0x3460 <BMP180_ReadCalb+0xd72>
    3442:	80 e9       	ldi	r24, 0x90	; 144
    3444:	91 e0       	ldi	r25, 0x01	; 1
    3446:	9d 8f       	std	Y+29, r25	; 0x1d
    3448:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    344a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    344c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <BMP180_ReadCalb+0xd60>
    3452:	9d 8f       	std	Y+29, r25	; 0x1d
    3454:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3456:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3458:	9b 8d       	ldd	r25, Y+27	; 0x1b
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	9b 8f       	std	Y+27, r25	; 0x1b
    345e:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3460:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3462:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3464:	89 2b       	or	r24, r25
    3466:	69 f7       	brne	.-38     	; 0x3442 <BMP180_ReadCalb+0xd54>
    3468:	3f c0       	rjmp	.+126    	; 0x34e8 <BMP180_ReadCalb+0xdfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346a:	6e 89       	ldd	r22, Y+22	; 0x16
    346c:	7f 89       	ldd	r23, Y+23	; 0x17
    346e:	88 8d       	ldd	r24, Y+24	; 0x18
    3470:	99 8d       	ldd	r25, Y+25	; 0x19
    3472:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	9b 8f       	std	Y+27, r25	; 0x1b
    347c:	8a 8f       	std	Y+26, r24	; 0x1a
    347e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3480:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3482:	9f 8f       	std	Y+31, r25	; 0x1f
    3484:	8e 8f       	std	Y+30, r24	; 0x1e
    3486:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3488:	9f 8d       	ldd	r25, Y+31	; 0x1f
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <BMP180_ReadCalb+0xd9c>
    348e:	9f 8f       	std	Y+31, r25	; 0x1f
    3490:	8e 8f       	std	Y+30, r24	; 0x1e
    3492:	2a c0       	rjmp	.+84     	; 0x34e8 <BMP180_ReadCalb+0xdfa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4f e7       	ldi	r20, 0x7F	; 127
    349a:	53 e4       	ldi	r21, 0x43	; 67
    349c:	69 85       	ldd	r22, Y+9	; 0x09
    349e:	7a 85       	ldd	r23, Y+10	; 0x0a
    34a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    34a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    34a4:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    34a8:	18 16       	cp	r1, r24
    34aa:	ac f4       	brge	.+42     	; 0x34d6 <BMP180_ReadCalb+0xde8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    34ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    34ae:	7e 85       	ldd	r23, Y+14	; 0x0e
    34b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b2:	98 89       	ldd	r25, Y+16	; 0x10
    34b4:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	99 a3       	std	Y+33, r25	; 0x21
    34be:	88 a3       	std	Y+32, r24	; 0x20
    34c0:	88 a1       	ldd	r24, Y+32	; 0x20
    34c2:	99 a1       	ldd	r25, Y+33	; 0x21
    34c4:	9b a3       	std	Y+35, r25	; 0x23
    34c6:	8a a3       	std	Y+34, r24	; 0x22
    34c8:	8a a1       	ldd	r24, Y+34	; 0x22
    34ca:	9b a1       	ldd	r25, Y+35	; 0x23
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <BMP180_ReadCalb+0xdde>
    34d0:	9b a3       	std	Y+35, r25	; 0x23
    34d2:	8a a3       	std	Y+34, r24	; 0x22
    34d4:	0f c0       	rjmp	.+30     	; 0x34f4 <BMP180_ReadCalb+0xe06>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34d6:	69 85       	ldd	r22, Y+9	; 0x09
    34d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    34da:	8b 85       	ldd	r24, Y+11	; 0x0b
    34dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34de:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	89 8b       	std	Y+17, r24	; 0x11
    34e8:	89 89       	ldd	r24, Y+17	; 0x11
    34ea:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34ec:	8c a1       	ldd	r24, Y+36	; 0x24
    34ee:	8a 95       	dec	r24
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <BMP180_ReadCalb+0xe00>
    34f2:	8c a3       	std	Y+36, r24	; 0x24
void BMP180_ReadCalb(void) {

	uint8_t Callib_Data[22] = { 0 };
	uint16_t Callib_Start = 0xAA;

	for (int i = 0; i < 22; i++) {
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	9a 81       	ldd	r25, Y+2	; 0x02
    34f8:	01 96       	adiw	r24, 0x01	; 1
    34fa:	9a 83       	std	Y+2, r25	; 0x02
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	9a 81       	ldd	r25, Y+2	; 0x02
    3502:	46 97       	sbiw	r24, 0x16	; 22
    3504:	0c f4       	brge	.+2      	; 0x3508 <BMP180_ReadCalb+0xe1a>
    3506:	10 c9       	rjmp	.-3552   	; 0x2728 <BMP180_ReadCalb+0x3a>
		_delay_us(10);
		TWI_Stop();
		_delay_us(10);
	}

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
    3508:	ce 01       	movw	r24, r28
    350a:	8b 55       	subi	r24, 0x5B	; 91
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	fc 01       	movw	r30, r24
    3510:	80 81       	ld	r24, Z
    3512:	88 2f       	mov	r24, r24
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	38 2f       	mov	r19, r24
    3518:	22 27       	eor	r18, r18
    351a:	ce 01       	movw	r24, r28
    351c:	8b 55       	subi	r24, 0x5B	; 91
    351e:	9f 4f       	sbci	r25, 0xFF	; 255
    3520:	fc 01       	movw	r30, r24
    3522:	81 81       	ldd	r24, Z+1	; 0x01
    3524:	88 2f       	mov	r24, r24
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	82 2b       	or	r24, r18
    352a:	93 2b       	or	r25, r19
    352c:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <AC1+0x1>
    3530:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <AC1>
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
    3534:	ce 01       	movw	r24, r28
    3536:	8b 55       	subi	r24, 0x5B	; 91
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	fc 01       	movw	r30, r24
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	88 2f       	mov	r24, r24
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	38 2f       	mov	r19, r24
    3544:	22 27       	eor	r18, r18
    3546:	ce 01       	movw	r24, r28
    3548:	8b 55       	subi	r24, 0x5B	; 91
    354a:	9f 4f       	sbci	r25, 0xFF	; 255
    354c:	fc 01       	movw	r30, r24
    354e:	83 81       	ldd	r24, Z+3	; 0x03
    3550:	88 2f       	mov	r24, r24
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	82 2b       	or	r24, r18
    3556:	93 2b       	or	r25, r19
    3558:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <AC2+0x1>
    355c:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <AC2>
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
    3560:	ce 01       	movw	r24, r28
    3562:	8b 55       	subi	r24, 0x5B	; 91
    3564:	9f 4f       	sbci	r25, 0xFF	; 255
    3566:	fc 01       	movw	r30, r24
    3568:	84 81       	ldd	r24, Z+4	; 0x04
    356a:	88 2f       	mov	r24, r24
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	38 2f       	mov	r19, r24
    3570:	22 27       	eor	r18, r18
    3572:	ce 01       	movw	r24, r28
    3574:	8b 55       	subi	r24, 0x5B	; 91
    3576:	9f 4f       	sbci	r25, 0xFF	; 255
    3578:	fc 01       	movw	r30, r24
    357a:	85 81       	ldd	r24, Z+5	; 0x05
    357c:	88 2f       	mov	r24, r24
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	82 2b       	or	r24, r18
    3582:	93 2b       	or	r25, r19
    3584:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <AC3+0x1>
    3588:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <AC3>
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
    358c:	ce 01       	movw	r24, r28
    358e:	8b 55       	subi	r24, 0x5B	; 91
    3590:	9f 4f       	sbci	r25, 0xFF	; 255
    3592:	fc 01       	movw	r30, r24
    3594:	86 81       	ldd	r24, Z+6	; 0x06
    3596:	88 2f       	mov	r24, r24
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	38 2f       	mov	r19, r24
    359c:	22 27       	eor	r18, r18
    359e:	ce 01       	movw	r24, r28
    35a0:	8b 55       	subi	r24, 0x5B	; 91
    35a2:	9f 4f       	sbci	r25, 0xFF	; 255
    35a4:	fc 01       	movw	r30, r24
    35a6:	87 81       	ldd	r24, Z+7	; 0x07
    35a8:	88 2f       	mov	r24, r24
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	82 2b       	or	r24, r18
    35ae:	93 2b       	or	r25, r19
    35b0:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <AC4+0x1>
    35b4:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <AC4>
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
    35b8:	ce 01       	movw	r24, r28
    35ba:	8b 55       	subi	r24, 0x5B	; 91
    35bc:	9f 4f       	sbci	r25, 0xFF	; 255
    35be:	fc 01       	movw	r30, r24
    35c0:	80 85       	ldd	r24, Z+8	; 0x08
    35c2:	88 2f       	mov	r24, r24
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	38 2f       	mov	r19, r24
    35c8:	22 27       	eor	r18, r18
    35ca:	ce 01       	movw	r24, r28
    35cc:	8b 55       	subi	r24, 0x5B	; 91
    35ce:	9f 4f       	sbci	r25, 0xFF	; 255
    35d0:	fc 01       	movw	r30, r24
    35d2:	81 85       	ldd	r24, Z+9	; 0x09
    35d4:	88 2f       	mov	r24, r24
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	82 2b       	or	r24, r18
    35da:	93 2b       	or	r25, r19
    35dc:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <AC5+0x1>
    35e0:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <AC5>
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
    35e4:	ce 01       	movw	r24, r28
    35e6:	8b 55       	subi	r24, 0x5B	; 91
    35e8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ea:	fc 01       	movw	r30, r24
    35ec:	82 85       	ldd	r24, Z+10	; 0x0a
    35ee:	88 2f       	mov	r24, r24
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	38 2f       	mov	r19, r24
    35f4:	22 27       	eor	r18, r18
    35f6:	ce 01       	movw	r24, r28
    35f8:	8b 55       	subi	r24, 0x5B	; 91
    35fa:	9f 4f       	sbci	r25, 0xFF	; 255
    35fc:	fc 01       	movw	r30, r24
    35fe:	83 85       	ldd	r24, Z+11	; 0x0b
    3600:	88 2f       	mov	r24, r24
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	82 2b       	or	r24, r18
    3606:	93 2b       	or	r25, r19
    3608:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <AC6+0x1>
    360c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <AC6>
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
    3610:	ce 01       	movw	r24, r28
    3612:	8b 55       	subi	r24, 0x5B	; 91
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	fc 01       	movw	r30, r24
    3618:	84 85       	ldd	r24, Z+12	; 0x0c
    361a:	88 2f       	mov	r24, r24
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	38 2f       	mov	r19, r24
    3620:	22 27       	eor	r18, r18
    3622:	ce 01       	movw	r24, r28
    3624:	8b 55       	subi	r24, 0x5B	; 91
    3626:	9f 4f       	sbci	r25, 0xFF	; 255
    3628:	fc 01       	movw	r30, r24
    362a:	85 85       	ldd	r24, Z+13	; 0x0d
    362c:	88 2f       	mov	r24, r24
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	82 2b       	or	r24, r18
    3632:	93 2b       	or	r25, r19
    3634:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <B1+0x1>
    3638:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <B1>
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
    363c:	ce 01       	movw	r24, r28
    363e:	8b 55       	subi	r24, 0x5B	; 91
    3640:	9f 4f       	sbci	r25, 0xFF	; 255
    3642:	fc 01       	movw	r30, r24
    3644:	86 85       	ldd	r24, Z+14	; 0x0e
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	38 2f       	mov	r19, r24
    364c:	22 27       	eor	r18, r18
    364e:	ce 01       	movw	r24, r28
    3650:	8b 55       	subi	r24, 0x5B	; 91
    3652:	9f 4f       	sbci	r25, 0xFF	; 255
    3654:	fc 01       	movw	r30, r24
    3656:	87 85       	ldd	r24, Z+15	; 0x0f
    3658:	88 2f       	mov	r24, r24
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	82 2b       	or	r24, r18
    365e:	93 2b       	or	r25, r19
    3660:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <B2+0x1>
    3664:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <B2>
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
    3668:	ce 01       	movw	r24, r28
    366a:	8b 55       	subi	r24, 0x5B	; 91
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	fc 01       	movw	r30, r24
    3670:	80 89       	ldd	r24, Z+16	; 0x10
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	38 2f       	mov	r19, r24
    3678:	22 27       	eor	r18, r18
    367a:	ce 01       	movw	r24, r28
    367c:	8b 55       	subi	r24, 0x5B	; 91
    367e:	9f 4f       	sbci	r25, 0xFF	; 255
    3680:	fc 01       	movw	r30, r24
    3682:	81 89       	ldd	r24, Z+17	; 0x11
    3684:	88 2f       	mov	r24, r24
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	82 2b       	or	r24, r18
    368a:	93 2b       	or	r25, r19
    368c:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <MB+0x1>
    3690:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <MB>
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
    3694:	ce 01       	movw	r24, r28
    3696:	8b 55       	subi	r24, 0x5B	; 91
    3698:	9f 4f       	sbci	r25, 0xFF	; 255
    369a:	fc 01       	movw	r30, r24
    369c:	82 89       	ldd	r24, Z+18	; 0x12
    369e:	88 2f       	mov	r24, r24
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	38 2f       	mov	r19, r24
    36a4:	22 27       	eor	r18, r18
    36a6:	ce 01       	movw	r24, r28
    36a8:	8b 55       	subi	r24, 0x5B	; 91
    36aa:	9f 4f       	sbci	r25, 0xFF	; 255
    36ac:	fc 01       	movw	r30, r24
    36ae:	83 89       	ldd	r24, Z+19	; 0x13
    36b0:	88 2f       	mov	r24, r24
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	82 2b       	or	r24, r18
    36b6:	93 2b       	or	r25, r19
    36b8:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <MC+0x1>
    36bc:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <MC>
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
    36c0:	ce 01       	movw	r24, r28
    36c2:	8b 55       	subi	r24, 0x5B	; 91
    36c4:	9f 4f       	sbci	r25, 0xFF	; 255
    36c6:	fc 01       	movw	r30, r24
    36c8:	84 89       	ldd	r24, Z+20	; 0x14
    36ca:	88 2f       	mov	r24, r24
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	38 2f       	mov	r19, r24
    36d0:	22 27       	eor	r18, r18
    36d2:	ce 01       	movw	r24, r28
    36d4:	8b 55       	subi	r24, 0x5B	; 91
    36d6:	9f 4f       	sbci	r25, 0xFF	; 255
    36d8:	fc 01       	movw	r30, r24
    36da:	85 89       	ldd	r24, Z+21	; 0x15
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	82 2b       	or	r24, r18
    36e2:	93 2b       	or	r25, r19
    36e4:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <MD+0x1>
    36e8:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <MD>

}
    36ec:	00 00       	nop
    36ee:	c6 54       	subi	r28, 0x46	; 70
    36f0:	df 4f       	sbci	r29, 0xFF	; 255
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    3704:	08 95       	ret

00003706 <Get_UP>:

uint32 Get_UP(void) {
    3706:	cf 93       	push	r28
    3708:	df 93       	push	r29
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	66 97       	sbiw	r28, 0x16	; 22
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	de bf       	out	0x3e, r29	; 62
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	cd bf       	out	0x3d, r28	; 61
	// calculate the value to write to the BMP180 control register based on the oversampling setting
	uint8 datatowrite = 0x34 + (OSS << 6);
    371a:	84 e3       	ldi	r24, 0x34	; 52
    371c:	89 83       	std	Y+1, r24	; 0x01
	// array to store the raw pressure data
	uint8 Pressure_RAW[3] = { 0 };
    371e:	1c 8a       	std	Y+20, r1	; 0x14
    3720:	1d 8a       	std	Y+21, r1	; 0x15
    3722:	1e 8a       	std	Y+22, r1	; 0x16

	uint32 data = 0;
    3724:	1a 82       	std	Y+2, r1	; 0x02
    3726:	1b 82       	std	Y+3, r1	; 0x03
    3728:	1c 82       	std	Y+4, r1	; 0x04
    372a:	1d 82       	std	Y+5, r1	; 0x05

	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    372c:	8e ee       	ldi	r24, 0xEE	; 238
    372e:	0e 94 7f 00 	call	0xfe	; 0xfe <TWI_Start>
	delay();
    3732:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// send the address of the BMP180 control register to initiate the pressure measurement
	TWI_WriteByte(0xF4);
    3736:	84 ef       	ldi	r24, 0xF4	; 244
    3738:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    373c:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// send the value calculated above to start the measurement with the selected oversampling setting
	TWI_WriteByte(datatowrite);
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    3746:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    374a:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	a0 ea       	ldi	r26, 0xA0	; 160
    3754:	b0 e4       	ldi	r27, 0x40	; 64
    3756:	8e 83       	std	Y+6, r24	; 0x06
    3758:	9f 83       	std	Y+7, r25	; 0x07
    375a:	a8 87       	std	Y+8, r26	; 0x08
    375c:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	4a e7       	ldi	r20, 0x7A	; 122
    3764:	55 e4       	ldi	r21, 0x45	; 69
    3766:	6e 81       	ldd	r22, Y+6	; 0x06
    3768:	7f 81       	ldd	r23, Y+7	; 0x07
    376a:	88 85       	ldd	r24, Y+8	; 0x08
    376c:	99 85       	ldd	r25, Y+9	; 0x09
    376e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	8a 87       	std	Y+10, r24	; 0x0a
    3778:	9b 87       	std	Y+11, r25	; 0x0b
    377a:	ac 87       	std	Y+12, r26	; 0x0c
    377c:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e8       	ldi	r20, 0x80	; 128
    3784:	5f e3       	ldi	r21, 0x3F	; 63
    3786:	6a 85       	ldd	r22, Y+10	; 0x0a
    3788:	7b 85       	ldd	r23, Y+11	; 0x0b
    378a:	8c 85       	ldd	r24, Y+12	; 0x0c
    378c:	9d 85       	ldd	r25, Y+13	; 0x0d
    378e:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    3792:	88 23       	and	r24, r24
    3794:	2c f4       	brge	.+10     	; 0x37a0 <Get_UP+0x9a>
		__ticks = 1;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	9f 87       	std	Y+15, r25	; 0x0f
    379c:	8e 87       	std	Y+14, r24	; 0x0e
    379e:	3f c0       	rjmp	.+126    	; 0x381e <Get_UP+0x118>
	else if (__tmp > 65535)
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	3f ef       	ldi	r19, 0xFF	; 255
    37a4:	4f e7       	ldi	r20, 0x7F	; 127
    37a6:	57 e4       	ldi	r21, 0x47	; 71
    37a8:	6a 85       	ldd	r22, Y+10	; 0x0a
    37aa:	7b 85       	ldd	r23, Y+11	; 0x0b
    37ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    37b0:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    37b4:	18 16       	cp	r1, r24
    37b6:	4c f5       	brge	.+82     	; 0x380a <Get_UP+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e2       	ldi	r20, 0x20	; 32
    37be:	51 e4       	ldi	r21, 0x41	; 65
    37c0:	6e 81       	ldd	r22, Y+6	; 0x06
    37c2:	7f 81       	ldd	r23, Y+7	; 0x07
    37c4:	88 85       	ldd	r24, Y+8	; 0x08
    37c6:	99 85       	ldd	r25, Y+9	; 0x09
    37c8:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	bc 01       	movw	r22, r24
    37d2:	cd 01       	movw	r24, r26
    37d4:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	9f 87       	std	Y+15, r25	; 0x0f
    37de:	8e 87       	std	Y+14, r24	; 0x0e
    37e0:	0f c0       	rjmp	.+30     	; 0x3800 <Get_UP+0xfa>
    37e2:	80 e9       	ldi	r24, 0x90	; 144
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	99 8b       	std	Y+17, r25	; 0x11
    37e8:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37ea:	88 89       	ldd	r24, Y+16	; 0x10
    37ec:	99 89       	ldd	r25, Y+17	; 0x11
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <Get_UP+0xe8>
    37f2:	99 8b       	std	Y+17, r25	; 0x11
    37f4:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    37f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	9f 87       	std	Y+15, r25	; 0x0f
    37fe:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3800:	8e 85       	ldd	r24, Y+14	; 0x0e
    3802:	9f 85       	ldd	r25, Y+15	; 0x0f
    3804:	89 2b       	or	r24, r25
    3806:	69 f7       	brne	.-38     	; 0x37e2 <Get_UP+0xdc>
    3808:	14 c0       	rjmp	.+40     	; 0x3832 <Get_UP+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380a:	6a 85       	ldd	r22, Y+10	; 0x0a
    380c:	7b 85       	ldd	r23, Y+11	; 0x0b
    380e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3810:	9d 85       	ldd	r25, Y+13	; 0x0d
    3812:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	9f 87       	std	Y+15, r25	; 0x0f
    381c:	8e 87       	std	Y+14, r24	; 0x0e
    381e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3820:	9f 85       	ldd	r25, Y+15	; 0x0f
    3822:	9b 8b       	std	Y+19, r25	; 0x13
    3824:	8a 8b       	std	Y+18, r24	; 0x12
    3826:	8a 89       	ldd	r24, Y+18	; 0x12
    3828:	9b 89       	ldd	r25, Y+19	; 0x13
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	f1 f7       	brne	.-4      	; 0x382a <Get_UP+0x124>
    382e:	9b 8b       	std	Y+19, r25	; 0x13
    3830:	8a 8b       	std	Y+18, r24	; 0x12



	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3832:	8e ee       	ldi	r24, 0xEE	; 238
    3834:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Start_Wait>
	delay();
    3838:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_WriteByte(0xF6);
    383c:	86 ef       	ldi	r24, 0xF6	; 246
    383e:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    3842:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3846:	8f ee       	ldi	r24, 0xEF	; 239
    3848:	0e 94 bd 00 	call	0x17a	; 0x17a <TWI_Repeated_start>
	delay();// To read
    384c:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	Pressure_RAW[0] = TWI_ReadByteWithNACK();
    3850:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TWI_ReadByteWithNACK>
    3854:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    3856:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Stop();
    385a:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
	delay();
    385e:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3862:	8e ee       	ldi	r24, 0xEE	; 238
    3864:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Start_Wait>
	delay();
    3868:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_WriteByte(0xF7);
    386c:	87 ef       	ldi	r24, 0xF7	; 247
    386e:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    3872:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3876:	8f ee       	ldi	r24, 0xEF	; 239
    3878:	0e 94 bd 00 	call	0x17a	; 0x17a <TWI_Repeated_start>
	delay();// To read
    387c:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	Pressure_RAW[1] = TWI_ReadByteWithNACK();
    3880:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TWI_ReadByteWithNACK>
    3884:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    3886:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Stop();
    388a:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
	delay();
    388e:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// read the LSB of the raw pressure data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3892:	8e ee       	ldi	r24, 0xEE	; 238
    3894:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Start_Wait>
	delay();
    3898:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_WriteByte(0xF8);
    389c:	88 ef       	ldi	r24, 0xF8	; 248
    389e:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    38a2:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    38a6:	8f ee       	ldi	r24, 0xEF	; 239
    38a8:	0e 94 bd 00 	call	0x17a	; 0x17a <TWI_Repeated_start>
	delay();// To read
    38ac:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	Pressure_RAW[2] = TWI_ReadByteWithNACK();
    38b0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TWI_ReadByteWithNACK>
    38b4:	8e 8b       	std	Y+22, r24	; 0x16
	delay();
    38b6:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Stop();
    38ba:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
	// stop the I2C communication with BMP180

	// combine the raw pressure data into a single 24-bit value and shift it right to adjust for the oversampling setting

	return ((Pressure_RAW[0] << 8) + Pressure_RAW[1]);
    38be:	8c 89       	ldd	r24, Y+20	; 0x14
    38c0:	88 2f       	mov	r24, r24
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	38 2f       	mov	r19, r24
    38c6:	22 27       	eor	r18, r18
    38c8:	8d 89       	ldd	r24, Y+21	; 0x15
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	82 0f       	add	r24, r18
    38d0:	93 1f       	adc	r25, r19
    38d2:	09 2e       	mov	r0, r25
    38d4:	00 0c       	add	r0, r0
    38d6:	aa 0b       	sbc	r26, r26
    38d8:	bb 0b       	sbc	r27, r27

	//    data = ((Pressure_RAW[0] << 16) + (Pressure_RAW[1] << 8) + Pressure_RAW[2]) >> (8 - OSS);

	//    return data;
}
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	66 96       	adiw	r28, 0x16	; 22
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	08 95       	ret

000038f0 <Get_UT>:

uint32 Get_UT(void) {
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	61 97       	sbiw	r28, 0x11	; 17
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61

	uint8 datatowrite = 0x2E;
    3904:	8e e2       	ldi	r24, 0x2E	; 46
    3906:	89 83       	std	Y+1, r24	; 0x01
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = { 0 };
    3908:	19 8a       	std	Y+17, r1	; 0x11
    390a:	18 8a       	std	Y+16, r1	; 0x10
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    390c:	8e ee       	ldi	r24, 0xEE	; 238
    390e:	0e 94 7f 00 	call	0xfe	; 0xfe <TWI_Start>
	delay();
    3912:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    3916:	84 ef       	ldi	r24, 0xF4	; 244
    3918:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    391c:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// send the value calculated above to start the measurement
	TWI_WriteByte(datatowrite);
    3920:	89 81       	ldd	r24, Y+1	; 0x01
    3922:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    3926:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    392a:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a0 ea       	ldi	r26, 0xA0	; 160
    3934:	b0 e4       	ldi	r27, 0x40	; 64
    3936:	8a 83       	std	Y+2, r24	; 0x02
    3938:	9b 83       	std	Y+3, r25	; 0x03
    393a:	ac 83       	std	Y+4, r26	; 0x04
    393c:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	4a e7       	ldi	r20, 0x7A	; 122
    3944:	55 e4       	ldi	r21, 0x45	; 69
    3946:	6a 81       	ldd	r22, Y+2	; 0x02
    3948:	7b 81       	ldd	r23, Y+3	; 0x03
    394a:	8c 81       	ldd	r24, Y+4	; 0x04
    394c:	9d 81       	ldd	r25, Y+5	; 0x05
    394e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	8e 83       	std	Y+6, r24	; 0x06
    3958:	9f 83       	std	Y+7, r25	; 0x07
    395a:	a8 87       	std	Y+8, r26	; 0x08
    395c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e8       	ldi	r20, 0x80	; 128
    3964:	5f e3       	ldi	r21, 0x3F	; 63
    3966:	6e 81       	ldd	r22, Y+6	; 0x06
    3968:	7f 81       	ldd	r23, Y+7	; 0x07
    396a:	88 85       	ldd	r24, Y+8	; 0x08
    396c:	99 85       	ldd	r25, Y+9	; 0x09
    396e:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    3972:	88 23       	and	r24, r24
    3974:	2c f4       	brge	.+10     	; 0x3980 <Get_UT+0x90>
		__ticks = 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	9b 87       	std	Y+11, r25	; 0x0b
    397c:	8a 87       	std	Y+10, r24	; 0x0a
    397e:	3f c0       	rjmp	.+126    	; 0x39fe <Get_UT+0x10e>
	else if (__tmp > 65535)
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	3f ef       	ldi	r19, 0xFF	; 255
    3984:	4f e7       	ldi	r20, 0x7F	; 127
    3986:	57 e4       	ldi	r21, 0x47	; 71
    3988:	6e 81       	ldd	r22, Y+6	; 0x06
    398a:	7f 81       	ldd	r23, Y+7	; 0x07
    398c:	88 85       	ldd	r24, Y+8	; 0x08
    398e:	99 85       	ldd	r25, Y+9	; 0x09
    3990:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    3994:	18 16       	cp	r1, r24
    3996:	4c f5       	brge	.+82     	; 0x39ea <Get_UT+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e2       	ldi	r20, 0x20	; 32
    399e:	51 e4       	ldi	r21, 0x41	; 65
    39a0:	6a 81       	ldd	r22, Y+2	; 0x02
    39a2:	7b 81       	ldd	r23, Y+3	; 0x03
    39a4:	8c 81       	ldd	r24, Y+4	; 0x04
    39a6:	9d 81       	ldd	r25, Y+5	; 0x05
    39a8:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	bc 01       	movw	r22, r24
    39b2:	cd 01       	movw	r24, r26
    39b4:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	9b 87       	std	Y+11, r25	; 0x0b
    39be:	8a 87       	std	Y+10, r24	; 0x0a
    39c0:	0f c0       	rjmp	.+30     	; 0x39e0 <Get_UT+0xf0>
    39c2:	80 e9       	ldi	r24, 0x90	; 144
    39c4:	91 e0       	ldi	r25, 0x01	; 1
    39c6:	9d 87       	std	Y+13, r25	; 0x0d
    39c8:	8c 87       	std	Y+12, r24	; 0x0c
    39ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    39cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <Get_UT+0xde>
    39d2:	9d 87       	std	Y+13, r25	; 0x0d
    39d4:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	9b 87       	std	Y+11, r25	; 0x0b
    39de:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    39e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    39e4:	89 2b       	or	r24, r25
    39e6:	69 f7       	brne	.-38     	; 0x39c2 <Get_UT+0xd2>
    39e8:	14 c0       	rjmp	.+40     	; 0x3a12 <Get_UT+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ea:	6e 81       	ldd	r22, Y+6	; 0x06
    39ec:	7f 81       	ldd	r23, Y+7	; 0x07
    39ee:	88 85       	ldd	r24, Y+8	; 0x08
    39f0:	99 85       	ldd	r25, Y+9	; 0x09
    39f2:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	9b 87       	std	Y+11, r25	; 0x0b
    39fc:	8a 87       	std	Y+10, r24	; 0x0a
    39fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a00:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a02:	9f 87       	std	Y+15, r25	; 0x0f
    3a04:	8e 87       	std	Y+14, r24	; 0x0e
    3a06:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a08:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <Get_UT+0x11a>
    3a0e:	9f 87       	std	Y+15, r25	; 0x0f
    3a10:	8e 87       	std	Y+14, r24	; 0x0e

	_delay_ms(5);
	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw temperature data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3a12:	8e ee       	ldi	r24, 0xEE	; 238
    3a14:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Start_Wait>
	delay();
    3a18:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_WriteByte(0xF6);
    3a1c:	86 ef       	ldi	r24, 0xF6	; 246
    3a1e:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    3a22:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3a26:	8f ee       	ldi	r24, 0xEF	; 239
    3a28:	0e 94 bd 00 	call	0x17a	; 0x17a <TWI_Repeated_start>
	delay();// To read
    3a2c:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	Temperature_RAW[0] = TWI_ReadByteWithNACK();
    3a30:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TWI_ReadByteWithNACK>
    3a34:	88 8b       	std	Y+16, r24	; 0x10
	delay();
    3a36:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Stop();
    3a3a:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
	delay();
    3a3e:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	// read the LSB of the raw temperature data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    3a42:	8e ee       	ldi	r24, 0xEE	; 238
    3a44:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TWI_Start_Wait>
	delay();
    3a48:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_WriteByte(0xF7);
    3a4c:	87 ef       	ldi	r24, 0xF7	; 247
    3a4e:	0e 94 49 01 	call	0x292	; 0x292 <TWI_WriteByte>
	delay();
    3a52:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    3a56:	8f ee       	ldi	r24, 0xEF	; 239
    3a58:	0e 94 bd 00 	call	0x17a	; 0x17a <TWI_Repeated_start>
	delay();// To read
    3a5c:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	Temperature_RAW[1] = TWI_ReadByteWithNACK();
    3a60:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TWI_ReadByteWithNACK>
    3a64:	89 8b       	std	Y+17, r24	; 0x11
	delay();
    3a66:	0e 94 96 22 	call	0x452c	; 0x452c <delay>
	TWI_Stop();
    3a6a:	0e 94 3c 01 	call	0x278	; 0x278 <TWI_Stop>
	// stop the I2C communication with BMP180

	return ((Temperature_RAW[0] << 8) + Temperature_RAW[1]);
    3a6e:	88 89       	ldd	r24, Y+16	; 0x10
    3a70:	88 2f       	mov	r24, r24
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	38 2f       	mov	r19, r24
    3a76:	22 27       	eor	r18, r18
    3a78:	89 89       	ldd	r24, Y+17	; 0x11
    3a7a:	88 2f       	mov	r24, r24
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	82 0f       	add	r24, r18
    3a80:	93 1f       	adc	r25, r19
    3a82:	09 2e       	mov	r0, r25
    3a84:	00 0c       	add	r0, r0
    3a86:	aa 0b       	sbc	r26, r26
    3a88:	bb 0b       	sbc	r27, r27

}
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	61 96       	adiw	r28, 0x11	; 17
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	08 95       	ret

00003aa0 <BMP180_calculateTemperature>:

sint32 BMP180_calculateTemperature(void) {
    3aa0:	cf 92       	push	r12
    3aa2:	df 92       	push	r13
    3aa4:	ef 92       	push	r14
    3aa6:	ff 92       	push	r15
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	00 d0       	rcall	.+0      	; 0x3ab2 <BMP180_calculateTemperature+0x12>
    3ab2:	00 d0       	rcall	.+0      	; 0x3ab4 <BMP180_calculateTemperature+0x14>
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62

	float32 temperature = 0;
    3ab8:	19 82       	std	Y+1, r1	; 0x01
    3aba:	1a 82       	std	Y+2, r1	; 0x02
    3abc:	1b 82       	std	Y+3, r1	; 0x03
    3abe:	1c 82       	std	Y+4, r1	; 0x04

	UT = Get_UT();
    3ac0:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <Get_UT>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <UT>
    3acc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <UT+0x1>
    3ad0:	a0 93 bd 00 	sts	0x00BD, r26	; 0x8000bd <UT+0x2>
    3ad4:	b0 93 be 00 	sts	0x00BE, r27	; 0x8000be <UT+0x3>

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    3ad8:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <UT>
    3adc:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <UT+0x1>
    3ae0:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <UT+0x2>
    3ae4:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <UT+0x3>
    3ae8:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <AC6>
    3aec:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <AC6+0x1>
    3af0:	cc 01       	movw	r24, r24
    3af2:	a0 e0       	ldi	r26, 0x00	; 0
    3af4:	b0 e0       	ldi	r27, 0x00	; 0
    3af6:	79 01       	movw	r14, r18
    3af8:	8a 01       	movw	r16, r20
    3afa:	e8 1a       	sub	r14, r24
    3afc:	f9 0a       	sbc	r15, r25
    3afe:	0a 0b       	sbc	r16, r26
    3b00:	1b 0b       	sbc	r17, r27
    3b02:	d8 01       	movw	r26, r16
    3b04:	c7 01       	movw	r24, r14
    3b06:	bc 01       	movw	r22, r24
    3b08:	cd 01       	movw	r24, r26
    3b0a:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3b0e:	6b 01       	movw	r12, r22
    3b10:	7c 01       	movw	r14, r24
    3b12:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <AC5>
    3b16:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <AC5+0x1>
    3b1a:	cc 01       	movw	r24, r24
    3b1c:	a0 e0       	ldi	r26, 0x00	; 0
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	0e 94 1f 28 	call	0x503e	; 0x503e <__floatunsisf>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e0       	ldi	r20, 0x00	; 0
    3b32:	57 e4       	ldi	r21, 0x47	; 71
    3b34:	bc 01       	movw	r22, r24
    3b36:	cd 01       	movw	r24, r26
    3b38:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9c 01       	movw	r18, r24
    3b42:	ad 01       	movw	r20, r26
    3b44:	c7 01       	movw	r24, r14
    3b46:	b6 01       	movw	r22, r12
    3b48:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	bc 01       	movw	r22, r24
    3b52:	cd 01       	movw	r24, r26
    3b54:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <X1>
    3b60:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <X1+0x1>
    3b64:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <X1+0x2>
    3b68:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <X1+0x3>
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    3b6c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <MC>
    3b70:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <MC+0x1>
    3b74:	09 2e       	mov	r0, r25
    3b76:	00 0c       	add	r0, r0
    3b78:	aa 0b       	sbc	r26, r26
    3b7a:	bb 0b       	sbc	r27, r27
    3b7c:	bc 01       	movw	r22, r24
    3b7e:	cd 01       	movw	r24, r26
    3b80:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	55 e4       	ldi	r21, 0x45	; 69
    3b90:	bc 01       	movw	r22, r24
    3b92:	cd 01       	movw	r24, r26
    3b94:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	6c 01       	movw	r12, r24
    3b9e:	7d 01       	movw	r14, r26
    3ba0:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <MD>
    3ba4:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <MD+0x1>
    3ba8:	9c 01       	movw	r18, r24
    3baa:	99 0f       	add	r25, r25
    3bac:	44 0b       	sbc	r20, r20
    3bae:	55 0b       	sbc	r21, r21
    3bb0:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <X1>
    3bb4:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <X1+0x1>
    3bb8:	a0 91 b1 00 	lds	r26, 0x00B1	; 0x8000b1 <X1+0x2>
    3bbc:	b0 91 b2 00 	lds	r27, 0x00B2	; 0x8000b2 <X1+0x3>
    3bc0:	82 0f       	add	r24, r18
    3bc2:	93 1f       	adc	r25, r19
    3bc4:	a4 1f       	adc	r26, r20
    3bc6:	b5 1f       	adc	r27, r21
    3bc8:	bc 01       	movw	r22, r24
    3bca:	cd 01       	movw	r24, r26
    3bcc:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	9c 01       	movw	r18, r24
    3bd6:	ad 01       	movw	r20, r26
    3bd8:	c7 01       	movw	r24, r14
    3bda:	b6 01       	movw	r22, r12
    3bdc:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	bc 01       	movw	r22, r24
    3be6:	cd 01       	movw	r24, r26
    3be8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <X2>
    3bf4:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <X2+0x1>
    3bf8:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <X2+0x2>
    3bfc:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <X2+0x3>
	B5 = X1 + X2;
    3c00:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <X1>
    3c04:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <X1+0x1>
    3c08:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <X1+0x2>
    3c0c:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <X1+0x3>
    3c10:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <X2>
    3c14:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <X2+0x1>
    3c18:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <X2+0x2>
    3c1c:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <X2+0x3>
    3c20:	82 0f       	add	r24, r18
    3c22:	93 1f       	adc	r25, r19
    3c24:	a4 1f       	adc	r26, r20
    3c26:	b5 1f       	adc	r27, r21
    3c28:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <B5>
    3c2c:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <B5+0x1>
    3c30:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <B5+0x2>
    3c34:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <B5+0x3>
	temperature = (B5 + 8) / (pow(2, 4));
    3c38:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <B5>
    3c3c:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <B5+0x1>
    3c40:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <B5+0x2>
    3c44:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <B5+0x3>
    3c48:	08 96       	adiw	r24, 0x08	; 8
    3c4a:	a1 1d       	adc	r26, r1
    3c4c:	b1 1d       	adc	r27, r1
    3c4e:	bc 01       	movw	r22, r24
    3c50:	cd 01       	movw	r24, r26
    3c52:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	51 e4       	ldi	r21, 0x41	; 65
    3c62:	bc 01       	movw	r22, r24
    3c64:	cd 01       	movw	r24, r26
    3c66:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	89 83       	std	Y+1, r24	; 0x01
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	ab 83       	std	Y+3, r26	; 0x03
    3c74:	bc 83       	std	Y+4, r27	; 0x04
	return temperature / 10.0;
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e2       	ldi	r20, 0x20	; 32
    3c7c:	51 e4       	ldi	r21, 0x41	; 65
    3c7e:	69 81       	ldd	r22, Y+1	; 0x01
    3c80:	7a 81       	ldd	r23, Y+2	; 0x02
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	9c 81       	ldd	r25, Y+4	; 0x04
    3c86:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	bc 01       	movw	r22, r24
    3c90:	cd 01       	movw	r24, r26
    3c92:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
}
    3c9a:	bc 01       	movw	r22, r24
    3c9c:	cd 01       	movw	r24, r26
    3c9e:	0f 90       	pop	r0
    3ca0:	0f 90       	pop	r0
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	df 91       	pop	r29
    3ca8:	cf 91       	pop	r28
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	ff 90       	pop	r15
    3cb0:	ef 90       	pop	r14
    3cb2:	df 90       	pop	r13
    3cb4:	cf 90       	pop	r12
    3cb6:	08 95       	ret

00003cb8 <BMP180_calculatePressure>:

sint32 BMP180_calculatePressure(void) {
    3cb8:	cf 92       	push	r12
    3cba:	df 92       	push	r13
    3cbc:	ef 92       	push	r14
    3cbe:	ff 92       	push	r15
    3cc0:	0f 93       	push	r16
    3cc2:	1f 93       	push	r17
    3cc4:	cf 93       	push	r28
    3cc6:	df 93       	push	r29
    3cc8:	cd b7       	in	r28, 0x3d	; 61
    3cca:	de b7       	in	r29, 0x3e	; 62
	UP = Get_UP();
    3ccc:	0e 94 83 1b 	call	0x3706	; 0x3706 <Get_UP>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <UP>
    3cd8:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <UP+0x1>
    3cdc:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <UP+0x2>
    3ce0:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <UP+0x3>

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    3ce4:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <UT>
    3ce8:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <UT+0x1>
    3cec:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <UT+0x2>
    3cf0:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <UT+0x3>
    3cf4:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <AC6>
    3cf8:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <AC6+0x1>
    3cfc:	cc 01       	movw	r24, r24
    3cfe:	a0 e0       	ldi	r26, 0x00	; 0
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	79 01       	movw	r14, r18
    3d04:	8a 01       	movw	r16, r20
    3d06:	e8 1a       	sub	r14, r24
    3d08:	f9 0a       	sbc	r15, r25
    3d0a:	0a 0b       	sbc	r16, r26
    3d0c:	1b 0b       	sbc	r17, r27
    3d0e:	d8 01       	movw	r26, r16
    3d10:	c7 01       	movw	r24, r14
    3d12:	bc 01       	movw	r22, r24
    3d14:	cd 01       	movw	r24, r26
    3d16:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3d1a:	6b 01       	movw	r12, r22
    3d1c:	7c 01       	movw	r14, r24
    3d1e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <AC5>
    3d22:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <AC5+0x1>
    3d26:	cc 01       	movw	r24, r24
    3d28:	a0 e0       	ldi	r26, 0x00	; 0
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	cd 01       	movw	r24, r26
    3d30:	0e 94 1f 28 	call	0x503e	; 0x503e <__floatunsisf>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	bc 01       	movw	r22, r24
    3d42:	cd 01       	movw	r24, r26
    3d44:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	9c 01       	movw	r18, r24
    3d4e:	ad 01       	movw	r20, r26
    3d50:	c7 01       	movw	r24, r14
    3d52:	b6 01       	movw	r22, r12
    3d54:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <X1>
    3d6c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <X1+0x1>
    3d70:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <X1+0x2>
    3d74:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <X1+0x3>
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    3d78:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <MC>
    3d7c:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <MC+0x1>
    3d80:	09 2e       	mov	r0, r25
    3d82:	00 0c       	add	r0, r0
    3d84:	aa 0b       	sbc	r26, r26
    3d86:	bb 0b       	sbc	r27, r27
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	55 e4       	ldi	r21, 0x45	; 69
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	6c 01       	movw	r12, r24
    3daa:	7d 01       	movw	r14, r26
    3dac:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <MD>
    3db0:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <MD+0x1>
    3db4:	9c 01       	movw	r18, r24
    3db6:	99 0f       	add	r25, r25
    3db8:	44 0b       	sbc	r20, r20
    3dba:	55 0b       	sbc	r21, r21
    3dbc:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <X1>
    3dc0:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <X1+0x1>
    3dc4:	a0 91 b1 00 	lds	r26, 0x00B1	; 0x8000b1 <X1+0x2>
    3dc8:	b0 91 b2 00 	lds	r27, 0x00B2	; 0x8000b2 <X1+0x3>
    3dcc:	82 0f       	add	r24, r18
    3dce:	93 1f       	adc	r25, r19
    3dd0:	a4 1f       	adc	r26, r20
    3dd2:	b5 1f       	adc	r27, r21
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	9c 01       	movw	r18, r24
    3de2:	ad 01       	movw	r20, r26
    3de4:	c7 01       	movw	r24, r14
    3de6:	b6 01       	movw	r22, r12
    3de8:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	bc 01       	movw	r22, r24
    3df2:	cd 01       	movw	r24, r26
    3df4:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <X2>
    3e00:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <X2+0x1>
    3e04:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <X2+0x2>
    3e08:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <X2+0x3>
	B5 = X1 + X2;
    3e0c:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <X1>
    3e10:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <X1+0x1>
    3e14:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <X1+0x2>
    3e18:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <X1+0x3>
    3e1c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <X2>
    3e20:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <X2+0x1>
    3e24:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <X2+0x2>
    3e28:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <X2+0x3>
    3e2c:	82 0f       	add	r24, r18
    3e2e:	93 1f       	adc	r25, r19
    3e30:	a4 1f       	adc	r26, r20
    3e32:	b5 1f       	adc	r27, r21
    3e34:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <B5>
    3e38:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <B5+0x1>
    3e3c:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <B5+0x2>
    3e40:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <B5+0x3>
	B6 = B5 - 4000;
    3e44:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <B5>
    3e48:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <B5+0x1>
    3e4c:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <B5+0x2>
    3e50:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <B5+0x3>
    3e54:	80 5a       	subi	r24, 0xA0	; 160
    3e56:	9f 40       	sbci	r25, 0x0F	; 15
    3e58:	a1 09       	sbc	r26, r1
    3e5a:	b1 09       	sbc	r27, r1
    3e5c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <B6>
    3e60:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <B6+0x1>
    3e64:	a0 93 c9 00 	sts	0x00C9, r26	; 0x8000c9 <B6+0x2>
    3e68:	b0 93 ca 00 	sts	0x00CA, r27	; 0x8000ca <B6+0x3>
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
    3e6c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <B2>
    3e70:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <B2+0x1>
    3e74:	09 2e       	mov	r0, r25
    3e76:	00 0c       	add	r0, r0
    3e78:	aa 0b       	sbc	r26, r26
    3e7a:	bb 0b       	sbc	r27, r27
    3e7c:	bc 01       	movw	r22, r24
    3e7e:	cd 01       	movw	r24, r26
    3e80:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3e84:	6b 01       	movw	r12, r22
    3e86:	7c 01       	movw	r14, r24
    3e88:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <B6>
    3e8c:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <B6+0x1>
    3e90:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <B6+0x2>
    3e94:	50 91 ca 00 	lds	r21, 0x00CA	; 0x8000ca <B6+0x3>
    3e98:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <B6>
    3e9c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <B6+0x1>
    3ea0:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <B6+0x2>
    3ea4:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <B6+0x3>
    3ea8:	bc 01       	movw	r22, r24
    3eaa:	cd 01       	movw	r24, r26
    3eac:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__mulsi3>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	bc 01       	movw	r22, r24
    3eb6:	cd 01       	movw	r24, r26
    3eb8:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e8       	ldi	r20, 0x80	; 128
    3ec6:	55 e4       	ldi	r21, 0x45	; 69
    3ec8:	bc 01       	movw	r22, r24
    3eca:	cd 01       	movw	r24, r26
    3ecc:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	9c 01       	movw	r18, r24
    3ed6:	ad 01       	movw	r20, r26
    3ed8:	c7 01       	movw	r24, r14
    3eda:	b6 01       	movw	r22, r12
    3edc:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	40 e0       	ldi	r20, 0x00	; 0
    3eea:	55 e4       	ldi	r21, 0x45	; 69
    3eec:	bc 01       	movw	r22, r24
    3eee:	cd 01       	movw	r24, r26
    3ef0:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    3f00:	dc 01       	movw	r26, r24
    3f02:	cb 01       	movw	r24, r22
    3f04:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <X1>
    3f08:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <X1+0x1>
    3f0c:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <X1+0x2>
    3f10:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <X1+0x3>
	X2 = AC2 * B6 / (pow(2, 11));
    3f14:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <AC2>
    3f18:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <AC2+0x1>
    3f1c:	9c 01       	movw	r18, r24
    3f1e:	99 0f       	add	r25, r25
    3f20:	44 0b       	sbc	r20, r20
    3f22:	55 0b       	sbc	r21, r21
    3f24:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <B6>
    3f28:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <B6+0x1>
    3f2c:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <B6+0x2>
    3f30:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <B6+0x3>
    3f34:	bc 01       	movw	r22, r24
    3f36:	cd 01       	movw	r24, r26
    3f38:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__mulsi3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	bc 01       	movw	r22, r24
    3f42:	cd 01       	movw	r24, r26
    3f44:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	40 e0       	ldi	r20, 0x00	; 0
    3f52:	55 e4       	ldi	r21, 0x45	; 69
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <X2>
    3f70:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <X2+0x1>
    3f74:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <X2+0x2>
    3f78:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <X2+0x3>
	X3 = X1 + X2;
    3f7c:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <X1>
    3f80:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <X1+0x1>
    3f84:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <X1+0x2>
    3f88:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <X1+0x3>
    3f8c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <X2>
    3f90:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <X2+0x1>
    3f94:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <X2+0x2>
    3f98:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <X2+0x3>
    3f9c:	82 0f       	add	r24, r18
    3f9e:	93 1f       	adc	r25, r19
    3fa0:	a4 1f       	adc	r26, r20
    3fa2:	b5 1f       	adc	r27, r21
    3fa4:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <X3>
    3fa8:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <X3+0x1>
    3fac:	a0 93 c1 00 	sts	0x00C1, r26	; 0x8000c1 <X3+0x2>
    3fb0:	b0 93 c2 00 	sts	0x00C2, r27	; 0x8000c2 <X3+0x3>
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
    3fb4:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <AC1>
    3fb8:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <AC1+0x1>
    3fbc:	88 0f       	add	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	9c 01       	movw	r18, r24
    3fc6:	99 0f       	add	r25, r25
    3fc8:	44 0b       	sbc	r20, r20
    3fca:	55 0b       	sbc	r21, r21
    3fcc:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <X3>
    3fd0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <X3+0x1>
    3fd4:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <X3+0x2>
    3fd8:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <X3+0x3>
    3fdc:	82 0f       	add	r24, r18
    3fde:	93 1f       	adc	r25, r19
    3fe0:	a4 1f       	adc	r26, r20
    3fe2:	b5 1f       	adc	r27, r21
    3fe4:	02 96       	adiw	r24, 0x02	; 2
    3fe6:	a1 1d       	adc	r26, r1
    3fe8:	b1 1d       	adc	r27, r1
    3fea:	bb 23       	and	r27, r27
    3fec:	1c f4       	brge	.+6      	; 0x3ff4 <BMP180_calculatePressure+0x33c>
    3fee:	03 96       	adiw	r24, 0x03	; 3
    3ff0:	a1 1d       	adc	r26, r1
    3ff2:	b1 1d       	adc	r27, r1
    3ff4:	b5 95       	asr	r27
    3ff6:	a7 95       	ror	r26
    3ff8:	97 95       	ror	r25
    3ffa:	87 95       	ror	r24
    3ffc:	b5 95       	asr	r27
    3ffe:	a7 95       	ror	r26
    4000:	97 95       	ror	r25
    4002:	87 95       	ror	r24
    4004:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <B3>
    4008:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <B3+0x1>
    400c:	a0 93 c5 00 	sts	0x00C5, r26	; 0x8000c5 <B3+0x2>
    4010:	b0 93 c6 00 	sts	0x00C6, r27	; 0x8000c6 <B3+0x3>
	X1 = AC3 * B6 / (pow(2, 13));
    4014:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <AC3>
    4018:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <AC3+0x1>
    401c:	9c 01       	movw	r18, r24
    401e:	99 0f       	add	r25, r25
    4020:	44 0b       	sbc	r20, r20
    4022:	55 0b       	sbc	r21, r21
    4024:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <B6>
    4028:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <B6+0x1>
    402c:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <B6+0x2>
    4030:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <B6+0x3>
    4034:	bc 01       	movw	r22, r24
    4036:	cd 01       	movw	r24, r26
    4038:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__mulsi3>
    403c:	dc 01       	movw	r26, r24
    403e:	cb 01       	movw	r24, r22
    4040:	bc 01       	movw	r22, r24
    4042:	cd 01       	movw	r24, r26
    4044:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	40 e0       	ldi	r20, 0x00	; 0
    4052:	56 e4       	ldi	r21, 0x46	; 70
    4054:	bc 01       	movw	r22, r24
    4056:	cd 01       	movw	r24, r26
    4058:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	bc 01       	movw	r22, r24
    4062:	cd 01       	movw	r24, r26
    4064:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <X1>
    4070:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <X1+0x1>
    4074:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <X1+0x2>
    4078:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <X1+0x3>
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
    407c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <B1>
    4080:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <B1+0x1>
    4084:	09 2e       	mov	r0, r25
    4086:	00 0c       	add	r0, r0
    4088:	aa 0b       	sbc	r26, r26
    408a:	bb 0b       	sbc	r27, r27
    408c:	bc 01       	movw	r22, r24
    408e:	cd 01       	movw	r24, r26
    4090:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    4094:	6b 01       	movw	r12, r22
    4096:	7c 01       	movw	r14, r24
    4098:	20 91 c7 00 	lds	r18, 0x00C7	; 0x8000c7 <B6>
    409c:	30 91 c8 00 	lds	r19, 0x00C8	; 0x8000c8 <B6+0x1>
    40a0:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <B6+0x2>
    40a4:	50 91 ca 00 	lds	r21, 0x00CA	; 0x8000ca <B6+0x3>
    40a8:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <B6>
    40ac:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <B6+0x1>
    40b0:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <B6+0x2>
    40b4:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <B6+0x3>
    40b8:	bc 01       	movw	r22, r24
    40ba:	cd 01       	movw	r24, r26
    40bc:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__mulsi3>
    40c0:	dc 01       	movw	r26, r24
    40c2:	cb 01       	movw	r24, r22
    40c4:	bc 01       	movw	r22, r24
    40c6:	cd 01       	movw	r24, r26
    40c8:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	40 e8       	ldi	r20, 0x80	; 128
    40d6:	55 e4       	ldi	r21, 0x45	; 69
    40d8:	bc 01       	movw	r22, r24
    40da:	cd 01       	movw	r24, r26
    40dc:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	9c 01       	movw	r18, r24
    40e6:	ad 01       	movw	r20, r26
    40e8:	c7 01       	movw	r24, r14
    40ea:	b6 01       	movw	r22, r12
    40ec:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e8       	ldi	r20, 0x80	; 128
    40fa:	57 e4       	ldi	r21, 0x47	; 71
    40fc:	bc 01       	movw	r22, r24
    40fe:	cd 01       	movw	r24, r26
    4100:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	bc 01       	movw	r22, r24
    410a:	cd 01       	movw	r24, r26
    410c:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <X2>
    4118:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <X2+0x1>
    411c:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <X2+0x2>
    4120:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <X2+0x3>
	X3 = ((X1 + X2) + 2) / (pow(2, 2));
    4124:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <X1>
    4128:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <X1+0x1>
    412c:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <X1+0x2>
    4130:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <X1+0x3>
    4134:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <X2>
    4138:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <X2+0x1>
    413c:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <X2+0x2>
    4140:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <X2+0x3>
    4144:	82 0f       	add	r24, r18
    4146:	93 1f       	adc	r25, r19
    4148:	a4 1f       	adc	r26, r20
    414a:	b5 1f       	adc	r27, r21
    414c:	02 96       	adiw	r24, 0x02	; 2
    414e:	a1 1d       	adc	r26, r1
    4150:	b1 1d       	adc	r27, r1
    4152:	bc 01       	movw	r22, r24
    4154:	cd 01       	movw	r24, r26
    4156:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	40 e8       	ldi	r20, 0x80	; 128
    4164:	50 e4       	ldi	r21, 0x40	; 64
    4166:	bc 01       	movw	r22, r24
    4168:	cd 01       	movw	r24, r26
    416a:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	bc 01       	movw	r22, r24
    4174:	cd 01       	movw	r24, r26
    4176:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <X3>
    4182:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <X3+0x1>
    4186:	a0 93 c1 00 	sts	0x00C1, r26	; 0x8000c1 <X3+0x2>
    418a:	b0 93 c2 00 	sts	0x00C2, r27	; 0x8000c2 <X3+0x3>
	B4 = (AC4 * (uint32) (X3 + 32768)) / (pow(2, 15));
    418e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <AC4>
    4192:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <AC4+0x1>
    4196:	9c 01       	movw	r18, r24
    4198:	40 e0       	ldi	r20, 0x00	; 0
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <X3>
    41a0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <X3+0x1>
    41a4:	a0 91 c1 00 	lds	r26, 0x00C1	; 0x8000c1 <X3+0x2>
    41a8:	b0 91 c2 00 	lds	r27, 0x00C2	; 0x8000c2 <X3+0x3>
    41ac:	90 58       	subi	r25, 0x80	; 128
    41ae:	af 4f       	sbci	r26, 0xFF	; 255
    41b0:	bf 4f       	sbci	r27, 0xFF	; 255
    41b2:	bc 01       	movw	r22, r24
    41b4:	cd 01       	movw	r24, r26
    41b6:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__mulsi3>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	bc 01       	movw	r22, r24
    41c0:	cd 01       	movw	r24, r26
    41c2:	0e 94 1f 28 	call	0x503e	; 0x503e <__floatunsisf>
    41c6:	dc 01       	movw	r26, r24
    41c8:	cb 01       	movw	r24, r22
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	57 e4       	ldi	r21, 0x47	; 71
    41d2:	bc 01       	movw	r22, r24
    41d4:	cd 01       	movw	r24, r26
    41d6:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    41da:	dc 01       	movw	r26, r24
    41dc:	cb 01       	movw	r24, r22
    41de:	bc 01       	movw	r22, r24
    41e0:	cd 01       	movw	r24, r26
    41e2:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    41e6:	dc 01       	movw	r26, r24
    41e8:	cb 01       	movw	r24, r22
    41ea:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <B4>
    41ee:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <B4+0x1>
    41f2:	a0 93 d5 00 	sts	0x00D5, r26	; 0x8000d5 <B4+0x2>
    41f6:	b0 93 d6 00 	sts	0x00D6, r27	; 0x8000d6 <B4+0x3>
	B7 = ((uint32) UP - B3) * (50000 >> OSS);
    41fa:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <UP>
    41fe:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <UP+0x1>
    4202:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <UP+0x2>
    4206:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <UP+0x3>
    420a:	9c 01       	movw	r18, r24
    420c:	ad 01       	movw	r20, r26
    420e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <B3>
    4212:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <B3+0x1>
    4216:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <B3+0x2>
    421a:	b0 91 c6 00 	lds	r27, 0x00C6	; 0x8000c6 <B3+0x3>
    421e:	28 1b       	sub	r18, r24
    4220:	39 0b       	sbc	r19, r25
    4222:	4a 0b       	sbc	r20, r26
    4224:	5b 0b       	sbc	r21, r27
    4226:	80 e5       	ldi	r24, 0x50	; 80
    4228:	93 ec       	ldi	r25, 0xC3	; 195
    422a:	dc 01       	movw	r26, r24
    422c:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muluhisi3>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <B7>
    4238:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <B7+0x1>
    423c:	a0 93 d9 00 	sts	0x00D9, r26	; 0x8000d9 <B7+0x2>
    4240:	b0 93 da 00 	sts	0x00DA, r27	; 0x8000da <B7+0x3>

	if (B7 < 0x80000000) {
    4244:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <B7>
    4248:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <B7+0x1>
    424c:	a0 91 d9 00 	lds	r26, 0x00D9	; 0x8000d9 <B7+0x2>
    4250:	b0 91 da 00 	lds	r27, 0x00DA	; 0x8000da <B7+0x3>
    4254:	bb 23       	and	r27, r27
    4256:	1c f1       	brlt	.+70     	; 0x429e <BMP180_calculatePressure+0x5e6>
		P = (B7 * 2) / B4;
    4258:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <B7>
    425c:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <B7+0x1>
    4260:	a0 91 d9 00 	lds	r26, 0x00D9	; 0x8000d9 <B7+0x2>
    4264:	b0 91 da 00 	lds	r27, 0x00DA	; 0x8000da <B7+0x3>
    4268:	88 0f       	add	r24, r24
    426a:	99 1f       	adc	r25, r25
    426c:	aa 1f       	adc	r26, r26
    426e:	bb 1f       	adc	r27, r27
    4270:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <B4>
    4274:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <B4+0x1>
    4278:	40 91 d5 00 	lds	r20, 0x00D5	; 0x8000d5 <B4+0x2>
    427c:	50 91 d6 00 	lds	r21, 0x00D6	; 0x8000d6 <B4+0x3>
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodsi4>
    4288:	da 01       	movw	r26, r20
    428a:	c9 01       	movw	r24, r18
    428c:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <P>
    4290:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <P+0x1>
    4294:	a0 93 cd 00 	sts	0x00CD, r26	; 0x8000cd <P+0x2>
    4298:	b0 93 ce 00 	sts	0x00CE, r27	; 0x8000ce <P+0x3>
    429c:	22 c0       	rjmp	.+68     	; 0x42e2 <BMP180_calculatePressure+0x62a>
	} else {
		P = (B7 / B4) * 2;
    429e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <B7>
    42a2:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <B7+0x1>
    42a6:	a0 91 d9 00 	lds	r26, 0x00D9	; 0x8000d9 <B7+0x2>
    42aa:	b0 91 da 00 	lds	r27, 0x00DA	; 0x8000da <B7+0x3>
    42ae:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <B4>
    42b2:	30 91 d4 00 	lds	r19, 0x00D4	; 0x8000d4 <B4+0x1>
    42b6:	40 91 d5 00 	lds	r20, 0x00D5	; 0x8000d5 <B4+0x2>
    42ba:	50 91 d6 00 	lds	r21, 0x00D6	; 0x8000d6 <B4+0x3>
    42be:	bc 01       	movw	r22, r24
    42c0:	cd 01       	movw	r24, r26
    42c2:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodsi4>
    42c6:	da 01       	movw	r26, r20
    42c8:	c9 01       	movw	r24, r18
    42ca:	88 0f       	add	r24, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	aa 1f       	adc	r26, r26
    42d0:	bb 1f       	adc	r27, r27
    42d2:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <P>
    42d6:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <P+0x1>
    42da:	a0 93 cd 00 	sts	0x00CD, r26	; 0x8000cd <P+0x2>
    42de:	b0 93 ce 00 	sts	0x00CE, r27	; 0x8000ce <P+0x3>
	}
	X1 = (P / (pow(2, 8))) * (P / (pow(2, 8)));
    42e2:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <P>
    42e6:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <P+0x1>
    42ea:	a0 91 cd 00 	lds	r26, 0x00CD	; 0x8000cd <P+0x2>
    42ee:	b0 91 ce 00 	lds	r27, 0x00CE	; 0x8000ce <P+0x3>
    42f2:	bc 01       	movw	r22, r24
    42f4:	cd 01       	movw	r24, r26
    42f6:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e8       	ldi	r20, 0x80	; 128
    4304:	53 e4       	ldi	r21, 0x43	; 67
    4306:	bc 01       	movw	r22, r24
    4308:	cd 01       	movw	r24, r26
    430a:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	6c 01       	movw	r12, r24
    4314:	7d 01       	movw	r14, r26
    4316:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <P>
    431a:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <P+0x1>
    431e:	a0 91 cd 00 	lds	r26, 0x00CD	; 0x8000cd <P+0x2>
    4322:	b0 91 ce 00 	lds	r27, 0x00CE	; 0x8000ce <P+0x3>
    4326:	bc 01       	movw	r22, r24
    4328:	cd 01       	movw	r24, r26
    432a:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	40 e8       	ldi	r20, 0x80	; 128
    4338:	53 e4       	ldi	r21, 0x43	; 67
    433a:	bc 01       	movw	r22, r24
    433c:	cd 01       	movw	r24, r26
    433e:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	9c 01       	movw	r18, r24
    4348:	ad 01       	movw	r20, r26
    434a:	c7 01       	movw	r24, r14
    434c:	b6 01       	movw	r22, r12
    434e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	bc 01       	movw	r22, r24
    4358:	cd 01       	movw	r24, r26
    435a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <X1>
    4366:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <X1+0x1>
    436a:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <X1+0x2>
    436e:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <X1+0x3>
	X1 = (X1 * 3038) / (pow(2, 16));
    4372:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <X1>
    4376:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <X1+0x1>
    437a:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <X1+0x2>
    437e:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <X1+0x3>
    4382:	8e ed       	ldi	r24, 0xDE	; 222
    4384:	9b e0       	ldi	r25, 0x0B	; 11
    4386:	dc 01       	movw	r26, r24
    4388:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muluhisi3>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	bc 01       	movw	r22, r24
    4392:	cd 01       	movw	r24, r26
    4394:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e8       	ldi	r20, 0x80	; 128
    43a2:	57 e4       	ldi	r21, 0x47	; 71
    43a4:	bc 01       	movw	r22, r24
    43a6:	cd 01       	movw	r24, r26
    43a8:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    43ac:	dc 01       	movw	r26, r24
    43ae:	cb 01       	movw	r24, r22
    43b0:	bc 01       	movw	r22, r24
    43b2:	cd 01       	movw	r24, r26
    43b4:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <X1>
    43c0:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <X1+0x1>
    43c4:	a0 93 b1 00 	sts	0x00B1, r26	; 0x8000b1 <X1+0x2>
    43c8:	b0 93 b2 00 	sts	0x00B2, r27	; 0x8000b2 <X1+0x3>
	X2 = (-7357 * P) / (pow(2, 16));
    43cc:	20 91 cb 00 	lds	r18, 0x00CB	; 0x8000cb <P>
    43d0:	30 91 cc 00 	lds	r19, 0x00CC	; 0x8000cc <P+0x1>
    43d4:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <P+0x2>
    43d8:	50 91 ce 00 	lds	r21, 0x00CE	; 0x8000ce <P+0x3>
    43dc:	83 e4       	ldi	r24, 0x43	; 67
    43de:	93 ee       	ldi	r25, 0xE3	; 227
    43e0:	dc 01       	movw	r26, r24
    43e2:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <__mulohisi3>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	bc 01       	movw	r22, r24
    43ec:	cd 01       	movw	r24, r26
    43ee:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e8       	ldi	r20, 0x80	; 128
    43fc:	57 e4       	ldi	r21, 0x47	; 71
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	bc 01       	movw	r22, r24
    440c:	cd 01       	movw	r24, r26
    440e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    4412:	dc 01       	movw	r26, r24
    4414:	cb 01       	movw	r24, r22
    4416:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <X2>
    441a:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <X2+0x1>
    441e:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <X2+0x2>
    4422:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <X2+0x3>
	P = P + (X1 + X2 + 3791) / (pow(2, 4));
    4426:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <P>
    442a:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <P+0x1>
    442e:	a0 91 cd 00 	lds	r26, 0x00CD	; 0x8000cd <P+0x2>
    4432:	b0 91 ce 00 	lds	r27, 0x00CE	; 0x8000ce <P+0x3>
    4436:	bc 01       	movw	r22, r24
    4438:	cd 01       	movw	r24, r26
    443a:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    443e:	6b 01       	movw	r12, r22
    4440:	7c 01       	movw	r14, r24
    4442:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <X1>
    4446:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <X1+0x1>
    444a:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <X1+0x2>
    444e:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <X1+0x3>
    4452:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <X2>
    4456:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <X2+0x1>
    445a:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <X2+0x2>
    445e:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <X2+0x3>
    4462:	82 0f       	add	r24, r18
    4464:	93 1f       	adc	r25, r19
    4466:	a4 1f       	adc	r26, r20
    4468:	b5 1f       	adc	r27, r21
    446a:	81 53       	subi	r24, 0x31	; 49
    446c:	91 4f       	sbci	r25, 0xF1	; 241
    446e:	af 4f       	sbci	r26, 0xFF	; 255
    4470:	bf 4f       	sbci	r27, 0xFF	; 255
    4472:	bc 01       	movw	r22, r24
    4474:	cd 01       	movw	r24, r26
    4476:	0e 94 21 28 	call	0x5042	; 0x5042 <__floatsisf>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	40 e8       	ldi	r20, 0x80	; 128
    4484:	51 e4       	ldi	r21, 0x41	; 65
    4486:	bc 01       	movw	r22, r24
    4488:	cd 01       	movw	r24, r26
    448a:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	9c 01       	movw	r18, r24
    4494:	ad 01       	movw	r20, r26
    4496:	c7 01       	movw	r24, r14
    4498:	b6 01       	movw	r22, r12
    449a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__addsf3>
    449e:	dc 01       	movw	r26, r24
    44a0:	cb 01       	movw	r24, r22
    44a2:	bc 01       	movw	r22, r24
    44a4:	cd 01       	movw	r24, r26
    44a6:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <__fixsfsi>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <P>
    44b2:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <P+0x1>
    44b6:	a0 93 cd 00 	sts	0x00CD, r26	; 0x8000cd <P+0x2>
    44ba:	b0 93 ce 00 	sts	0x00CE, r27	; 0x8000ce <P+0x3>

	P = P / 100;
    44be:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <P>
    44c2:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <P+0x1>
    44c6:	a0 91 cd 00 	lds	r26, 0x00CD	; 0x8000cd <P+0x2>
    44ca:	b0 91 ce 00 	lds	r27, 0x00CE	; 0x8000ce <P+0x3>
    44ce:	24 e6       	ldi	r18, 0x64	; 100
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	40 e0       	ldi	r20, 0x00	; 0
    44d4:	50 e0       	ldi	r21, 0x00	; 0
    44d6:	bc 01       	movw	r22, r24
    44d8:	cd 01       	movw	r24, r26
    44da:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <__divmodsi4>
    44de:	da 01       	movw	r26, r20
    44e0:	c9 01       	movw	r24, r18
    44e2:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <P>
    44e6:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <P+0x1>
    44ea:	a0 93 cd 00 	sts	0x00CD, r26	; 0x8000cd <P+0x2>
    44ee:	b0 93 ce 00 	sts	0x00CE, r27	; 0x8000ce <P+0x3>

	return P;
    44f2:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <P>
    44f6:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <P+0x1>
    44fa:	a0 91 cd 00 	lds	r26, 0x00CD	; 0x8000cd <P+0x2>
    44fe:	b0 91 ce 00 	lds	r27, 0x00CE	; 0x8000ce <P+0x3>
}
    4502:	bc 01       	movw	r22, r24
    4504:	cd 01       	movw	r24, r26
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	1f 91       	pop	r17
    450c:	0f 91       	pop	r16
    450e:	ff 90       	pop	r15
    4510:	ef 90       	pop	r14
    4512:	df 90       	pop	r13
    4514:	cf 90       	pop	r12
    4516:	08 95       	ret

00004518 <BMP180_Start>:

void BMP180_Start(void) {
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
	BMP180_ReadCalb();
    4520:	0e 94 77 13 	call	0x26ee	; 0x26ee <BMP180_ReadCalb>
}
    4524:	00 00       	nop
    4526:	df 91       	pop	r29
    4528:	cf 91       	pop	r28
    452a:	08 95       	ret

0000452c <delay>:

void delay(void){
    452c:	cf 93       	push	r28
    452e:	df 93       	push	r29
    4530:	cd b7       	in	r28, 0x3d	; 61
    4532:	de b7       	in	r29, 0x3e	; 62
    4534:	a0 97       	sbiw	r28, 0x20	; 32
    4536:	0f b6       	in	r0, 0x3f	; 63
    4538:	f8 94       	cli
    453a:	de bf       	out	0x3e, r29	; 62
    453c:	0f be       	out	0x3f, r0	; 63
    453e:	cd bf       	out	0x3d, r28	; 61
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	a0 e2       	ldi	r26, 0x20	; 32
    4546:	b1 e4       	ldi	r27, 0x41	; 65
    4548:	89 83       	std	Y+1, r24	; 0x01
    454a:	9a 83       	std	Y+2, r25	; 0x02
    454c:	ab 83       	std	Y+3, r26	; 0x03
    454e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    4550:	2b ea       	ldi	r18, 0xAB	; 171
    4552:	3a ea       	ldi	r19, 0xAA	; 170
    4554:	4a ea       	ldi	r20, 0xAA	; 170
    4556:	50 e4       	ldi	r21, 0x40	; 64
    4558:	69 81       	ldd	r22, Y+1	; 0x01
    455a:	7a 81       	ldd	r23, Y+2	; 0x02
    455c:	8b 81       	ldd	r24, Y+3	; 0x03
    455e:	9c 81       	ldd	r25, Y+4	; 0x04
    4560:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	8d 83       	std	Y+5, r24	; 0x05
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	af 83       	std	Y+7, r26	; 0x07
    456e:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e8       	ldi	r20, 0x80	; 128
    4576:	50 e4       	ldi	r21, 0x40	; 64
    4578:	69 81       	ldd	r22, Y+1	; 0x01
    457a:	7a 81       	ldd	r23, Y+2	; 0x02
    457c:	8b 81       	ldd	r24, Y+3	; 0x03
    457e:	9c 81       	ldd	r25, Y+4	; 0x04
    4580:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	89 87       	std	Y+9, r24	; 0x09
    458a:	9a 87       	std	Y+10, r25	; 0x0a
    458c:	ab 87       	std	Y+11, r26	; 0x0b
    458e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    4590:	20 e0       	ldi	r18, 0x00	; 0
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	40 e8       	ldi	r20, 0x80	; 128
    4596:	5f e3       	ldi	r21, 0x3F	; 63
    4598:	6d 81       	ldd	r22, Y+5	; 0x05
    459a:	7e 81       	ldd	r23, Y+6	; 0x06
    459c:	8f 81       	ldd	r24, Y+7	; 0x07
    459e:	98 85       	ldd	r25, Y+8	; 0x08
    45a0:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    45a4:	88 23       	and	r24, r24
    45a6:	1c f4       	brge	.+6      	; 0x45ae <delay+0x82>
		__ticks = 1;
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	8d 87       	std	Y+13, r24	; 0x0d
    45ac:	b2 c0       	rjmp	.+356    	; 0x4712 <delay+0x1e6>
	else if (__tmp2 > 65535)
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	3f ef       	ldi	r19, 0xFF	; 255
    45b2:	4f e7       	ldi	r20, 0x7F	; 127
    45b4:	57 e4       	ldi	r21, 0x47	; 71
    45b6:	69 85       	ldd	r22, Y+9	; 0x09
    45b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    45ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    45bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    45be:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    45c2:	18 16       	cp	r1, r24
    45c4:	0c f0       	brlt	.+2      	; 0x45c8 <delay+0x9c>
    45c6:	7b c0       	rjmp	.+246    	; 0x46be <delay+0x192>
	{
		_delay_ms(__us / 1000.0);
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	4a e7       	ldi	r20, 0x7A	; 122
    45ce:	54 e4       	ldi	r21, 0x44	; 68
    45d0:	69 81       	ldd	r22, Y+1	; 0x01
    45d2:	7a 81       	ldd	r23, Y+2	; 0x02
    45d4:	8b 81       	ldd	r24, Y+3	; 0x03
    45d6:	9c 81       	ldd	r25, Y+4	; 0x04
    45d8:	0e 94 77 27 	call	0x4eee	; 0x4eee <__divsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	8e 87       	std	Y+14, r24	; 0x0e
    45e2:	9f 87       	std	Y+15, r25	; 0x0f
    45e4:	a8 8b       	std	Y+16, r26	; 0x10
    45e6:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	4a e7       	ldi	r20, 0x7A	; 122
    45ee:	55 e4       	ldi	r21, 0x45	; 69
    45f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    45f2:	7f 85       	ldd	r23, Y+15	; 0x0f
    45f4:	88 89       	ldd	r24, Y+16	; 0x10
    45f6:	99 89       	ldd	r25, Y+17	; 0x11
    45f8:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	8a 8b       	std	Y+18, r24	; 0x12
    4602:	9b 8b       	std	Y+19, r25	; 0x13
    4604:	ac 8b       	std	Y+20, r26	; 0x14
    4606:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e8       	ldi	r20, 0x80	; 128
    460e:	5f e3       	ldi	r21, 0x3F	; 63
    4610:	6a 89       	ldd	r22, Y+18	; 0x12
    4612:	7b 89       	ldd	r23, Y+19	; 0x13
    4614:	8c 89       	ldd	r24, Y+20	; 0x14
    4616:	9d 89       	ldd	r25, Y+21	; 0x15
    4618:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    461c:	88 23       	and	r24, r24
    461e:	2c f4       	brge	.+10     	; 0x462a <delay+0xfe>
		__ticks = 1;
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	9f 8b       	std	Y+23, r25	; 0x17
    4626:	8e 8b       	std	Y+22, r24	; 0x16
    4628:	3f c0       	rjmp	.+126    	; 0x46a8 <delay+0x17c>
	else if (__tmp > 65535)
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	3f ef       	ldi	r19, 0xFF	; 255
    462e:	4f e7       	ldi	r20, 0x7F	; 127
    4630:	57 e4       	ldi	r21, 0x47	; 71
    4632:	6a 89       	ldd	r22, Y+18	; 0x12
    4634:	7b 89       	ldd	r23, Y+19	; 0x13
    4636:	8c 89       	ldd	r24, Y+20	; 0x14
    4638:	9d 89       	ldd	r25, Y+21	; 0x15
    463a:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    463e:	18 16       	cp	r1, r24
    4640:	4c f5       	brge	.+82     	; 0x4694 <delay+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	40 e2       	ldi	r20, 0x20	; 32
    4648:	51 e4       	ldi	r21, 0x41	; 65
    464a:	6e 85       	ldd	r22, Y+14	; 0x0e
    464c:	7f 85       	ldd	r23, Y+15	; 0x0f
    464e:	88 89       	ldd	r24, Y+16	; 0x10
    4650:	99 89       	ldd	r25, Y+17	; 0x11
    4652:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	9f 8b       	std	Y+23, r25	; 0x17
    4668:	8e 8b       	std	Y+22, r24	; 0x16
    466a:	0f c0       	rjmp	.+30     	; 0x468a <delay+0x15e>
    466c:	80 e9       	ldi	r24, 0x90	; 144
    466e:	91 e0       	ldi	r25, 0x01	; 1
    4670:	99 8f       	std	Y+25, r25	; 0x19
    4672:	88 8f       	std	Y+24, r24	; 0x18
    4674:	88 8d       	ldd	r24, Y+24	; 0x18
    4676:	99 8d       	ldd	r25, Y+25	; 0x19
    4678:	01 97       	sbiw	r24, 0x01	; 1
    467a:	f1 f7       	brne	.-4      	; 0x4678 <delay+0x14c>
    467c:	99 8f       	std	Y+25, r25	; 0x19
    467e:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4680:	8e 89       	ldd	r24, Y+22	; 0x16
    4682:	9f 89       	ldd	r25, Y+23	; 0x17
    4684:	01 97       	sbiw	r24, 0x01	; 1
    4686:	9f 8b       	std	Y+23, r25	; 0x17
    4688:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    468a:	8e 89       	ldd	r24, Y+22	; 0x16
    468c:	9f 89       	ldd	r25, Y+23	; 0x17
    468e:	89 2b       	or	r24, r25
    4690:	69 f7       	brne	.-38     	; 0x466c <delay+0x140>
    4692:	3f c0       	rjmp	.+126    	; 0x4712 <delay+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4694:	6a 89       	ldd	r22, Y+18	; 0x12
    4696:	7b 89       	ldd	r23, Y+19	; 0x13
    4698:	8c 89       	ldd	r24, Y+20	; 0x14
    469a:	9d 89       	ldd	r25, Y+21	; 0x15
    469c:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	9f 8b       	std	Y+23, r25	; 0x17
    46a6:	8e 8b       	std	Y+22, r24	; 0x16
    46a8:	8e 89       	ldd	r24, Y+22	; 0x16
    46aa:	9f 89       	ldd	r25, Y+23	; 0x17
    46ac:	9b 8f       	std	Y+27, r25	; 0x1b
    46ae:	8a 8f       	std	Y+26, r24	; 0x1a
    46b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    46b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	f1 f7       	brne	.-4      	; 0x46b4 <delay+0x188>
    46b8:	9b 8f       	std	Y+27, r25	; 0x1b
    46ba:	8a 8f       	std	Y+26, r24	; 0x1a
    46bc:	2a c0       	rjmp	.+84     	; 0x4712 <delay+0x1e6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	4f e7       	ldi	r20, 0x7F	; 127
    46c4:	53 e4       	ldi	r21, 0x43	; 67
    46c6:	6d 81       	ldd	r22, Y+5	; 0x05
    46c8:	7e 81       	ldd	r23, Y+6	; 0x06
    46ca:	8f 81       	ldd	r24, Y+7	; 0x07
    46cc:	98 85       	ldd	r25, Y+8	; 0x08
    46ce:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    46d2:	18 16       	cp	r1, r24
    46d4:	ac f4       	brge	.+42     	; 0x4700 <delay+0x1d4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    46d6:	69 85       	ldd	r22, Y+9	; 0x09
    46d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    46da:	8b 85       	ldd	r24, Y+11	; 0x0b
    46dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    46de:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	9d 8f       	std	Y+29, r25	; 0x1d
    46e8:	8c 8f       	std	Y+28, r24	; 0x1c
    46ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    46ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    46ee:	9f 8f       	std	Y+31, r25	; 0x1f
    46f0:	8e 8f       	std	Y+30, r24	; 0x1e
    46f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46f4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	f1 f7       	brne	.-4      	; 0x46f6 <delay+0x1ca>
    46fa:	9f 8f       	std	Y+31, r25	; 0x1f
    46fc:	8e 8f       	std	Y+30, r24	; 0x1e
	_delay_us(10);
}
    46fe:	0f c0       	rjmp	.+30     	; 0x471e <delay+0x1f2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4700:	6d 81       	ldd	r22, Y+5	; 0x05
    4702:	7e 81       	ldd	r23, Y+6	; 0x06
    4704:	8f 81       	ldd	r24, Y+7	; 0x07
    4706:	98 85       	ldd	r25, Y+8	; 0x08
    4708:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    470c:	dc 01       	movw	r26, r24
    470e:	cb 01       	movw	r24, r22
    4710:	8d 87       	std	Y+13, r24	; 0x0d
    4712:	8d 85       	ldd	r24, Y+13	; 0x0d
    4714:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4716:	88 a1       	ldd	r24, Y+32	; 0x20
    4718:	8a 95       	dec	r24
    471a:	f1 f7       	brne	.-4      	; 0x4718 <delay+0x1ec>
    471c:	88 a3       	std	Y+32, r24	; 0x20
    471e:	00 00       	nop
    4720:	a0 96       	adiw	r28, 0x20	; 32
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	df 91       	pop	r29
    472e:	cf 91       	pop	r28
    4730:	08 95       	ret

00004732 <LCD_displayTemp>:
#define LED_PIN			PIN3_ID
#define BUZZER_PIN		PIN4_ID


void LCD_displayTemp(uint32 temperature)
{
    4732:	cf 93       	push	r28
    4734:	df 93       	push	r29
    4736:	00 d0       	rcall	.+0      	; 0x4738 <LCD_displayTemp+0x6>
    4738:	00 d0       	rcall	.+0      	; 0x473a <LCD_displayTemp+0x8>
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    473e:	69 83       	std	Y+1, r22	; 0x01
    4740:	7a 83       	std	Y+2, r23	; 0x02
    4742:	8b 83       	std	Y+3, r24	; 0x03
    4744:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(1,7);
    4746:	67 e0       	ldi	r22, 0x07	; 7
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_moveCursor>
	if ((1000 <= temperature) || (0 > temperature))
    474e:	89 81       	ldd	r24, Y+1	; 0x01
    4750:	9a 81       	ldd	r25, Y+2	; 0x02
    4752:	ab 81       	ldd	r26, Y+3	; 0x03
    4754:	bc 81       	ldd	r27, Y+4	; 0x04
    4756:	88 3e       	cpi	r24, 0xE8	; 232
    4758:	93 40       	sbci	r25, 0x03	; 3
    475a:	a1 05       	cpc	r26, r1
    475c:	b1 05       	cpc	r27, r1
    475e:	28 f0       	brcs	.+10     	; 0x476a <LCD_displayTemp+0x38>
	{
		LCD_displayString("ERR");
    4760:	89 e6       	ldi	r24, 0x69	; 105
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	else if((0 <= temperature) && (10 > temperature))
	{
		LCD_intgerToString(temperature);
		LCD_displayString("  ");
	}
}
    4768:	38 c0       	rjmp	.+112    	; 0x47da <LCD_displayTemp+0xa8>
	LCD_moveCursor(1,7);
	if ((1000 <= temperature) || (0 > temperature))
	{
		LCD_displayString("ERR");
	}
	else if(100 <= temperature)
    476a:	89 81       	ldd	r24, Y+1	; 0x01
    476c:	9a 81       	ldd	r25, Y+2	; 0x02
    476e:	ab 81       	ldd	r26, Y+3	; 0x03
    4770:	bc 81       	ldd	r27, Y+4	; 0x04
    4772:	84 36       	cpi	r24, 0x64	; 100
    4774:	91 05       	cpc	r25, r1
    4776:	a1 05       	cpc	r26, r1
    4778:	b1 05       	cpc	r27, r1
    477a:	28 f0       	brcs	.+10     	; 0x4786 <LCD_displayTemp+0x54>
	{
		LCD_intgerToString(temperature);
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	9a 81       	ldd	r25, Y+2	; 0x02
    4780:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
	else if((0 <= temperature) && (10 > temperature))
	{
		LCD_intgerToString(temperature);
		LCD_displayString("  ");
	}
}
    4784:	2a c0       	rjmp	.+84     	; 0x47da <LCD_displayTemp+0xa8>
	}
	else if(100 <= temperature)
	{
		LCD_intgerToString(temperature);
	}
	else if((10 <= temperature) && (100 > temperature))
    4786:	89 81       	ldd	r24, Y+1	; 0x01
    4788:	9a 81       	ldd	r25, Y+2	; 0x02
    478a:	ab 81       	ldd	r26, Y+3	; 0x03
    478c:	bc 81       	ldd	r27, Y+4	; 0x04
    478e:	0a 97       	sbiw	r24, 0x0a	; 10
    4790:	a1 05       	cpc	r26, r1
    4792:	b1 05       	cpc	r27, r1
    4794:	90 f0       	brcs	.+36     	; 0x47ba <LCD_displayTemp+0x88>
    4796:	89 81       	ldd	r24, Y+1	; 0x01
    4798:	9a 81       	ldd	r25, Y+2	; 0x02
    479a:	ab 81       	ldd	r26, Y+3	; 0x03
    479c:	bc 81       	ldd	r27, Y+4	; 0x04
    479e:	84 36       	cpi	r24, 0x64	; 100
    47a0:	91 05       	cpc	r25, r1
    47a2:	a1 05       	cpc	r26, r1
    47a4:	b1 05       	cpc	r27, r1
    47a6:	48 f4       	brcc	.+18     	; 0x47ba <LCD_displayTemp+0x88>
	{
		LCD_intgerToString(temperature);
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
    47aa:	9a 81       	ldd	r25, Y+2	; 0x02
    47ac:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayString(" ");
    47b0:	8d e6       	ldi	r24, 0x6D	; 109
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	else if((0 <= temperature) && (10 > temperature))
	{
		LCD_intgerToString(temperature);
		LCD_displayString("  ");
	}
}
    47b8:	10 c0       	rjmp	.+32     	; 0x47da <LCD_displayTemp+0xa8>
	else if((10 <= temperature) && (100 > temperature))
	{
		LCD_intgerToString(temperature);
		LCD_displayString(" ");
	}
	else if((0 <= temperature) && (10 > temperature))
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	9a 81       	ldd	r25, Y+2	; 0x02
    47be:	ab 81       	ldd	r26, Y+3	; 0x03
    47c0:	bc 81       	ldd	r27, Y+4	; 0x04
    47c2:	0a 97       	sbiw	r24, 0x0a	; 10
    47c4:	a1 05       	cpc	r26, r1
    47c6:	b1 05       	cpc	r27, r1
    47c8:	40 f4       	brcc	.+16     	; 0x47da <LCD_displayTemp+0xa8>
	{
		LCD_intgerToString(temperature);
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	9a 81       	ldd	r25, Y+2	; 0x02
    47ce:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayString("  ");
    47d2:	8f e6       	ldi	r24, 0x6F	; 111
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	}
}
    47da:	00 00       	nop
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	08 95       	ret

000047ea <LCD_displayPress>:

void LCD_displayPress(uint32 pressure)
{
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	00 d0       	rcall	.+0      	; 0x47f0 <LCD_displayPress+0x6>
    47f0:	00 d0       	rcall	.+0      	; 0x47f2 <LCD_displayPress+0x8>
    47f2:	cd b7       	in	r28, 0x3d	; 61
    47f4:	de b7       	in	r29, 0x3e	; 62
    47f6:	69 83       	std	Y+1, r22	; 0x01
    47f8:	7a 83       	std	Y+2, r23	; 0x02
    47fa:	8b 83       	std	Y+3, r24	; 0x03
    47fc:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(0,8);
    47fe:	68 e0       	ldi	r22, 0x08	; 8
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_moveCursor>
	if ((10000 <= pressure) || (0 > pressure))
    4806:	89 81       	ldd	r24, Y+1	; 0x01
    4808:	9a 81       	ldd	r25, Y+2	; 0x02
    480a:	ab 81       	ldd	r26, Y+3	; 0x03
    480c:	bc 81       	ldd	r27, Y+4	; 0x04
    480e:	80 31       	cpi	r24, 0x10	; 16
    4810:	97 42       	sbci	r25, 0x27	; 39
    4812:	a1 05       	cpc	r26, r1
    4814:	b1 05       	cpc	r27, r1
    4816:	48 f0       	brcs	.+18     	; 0x482a <LCD_displayPress+0x40>
	{
		LCD_displayString("ERR");
    4818:	89 e6       	ldi	r24, 0x69	; 105
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
		LCD_displayString(" ");
    4820:	8d e6       	ldi	r24, 0x6D	; 109
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	else if((0 <= pressure) && (10 > pressure))
	{
		LCD_intgerToString(pressure);
		LCD_displayString("   ");
	}
}
    4828:	5d c0       	rjmp	.+186    	; 0x48e4 <LCD_displayPress+0xfa>
	if ((10000 <= pressure) || (0 > pressure))
	{
		LCD_displayString("ERR");
		LCD_displayString(" ");
	}
	else if((1000 <= pressure) && (10000 > pressure))
    482a:	89 81       	ldd	r24, Y+1	; 0x01
    482c:	9a 81       	ldd	r25, Y+2	; 0x02
    482e:	ab 81       	ldd	r26, Y+3	; 0x03
    4830:	bc 81       	ldd	r27, Y+4	; 0x04
    4832:	88 3e       	cpi	r24, 0xE8	; 232
    4834:	93 40       	sbci	r25, 0x03	; 3
    4836:	a1 05       	cpc	r26, r1
    4838:	b1 05       	cpc	r27, r1
    483a:	70 f0       	brcs	.+28     	; 0x4858 <LCD_displayPress+0x6e>
    483c:	89 81       	ldd	r24, Y+1	; 0x01
    483e:	9a 81       	ldd	r25, Y+2	; 0x02
    4840:	ab 81       	ldd	r26, Y+3	; 0x03
    4842:	bc 81       	ldd	r27, Y+4	; 0x04
    4844:	80 31       	cpi	r24, 0x10	; 16
    4846:	97 42       	sbci	r25, 0x27	; 39
    4848:	a1 05       	cpc	r26, r1
    484a:	b1 05       	cpc	r27, r1
    484c:	28 f4       	brcc	.+10     	; 0x4858 <LCD_displayPress+0x6e>
	{
		LCD_intgerToString(pressure);
    484e:	89 81       	ldd	r24, Y+1	; 0x01
    4850:	9a 81       	ldd	r25, Y+2	; 0x02
    4852:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
    4856:	46 c0       	rjmp	.+140    	; 0x48e4 <LCD_displayPress+0xfa>
	}
	else if((100 <= pressure) && (1000 > pressure))
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	9a 81       	ldd	r25, Y+2	; 0x02
    485c:	ab 81       	ldd	r26, Y+3	; 0x03
    485e:	bc 81       	ldd	r27, Y+4	; 0x04
    4860:	84 36       	cpi	r24, 0x64	; 100
    4862:	91 05       	cpc	r25, r1
    4864:	a1 05       	cpc	r26, r1
    4866:	b1 05       	cpc	r27, r1
    4868:	90 f0       	brcs	.+36     	; 0x488e <LCD_displayPress+0xa4>
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	9a 81       	ldd	r25, Y+2	; 0x02
    486e:	ab 81       	ldd	r26, Y+3	; 0x03
    4870:	bc 81       	ldd	r27, Y+4	; 0x04
    4872:	88 3e       	cpi	r24, 0xE8	; 232
    4874:	93 40       	sbci	r25, 0x03	; 3
    4876:	a1 05       	cpc	r26, r1
    4878:	b1 05       	cpc	r27, r1
    487a:	48 f4       	brcc	.+18     	; 0x488e <LCD_displayPress+0xa4>
	{
		LCD_intgerToString(pressure);
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	9a 81       	ldd	r25, Y+2	; 0x02
    4880:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayString(" ");
    4884:	8d e6       	ldi	r24, 0x6D	; 109
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
    488c:	2b c0       	rjmp	.+86     	; 0x48e4 <LCD_displayPress+0xfa>
	}
	else if((10 <= pressure) && (100 > pressure))
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	9a 81       	ldd	r25, Y+2	; 0x02
    4892:	ab 81       	ldd	r26, Y+3	; 0x03
    4894:	bc 81       	ldd	r27, Y+4	; 0x04
    4896:	0a 97       	sbiw	r24, 0x0a	; 10
    4898:	a1 05       	cpc	r26, r1
    489a:	b1 05       	cpc	r27, r1
    489c:	90 f0       	brcs	.+36     	; 0x48c2 <LCD_displayPress+0xd8>
    489e:	89 81       	ldd	r24, Y+1	; 0x01
    48a0:	9a 81       	ldd	r25, Y+2	; 0x02
    48a2:	ab 81       	ldd	r26, Y+3	; 0x03
    48a4:	bc 81       	ldd	r27, Y+4	; 0x04
    48a6:	84 36       	cpi	r24, 0x64	; 100
    48a8:	91 05       	cpc	r25, r1
    48aa:	a1 05       	cpc	r26, r1
    48ac:	b1 05       	cpc	r27, r1
    48ae:	48 f4       	brcc	.+18     	; 0x48c2 <LCD_displayPress+0xd8>
	{
		LCD_intgerToString(pressure);
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	9a 81       	ldd	r25, Y+2	; 0x02
    48b4:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayString("  ");
    48b8:	8f e6       	ldi	r24, 0x6F	; 111
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
    48c0:	11 c0       	rjmp	.+34     	; 0x48e4 <LCD_displayPress+0xfa>
	}
	else if((0 <= pressure) && (10 > pressure))
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	9a 81       	ldd	r25, Y+2	; 0x02
    48c6:	ab 81       	ldd	r26, Y+3	; 0x03
    48c8:	bc 81       	ldd	r27, Y+4	; 0x04
    48ca:	0a 97       	sbiw	r24, 0x0a	; 10
    48cc:	a1 05       	cpc	r26, r1
    48ce:	b1 05       	cpc	r27, r1
    48d0:	48 f4       	brcc	.+18     	; 0x48e4 <LCD_displayPress+0xfa>
	{
		LCD_intgerToString(pressure);
    48d2:	89 81       	ldd	r24, Y+1	; 0x01
    48d4:	9a 81       	ldd	r25, Y+2	; 0x02
    48d6:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayString("   ");
    48da:	82 e7       	ldi	r24, 0x72	; 114
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_displayString>
	}
}
    48e2:	00 c0       	rjmp	.+0      	; 0x48e4 <LCD_displayPress+0xfa>
    48e4:	00 00       	nop
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	08 95       	ret

000048f4 <LED_Buzzer_init>:

void LED_Buzzer_init(void)
{
    48f4:	cf 93       	push	r28
    48f6:	df 93       	push	r29
    48f8:	cd b7       	in	r28, 0x3d	; 61
    48fa:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(LED_PORT,LED_PIN,PIN_OUTPUT);
    48fc:	41 e0       	ldi	r20, 0x01	; 1
    48fe:	63 e0       	ldi	r22, 0x03	; 3
    4900:	83 e0       	ldi	r24, 0x03	; 3
    4902:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    4906:	41 e0       	ldi	r20, 0x01	; 1
    4908:	64 e0       	ldi	r22, 0x04	; 4
    490a:	83 e0       	ldi	r24, 0x03	; 3
    490c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTA_ID,PIN1_ID,PIN_OUTPUT);
    4910:	41 e0       	ldi	r20, 0x01	; 1
    4912:	61 e0       	ldi	r22, 0x01	; 1
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_LOW);
    491a:	40 e0       	ldi	r20, 0x00	; 0
    491c:	63 e0       	ldi	r22, 0x03	; 3
    491e:	83 e0       	ldi	r24, 0x03	; 3
    4920:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    4924:	40 e0       	ldi	r20, 0x00	; 0
    4926:	64 e0       	ldi	r22, 0x04	; 4
    4928:	83 e0       	ldi	r24, 0x03	; 3
    492a:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
    492e:	40 e0       	ldi	r20, 0x00	; 0
    4930:	61 e0       	ldi	r22, 0x01	; 1
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
}
    4938:	00 00       	nop
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	08 95       	ret

00004940 <EDS_ActionValid>:

void EDS_ActionValid(void)
{
    4940:	cf 93       	push	r28
    4942:	df 93       	push	r29
    4944:	cd b7       	in	r28, 0x3d	; 61
    4946:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_LOW);
    4948:	40 e0       	ldi	r20, 0x00	; 0
    494a:	63 e0       	ldi	r22, 0x03	; 3
    494c:	83 e0       	ldi	r24, 0x03	; 3
    494e:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	64 e0       	ldi	r22, 0x04	; 4
    4956:	83 e0       	ldi	r24, 0x03	; 3
    4958:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
}
    495c:	00 00       	nop
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	08 95       	ret

00004964 <EDS_ActionInvalid>:

void EDS_ActionInvalid(void)
{
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	cd b7       	in	r28, 0x3d	; 61
    496a:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_HIGH);
    496c:	41 e0       	ldi	r20, 0x01	; 1
    496e:	63 e0       	ldi	r22, 0x03	; 3
    4970:	83 e0       	ldi	r24, 0x03	; 3
    4972:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    4976:	41 e0       	ldi	r20, 0x01	; 1
    4978:	64 e0       	ldi	r22, 0x04	; 4
    497a:	83 e0       	ldi	r24, 0x03	; 3
    497c:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
}
    4980:	00 00       	nop
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	08 95       	ret

00004988 <EDS_Detection>:

void EDS_Detection(uint32 temperature, uint32 pressure)
{
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	cd b7       	in	r28, 0x3d	; 61
    498e:	de b7       	in	r29, 0x3e	; 62
    4990:	28 97       	sbiw	r28, 0x08	; 8
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	f8 94       	cli
    4996:	de bf       	out	0x3e, r29	; 62
    4998:	0f be       	out	0x3f, r0	; 63
    499a:	cd bf       	out	0x3d, r28	; 61
    499c:	69 83       	std	Y+1, r22	; 0x01
    499e:	7a 83       	std	Y+2, r23	; 0x02
    49a0:	8b 83       	std	Y+3, r24	; 0x03
    49a2:	9c 83       	std	Y+4, r25	; 0x04
    49a4:	2d 83       	std	Y+5, r18	; 0x05
    49a6:	3e 83       	std	Y+6, r19	; 0x06
    49a8:	4f 83       	std	Y+7, r20	; 0x07
    49aa:	58 87       	std	Y+8, r21	; 0x08
	if ((temperature < TEMP_LOW) || (temperature > TEMP_HIGH) || (pressure < PRESS_LOW) || (pressure > PRESS_HIGH))
    49ac:	89 81       	ldd	r24, Y+1	; 0x01
    49ae:	9a 81       	ldd	r25, Y+2	; 0x02
    49b0:	ab 81       	ldd	r26, Y+3	; 0x03
    49b2:	bc 81       	ldd	r27, Y+4	; 0x04
    49b4:	44 97       	sbiw	r24, 0x14	; 20
    49b6:	a1 05       	cpc	r26, r1
    49b8:	b1 05       	cpc	r27, r1
    49ba:	d0 f0       	brcs	.+52     	; 0x49f0 <EDS_Detection+0x68>
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	9a 81       	ldd	r25, Y+2	; 0x02
    49c0:	ab 81       	ldd	r26, Y+3	; 0x03
    49c2:	bc 81       	ldd	r27, Y+4	; 0x04
    49c4:	89 97       	sbiw	r24, 0x29	; 41
    49c6:	a1 05       	cpc	r26, r1
    49c8:	b1 05       	cpc	r27, r1
    49ca:	90 f4       	brcc	.+36     	; 0x49f0 <EDS_Detection+0x68>
    49cc:	8d 81       	ldd	r24, Y+5	; 0x05
    49ce:	9e 81       	ldd	r25, Y+6	; 0x06
    49d0:	af 81       	ldd	r26, Y+7	; 0x07
    49d2:	b8 85       	ldd	r27, Y+8	; 0x08
    49d4:	88 35       	cpi	r24, 0x58	; 88
    49d6:	92 40       	sbci	r25, 0x02	; 2
    49d8:	a1 05       	cpc	r26, r1
    49da:	b1 05       	cpc	r27, r1
    49dc:	48 f0       	brcs	.+18     	; 0x49f0 <EDS_Detection+0x68>
    49de:	8d 81       	ldd	r24, Y+5	; 0x05
    49e0:	9e 81       	ldd	r25, Y+6	; 0x06
    49e2:	af 81       	ldd	r26, Y+7	; 0x07
    49e4:	b8 85       	ldd	r27, Y+8	; 0x08
    49e6:	81 32       	cpi	r24, 0x21	; 33
    49e8:	93 40       	sbci	r25, 0x03	; 3
    49ea:	a1 05       	cpc	r26, r1
    49ec:	b1 05       	cpc	r27, r1
    49ee:	18 f0       	brcs	.+6      	; 0x49f6 <EDS_Detection+0x6e>
	{
		EDS_ActionInvalid();
    49f0:	0e 94 b2 24 	call	0x4964	; 0x4964 <EDS_ActionInvalid>
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <EDS_Detection+0x72>
	}
	else
	{
		EDS_ActionValid();
    49f6:	0e 94 a0 24 	call	0x4940	; 0x4940 <EDS_ActionValid>
	}
}
    49fa:	00 00       	nop
    49fc:	28 96       	adiw	r28, 0x08	; 8
    49fe:	0f b6       	in	r0, 0x3f	; 63
    4a00:	f8 94       	cli
    4a02:	de bf       	out	0x3e, r29	; 62
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	cd bf       	out	0x3d, r28	; 61
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	08 95       	ret

00004a0e <main>:

int main(void)
{
    4a0e:	cf 93       	push	r28
    4a10:	df 93       	push	r29
    4a12:	cd b7       	in	r28, 0x3d	; 61
    4a14:	de b7       	in	r29, 0x3e	; 62
    4a16:	66 97       	sbiw	r28, 0x16	; 22
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
	uint32 temperature = 0;
    4a22:	19 82       	std	Y+1, r1	; 0x01
    4a24:	1a 82       	std	Y+2, r1	; 0x02
    4a26:	1b 82       	std	Y+3, r1	; 0x03
    4a28:	1c 82       	std	Y+4, r1	; 0x04
	uint32 pressure = 0;
    4a2a:	1d 82       	std	Y+5, r1	; 0x05
    4a2c:	1e 82       	std	Y+6, r1	; 0x06
    4a2e:	1f 82       	std	Y+7, r1	; 0x07
    4a30:	18 86       	std	Y+8, r1	; 0x08

	LED_Buzzer_init();
    4a32:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <LED_Buzzer_init>
	LCD_init();
    4a36:	0e 94 8b 08 	call	0x1116	; 0x1116 <LCD_init>
	TWI_init();
    4a3a:	0e 94 49 00 	call	0x92	; 0x92 <TWI_init>
	BMP180_Start();
    4a3e:	0e 94 8c 22 	call	0x4518	; 0x4518 <BMP180_Start>

	LCD_displayStringRowColumn(0,0,"Press = ");
    4a42:	46 e7       	ldi	r20, 0x76	; 118
    4a44:	50 e0       	ldi	r21, 0x00	; 0
    4a46:	60 e0       	ldi	r22, 0x00	; 0
    4a48:	80 e0       	ldi	r24, 0x00	; 0
    4a4a:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,13,"hPa");
    4a4e:	4f e7       	ldi	r20, 0x7F	; 127
    4a50:	50 e0       	ldi	r21, 0x00	; 0
    4a52:	6d e0       	ldi	r22, 0x0D	; 13
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Temp = ");
    4a5a:	43 e8       	ldi	r20, 0x83	; 131
    4a5c:	50 e0       	ldi	r21, 0x00	; 0
    4a5e:	60 e0       	ldi	r22, 0x00	; 0
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,11,"C");
    4a66:	4b e8       	ldi	r20, 0x8B	; 139
    4a68:	50 e0       	ldi	r21, 0x00	; 0
    4a6a:	6b e0       	ldi	r22, 0x0B	; 11
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_displayStringRowColumn>

	while(1)
	{
		temperature = BMP180_calculateTemperature();
    4a72:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <BMP180_calculateTemperature>
    4a76:	dc 01       	movw	r26, r24
    4a78:	cb 01       	movw	r24, r22
    4a7a:	89 83       	std	Y+1, r24	; 0x01
    4a7c:	9a 83       	std	Y+2, r25	; 0x02
    4a7e:	ab 83       	std	Y+3, r26	; 0x03
    4a80:	bc 83       	std	Y+4, r27	; 0x04
		pressure = BMP180_calculatePressure();
    4a82:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <BMP180_calculatePressure>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	8d 83       	std	Y+5, r24	; 0x05
    4a8c:	9e 83       	std	Y+6, r25	; 0x06
    4a8e:	af 83       	std	Y+7, r26	; 0x07
    4a90:	b8 87       	std	Y+8, r27	; 0x08
		LCD_displayTemp(temperature);
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	9a 81       	ldd	r25, Y+2	; 0x02
    4a96:	ab 81       	ldd	r26, Y+3	; 0x03
    4a98:	bc 81       	ldd	r27, Y+4	; 0x04
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 99 23 	call	0x4732	; 0x4732 <LCD_displayTemp>
		LCD_displayPress(pressure);
    4aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa6:	af 81       	ldd	r26, Y+7	; 0x07
    4aa8:	b8 85       	ldd	r27, Y+8	; 0x08
    4aaa:	bc 01       	movw	r22, r24
    4aac:	cd 01       	movw	r24, r26
    4aae:	0e 94 f5 23 	call	0x47ea	; 0x47ea <LCD_displayPress>
		EDS_Detection(temperature,pressure);
    4ab2:	2d 81       	ldd	r18, Y+5	; 0x05
    4ab4:	3e 81       	ldd	r19, Y+6	; 0x06
    4ab6:	4f 81       	ldd	r20, Y+7	; 0x07
    4ab8:	58 85       	ldd	r21, Y+8	; 0x08
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	9a 81       	ldd	r25, Y+2	; 0x02
    4abe:	ab 81       	ldd	r26, Y+3	; 0x03
    4ac0:	bc 81       	ldd	r27, Y+4	; 0x04
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 c4 24 	call	0x4988	; 0x4988 <EDS_Detection>
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	aa e7       	ldi	r26, 0x7A	; 122
    4ad0:	b4 e4       	ldi	r27, 0x44	; 68
    4ad2:	89 87       	std	Y+9, r24	; 0x09
    4ad4:	9a 87       	std	Y+10, r25	; 0x0a
    4ad6:	ab 87       	std	Y+11, r26	; 0x0b
    4ad8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	4a e7       	ldi	r20, 0x7A	; 122
    4ae0:	55 e4       	ldi	r21, 0x45	; 69
    4ae2:	69 85       	ldd	r22, Y+9	; 0x09
    4ae4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4ae6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ae8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aea:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	8d 87       	std	Y+13, r24	; 0x0d
    4af4:	9e 87       	std	Y+14, r25	; 0x0e
    4af6:	af 87       	std	Y+15, r26	; 0x0f
    4af8:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	40 e8       	ldi	r20, 0x80	; 128
    4b00:	5f e3       	ldi	r21, 0x3F	; 63
    4b02:	6d 85       	ldd	r22, Y+13	; 0x0d
    4b04:	7e 85       	ldd	r23, Y+14	; 0x0e
    4b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b08:	98 89       	ldd	r25, Y+16	; 0x10
    4b0a:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <__cmpsf2>
    4b0e:	88 23       	and	r24, r24
    4b10:	2c f4       	brge	.+10     	; 0x4b1c <main+0x10e>
		__ticks = 1;
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	9a 8b       	std	Y+18, r25	; 0x12
    4b18:	89 8b       	std	Y+17, r24	; 0x11
    4b1a:	3f c0       	rjmp	.+126    	; 0x4b9a <main+0x18c>
	else if (__tmp > 65535)
    4b1c:	20 e0       	ldi	r18, 0x00	; 0
    4b1e:	3f ef       	ldi	r19, 0xFF	; 255
    4b20:	4f e7       	ldi	r20, 0x7F	; 127
    4b22:	57 e4       	ldi	r21, 0x47	; 71
    4b24:	6d 85       	ldd	r22, Y+13	; 0x0d
    4b26:	7e 85       	ldd	r23, Y+14	; 0x0e
    4b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b2a:	98 89       	ldd	r25, Y+16	; 0x10
    4b2c:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <__gesf2>
    4b30:	18 16       	cp	r1, r24
    4b32:	4c f5       	brge	.+82     	; 0x4b86 <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b34:	20 e0       	ldi	r18, 0x00	; 0
    4b36:	30 e0       	ldi	r19, 0x00	; 0
    4b38:	40 e2       	ldi	r20, 0x20	; 32
    4b3a:	51 e4       	ldi	r21, 0x41	; 65
    4b3c:	69 85       	ldd	r22, Y+9	; 0x09
    4b3e:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b40:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b42:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b44:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__mulsf3>
    4b48:	dc 01       	movw	r26, r24
    4b4a:	cb 01       	movw	r24, r22
    4b4c:	bc 01       	movw	r22, r24
    4b4e:	cd 01       	movw	r24, r26
    4b50:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	9a 8b       	std	Y+18, r25	; 0x12
    4b5a:	89 8b       	std	Y+17, r24	; 0x11
    4b5c:	0f c0       	rjmp	.+30     	; 0x4b7c <main+0x16e>
    4b5e:	80 e9       	ldi	r24, 0x90	; 144
    4b60:	91 e0       	ldi	r25, 0x01	; 1
    4b62:	9c 8b       	std	Y+20, r25	; 0x14
    4b64:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b66:	8b 89       	ldd	r24, Y+19	; 0x13
    4b68:	9c 89       	ldd	r25, Y+20	; 0x14
    4b6a:	01 97       	sbiw	r24, 0x01	; 1
    4b6c:	f1 f7       	brne	.-4      	; 0x4b6a <main+0x15c>
    4b6e:	9c 8b       	std	Y+20, r25	; 0x14
    4b70:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b72:	89 89       	ldd	r24, Y+17	; 0x11
    4b74:	9a 89       	ldd	r25, Y+18	; 0x12
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	9a 8b       	std	Y+18, r25	; 0x12
    4b7a:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7c:	89 89       	ldd	r24, Y+17	; 0x11
    4b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    4b80:	89 2b       	or	r24, r25
    4b82:	69 f7       	brne	.-38     	; 0x4b5e <main+0x150>
    4b84:	14 c0       	rjmp	.+40     	; 0x4bae <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b86:	6d 85       	ldd	r22, Y+13	; 0x0d
    4b88:	7e 85       	ldd	r23, Y+14	; 0x0e
    4b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b8c:	98 89       	ldd	r25, Y+16	; 0x10
    4b8e:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	9a 8b       	std	Y+18, r25	; 0x12
    4b98:	89 8b       	std	Y+17, r24	; 0x11
    4b9a:	89 89       	ldd	r24, Y+17	; 0x11
    4b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    4b9e:	9e 8b       	std	Y+22, r25	; 0x16
    4ba0:	8d 8b       	std	Y+21, r24	; 0x15
    4ba2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ba4:	9e 89       	ldd	r25, Y+22	; 0x16
    4ba6:	01 97       	sbiw	r24, 0x01	; 1
    4ba8:	f1 f7       	brne	.-4      	; 0x4ba6 <main+0x198>
    4baa:	9e 8b       	std	Y+22, r25	; 0x16
    4bac:	8d 8b       	std	Y+21, r24	; 0x15
	LCD_displayStringRowColumn(1,0,"Temp = ");
	LCD_displayStringRowColumn(1,11,"C");

	while(1)
	{
		temperature = BMP180_calculateTemperature();
    4bae:	61 cf       	rjmp	.-318    	; 0x4a72 <main+0x64>

00004bb0 <LCD_displayRPM>:
#define BUZZER_PORT		PORTC_ID
#define BUZZER_PIN		PIN6_ID


void LCD_displayRPM(uint32 rpm)
{
    4bb0:	cf 93       	push	r28
    4bb2:	df 93       	push	r29
    4bb4:	00 d0       	rcall	.+0      	; 0x4bb6 <LCD_displayRPM+0x6>
    4bb6:	00 d0       	rcall	.+0      	; 0x4bb8 <LCD_displayRPM+0x8>
    4bb8:	cd b7       	in	r28, 0x3d	; 61
    4bba:	de b7       	in	r29, 0x3e	; 62
    4bbc:	69 83       	std	Y+1, r22	; 0x01
    4bbe:	7a 83       	std	Y+2, r23	; 0x02
    4bc0:	8b 83       	std	Y+3, r24	; 0x03
    4bc2:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(0,7);
    4bc4:	67 e0       	ldi	r22, 0x07	; 7
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_moveCursor>
	if(100000 <= rpm)
    4bcc:	89 81       	ldd	r24, Y+1	; 0x01
    4bce:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd0:	ab 81       	ldd	r26, Y+3	; 0x03
    4bd2:	bc 81       	ldd	r27, Y+4	; 0x04
    4bd4:	80 3a       	cpi	r24, 0xA0	; 160
    4bd6:	96 48       	sbci	r25, 0x86	; 134
    4bd8:	a1 40       	sbci	r26, 0x01	; 1
    4bda:	b1 05       	cpc	r27, r1
    4bdc:	28 f0       	brcs	.+10     	; 0x4be8 <LCD_displayRPM+0x38>
	{
		LCD_intgerToString(rpm);
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	9a 81       	ldd	r25, Y+2	; 0x02
    4be2:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
	else if((0 <= rpm) && (10 > rpm))
	{
		LCD_intgerToString(rpm);
		LCD_displayCharacter('     ');
	}
}
    4be6:	77 c0       	rjmp	.+238    	; 0x4cd6 <LCD_displayRPM+0x126>
	LCD_moveCursor(0,7);
	if(100000 <= rpm)
	{
		LCD_intgerToString(rpm);
	}
	else if((10000 <= rpm) && (100000 > rpm))
    4be8:	89 81       	ldd	r24, Y+1	; 0x01
    4bea:	9a 81       	ldd	r25, Y+2	; 0x02
    4bec:	ab 81       	ldd	r26, Y+3	; 0x03
    4bee:	bc 81       	ldd	r27, Y+4	; 0x04
    4bf0:	80 31       	cpi	r24, 0x10	; 16
    4bf2:	97 42       	sbci	r25, 0x27	; 39
    4bf4:	a1 05       	cpc	r26, r1
    4bf6:	b1 05       	cpc	r27, r1
    4bf8:	88 f0       	brcs	.+34     	; 0x4c1c <LCD_displayRPM+0x6c>
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfe:	ab 81       	ldd	r26, Y+3	; 0x03
    4c00:	bc 81       	ldd	r27, Y+4	; 0x04
    4c02:	80 3a       	cpi	r24, 0xA0	; 160
    4c04:	96 48       	sbci	r25, 0x86	; 134
    4c06:	a1 40       	sbci	r26, 0x01	; 1
    4c08:	b1 05       	cpc	r27, r1
    4c0a:	40 f4       	brcc	.+16     	; 0x4c1c <LCD_displayRPM+0x6c>
	{
		LCD_intgerToString(rpm);
    4c0c:	89 81       	ldd	r24, Y+1	; 0x01
    4c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c10:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayCharacter(' ');
    4c14:	80 e2       	ldi	r24, 0x20	; 32
    4c16:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_displayCharacter>
    4c1a:	5d c0       	rjmp	.+186    	; 0x4cd6 <LCD_displayRPM+0x126>
	}
	else if((1000 <= rpm) && (10000 > rpm))
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c20:	ab 81       	ldd	r26, Y+3	; 0x03
    4c22:	bc 81       	ldd	r27, Y+4	; 0x04
    4c24:	88 3e       	cpi	r24, 0xE8	; 232
    4c26:	93 40       	sbci	r25, 0x03	; 3
    4c28:	a1 05       	cpc	r26, r1
    4c2a:	b1 05       	cpc	r27, r1
    4c2c:	88 f0       	brcs	.+34     	; 0x4c50 <LCD_displayRPM+0xa0>
    4c2e:	89 81       	ldd	r24, Y+1	; 0x01
    4c30:	9a 81       	ldd	r25, Y+2	; 0x02
    4c32:	ab 81       	ldd	r26, Y+3	; 0x03
    4c34:	bc 81       	ldd	r27, Y+4	; 0x04
    4c36:	80 31       	cpi	r24, 0x10	; 16
    4c38:	97 42       	sbci	r25, 0x27	; 39
    4c3a:	a1 05       	cpc	r26, r1
    4c3c:	b1 05       	cpc	r27, r1
    4c3e:	40 f4       	brcc	.+16     	; 0x4c50 <LCD_displayRPM+0xa0>
	{
		LCD_intgerToString(rpm);
    4c40:	89 81       	ldd	r24, Y+1	; 0x01
    4c42:	9a 81       	ldd	r25, Y+2	; 0x02
    4c44:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayCharacter('  ');
    4c48:	80 e2       	ldi	r24, 0x20	; 32
    4c4a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_displayCharacter>
    4c4e:	43 c0       	rjmp	.+134    	; 0x4cd6 <LCD_displayRPM+0x126>
	}
	else if((100 <= rpm) && (1000 > rpm))
    4c50:	89 81       	ldd	r24, Y+1	; 0x01
    4c52:	9a 81       	ldd	r25, Y+2	; 0x02
    4c54:	ab 81       	ldd	r26, Y+3	; 0x03
    4c56:	bc 81       	ldd	r27, Y+4	; 0x04
    4c58:	84 36       	cpi	r24, 0x64	; 100
    4c5a:	91 05       	cpc	r25, r1
    4c5c:	a1 05       	cpc	r26, r1
    4c5e:	b1 05       	cpc	r27, r1
    4c60:	88 f0       	brcs	.+34     	; 0x4c84 <LCD_displayRPM+0xd4>
    4c62:	89 81       	ldd	r24, Y+1	; 0x01
    4c64:	9a 81       	ldd	r25, Y+2	; 0x02
    4c66:	ab 81       	ldd	r26, Y+3	; 0x03
    4c68:	bc 81       	ldd	r27, Y+4	; 0x04
    4c6a:	88 3e       	cpi	r24, 0xE8	; 232
    4c6c:	93 40       	sbci	r25, 0x03	; 3
    4c6e:	a1 05       	cpc	r26, r1
    4c70:	b1 05       	cpc	r27, r1
    4c72:	40 f4       	brcc	.+16     	; 0x4c84 <LCD_displayRPM+0xd4>
	{
		LCD_intgerToString(rpm);
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	9a 81       	ldd	r25, Y+2	; 0x02
    4c78:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayCharacter('   ');
    4c7c:	80 e2       	ldi	r24, 0x20	; 32
    4c7e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_displayCharacter>
    4c82:	29 c0       	rjmp	.+82     	; 0x4cd6 <LCD_displayRPM+0x126>
	}
	else if((10 <= rpm) && (100 > rpm))
    4c84:	89 81       	ldd	r24, Y+1	; 0x01
    4c86:	9a 81       	ldd	r25, Y+2	; 0x02
    4c88:	ab 81       	ldd	r26, Y+3	; 0x03
    4c8a:	bc 81       	ldd	r27, Y+4	; 0x04
    4c8c:	0a 97       	sbiw	r24, 0x0a	; 10
    4c8e:	a1 05       	cpc	r26, r1
    4c90:	b1 05       	cpc	r27, r1
    4c92:	88 f0       	brcs	.+34     	; 0x4cb6 <LCD_displayRPM+0x106>
    4c94:	89 81       	ldd	r24, Y+1	; 0x01
    4c96:	9a 81       	ldd	r25, Y+2	; 0x02
    4c98:	ab 81       	ldd	r26, Y+3	; 0x03
    4c9a:	bc 81       	ldd	r27, Y+4	; 0x04
    4c9c:	84 36       	cpi	r24, 0x64	; 100
    4c9e:	91 05       	cpc	r25, r1
    4ca0:	a1 05       	cpc	r26, r1
    4ca2:	b1 05       	cpc	r27, r1
    4ca4:	40 f4       	brcc	.+16     	; 0x4cb6 <LCD_displayRPM+0x106>
	{
		LCD_intgerToString(rpm);
    4ca6:	89 81       	ldd	r24, Y+1	; 0x01
    4ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    4caa:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayCharacter('    ');
    4cae:	80 e2       	ldi	r24, 0x20	; 32
    4cb0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_displayCharacter>
    4cb4:	10 c0       	rjmp	.+32     	; 0x4cd6 <LCD_displayRPM+0x126>
	}
	else if((0 <= rpm) && (10 > rpm))
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cba:	ab 81       	ldd	r26, Y+3	; 0x03
    4cbc:	bc 81       	ldd	r27, Y+4	; 0x04
    4cbe:	0a 97       	sbiw	r24, 0x0a	; 10
    4cc0:	a1 05       	cpc	r26, r1
    4cc2:	b1 05       	cpc	r27, r1
    4cc4:	40 f4       	brcc	.+16     	; 0x4cd6 <LCD_displayRPM+0x126>
	{
		LCD_intgerToString(rpm);
    4cc6:	89 81       	ldd	r24, Y+1	; 0x01
    4cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cca:	0e 94 48 13 	call	0x2690	; 0x2690 <LCD_intgerToString>
		LCD_displayCharacter('     ');
    4cce:	80 e2       	ldi	r24, 0x20	; 32
    4cd0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <LCD_displayCharacter>
	}
}
    4cd4:	00 c0       	rjmp	.+0      	; 0x4cd6 <LCD_displayRPM+0x126>
    4cd6:	00 00       	nop
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	0f 90       	pop	r0
    4cde:	0f 90       	pop	r0
    4ce0:	df 91       	pop	r29
    4ce2:	cf 91       	pop	r28
    4ce4:	08 95       	ret

00004ce6 <Buzzer_init>:

void Buzzer_init(void)
{
    4ce6:	cf 93       	push	r28
    4ce8:	df 93       	push	r29
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    4cee:	41 e0       	ldi	r20, 0x01	; 1
    4cf0:	66 e0       	ldi	r22, 0x06	; 6
    4cf2:	82 e0       	ldi	r24, 0x02	; 2
    4cf4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <DIO_setupPinDirection>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    4cf8:	40 e0       	ldi	r20, 0x00	; 0
    4cfa:	66 e0       	ldi	r22, 0x06	; 6
    4cfc:	82 e0       	ldi	r24, 0x02	; 2
    4cfe:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
}
    4d02:	00 00       	nop
    4d04:	df 91       	pop	r29
    4d06:	cf 91       	pop	r28
    4d08:	08 95       	ret

00004d0a <Buzzer_On>:

void Buzzer_On(void)
{
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    4d12:	41 e0       	ldi	r20, 0x01	; 1
    4d14:	66 e0       	ldi	r22, 0x06	; 6
    4d16:	82 e0       	ldi	r24, 0x02	; 2
    4d18:	0e 94 d0 05 	call	0xba0	; 0xba0 <DIO_writePin>
}
    4d1c:	00 00       	nop
    4d1e:	df 91       	pop	r29
    4d20:	cf 91       	pop	r28
    4d22:	08 95       	ret

00004d24 <__mulsi3>:
    4d24:	db 01       	movw	r26, r22
    4d26:	8f 93       	push	r24
    4d28:	9f 93       	push	r25
    4d2a:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muluhisi3>
    4d2e:	bf 91       	pop	r27
    4d30:	af 91       	pop	r26
    4d32:	a2 9f       	mul	r26, r18
    4d34:	80 0d       	add	r24, r0
    4d36:	91 1d       	adc	r25, r1
    4d38:	a3 9f       	mul	r26, r19
    4d3a:	90 0d       	add	r25, r0
    4d3c:	b2 9f       	mul	r27, r18
    4d3e:	90 0d       	add	r25, r0
    4d40:	11 24       	eor	r1, r1
    4d42:	08 95       	ret

00004d44 <__udivmodsi4>:
    4d44:	a1 e2       	ldi	r26, 0x21	; 33
    4d46:	1a 2e       	mov	r1, r26
    4d48:	aa 1b       	sub	r26, r26
    4d4a:	bb 1b       	sub	r27, r27
    4d4c:	fd 01       	movw	r30, r26
    4d4e:	0d c0       	rjmp	.+26     	; 0x4d6a <__udivmodsi4_ep>

00004d50 <__udivmodsi4_loop>:
    4d50:	aa 1f       	adc	r26, r26
    4d52:	bb 1f       	adc	r27, r27
    4d54:	ee 1f       	adc	r30, r30
    4d56:	ff 1f       	adc	r31, r31
    4d58:	a2 17       	cp	r26, r18
    4d5a:	b3 07       	cpc	r27, r19
    4d5c:	e4 07       	cpc	r30, r20
    4d5e:	f5 07       	cpc	r31, r21
    4d60:	20 f0       	brcs	.+8      	; 0x4d6a <__udivmodsi4_ep>
    4d62:	a2 1b       	sub	r26, r18
    4d64:	b3 0b       	sbc	r27, r19
    4d66:	e4 0b       	sbc	r30, r20
    4d68:	f5 0b       	sbc	r31, r21

00004d6a <__udivmodsi4_ep>:
    4d6a:	66 1f       	adc	r22, r22
    4d6c:	77 1f       	adc	r23, r23
    4d6e:	88 1f       	adc	r24, r24
    4d70:	99 1f       	adc	r25, r25
    4d72:	1a 94       	dec	r1
    4d74:	69 f7       	brne	.-38     	; 0x4d50 <__udivmodsi4_loop>
    4d76:	60 95       	com	r22
    4d78:	70 95       	com	r23
    4d7a:	80 95       	com	r24
    4d7c:	90 95       	com	r25
    4d7e:	9b 01       	movw	r18, r22
    4d80:	ac 01       	movw	r20, r24
    4d82:	bd 01       	movw	r22, r26
    4d84:	cf 01       	movw	r24, r30
    4d86:	08 95       	ret

00004d88 <__divmodsi4>:
    4d88:	05 2e       	mov	r0, r21
    4d8a:	97 fb       	bst	r25, 7
    4d8c:	1e f4       	brtc	.+6      	; 0x4d94 <__divmodsi4+0xc>
    4d8e:	00 94       	com	r0
    4d90:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__negsi2>
    4d94:	57 fd       	sbrc	r21, 7
    4d96:	07 d0       	rcall	.+14     	; 0x4da6 <__divmodsi4_neg2>
    4d98:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodsi4>
    4d9c:	07 fc       	sbrc	r0, 7
    4d9e:	03 d0       	rcall	.+6      	; 0x4da6 <__divmodsi4_neg2>
    4da0:	4e f4       	brtc	.+18     	; 0x4db4 <__divmodsi4_exit>
    4da2:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__negsi2>

00004da6 <__divmodsi4_neg2>:
    4da6:	50 95       	com	r21
    4da8:	40 95       	com	r20
    4daa:	30 95       	com	r19
    4dac:	21 95       	neg	r18
    4dae:	3f 4f       	sbci	r19, 0xFF	; 255
    4db0:	4f 4f       	sbci	r20, 0xFF	; 255
    4db2:	5f 4f       	sbci	r21, 0xFF	; 255

00004db4 <__divmodsi4_exit>:
    4db4:	08 95       	ret

00004db6 <__negsi2>:
    4db6:	90 95       	com	r25
    4db8:	80 95       	com	r24
    4dba:	70 95       	com	r23
    4dbc:	61 95       	neg	r22
    4dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc4:	08 95       	ret

00004dc6 <__muluhisi3>:
    4dc6:	0e 94 f6 26 	call	0x4dec	; 0x4dec <__umulhisi3>
    4dca:	a5 9f       	mul	r26, r21
    4dcc:	90 0d       	add	r25, r0
    4dce:	b4 9f       	mul	r27, r20
    4dd0:	90 0d       	add	r25, r0
    4dd2:	a4 9f       	mul	r26, r20
    4dd4:	80 0d       	add	r24, r0
    4dd6:	91 1d       	adc	r25, r1
    4dd8:	11 24       	eor	r1, r1
    4dda:	08 95       	ret

00004ddc <__mulshisi3>:
    4ddc:	b7 ff       	sbrs	r27, 7
    4dde:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__muluhisi3>

00004de2 <__mulohisi3>:
    4de2:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <__muluhisi3>
    4de6:	82 1b       	sub	r24, r18
    4de8:	93 0b       	sbc	r25, r19
    4dea:	08 95       	ret

00004dec <__umulhisi3>:
    4dec:	a2 9f       	mul	r26, r18
    4dee:	b0 01       	movw	r22, r0
    4df0:	b3 9f       	mul	r27, r19
    4df2:	c0 01       	movw	r24, r0
    4df4:	a3 9f       	mul	r26, r19
    4df6:	70 0d       	add	r23, r0
    4df8:	81 1d       	adc	r24, r1
    4dfa:	11 24       	eor	r1, r1
    4dfc:	91 1d       	adc	r25, r1
    4dfe:	b2 9f       	mul	r27, r18
    4e00:	70 0d       	add	r23, r0
    4e02:	81 1d       	adc	r24, r1
    4e04:	11 24       	eor	r1, r1
    4e06:	91 1d       	adc	r25, r1
    4e08:	08 95       	ret

00004e0a <__subsf3>:
    4e0a:	50 58       	subi	r21, 0x80	; 128

00004e0c <__addsf3>:
    4e0c:	bb 27       	eor	r27, r27
    4e0e:	aa 27       	eor	r26, r26
    4e10:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__addsf3x>
    4e14:	0c 94 97 28 	jmp	0x512e	; 0x512e <__fp_round>
    4e18:	0e 94 89 28 	call	0x5112	; 0x5112 <__fp_pscA>
    4e1c:	38 f0       	brcs	.+14     	; 0x4e2c <__addsf3+0x20>
    4e1e:	0e 94 90 28 	call	0x5120	; 0x5120 <__fp_pscB>
    4e22:	20 f0       	brcs	.+8      	; 0x4e2c <__addsf3+0x20>
    4e24:	39 f4       	brne	.+14     	; 0x4e34 <__addsf3+0x28>
    4e26:	9f 3f       	cpi	r25, 0xFF	; 255
    4e28:	19 f4       	brne	.+6      	; 0x4e30 <__addsf3+0x24>
    4e2a:	26 f4       	brtc	.+8      	; 0x4e34 <__addsf3+0x28>
    4e2c:	0c 94 86 28 	jmp	0x510c	; 0x510c <__fp_nan>
    4e30:	0e f4       	brtc	.+2      	; 0x4e34 <__addsf3+0x28>
    4e32:	e0 95       	com	r30
    4e34:	e7 fb       	bst	r30, 7
    4e36:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__fp_inf>

00004e3a <__addsf3x>:
    4e3a:	e9 2f       	mov	r30, r25
    4e3c:	0e 94 a8 28 	call	0x5150	; 0x5150 <__fp_split3>
    4e40:	58 f3       	brcs	.-42     	; 0x4e18 <__addsf3+0xc>
    4e42:	ba 17       	cp	r27, r26
    4e44:	62 07       	cpc	r22, r18
    4e46:	73 07       	cpc	r23, r19
    4e48:	84 07       	cpc	r24, r20
    4e4a:	95 07       	cpc	r25, r21
    4e4c:	20 f0       	brcs	.+8      	; 0x4e56 <__addsf3x+0x1c>
    4e4e:	79 f4       	brne	.+30     	; 0x4e6e <__addsf3x+0x34>
    4e50:	a6 f5       	brtc	.+104    	; 0x4eba <__addsf3x+0x80>
    4e52:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <__fp_zero>
    4e56:	0e f4       	brtc	.+2      	; 0x4e5a <__addsf3x+0x20>
    4e58:	e0 95       	com	r30
    4e5a:	0b 2e       	mov	r0, r27
    4e5c:	ba 2f       	mov	r27, r26
    4e5e:	a0 2d       	mov	r26, r0
    4e60:	0b 01       	movw	r0, r22
    4e62:	b9 01       	movw	r22, r18
    4e64:	90 01       	movw	r18, r0
    4e66:	0c 01       	movw	r0, r24
    4e68:	ca 01       	movw	r24, r20
    4e6a:	a0 01       	movw	r20, r0
    4e6c:	11 24       	eor	r1, r1
    4e6e:	ff 27       	eor	r31, r31
    4e70:	59 1b       	sub	r21, r25
    4e72:	99 f0       	breq	.+38     	; 0x4e9a <__addsf3x+0x60>
    4e74:	59 3f       	cpi	r21, 0xF9	; 249
    4e76:	50 f4       	brcc	.+20     	; 0x4e8c <__addsf3x+0x52>
    4e78:	50 3e       	cpi	r21, 0xE0	; 224
    4e7a:	68 f1       	brcs	.+90     	; 0x4ed6 <__addsf3x+0x9c>
    4e7c:	1a 16       	cp	r1, r26
    4e7e:	f0 40       	sbci	r31, 0x00	; 0
    4e80:	a2 2f       	mov	r26, r18
    4e82:	23 2f       	mov	r18, r19
    4e84:	34 2f       	mov	r19, r20
    4e86:	44 27       	eor	r20, r20
    4e88:	58 5f       	subi	r21, 0xF8	; 248
    4e8a:	f3 cf       	rjmp	.-26     	; 0x4e72 <__addsf3x+0x38>
    4e8c:	46 95       	lsr	r20
    4e8e:	37 95       	ror	r19
    4e90:	27 95       	ror	r18
    4e92:	a7 95       	ror	r26
    4e94:	f0 40       	sbci	r31, 0x00	; 0
    4e96:	53 95       	inc	r21
    4e98:	c9 f7       	brne	.-14     	; 0x4e8c <__addsf3x+0x52>
    4e9a:	7e f4       	brtc	.+30     	; 0x4eba <__addsf3x+0x80>
    4e9c:	1f 16       	cp	r1, r31
    4e9e:	ba 0b       	sbc	r27, r26
    4ea0:	62 0b       	sbc	r22, r18
    4ea2:	73 0b       	sbc	r23, r19
    4ea4:	84 0b       	sbc	r24, r20
    4ea6:	ba f0       	brmi	.+46     	; 0x4ed6 <__addsf3x+0x9c>
    4ea8:	91 50       	subi	r25, 0x01	; 1
    4eaa:	a1 f0       	breq	.+40     	; 0x4ed4 <__addsf3x+0x9a>
    4eac:	ff 0f       	add	r31, r31
    4eae:	bb 1f       	adc	r27, r27
    4eb0:	66 1f       	adc	r22, r22
    4eb2:	77 1f       	adc	r23, r23
    4eb4:	88 1f       	adc	r24, r24
    4eb6:	c2 f7       	brpl	.-16     	; 0x4ea8 <__addsf3x+0x6e>
    4eb8:	0e c0       	rjmp	.+28     	; 0x4ed6 <__addsf3x+0x9c>
    4eba:	ba 0f       	add	r27, r26
    4ebc:	62 1f       	adc	r22, r18
    4ebe:	73 1f       	adc	r23, r19
    4ec0:	84 1f       	adc	r24, r20
    4ec2:	48 f4       	brcc	.+18     	; 0x4ed6 <__addsf3x+0x9c>
    4ec4:	87 95       	ror	r24
    4ec6:	77 95       	ror	r23
    4ec8:	67 95       	ror	r22
    4eca:	b7 95       	ror	r27
    4ecc:	f7 95       	ror	r31
    4ece:	9e 3f       	cpi	r25, 0xFE	; 254
    4ed0:	08 f0       	brcs	.+2      	; 0x4ed4 <__addsf3x+0x9a>
    4ed2:	b0 cf       	rjmp	.-160    	; 0x4e34 <__addsf3+0x28>
    4ed4:	93 95       	inc	r25
    4ed6:	88 0f       	add	r24, r24
    4ed8:	08 f0       	brcs	.+2      	; 0x4edc <__addsf3x+0xa2>
    4eda:	99 27       	eor	r25, r25
    4edc:	ee 0f       	add	r30, r30
    4ede:	97 95       	ror	r25
    4ee0:	87 95       	ror	r24
    4ee2:	08 95       	ret

00004ee4 <__cmpsf2>:
    4ee4:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <__fp_cmp>
    4ee8:	08 f4       	brcc	.+2      	; 0x4eec <__cmpsf2+0x8>
    4eea:	81 e0       	ldi	r24, 0x01	; 1
    4eec:	08 95       	ret

00004eee <__divsf3>:
    4eee:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <__divsf3x>
    4ef2:	0c 94 97 28 	jmp	0x512e	; 0x512e <__fp_round>
    4ef6:	0e 94 90 28 	call	0x5120	; 0x5120 <__fp_pscB>
    4efa:	58 f0       	brcs	.+22     	; 0x4f12 <__divsf3+0x24>
    4efc:	0e 94 89 28 	call	0x5112	; 0x5112 <__fp_pscA>
    4f00:	40 f0       	brcs	.+16     	; 0x4f12 <__divsf3+0x24>
    4f02:	29 f4       	brne	.+10     	; 0x4f0e <__divsf3+0x20>
    4f04:	5f 3f       	cpi	r21, 0xFF	; 255
    4f06:	29 f0       	breq	.+10     	; 0x4f12 <__divsf3+0x24>
    4f08:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__fp_inf>
    4f0c:	51 11       	cpse	r21, r1
    4f0e:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <__fp_szero>
    4f12:	0c 94 86 28 	jmp	0x510c	; 0x510c <__fp_nan>

00004f16 <__divsf3x>:
    4f16:	0e 94 a8 28 	call	0x5150	; 0x5150 <__fp_split3>
    4f1a:	68 f3       	brcs	.-38     	; 0x4ef6 <__divsf3+0x8>

00004f1c <__divsf3_pse>:
    4f1c:	99 23       	and	r25, r25
    4f1e:	b1 f3       	breq	.-20     	; 0x4f0c <__divsf3+0x1e>
    4f20:	55 23       	and	r21, r21
    4f22:	91 f3       	breq	.-28     	; 0x4f08 <__divsf3+0x1a>
    4f24:	95 1b       	sub	r25, r21
    4f26:	55 0b       	sbc	r21, r21
    4f28:	bb 27       	eor	r27, r27
    4f2a:	aa 27       	eor	r26, r26
    4f2c:	62 17       	cp	r22, r18
    4f2e:	73 07       	cpc	r23, r19
    4f30:	84 07       	cpc	r24, r20
    4f32:	38 f0       	brcs	.+14     	; 0x4f42 <__divsf3_pse+0x26>
    4f34:	9f 5f       	subi	r25, 0xFF	; 255
    4f36:	5f 4f       	sbci	r21, 0xFF	; 255
    4f38:	22 0f       	add	r18, r18
    4f3a:	33 1f       	adc	r19, r19
    4f3c:	44 1f       	adc	r20, r20
    4f3e:	aa 1f       	adc	r26, r26
    4f40:	a9 f3       	breq	.-22     	; 0x4f2c <__divsf3_pse+0x10>
    4f42:	35 d0       	rcall	.+106    	; 0x4fae <__divsf3_pse+0x92>
    4f44:	0e 2e       	mov	r0, r30
    4f46:	3a f0       	brmi	.+14     	; 0x4f56 <__divsf3_pse+0x3a>
    4f48:	e0 e8       	ldi	r30, 0x80	; 128
    4f4a:	32 d0       	rcall	.+100    	; 0x4fb0 <__divsf3_pse+0x94>
    4f4c:	91 50       	subi	r25, 0x01	; 1
    4f4e:	50 40       	sbci	r21, 0x00	; 0
    4f50:	e6 95       	lsr	r30
    4f52:	00 1c       	adc	r0, r0
    4f54:	ca f7       	brpl	.-14     	; 0x4f48 <__divsf3_pse+0x2c>
    4f56:	2b d0       	rcall	.+86     	; 0x4fae <__divsf3_pse+0x92>
    4f58:	fe 2f       	mov	r31, r30
    4f5a:	29 d0       	rcall	.+82     	; 0x4fae <__divsf3_pse+0x92>
    4f5c:	66 0f       	add	r22, r22
    4f5e:	77 1f       	adc	r23, r23
    4f60:	88 1f       	adc	r24, r24
    4f62:	bb 1f       	adc	r27, r27
    4f64:	26 17       	cp	r18, r22
    4f66:	37 07       	cpc	r19, r23
    4f68:	48 07       	cpc	r20, r24
    4f6a:	ab 07       	cpc	r26, r27
    4f6c:	b0 e8       	ldi	r27, 0x80	; 128
    4f6e:	09 f0       	breq	.+2      	; 0x4f72 <__divsf3_pse+0x56>
    4f70:	bb 0b       	sbc	r27, r27
    4f72:	80 2d       	mov	r24, r0
    4f74:	bf 01       	movw	r22, r30
    4f76:	ff 27       	eor	r31, r31
    4f78:	93 58       	subi	r25, 0x83	; 131
    4f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f7c:	3a f0       	brmi	.+14     	; 0x4f8c <__divsf3_pse+0x70>
    4f7e:	9e 3f       	cpi	r25, 0xFE	; 254
    4f80:	51 05       	cpc	r21, r1
    4f82:	78 f0       	brcs	.+30     	; 0x4fa2 <__divsf3_pse+0x86>
    4f84:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__fp_inf>
    4f88:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <__fp_szero>
    4f8c:	5f 3f       	cpi	r21, 0xFF	; 255
    4f8e:	e4 f3       	brlt	.-8      	; 0x4f88 <__divsf3_pse+0x6c>
    4f90:	98 3e       	cpi	r25, 0xE8	; 232
    4f92:	d4 f3       	brlt	.-12     	; 0x4f88 <__divsf3_pse+0x6c>
    4f94:	86 95       	lsr	r24
    4f96:	77 95       	ror	r23
    4f98:	67 95       	ror	r22
    4f9a:	b7 95       	ror	r27
    4f9c:	f7 95       	ror	r31
    4f9e:	9f 5f       	subi	r25, 0xFF	; 255
    4fa0:	c9 f7       	brne	.-14     	; 0x4f94 <__divsf3_pse+0x78>
    4fa2:	88 0f       	add	r24, r24
    4fa4:	91 1d       	adc	r25, r1
    4fa6:	96 95       	lsr	r25
    4fa8:	87 95       	ror	r24
    4faa:	97 f9       	bld	r25, 7
    4fac:	08 95       	ret
    4fae:	e1 e0       	ldi	r30, 0x01	; 1
    4fb0:	66 0f       	add	r22, r22
    4fb2:	77 1f       	adc	r23, r23
    4fb4:	88 1f       	adc	r24, r24
    4fb6:	bb 1f       	adc	r27, r27
    4fb8:	62 17       	cp	r22, r18
    4fba:	73 07       	cpc	r23, r19
    4fbc:	84 07       	cpc	r24, r20
    4fbe:	ba 07       	cpc	r27, r26
    4fc0:	20 f0       	brcs	.+8      	; 0x4fca <__divsf3_pse+0xae>
    4fc2:	62 1b       	sub	r22, r18
    4fc4:	73 0b       	sbc	r23, r19
    4fc6:	84 0b       	sbc	r24, r20
    4fc8:	ba 0b       	sbc	r27, r26
    4fca:	ee 1f       	adc	r30, r30
    4fcc:	88 f7       	brcc	.-30     	; 0x4fb0 <__divsf3_pse+0x94>
    4fce:	e0 95       	com	r30
    4fd0:	08 95       	ret

00004fd2 <__fixsfsi>:
    4fd2:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <__fixunssfsi>
    4fd6:	68 94       	set
    4fd8:	b1 11       	cpse	r27, r1
    4fda:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <__fp_szero>
    4fde:	08 95       	ret

00004fe0 <__fixunssfsi>:
    4fe0:	0e 94 b0 28 	call	0x5160	; 0x5160 <__fp_splitA>
    4fe4:	88 f0       	brcs	.+34     	; 0x5008 <__fixunssfsi+0x28>
    4fe6:	9f 57       	subi	r25, 0x7F	; 127
    4fe8:	98 f0       	brcs	.+38     	; 0x5010 <__fixunssfsi+0x30>
    4fea:	b9 2f       	mov	r27, r25
    4fec:	99 27       	eor	r25, r25
    4fee:	b7 51       	subi	r27, 0x17	; 23
    4ff0:	b0 f0       	brcs	.+44     	; 0x501e <__fixunssfsi+0x3e>
    4ff2:	e1 f0       	breq	.+56     	; 0x502c <__fixunssfsi+0x4c>
    4ff4:	66 0f       	add	r22, r22
    4ff6:	77 1f       	adc	r23, r23
    4ff8:	88 1f       	adc	r24, r24
    4ffa:	99 1f       	adc	r25, r25
    4ffc:	1a f0       	brmi	.+6      	; 0x5004 <__fixunssfsi+0x24>
    4ffe:	ba 95       	dec	r27
    5000:	c9 f7       	brne	.-14     	; 0x4ff4 <__fixunssfsi+0x14>
    5002:	14 c0       	rjmp	.+40     	; 0x502c <__fixunssfsi+0x4c>
    5004:	b1 30       	cpi	r27, 0x01	; 1
    5006:	91 f0       	breq	.+36     	; 0x502c <__fixunssfsi+0x4c>
    5008:	0e 94 ca 28 	call	0x5194	; 0x5194 <__fp_zero>
    500c:	b1 e0       	ldi	r27, 0x01	; 1
    500e:	08 95       	ret
    5010:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <__fp_zero>
    5014:	67 2f       	mov	r22, r23
    5016:	78 2f       	mov	r23, r24
    5018:	88 27       	eor	r24, r24
    501a:	b8 5f       	subi	r27, 0xF8	; 248
    501c:	39 f0       	breq	.+14     	; 0x502c <__fixunssfsi+0x4c>
    501e:	b9 3f       	cpi	r27, 0xF9	; 249
    5020:	cc f3       	brlt	.-14     	; 0x5014 <__fixunssfsi+0x34>
    5022:	86 95       	lsr	r24
    5024:	77 95       	ror	r23
    5026:	67 95       	ror	r22
    5028:	b3 95       	inc	r27
    502a:	d9 f7       	brne	.-10     	; 0x5022 <__fixunssfsi+0x42>
    502c:	3e f4       	brtc	.+14     	; 0x503c <__fixunssfsi+0x5c>
    502e:	90 95       	com	r25
    5030:	80 95       	com	r24
    5032:	70 95       	com	r23
    5034:	61 95       	neg	r22
    5036:	7f 4f       	sbci	r23, 0xFF	; 255
    5038:	8f 4f       	sbci	r24, 0xFF	; 255
    503a:	9f 4f       	sbci	r25, 0xFF	; 255
    503c:	08 95       	ret

0000503e <__floatunsisf>:
    503e:	e8 94       	clt
    5040:	09 c0       	rjmp	.+18     	; 0x5054 <__floatsisf+0x12>

00005042 <__floatsisf>:
    5042:	97 fb       	bst	r25, 7
    5044:	3e f4       	brtc	.+14     	; 0x5054 <__floatsisf+0x12>
    5046:	90 95       	com	r25
    5048:	80 95       	com	r24
    504a:	70 95       	com	r23
    504c:	61 95       	neg	r22
    504e:	7f 4f       	sbci	r23, 0xFF	; 255
    5050:	8f 4f       	sbci	r24, 0xFF	; 255
    5052:	9f 4f       	sbci	r25, 0xFF	; 255
    5054:	99 23       	and	r25, r25
    5056:	a9 f0       	breq	.+42     	; 0x5082 <__floatsisf+0x40>
    5058:	f9 2f       	mov	r31, r25
    505a:	96 e9       	ldi	r25, 0x96	; 150
    505c:	bb 27       	eor	r27, r27
    505e:	93 95       	inc	r25
    5060:	f6 95       	lsr	r31
    5062:	87 95       	ror	r24
    5064:	77 95       	ror	r23
    5066:	67 95       	ror	r22
    5068:	b7 95       	ror	r27
    506a:	f1 11       	cpse	r31, r1
    506c:	f8 cf       	rjmp	.-16     	; 0x505e <__floatsisf+0x1c>
    506e:	fa f4       	brpl	.+62     	; 0x50ae <__floatsisf+0x6c>
    5070:	bb 0f       	add	r27, r27
    5072:	11 f4       	brne	.+4      	; 0x5078 <__floatsisf+0x36>
    5074:	60 ff       	sbrs	r22, 0
    5076:	1b c0       	rjmp	.+54     	; 0x50ae <__floatsisf+0x6c>
    5078:	6f 5f       	subi	r22, 0xFF	; 255
    507a:	7f 4f       	sbci	r23, 0xFF	; 255
    507c:	8f 4f       	sbci	r24, 0xFF	; 255
    507e:	9f 4f       	sbci	r25, 0xFF	; 255
    5080:	16 c0       	rjmp	.+44     	; 0x50ae <__floatsisf+0x6c>
    5082:	88 23       	and	r24, r24
    5084:	11 f0       	breq	.+4      	; 0x508a <__floatsisf+0x48>
    5086:	96 e9       	ldi	r25, 0x96	; 150
    5088:	11 c0       	rjmp	.+34     	; 0x50ac <__floatsisf+0x6a>
    508a:	77 23       	and	r23, r23
    508c:	21 f0       	breq	.+8      	; 0x5096 <__floatsisf+0x54>
    508e:	9e e8       	ldi	r25, 0x8E	; 142
    5090:	87 2f       	mov	r24, r23
    5092:	76 2f       	mov	r23, r22
    5094:	05 c0       	rjmp	.+10     	; 0x50a0 <__floatsisf+0x5e>
    5096:	66 23       	and	r22, r22
    5098:	71 f0       	breq	.+28     	; 0x50b6 <__floatsisf+0x74>
    509a:	96 e8       	ldi	r25, 0x86	; 134
    509c:	86 2f       	mov	r24, r22
    509e:	70 e0       	ldi	r23, 0x00	; 0
    50a0:	60 e0       	ldi	r22, 0x00	; 0
    50a2:	2a f0       	brmi	.+10     	; 0x50ae <__floatsisf+0x6c>
    50a4:	9a 95       	dec	r25
    50a6:	66 0f       	add	r22, r22
    50a8:	77 1f       	adc	r23, r23
    50aa:	88 1f       	adc	r24, r24
    50ac:	da f7       	brpl	.-10     	; 0x50a4 <__floatsisf+0x62>
    50ae:	88 0f       	add	r24, r24
    50b0:	96 95       	lsr	r25
    50b2:	87 95       	ror	r24
    50b4:	97 f9       	bld	r25, 7
    50b6:	08 95       	ret

000050b8 <__fp_cmp>:
    50b8:	99 0f       	add	r25, r25
    50ba:	00 08       	sbc	r0, r0
    50bc:	55 0f       	add	r21, r21
    50be:	aa 0b       	sbc	r26, r26
    50c0:	e0 e8       	ldi	r30, 0x80	; 128
    50c2:	fe ef       	ldi	r31, 0xFE	; 254
    50c4:	16 16       	cp	r1, r22
    50c6:	17 06       	cpc	r1, r23
    50c8:	e8 07       	cpc	r30, r24
    50ca:	f9 07       	cpc	r31, r25
    50cc:	c0 f0       	brcs	.+48     	; 0x50fe <__fp_cmp+0x46>
    50ce:	12 16       	cp	r1, r18
    50d0:	13 06       	cpc	r1, r19
    50d2:	e4 07       	cpc	r30, r20
    50d4:	f5 07       	cpc	r31, r21
    50d6:	98 f0       	brcs	.+38     	; 0x50fe <__fp_cmp+0x46>
    50d8:	62 1b       	sub	r22, r18
    50da:	73 0b       	sbc	r23, r19
    50dc:	84 0b       	sbc	r24, r20
    50de:	95 0b       	sbc	r25, r21
    50e0:	39 f4       	brne	.+14     	; 0x50f0 <__fp_cmp+0x38>
    50e2:	0a 26       	eor	r0, r26
    50e4:	61 f0       	breq	.+24     	; 0x50fe <__fp_cmp+0x46>
    50e6:	23 2b       	or	r18, r19
    50e8:	24 2b       	or	r18, r20
    50ea:	25 2b       	or	r18, r21
    50ec:	21 f4       	brne	.+8      	; 0x50f6 <__fp_cmp+0x3e>
    50ee:	08 95       	ret
    50f0:	0a 26       	eor	r0, r26
    50f2:	09 f4       	brne	.+2      	; 0x50f6 <__fp_cmp+0x3e>
    50f4:	a1 40       	sbci	r26, 0x01	; 1
    50f6:	a6 95       	lsr	r26
    50f8:	8f ef       	ldi	r24, 0xFF	; 255
    50fa:	81 1d       	adc	r24, r1
    50fc:	81 1d       	adc	r24, r1
    50fe:	08 95       	ret

00005100 <__fp_inf>:
    5100:	97 f9       	bld	r25, 7
    5102:	9f 67       	ori	r25, 0x7F	; 127
    5104:	80 e8       	ldi	r24, 0x80	; 128
    5106:	70 e0       	ldi	r23, 0x00	; 0
    5108:	60 e0       	ldi	r22, 0x00	; 0
    510a:	08 95       	ret

0000510c <__fp_nan>:
    510c:	9f ef       	ldi	r25, 0xFF	; 255
    510e:	80 ec       	ldi	r24, 0xC0	; 192
    5110:	08 95       	ret

00005112 <__fp_pscA>:
    5112:	00 24       	eor	r0, r0
    5114:	0a 94       	dec	r0
    5116:	16 16       	cp	r1, r22
    5118:	17 06       	cpc	r1, r23
    511a:	18 06       	cpc	r1, r24
    511c:	09 06       	cpc	r0, r25
    511e:	08 95       	ret

00005120 <__fp_pscB>:
    5120:	00 24       	eor	r0, r0
    5122:	0a 94       	dec	r0
    5124:	12 16       	cp	r1, r18
    5126:	13 06       	cpc	r1, r19
    5128:	14 06       	cpc	r1, r20
    512a:	05 06       	cpc	r0, r21
    512c:	08 95       	ret

0000512e <__fp_round>:
    512e:	09 2e       	mov	r0, r25
    5130:	03 94       	inc	r0
    5132:	00 0c       	add	r0, r0
    5134:	11 f4       	brne	.+4      	; 0x513a <__fp_round+0xc>
    5136:	88 23       	and	r24, r24
    5138:	52 f0       	brmi	.+20     	; 0x514e <__fp_round+0x20>
    513a:	bb 0f       	add	r27, r27
    513c:	40 f4       	brcc	.+16     	; 0x514e <__fp_round+0x20>
    513e:	bf 2b       	or	r27, r31
    5140:	11 f4       	brne	.+4      	; 0x5146 <__fp_round+0x18>
    5142:	60 ff       	sbrs	r22, 0
    5144:	04 c0       	rjmp	.+8      	; 0x514e <__fp_round+0x20>
    5146:	6f 5f       	subi	r22, 0xFF	; 255
    5148:	7f 4f       	sbci	r23, 0xFF	; 255
    514a:	8f 4f       	sbci	r24, 0xFF	; 255
    514c:	9f 4f       	sbci	r25, 0xFF	; 255
    514e:	08 95       	ret

00005150 <__fp_split3>:
    5150:	57 fd       	sbrc	r21, 7
    5152:	90 58       	subi	r25, 0x80	; 128
    5154:	44 0f       	add	r20, r20
    5156:	55 1f       	adc	r21, r21
    5158:	59 f0       	breq	.+22     	; 0x5170 <__fp_splitA+0x10>
    515a:	5f 3f       	cpi	r21, 0xFF	; 255
    515c:	71 f0       	breq	.+28     	; 0x517a <__fp_splitA+0x1a>
    515e:	47 95       	ror	r20

00005160 <__fp_splitA>:
    5160:	88 0f       	add	r24, r24
    5162:	97 fb       	bst	r25, 7
    5164:	99 1f       	adc	r25, r25
    5166:	61 f0       	breq	.+24     	; 0x5180 <__fp_splitA+0x20>
    5168:	9f 3f       	cpi	r25, 0xFF	; 255
    516a:	79 f0       	breq	.+30     	; 0x518a <__fp_splitA+0x2a>
    516c:	87 95       	ror	r24
    516e:	08 95       	ret
    5170:	12 16       	cp	r1, r18
    5172:	13 06       	cpc	r1, r19
    5174:	14 06       	cpc	r1, r20
    5176:	55 1f       	adc	r21, r21
    5178:	f2 cf       	rjmp	.-28     	; 0x515e <__fp_split3+0xe>
    517a:	46 95       	lsr	r20
    517c:	f1 df       	rcall	.-30     	; 0x5160 <__fp_splitA>
    517e:	08 c0       	rjmp	.+16     	; 0x5190 <__fp_splitA+0x30>
    5180:	16 16       	cp	r1, r22
    5182:	17 06       	cpc	r1, r23
    5184:	18 06       	cpc	r1, r24
    5186:	99 1f       	adc	r25, r25
    5188:	f1 cf       	rjmp	.-30     	; 0x516c <__fp_splitA+0xc>
    518a:	86 95       	lsr	r24
    518c:	71 05       	cpc	r23, r1
    518e:	61 05       	cpc	r22, r1
    5190:	08 94       	sec
    5192:	08 95       	ret

00005194 <__fp_zero>:
    5194:	e8 94       	clt

00005196 <__fp_szero>:
    5196:	bb 27       	eor	r27, r27
    5198:	66 27       	eor	r22, r22
    519a:	77 27       	eor	r23, r23
    519c:	cb 01       	movw	r24, r22
    519e:	97 f9       	bld	r25, 7
    51a0:	08 95       	ret

000051a2 <__gesf2>:
    51a2:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <__fp_cmp>
    51a6:	08 f4       	brcc	.+2      	; 0x51aa <__gesf2+0x8>
    51a8:	8f ef       	ldi	r24, 0xFF	; 255
    51aa:	08 95       	ret

000051ac <__mulsf3>:
    51ac:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <__mulsf3x>
    51b0:	0c 94 97 28 	jmp	0x512e	; 0x512e <__fp_round>
    51b4:	0e 94 89 28 	call	0x5112	; 0x5112 <__fp_pscA>
    51b8:	38 f0       	brcs	.+14     	; 0x51c8 <__mulsf3+0x1c>
    51ba:	0e 94 90 28 	call	0x5120	; 0x5120 <__fp_pscB>
    51be:	20 f0       	brcs	.+8      	; 0x51c8 <__mulsf3+0x1c>
    51c0:	95 23       	and	r25, r21
    51c2:	11 f0       	breq	.+4      	; 0x51c8 <__mulsf3+0x1c>
    51c4:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__fp_inf>
    51c8:	0c 94 86 28 	jmp	0x510c	; 0x510c <__fp_nan>
    51cc:	11 24       	eor	r1, r1
    51ce:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <__fp_szero>

000051d2 <__mulsf3x>:
    51d2:	0e 94 a8 28 	call	0x5150	; 0x5150 <__fp_split3>
    51d6:	70 f3       	brcs	.-36     	; 0x51b4 <__mulsf3+0x8>

000051d8 <__mulsf3_pse>:
    51d8:	95 9f       	mul	r25, r21
    51da:	c1 f3       	breq	.-16     	; 0x51cc <__mulsf3+0x20>
    51dc:	95 0f       	add	r25, r21
    51de:	50 e0       	ldi	r21, 0x00	; 0
    51e0:	55 1f       	adc	r21, r21
    51e2:	62 9f       	mul	r22, r18
    51e4:	f0 01       	movw	r30, r0
    51e6:	72 9f       	mul	r23, r18
    51e8:	bb 27       	eor	r27, r27
    51ea:	f0 0d       	add	r31, r0
    51ec:	b1 1d       	adc	r27, r1
    51ee:	63 9f       	mul	r22, r19
    51f0:	aa 27       	eor	r26, r26
    51f2:	f0 0d       	add	r31, r0
    51f4:	b1 1d       	adc	r27, r1
    51f6:	aa 1f       	adc	r26, r26
    51f8:	64 9f       	mul	r22, r20
    51fa:	66 27       	eor	r22, r22
    51fc:	b0 0d       	add	r27, r0
    51fe:	a1 1d       	adc	r26, r1
    5200:	66 1f       	adc	r22, r22
    5202:	82 9f       	mul	r24, r18
    5204:	22 27       	eor	r18, r18
    5206:	b0 0d       	add	r27, r0
    5208:	a1 1d       	adc	r26, r1
    520a:	62 1f       	adc	r22, r18
    520c:	73 9f       	mul	r23, r19
    520e:	b0 0d       	add	r27, r0
    5210:	a1 1d       	adc	r26, r1
    5212:	62 1f       	adc	r22, r18
    5214:	83 9f       	mul	r24, r19
    5216:	a0 0d       	add	r26, r0
    5218:	61 1d       	adc	r22, r1
    521a:	22 1f       	adc	r18, r18
    521c:	74 9f       	mul	r23, r20
    521e:	33 27       	eor	r19, r19
    5220:	a0 0d       	add	r26, r0
    5222:	61 1d       	adc	r22, r1
    5224:	23 1f       	adc	r18, r19
    5226:	84 9f       	mul	r24, r20
    5228:	60 0d       	add	r22, r0
    522a:	21 1d       	adc	r18, r1
    522c:	82 2f       	mov	r24, r18
    522e:	76 2f       	mov	r23, r22
    5230:	6a 2f       	mov	r22, r26
    5232:	11 24       	eor	r1, r1
    5234:	9f 57       	subi	r25, 0x7F	; 127
    5236:	50 40       	sbci	r21, 0x00	; 0
    5238:	9a f0       	brmi	.+38     	; 0x5260 <__mulsf3_pse+0x88>
    523a:	f1 f0       	breq	.+60     	; 0x5278 <__mulsf3_pse+0xa0>
    523c:	88 23       	and	r24, r24
    523e:	4a f0       	brmi	.+18     	; 0x5252 <__mulsf3_pse+0x7a>
    5240:	ee 0f       	add	r30, r30
    5242:	ff 1f       	adc	r31, r31
    5244:	bb 1f       	adc	r27, r27
    5246:	66 1f       	adc	r22, r22
    5248:	77 1f       	adc	r23, r23
    524a:	88 1f       	adc	r24, r24
    524c:	91 50       	subi	r25, 0x01	; 1
    524e:	50 40       	sbci	r21, 0x00	; 0
    5250:	a9 f7       	brne	.-22     	; 0x523c <__mulsf3_pse+0x64>
    5252:	9e 3f       	cpi	r25, 0xFE	; 254
    5254:	51 05       	cpc	r21, r1
    5256:	80 f0       	brcs	.+32     	; 0x5278 <__mulsf3_pse+0xa0>
    5258:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__fp_inf>
    525c:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <__fp_szero>
    5260:	5f 3f       	cpi	r21, 0xFF	; 255
    5262:	e4 f3       	brlt	.-8      	; 0x525c <__mulsf3_pse+0x84>
    5264:	98 3e       	cpi	r25, 0xE8	; 232
    5266:	d4 f3       	brlt	.-12     	; 0x525c <__mulsf3_pse+0x84>
    5268:	86 95       	lsr	r24
    526a:	77 95       	ror	r23
    526c:	67 95       	ror	r22
    526e:	b7 95       	ror	r27
    5270:	f7 95       	ror	r31
    5272:	e7 95       	ror	r30
    5274:	9f 5f       	subi	r25, 0xFF	; 255
    5276:	c1 f7       	brne	.-16     	; 0x5268 <__mulsf3_pse+0x90>
    5278:	fe 2b       	or	r31, r30
    527a:	88 0f       	add	r24, r24
    527c:	91 1d       	adc	r25, r1
    527e:	96 95       	lsr	r25
    5280:	87 95       	ror	r24
    5282:	97 f9       	bld	r25, 7
    5284:	08 95       	ret

00005286 <itoa>:
    5286:	45 32       	cpi	r20, 0x25	; 37
    5288:	51 05       	cpc	r21, r1
    528a:	20 f4       	brcc	.+8      	; 0x5294 <itoa+0xe>
    528c:	42 30       	cpi	r20, 0x02	; 2
    528e:	10 f0       	brcs	.+4      	; 0x5294 <itoa+0xe>
    5290:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__itoa_ncheck>
    5294:	fb 01       	movw	r30, r22
    5296:	10 82       	st	Z, r1
    5298:	cb 01       	movw	r24, r22
    529a:	08 95       	ret

0000529c <__itoa_ncheck>:
    529c:	bb 27       	eor	r27, r27
    529e:	4a 30       	cpi	r20, 0x0A	; 10
    52a0:	31 f4       	brne	.+12     	; 0x52ae <__itoa_ncheck+0x12>
    52a2:	99 23       	and	r25, r25
    52a4:	22 f4       	brpl	.+8      	; 0x52ae <__itoa_ncheck+0x12>
    52a6:	bd e2       	ldi	r27, 0x2D	; 45
    52a8:	90 95       	com	r25
    52aa:	81 95       	neg	r24
    52ac:	9f 4f       	sbci	r25, 0xFF	; 255
    52ae:	0c 94 5a 29 	jmp	0x52b4	; 0x52b4 <__utoa_common>

000052b2 <__utoa_ncheck>:
    52b2:	bb 27       	eor	r27, r27

000052b4 <__utoa_common>:
    52b4:	fb 01       	movw	r30, r22
    52b6:	55 27       	eor	r21, r21
    52b8:	aa 27       	eor	r26, r26
    52ba:	88 0f       	add	r24, r24
    52bc:	99 1f       	adc	r25, r25
    52be:	aa 1f       	adc	r26, r26
    52c0:	a4 17       	cp	r26, r20
    52c2:	10 f0       	brcs	.+4      	; 0x52c8 <__utoa_common+0x14>
    52c4:	a4 1b       	sub	r26, r20
    52c6:	83 95       	inc	r24
    52c8:	50 51       	subi	r21, 0x10	; 16
    52ca:	b9 f7       	brne	.-18     	; 0x52ba <__utoa_common+0x6>
    52cc:	a0 5d       	subi	r26, 0xD0	; 208
    52ce:	aa 33       	cpi	r26, 0x3A	; 58
    52d0:	08 f0       	brcs	.+2      	; 0x52d4 <__utoa_common+0x20>
    52d2:	a9 5d       	subi	r26, 0xD9	; 217
    52d4:	a1 93       	st	Z+, r26
    52d6:	00 97       	sbiw	r24, 0x00	; 0
    52d8:	79 f7       	brne	.-34     	; 0x52b8 <__utoa_common+0x4>
    52da:	b1 11       	cpse	r27, r1
    52dc:	b1 93       	st	Z+, r27
    52de:	11 92       	st	Z+, r1
    52e0:	cb 01       	movw	r24, r22
    52e2:	0c 94 73 29 	jmp	0x52e6	; 0x52e6 <strrev>

000052e6 <strrev>:
    52e6:	dc 01       	movw	r26, r24
    52e8:	fc 01       	movw	r30, r24
    52ea:	67 2f       	mov	r22, r23
    52ec:	71 91       	ld	r23, Z+
    52ee:	77 23       	and	r23, r23
    52f0:	e1 f7       	brne	.-8      	; 0x52ea <strrev+0x4>
    52f2:	32 97       	sbiw	r30, 0x02	; 2
    52f4:	04 c0       	rjmp	.+8      	; 0x52fe <strrev+0x18>
    52f6:	7c 91       	ld	r23, X
    52f8:	6d 93       	st	X+, r22
    52fa:	70 83       	st	Z, r23
    52fc:	62 91       	ld	r22, -Z
    52fe:	ae 17       	cp	r26, r30
    5300:	bf 07       	cpc	r27, r31
    5302:	c8 f3       	brcs	.-14     	; 0x52f6 <strrev+0x10>
    5304:	08 95       	ret

00005306 <_exit>:
    5306:	f8 94       	cli

00005308 <__stop_program>:
    5308:	ff cf       	rjmp	.-2      	; 0x5308 <__stop_program>
