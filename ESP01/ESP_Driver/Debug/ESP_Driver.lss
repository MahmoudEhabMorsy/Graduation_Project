
ESP_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00002d3e  00002dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800116  00800116  00002e88  2**0
                  ALLOC
  3 .stab         00002394  00000000  00000000  00002e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dd1  00000000  00000000  0000521c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000612d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000629d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a73b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 14 	call	0x2882	; 0x2882 <main>
      8a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e0       	ldi	r26, 0x0D	; 13
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e0       	ldi	r24, 0x0D	; 13
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ESP_init>:
 */

#include "esp.h"

void ESP_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 chr;

	/*Initialize UART*/
	UART_init(115200);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	72 ec       	ldi	r23, 0xC2	; 194
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 f5 14 	call	0x29ea	; 0x29ea <UART_init>

	/*Disable Echo*/
	UART_sendString("ATE0\r\n");
     b5c:	80 e6       	ldi	r24, 0x60	; 96
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>

	while(1)
	{
		if(UART_receiveByte() == 'O')
     b64:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     b68:	8f 34       	cpi	r24, 0x4F	; 79
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <ESP_init+0x1e>
		{
			if(UART_receiveByte() == 'K')
     b6c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     b70:	8b 34       	cpi	r24, 0x4B	; 75
     b72:	c1 f7       	brne	.-16     	; 0xb64 <ESP_init+0x1e>
			}
		}
	}

	/*Station Mode*/
	UART_sendString("AT+CWMODE=1\r\n");
     b74:	87 e6       	ldi	r24, 0x67	; 103
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	while(1)
	{
		if(UART_receiveByte() == 'O')
     b7c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     b80:	8f 34       	cpi	r24, 0x4F	; 79
     b82:	e1 f7       	brne	.-8      	; 0xb7c <ESP_init+0x36>
		{
			if(UART_receiveByte() == 'K')
     b84:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     b88:	8b 34       	cpi	r24, 0x4B	; 75
     b8a:	c1 f7       	brne	.-16     	; 0xb7c <ESP_init+0x36>
			{
				break;
			}
		}
	}
}
     b8c:	0f 90       	pop	r0
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <ESP_networkConnect>:

uint8 ESP_networkConnect(uint8 *Username, uint8 *Password)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	00 d0       	rcall	.+0      	; 0xb9a <ESP_networkConnect+0x6>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <ESP_networkConnect+0x8>
     b9c:	0f 92       	push	r0
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	7c 83       	std	Y+4, r23	; 0x04
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	/*connect to Wi-Fi*/
	/*AT+CWJAP_CUR="WiFi_Name","WiFi_Pass"*/
	UART_sendString("AT+CWJAP_CUR=\"");
     baa:	85 e7       	ldi	r24, 0x75	; 117
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString(Username);
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString("\",\"");
     bba:	84 e8       	ldi	r24, 0x84	; 132
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString(Password);
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString("\"\r\n");
     bca:	88 e8       	ldi	r24, 0x88	; 136
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>

	while(1)
	{
		if(UART_receiveByte() == 'O')
     bd2:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     bd6:	8f 34       	cpi	r24, 0x4F	; 79
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <ESP_networkConnect+0x3e>
		{
			if(UART_receiveByte() == 'K')
     bda:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     bde:	8b 34       	cpi	r24, 0x4B	; 75
     be0:	c1 f7       	brne	.-16     	; 0xbd2 <ESP_networkConnect+0x3e>
			{
				break;
			}
		}
	}
}
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <ESP_serverConnect>:

void ESP_serverConnect(uint8 *IP, uint8 *Port)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <ESP_serverConnect+0x6>
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <ESP_serverConnect+0x8>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	7c 83       	std	Y+4, r23	; 0x04
     c04:	6b 83       	std	Y+3, r22	; 0x03
	/*connect to server*/
	/*8: AT+CIPSTART="mode","IP",Port*/
	/*TCP Mode By Default*/
	UART_sendString("AT+CIPSTART=\"TCP\",\"");
     c06:	8c e8       	ldi	r24, 0x8C	; 140
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString(IP);
     c0e:	89 81       	ldd	r24, Y+1	; 0x01
     c10:	9a 81       	ldd	r25, Y+2	; 0x02
     c12:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString("\",");
     c16:	80 ea       	ldi	r24, 0xA0	; 160
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString(Port);
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString("\r\n");
     c26:	83 ea       	ldi	r24, 0xA3	; 163
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>

	while(1)
	{
		if(UART_receiveByte() == 'O')
     c2e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     c32:	8f 34       	cpi	r24, 0x4F	; 79
     c34:	e1 f7       	brne	.-8      	; 0xc2e <ESP_serverConnect+0x3c>
		{
			if(UART_receiveByte() == 'K')
     c36:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     c3a:	8b 34       	cpi	r24, 0x4B	; 75
     c3c:	c1 f7       	brne	.-16     	; 0xc2e <ESP_serverConnect+0x3c>
			{
				break;
			}
		}
	}
}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <ESP_receiveDataFromServer>:

/* "GET http://mahmoud.freevar.com/status.txt\r\n" */
/*Length = "43" */
uint8 ESP_receiveDataFromServer(uint8 *stringLength, uint8 *String)
{
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6d 97       	sbiw	r28, 0x1d	; 29
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	9b 8f       	std	Y+27, r25	; 0x1b
     c66:	8a 8f       	std	Y+26, r24	; 0x1a
     c68:	7d 8f       	std	Y+29, r23	; 0x1d
     c6a:	6c 8f       	std	Y+28, r22	; 0x1c
	uint8 arr[20], i;
	uint8 *tempLength, *Value;
	UART_sendString("AT+CIPSEND=");
     c6c:	86 ea       	ldi	r24, 0xA6	; 166
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString(stringLength);
     c74:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c76:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c78:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>
	UART_sendString("\r\n");
     c7c:	83 ea       	ldi	r24, 0xA3	; 163
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>

	while(1)
	{
		if(UART_receiveByte() == 'O')
     c84:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     c88:	8f 34       	cpi	r24, 0x4F	; 79
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <ESP_receiveDataFromServer+0x38>
		{
			if(UART_receiveByte() == 'K')
     c8c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     c90:	8b 34       	cpi	r24, 0x4B	; 75
     c92:	c1 f7       	brne	.-16     	; 0xc84 <ESP_receiveDataFromServer+0x38>
				break;
			}
		}
	}

	UART_sendString(String);
     c94:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c96:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c98:	0e 94 67 15 	call	0x2ace	; 0x2ace <UART_sendString>

	/*+IPD, 1:0CLOSED*/
	while(1)
	{
		if(UART_receiveByte() == 'O')
     c9c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     ca0:	8f 34       	cpi	r24, 0x4F	; 79
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <ESP_receiveDataFromServer+0x50>
		{
			if(UART_receiveByte() == 'K')
     ca4:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     ca8:	8b 34       	cpi	r24, 0x4B	; 75
     caa:	c1 f7       	brne	.-16     	; 0xc9c <ESP_receiveDataFromServer+0x50>
				break;
			}
		}
	}

	i = 0;
     cac:	1d 82       	std	Y+5, r1	; 0x05
     cae:	27 c0       	rjmp	.+78     	; 0xcfe <ESP_receiveDataFromServer+0xb2>
	while (i < 20)
	{
		/*Number of Sent Data*/
		arr[i] = UART_receiveByte();
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	08 2f       	mov	r16, r24
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
     cba:	28 2f       	mov	r18, r24
     cbc:	ce 01       	movw	r24, r28
     cbe:	06 96       	adiw	r24, 0x06	; 6
     cc0:	fc 01       	movw	r30, r24
     cc2:	e0 0f       	add	r30, r16
     cc4:	f1 1f       	adc	r31, r17
     cc6:	20 83       	st	Z, r18
		if (arr[i] == 'C')
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	ce 01       	movw	r24, r28
     cd0:	06 96       	adiw	r24, 0x06	; 6
     cd2:	fc 01       	movw	r30, r24
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	80 81       	ld	r24, Z
     cda:	83 34       	cpi	r24, 0x43	; 67
     cdc:	69 f4       	brne	.+26     	; 0xcf8 <ESP_receiveDataFromServer+0xac>
		{
			arr[i + 1] = '\0';
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	9c 01       	movw	r18, r24
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	ce 01       	movw	r24, r28
     cec:	06 96       	adiw	r24, 0x06	; 6
     cee:	fc 01       	movw	r30, r24
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	10 82       	st	Z, r1
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <ESP_receiveDataFromServer+0xb8>
			break;
		}
		i++;
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}

	i = 0;
	while (i < 20)
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	84 31       	cpi	r24, 0x14	; 20
     d02:	b0 f2       	brcs	.-84     	; 0xcb0 <ESP_receiveDataFromServer+0x64>
			arr[i + 1] = '\0';
			break;
		}
		i++;
	}
	strtok(arr,","); /* nermy 7etta fel zebala */
     d04:	ce 01       	movw	r24, r28
     d06:	06 96       	adiw	r24, 0x06	; 6
     d08:	22 eb       	ldi	r18, 0xB2	; 178
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	b9 01       	movw	r22, r18
     d0e:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <strtok>
	tempLength = strtok(NULL,":");
     d12:	24 eb       	ldi	r18, 0xB4	; 180
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	b9 01       	movw	r22, r18
     d1c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <strtok>
     d20:	9c 83       	std	Y+4, r25	; 0x04
     d22:	8b 83       	std	Y+3, r24	; 0x03
	Value = strtok(NULL,"C");
     d24:	26 eb       	ldi	r18, 0xB6	; 182
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	b9 01       	movw	r22, r18
     d2e:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <strtok>
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
	return(*Value - '0');
     d36:	e9 81       	ldd	r30, Y+1	; 0x01
     d38:	fa 81       	ldd	r31, Y+2	; 0x02
     d3a:	80 81       	ld	r24, Z
     d3c:	80 53       	subi	r24, 0x30	; 48
}
     d3e:	6d 96       	adiw	r28, 0x1d	; 29
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <GPIO_setupPinDirection+0x6>
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <GPIO_setupPinDirection+0x8>
     d5c:	0f 92       	push	r0
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	6a 83       	std	Y+2, r22	; 0x02
     d66:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <GPIO_setupPinDirection+0x1c>
     d6e:	d5 c0       	rjmp	.+426    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	84 30       	cpi	r24, 0x04	; 4
     d74:	08 f0       	brcs	.+2      	; 0xd78 <GPIO_setupPinDirection+0x24>
     d76:	d1 c0       	rjmp	.+418    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3d 83       	std	Y+5, r19	; 0x05
     d80:	2c 83       	std	Y+4, r18	; 0x04
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	09 f4       	brne	.+2      	; 0xd8e <GPIO_setupPinDirection+0x3a>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <GPIO_setupPinDirection+0xc0>
     d8e:	2c 81       	ldd	r18, Y+4	; 0x04
     d90:	3d 81       	ldd	r19, Y+5	; 0x05
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	2c f4       	brge	.+10     	; 0xda2 <GPIO_setupPinDirection+0x4e>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	71 f0       	breq	.+28     	; 0xdbc <GPIO_setupPinDirection+0x68>
     da0:	bc c0       	rjmp	.+376    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
     da2:	2c 81       	ldd	r18, Y+4	; 0x04
     da4:	3d 81       	ldd	r19, Y+5	; 0x05
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <GPIO_setupPinDirection+0x5a>
     dac:	5f c0       	rjmp	.+190    	; 0xe6c <GPIO_setupPinDirection+0x118>
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <GPIO_setupPinDirection+0x66>
     db8:	85 c0       	rjmp	.+266    	; 0xec4 <GPIO_setupPinDirection+0x170>
     dba:	af c0       	rjmp	.+350    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	a1 f4       	brne	.+40     	; 0xdea <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dc2:	aa e3       	ldi	r26, 0x3A	; 58
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ea e3       	ldi	r30, 0x3A	; 58
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <GPIO_setupPinDirection+0x8c>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <GPIO_setupPinDirection+0x88>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	98 c0       	rjmp	.+304    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     dea:	aa e3       	ldi	r26, 0x3A	; 58
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ea e3       	ldi	r30, 0x3A	; 58
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_setupPinDirection+0xb4>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_setupPinDirection+0xb0>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	83 c0       	rjmp	.+262    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a1 f4       	brne	.+40     	; 0xe42 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e1a:	a7 e3       	ldi	r26, 0x37	; 55
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e7 e3       	ldi	r30, 0x37	; 55
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_setupPinDirection+0xe4>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_setupPinDirection+0xe0>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	6c c0       	rjmp	.+216    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e42:	a7 e3       	ldi	r26, 0x37	; 55
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e3       	ldi	r30, 0x37	; 55
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <GPIO_setupPinDirection+0x10c>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <GPIO_setupPinDirection+0x108>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	57 c0       	rjmp	.+174    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	a1 f4       	brne	.+40     	; 0xe9a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e72:	a4 e3       	ldi	r26, 0x34	; 52
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e4 e3       	ldi	r30, 0x34	; 52
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <GPIO_setupPinDirection+0x13c>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <GPIO_setupPinDirection+0x138>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	40 c0       	rjmp	.+128    	; 0xf1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e9a:	a4 e3       	ldi	r26, 0x34	; 52
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e4 e3       	ldi	r30, 0x34	; 52
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <GPIO_setupPinDirection+0x164>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <GPIO_setupPinDirection+0x160>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	2b c0       	rjmp	.+86     	; 0xf1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	a1 f4       	brne	.+40     	; 0xef2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     eca:	a1 e3       	ldi	r26, 0x31	; 49
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e1 e3       	ldi	r30, 0x31	; 49
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <GPIO_setupPinDirection+0x194>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <GPIO_setupPinDirection+0x190>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ef2:	a1 e3       	ldi	r26, 0x31	; 49
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e1 e3       	ldi	r30, 0x31	; 49
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <GPIO_setupPinDirection+0x1bc>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <GPIO_setupPinDirection+0x1b8>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <GPIO_writePin+0x6>
     f30:	00 d0       	rcall	.+0      	; 0xf32 <GPIO_writePin+0x8>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	6a 83       	std	Y+2, r22	; 0x02
     f3c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	08 f0       	brcs	.+2      	; 0xf46 <GPIO_writePin+0x1c>
     f44:	d5 c0       	rjmp	.+426    	; 0x10f0 <GPIO_writePin+0x1c6>
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <GPIO_writePin+0x24>
     f4c:	d1 c0       	rjmp	.+418    	; 0x10f0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	3d 83       	std	Y+5, r19	; 0x05
     f56:	2c 83       	std	Y+4, r18	; 0x04
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <GPIO_writePin+0x3a>
     f62:	43 c0       	rjmp	.+134    	; 0xfea <GPIO_writePin+0xc0>
     f64:	2c 81       	ldd	r18, Y+4	; 0x04
     f66:	3d 81       	ldd	r19, Y+5	; 0x05
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	2c f4       	brge	.+10     	; 0xf78 <GPIO_writePin+0x4e>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	71 f0       	breq	.+28     	; 0xf92 <GPIO_writePin+0x68>
     f76:	bc c0       	rjmp	.+376    	; 0x10f0 <GPIO_writePin+0x1c6>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <GPIO_writePin+0x5a>
     f82:	5f c0       	rjmp	.+190    	; 0x1042 <GPIO_writePin+0x118>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <GPIO_writePin+0x66>
     f8e:	85 c0       	rjmp	.+266    	; 0x109a <GPIO_writePin+0x170>
     f90:	af c0       	rjmp	.+350    	; 0x10f0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	a1 f4       	brne	.+40     	; 0xfc0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f98:	ab e3       	ldi	r26, 0x3B	; 59
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_writePin+0x8c>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_writePin+0x88>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	98 c0       	rjmp	.+304    	; 0x10f0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     fc0:	ab e3       	ldi	r26, 0x3B	; 59
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	eb e3       	ldi	r30, 0x3B	; 59
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <GPIO_writePin+0xb4>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <GPIO_writePin+0xb0>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	83 c0       	rjmp	.+262    	; 0x10f0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	a1 f4       	brne	.+40     	; 0x1018 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ff0:	a8 e3       	ldi	r26, 0x38	; 56
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e8 e3       	ldi	r30, 0x38	; 56
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_writePin+0xe4>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_writePin+0xe0>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	6c c0       	rjmp	.+216    	; 0x10f0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1018:	a8 e3       	ldi	r26, 0x38	; 56
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e8 e3       	ldi	r30, 0x38	; 56
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_writePin+0x10c>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_writePin+0x108>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	57 c0       	rjmp	.+174    	; 0x10f0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	a1 f4       	brne	.+40     	; 0x1070 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1048:	a5 e3       	ldi	r26, 0x35	; 53
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e5 e3       	ldi	r30, 0x35	; 53
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_writePin+0x13c>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_writePin+0x138>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	40 c0       	rjmp	.+128    	; 0x10f0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1070:	a5 e3       	ldi	r26, 0x35	; 53
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <GPIO_writePin+0x164>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <GPIO_writePin+0x160>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	2b c0       	rjmp	.+86     	; 0x10f0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10a0:	a2 e3       	ldi	r26, 0x32	; 50
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e2 e3       	ldi	r30, 0x32	; 50
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_writePin+0x194>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_writePin+0x190>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10c8:	a2 e3       	ldi	r26, 0x32	; 50
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e2 e3       	ldi	r30, 0x32	; 50
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_writePin+0x1bc>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_writePin+0x1b8>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <GPIO_readPin+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <GPIO_readPin+0x8>
    1108:	0f 92       	push	r0
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	8a 83       	std	Y+2, r24	; 0x02
    1110:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1112:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 30       	cpi	r24, 0x08	; 8
    1118:	08 f0       	brcs	.+2      	; 0x111c <GPIO_readPin+0x1c>
    111a:	84 c0       	rjmp	.+264    	; 0x1224 <GPIO_readPin+0x124>
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	84 30       	cpi	r24, 0x04	; 4
    1120:	08 f0       	brcs	.+2      	; 0x1124 <GPIO_readPin+0x24>
    1122:	80 c0       	rjmp	.+256    	; 0x1224 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3d 83       	std	Y+5, r19	; 0x05
    112c:	2c 83       	std	Y+4, r18	; 0x04
    112e:	4c 81       	ldd	r20, Y+4	; 0x04
    1130:	5d 81       	ldd	r21, Y+5	; 0x05
    1132:	41 30       	cpi	r20, 0x01	; 1
    1134:	51 05       	cpc	r21, r1
    1136:	79 f1       	breq	.+94     	; 0x1196 <GPIO_readPin+0x96>
    1138:	8c 81       	ldd	r24, Y+4	; 0x04
    113a:	9d 81       	ldd	r25, Y+5	; 0x05
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	91 05       	cpc	r25, r1
    1140:	34 f4       	brge	.+12     	; 0x114e <GPIO_readPin+0x4e>
    1142:	2c 81       	ldd	r18, Y+4	; 0x04
    1144:	3d 81       	ldd	r19, Y+5	; 0x05
    1146:	21 15       	cp	r18, r1
    1148:	31 05       	cpc	r19, r1
    114a:	69 f0       	breq	.+26     	; 0x1166 <GPIO_readPin+0x66>
    114c:	6b c0       	rjmp	.+214    	; 0x1224 <GPIO_readPin+0x124>
    114e:	4c 81       	ldd	r20, Y+4	; 0x04
    1150:	5d 81       	ldd	r21, Y+5	; 0x05
    1152:	42 30       	cpi	r20, 0x02	; 2
    1154:	51 05       	cpc	r21, r1
    1156:	b9 f1       	breq	.+110    	; 0x11c6 <GPIO_readPin+0xc6>
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <GPIO_readPin+0x64>
    1162:	49 c0       	rjmp	.+146    	; 0x11f6 <GPIO_readPin+0xf6>
    1164:	5f c0       	rjmp	.+190    	; 0x1224 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1166:	e9 e3       	ldi	r30, 0x39	; 57
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_readPin+0x7e>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_readPin+0x7a>
    1182:	ca 01       	movw	r24, r20
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	90 70       	andi	r25, 0x00	; 0
    1188:	88 23       	and	r24, r24
    118a:	19 f0       	breq	.+6      	; 0x1192 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	49 c0       	rjmp	.+146    	; 0x1224 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1192:	19 82       	std	Y+1, r1	; 0x01
    1194:	47 c0       	rjmp	.+142    	; 0x1224 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_readPin+0xae>
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_readPin+0xaa>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	90 70       	andi	r25, 0x00	; 0
    11b8:	88 23       	and	r24, r24
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	31 c0       	rjmp	.+98     	; 0x1224 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	2f c0       	rjmp	.+94     	; 0x1224 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11c6:	e3 e3       	ldi	r30, 0x33	; 51
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a9 01       	movw	r20, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <GPIO_readPin+0xde>
    11da:	55 95       	asr	r21
    11dc:	47 95       	ror	r20
    11de:	8a 95       	dec	r24
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <GPIO_readPin+0xda>
    11e2:	ca 01       	movw	r24, r20
    11e4:	81 70       	andi	r24, 0x01	; 1
    11e6:	90 70       	andi	r25, 0x00	; 0
    11e8:	88 23       	and	r24, r24
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	19 c0       	rjmp	.+50     	; 0x1224 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	17 c0       	rjmp	.+46     	; 0x1224 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11f6:	e0 e3       	ldi	r30, 0x30	; 48
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_readPin+0x10e>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_readPin+0x10a>
    1212:	ca 01       	movw	r24, r20
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	90 70       	andi	r25, 0x00	; 0
    1218:	88 23       	and	r24, r24
    121a:	19 f0       	breq	.+6      	; 0x1222 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1222:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <GPIO_setupPortDirection+0x6>
    123c:	00 d0       	rcall	.+0      	; 0x123e <GPIO_setupPortDirection+0x8>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	90 f5       	brcc	.+100    	; 0x12b0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3c 83       	std	Y+4, r19	; 0x04
    1254:	2b 83       	std	Y+3, r18	; 0x03
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	d1 f0       	breq	.+52     	; 0x1294 <GPIO_setupPortDirection+0x5e>
    1260:	2b 81       	ldd	r18, Y+3	; 0x03
    1262:	3c 81       	ldd	r19, Y+4	; 0x04
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	2c f4       	brge	.+10     	; 0x1274 <GPIO_setupPortDirection+0x3e>
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	61 f0       	breq	.+24     	; 0x128a <GPIO_setupPortDirection+0x54>
    1272:	1e c0       	rjmp	.+60     	; 0x12b0 <GPIO_setupPortDirection+0x7a>
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	81 f0       	breq	.+32     	; 0x129e <GPIO_setupPortDirection+0x68>
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	91 05       	cpc	r25, r1
    1286:	81 f0       	breq	.+32     	; 0x12a8 <GPIO_setupPortDirection+0x72>
    1288:	13 c0       	rjmp	.+38     	; 0x12b0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    128a:	ea e3       	ldi	r30, 0x3A	; 58
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	80 83       	st	Z, r24
    1292:	0e c0       	rjmp	.+28     	; 0x12b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1294:	e7 e3       	ldi	r30, 0x37	; 55
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    129e:	e4 e3       	ldi	r30, 0x34	; 52
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 83       	st	Z, r24
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12a8:	e1 e3       	ldi	r30, 0x31	; 49
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	80 83       	st	Z, r24
			break;
		}
	}
}
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <GPIO_writePort+0x6>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <GPIO_writePort+0x8>
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	90 f5       	brcc	.+100    	; 0x1338 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3c 83       	std	Y+4, r19	; 0x04
    12dc:	2b 83       	std	Y+3, r18	; 0x03
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	d1 f0       	breq	.+52     	; 0x131c <GPIO_writePort+0x5e>
    12e8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ea:	3c 81       	ldd	r19, Y+4	; 0x04
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	2c f4       	brge	.+10     	; 0x12fc <GPIO_writePort+0x3e>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	61 f0       	breq	.+24     	; 0x1312 <GPIO_writePort+0x54>
    12fa:	1e c0       	rjmp	.+60     	; 0x1338 <GPIO_writePort+0x7a>
    12fc:	2b 81       	ldd	r18, Y+3	; 0x03
    12fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	81 f0       	breq	.+32     	; 0x1326 <GPIO_writePort+0x68>
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	81 f0       	breq	.+32     	; 0x1330 <GPIO_writePort+0x72>
    1310:	13 c0       	rjmp	.+38     	; 0x1338 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
    131a:	0e c0       	rjmp	.+28     	; 0x1338 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    131c:	e8 e3       	ldi	r30, 0x38	; 56
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	80 83       	st	Z, r24
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1326:	e5 e3       	ldi	r30, 0x35	; 53
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	80 83       	st	Z, r24
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1330:	e2 e3       	ldi	r30, 0x32	; 50
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	80 83       	st	Z, r24
			break;
		}
	}
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <GPIO_readPort+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <GPIO_readPort+0x8>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1354:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	90 f5       	brcc	.+100    	; 0x13c0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3c 83       	std	Y+4, r19	; 0x04
    1364:	2b 83       	std	Y+3, r18	; 0x03
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	d1 f0       	breq	.+52     	; 0x13a4 <GPIO_readPort+0x5e>
    1370:	2b 81       	ldd	r18, Y+3	; 0x03
    1372:	3c 81       	ldd	r19, Y+4	; 0x04
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <GPIO_readPort+0x3e>
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	61 f0       	breq	.+24     	; 0x139a <GPIO_readPort+0x54>
    1382:	1e c0       	rjmp	.+60     	; 0x13c0 <GPIO_readPort+0x7a>
    1384:	2b 81       	ldd	r18, Y+3	; 0x03
    1386:	3c 81       	ldd	r19, Y+4	; 0x04
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	81 f0       	breq	.+32     	; 0x13ae <GPIO_readPort+0x68>
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	81 f0       	breq	.+32     	; 0x13b8 <GPIO_readPort+0x72>
    1398:	13 c0       	rjmp	.+38     	; 0x13c0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    13a4:	e6 e3       	ldi	r30, 0x36	; 54
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	09 c0       	rjmp	.+18     	; 0x13c0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    13ae:	e3 e3       	ldi	r30, 0x33	; 51
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    13b8:	e0 e3       	ldi	r30, 0x30	; 48
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	2e 97       	sbiw	r28, 0x0e	; 14
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	63 e0       	ldi	r22, 0x03	; 3
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 aa 06 	call	0xd54	; 0xd54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	62 e0       	ldi	r22, 0x02	; 2
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 aa 06 	call	0xd54	; 0xd54 <GPIO_setupPinDirection>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 ea       	ldi	r26, 0xA0	; 160
    13fe:	b1 e4       	ldi	r27, 0x41	; 65
    1400:	8b 87       	std	Y+11, r24	; 0x0b
    1402:	9c 87       	std	Y+12, r25	; 0x0c
    1404:	ad 87       	std	Y+13, r26	; 0x0d
    1406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	6b 85       	ldd	r22, Y+11	; 0x0b
    140a:	7c 85       	ldd	r23, Y+12	; 0x0c
    140c:	8d 85       	ldd	r24, Y+13	; 0x0d
    140e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a e7       	ldi	r20, 0x7A	; 122
    1416:	55 e4       	ldi	r21, 0x45	; 69
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8f 83       	std	Y+7, r24	; 0x07
    1422:	98 87       	std	Y+8, r25	; 0x08
    1424:	a9 87       	std	Y+9, r26	; 0x09
    1426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1428:	6f 81       	ldd	r22, Y+7	; 0x07
    142a:	78 85       	ldd	r23, Y+8	; 0x08
    142c:	89 85       	ldd	r24, Y+9	; 0x09
    142e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <LCD_init+0x7a>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <LCD_init+0xda>
    148c:	80 e9       	ldi	r24, 0x90	; 144
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <LCD_init+0xc8>
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <LCD_init+0xbc>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCD_init+0x104>
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 aa 06 	call	0xd54	; 0xd54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 aa 06 	call	0xd54	; 0xd54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 aa 06 	call	0xd54	; 0xd54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	64 e0       	ldi	r22, 0x04	; 4
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	0e 94 aa 06 	call	0xd54	; 0xd54 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1504:	83 e3       	ldi	r24, 0x33	; 51
    1506:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    150a:	82 e3       	ldi	r24, 0x32	; 50
    150c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1510:	88 e2       	ldi	r24, 0x28	; 40
    1512:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1516:	8c e0       	ldi	r24, 0x0C	; 12
    1518:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_sendCommand>
}
    1522:	2e 96       	adiw	r28, 0x0e	; 14
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	c3 56       	subi	r28, 0x63	; 99
    1542:	d0 40       	sbci	r29, 0x00	; 0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	fe 01       	movw	r30, r28
    1550:	ed 59       	subi	r30, 0x9D	; 157
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	63 e0       	ldi	r22, 0x03	; 3
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    1560:	fe 01       	movw	r30, r28
    1562:	e1 5a       	subi	r30, 0xA1	; 161
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a0 e8       	ldi	r26, 0x80	; 128
    156c:	bf e3       	ldi	r27, 0x3F	; 63
    156e:	80 83       	st	Z, r24
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	a2 83       	std	Z+2, r26	; 0x02
    1574:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	8e 01       	movw	r16, r28
    1578:	05 5a       	subi	r16, 0xA5	; 165
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	fe 01       	movw	r30, r28
    157e:	e1 5a       	subi	r30, 0xA1	; 161
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a e7       	ldi	r20, 0x7A	; 122
    1590:	55 e4       	ldi	r21, 0x45	; 69
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	f8 01       	movw	r30, r16
    159c:	80 83       	st	Z, r24
    159e:	91 83       	std	Z+1, r25	; 0x01
    15a0:	a2 83       	std	Z+2, r26	; 0x02
    15a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15a4:	fe 01       	movw	r30, r28
    15a6:	e5 5a       	subi	r30, 0xA5	; 165
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	60 81       	ld	r22, Z
    15ac:	71 81       	ldd	r23, Z+1	; 0x01
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	44 f4       	brge	.+16     	; 0x15d2 <LCD_sendCommand+0x9e>
		__ticks = 1;
    15c2:	fe 01       	movw	r30, r28
    15c4:	e7 5a       	subi	r30, 0xA7	; 167
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	64 c0       	rjmp	.+200    	; 0x169a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    15d2:	fe 01       	movw	r30, r28
    15d4:	e5 5a       	subi	r30, 0xA5	; 165
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	60 81       	ld	r22, Z
    15da:	71 81       	ldd	r23, Z+1	; 0x01
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	3f ef       	ldi	r19, 0xFF	; 255
    15e4:	4f e7       	ldi	r20, 0x7F	; 127
    15e6:	57 e4       	ldi	r21, 0x47	; 71
    15e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <LCD_sendCommand+0xbe>
    15f0:	43 c0       	rjmp	.+134    	; 0x1678 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	fe 01       	movw	r30, r28
    15f4:	e1 5a       	subi	r30, 0xA1	; 161
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8e 01       	movw	r16, r28
    1612:	07 5a       	subi	r16, 0xA7	; 167
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	f8 01       	movw	r30, r16
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
    1628:	1f c0       	rjmp	.+62     	; 0x1668 <LCD_sendCommand+0x134>
    162a:	fe 01       	movw	r30, r28
    162c:	e9 5a       	subi	r30, 0xA9	; 169
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 e9       	ldi	r24, 0x90	; 144
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	fe 01       	movw	r30, r28
    163a:	e9 5a       	subi	r30, 0xA9	; 169
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_sendCommand+0x10e>
    1646:	fe 01       	movw	r30, r28
    1648:	e9 5a       	subi	r30, 0xA9	; 169
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	de 01       	movw	r26, r28
    1652:	a7 5a       	subi	r26, 0xA7	; 167
    1654:	bf 4f       	sbci	r27, 0xFF	; 255
    1656:	fe 01       	movw	r30, r28
    1658:	e7 5a       	subi	r30, 0xA7	; 167
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	9c 93       	st	X, r25
    1666:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	fe 01       	movw	r30, r28
    166a:	e7 5a       	subi	r30, 0xA7	; 167
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	d1 f6       	brne	.-76     	; 0x162a <LCD_sendCommand+0xf6>
    1676:	27 c0       	rjmp	.+78     	; 0x16c6 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	8e 01       	movw	r16, r28
    167a:	07 5a       	subi	r16, 0xA7	; 167
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	fe 01       	movw	r30, r28
    1680:	e5 5a       	subi	r30, 0xA5	; 165
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	f8 01       	movw	r30, r16
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	de 01       	movw	r26, r28
    169c:	ab 5a       	subi	r26, 0xAB	; 171
    169e:	bf 4f       	sbci	r27, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	e7 5a       	subi	r30, 0xA7	; 167
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	8d 93       	st	X+, r24
    16ac:	9c 93       	st	X, r25
    16ae:	fe 01       	movw	r30, r28
    16b0:	eb 5a       	subi	r30, 0xAB	; 171
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <LCD_sendCommand+0x184>
    16bc:	fe 01       	movw	r30, r28
    16be:	eb 5a       	subi	r30, 0xAB	; 171
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	62 e0       	ldi	r22, 0x02	; 2
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    16d0:	fe 01       	movw	r30, r28
    16d2:	ef 5a       	subi	r30, 0xAF	; 175
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a0 e8       	ldi	r26, 0x80	; 128
    16dc:	bf e3       	ldi	r27, 0x3F	; 63
    16de:	80 83       	st	Z, r24
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	a2 83       	std	Z+2, r26	; 0x02
    16e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	8e 01       	movw	r16, r28
    16e8:	03 5b       	subi	r16, 0xB3	; 179
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	ef 5a       	subi	r30, 0xAF	; 175
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a e7       	ldi	r20, 0x7A	; 122
    1700:	55 e4       	ldi	r21, 0x45	; 69
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	f8 01       	movw	r30, r16
    170c:	80 83       	st	Z, r24
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	a2 83       	std	Z+2, r26	; 0x02
    1712:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1714:	fe 01       	movw	r30, r28
    1716:	e3 5b       	subi	r30, 0xB3	; 179
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172e:	88 23       	and	r24, r24
    1730:	44 f4       	brge	.+16     	; 0x1742 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1732:	fe 01       	movw	r30, r28
    1734:	e5 5b       	subi	r30, 0xB5	; 181
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	64 c0       	rjmp	.+200    	; 0x180a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1742:	fe 01       	movw	r30, r28
    1744:	e3 5b       	subi	r30, 0xB3	; 179
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	3f ef       	ldi	r19, 0xFF	; 255
    1754:	4f e7       	ldi	r20, 0x7F	; 127
    1756:	57 e4       	ldi	r21, 0x47	; 71
    1758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175c:	18 16       	cp	r1, r24
    175e:	0c f0       	brlt	.+2      	; 0x1762 <LCD_sendCommand+0x22e>
    1760:	43 c0       	rjmp	.+134    	; 0x17e8 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	fe 01       	movw	r30, r28
    1764:	ef 5a       	subi	r30, 0xAF	; 175
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	8e 01       	movw	r16, r28
    1782:	05 5b       	subi	r16, 0xB5	; 181
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	f8 01       	movw	r30, r16
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	1f c0       	rjmp	.+62     	; 0x17d8 <LCD_sendCommand+0x2a4>
    179a:	fe 01       	movw	r30, r28
    179c:	e7 5b       	subi	r30, 0xB7	; 183
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 e9       	ldi	r24, 0x90	; 144
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	fe 01       	movw	r30, r28
    17aa:	e7 5b       	subi	r30, 0xB7	; 183
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <LCD_sendCommand+0x27e>
    17b6:	fe 01       	movw	r30, r28
    17b8:	e7 5b       	subi	r30, 0xB7	; 183
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	de 01       	movw	r26, r28
    17c2:	a5 5b       	subi	r26, 0xB5	; 181
    17c4:	bf 4f       	sbci	r27, 0xFF	; 255
    17c6:	fe 01       	movw	r30, r28
    17c8:	e5 5b       	subi	r30, 0xB5	; 181
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	11 96       	adiw	r26, 0x01	; 1
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	fe 01       	movw	r30, r28
    17da:	e5 5b       	subi	r30, 0xB5	; 181
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	d1 f6       	brne	.-76     	; 0x179a <LCD_sendCommand+0x266>
    17e6:	27 c0       	rjmp	.+78     	; 0x1836 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	8e 01       	movw	r16, r28
    17ea:	05 5b       	subi	r16, 0xB5	; 181
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	fe 01       	movw	r30, r28
    17f0:	e3 5b       	subi	r30, 0xB3	; 179
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	f8 01       	movw	r30, r16
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	de 01       	movw	r26, r28
    180c:	a9 5b       	subi	r26, 0xB9	; 185
    180e:	bf 4f       	sbci	r27, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	e5 5b       	subi	r30, 0xB5	; 181
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	8d 93       	st	X+, r24
    181c:	9c 93       	st	X, r25
    181e:	fe 01       	movw	r30, r28
    1820:	e9 5b       	subi	r30, 0xB9	; 185
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_sendCommand+0x2f4>
    182c:	fe 01       	movw	r30, r28
    182e:	e9 5b       	subi	r30, 0xB9	; 185
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1836:	fe 01       	movw	r30, r28
    1838:	ed 59       	subi	r30, 0x9D	; 157
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	80 81       	ld	r24, Z
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	80 71       	andi	r24, 0x10	; 16
    1844:	90 70       	andi	r25, 0x00	; 0
    1846:	95 95       	asr	r25
    1848:	87 95       	ror	r24
    184a:	95 95       	asr	r25
    184c:	87 95       	ror	r24
    184e:	95 95       	asr	r25
    1850:	87 95       	ror	r24
    1852:	95 95       	asr	r25
    1854:	87 95       	ror	r24
    1856:	98 2f       	mov	r25, r24
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	49 2f       	mov	r20, r25
    185e:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1862:	fe 01       	movw	r30, r28
    1864:	ed 59       	subi	r30, 0x9D	; 157
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	80 72       	andi	r24, 0x20	; 32
    1870:	90 70       	andi	r25, 0x00	; 0
    1872:	95 95       	asr	r25
    1874:	87 95       	ror	r24
    1876:	95 95       	asr	r25
    1878:	87 95       	ror	r24
    187a:	95 95       	asr	r25
    187c:	87 95       	ror	r24
    187e:	95 95       	asr	r25
    1880:	87 95       	ror	r24
    1882:	95 95       	asr	r25
    1884:	87 95       	ror	r24
    1886:	98 2f       	mov	r25, r24
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	49 2f       	mov	r20, r25
    188e:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1892:	fe 01       	movw	r30, r28
    1894:	ed 59       	subi	r30, 0x9D	; 157
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	80 74       	andi	r24, 0x40	; 64
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	08 2e       	mov	r0, r24
    18a4:	89 2f       	mov	r24, r25
    18a6:	00 0c       	add	r0, r0
    18a8:	88 1f       	adc	r24, r24
    18aa:	99 0b       	sbc	r25, r25
    18ac:	00 0c       	add	r0, r0
    18ae:	88 1f       	adc	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	98 2f       	mov	r25, r24
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	62 e0       	ldi	r22, 0x02	; 2
    18b8:	49 2f       	mov	r20, r25
    18ba:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    18be:	fe 01       	movw	r30, r28
    18c0:	ed 59       	subi	r30, 0x9D	; 157
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 81       	ld	r24, Z
    18c6:	98 2f       	mov	r25, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	99 27       	eor	r25, r25
    18cc:	99 1f       	adc	r25, r25
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	64 e0       	ldi	r22, 0x04	; 4
    18d2:	49 2f       	mov	r20, r25
    18d4:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    18d8:	fe 01       	movw	r30, r28
    18da:	ed 5b       	subi	r30, 0xBD	; 189
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 e8       	ldi	r26, 0x80	; 128
    18e4:	bf e3       	ldi	r27, 0x3F	; 63
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	8e 01       	movw	r16, r28
    18f0:	01 5c       	subi	r16, 0xC1	; 193
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	fe 01       	movw	r30, r28
    18f6:	ed 5b       	subi	r30, 0xBD	; 189
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a e7       	ldi	r20, 0x7A	; 122
    1908:	55 e4       	ldi	r21, 0x45	; 69
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	80 83       	st	Z, r24
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	a2 83       	std	Z+2, r26	; 0x02
    191a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191c:	fe 01       	movw	r30, r28
    191e:	ff 96       	adiw	r30, 0x3f	; 63
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e af       	std	Y+62, r25	; 0x3e
    193e:	8d af       	std	Y+61, r24	; 0x3d
    1940:	46 c0       	rjmp	.+140    	; 0x19ce <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1942:	fe 01       	movw	r30, r28
    1944:	ff 96       	adiw	r30, 0x3f	; 63
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	64 f5       	brge	.+88     	; 0x19b6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	fe 01       	movw	r30, r28
    1960:	ed 5b       	subi	r30, 0xBD	; 189
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9e af       	std	Y+62, r25	; 0x3e
    198a:	8d af       	std	Y+61, r24	; 0x3d
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <LCD_sendCommand+0x478>
    198e:	80 e9       	ldi	r24, 0x90	; 144
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	9c af       	std	Y+60, r25	; 0x3c
    1994:	8b af       	std	Y+59, r24	; 0x3b
    1996:	8b ad       	ldd	r24, Y+59	; 0x3b
    1998:	9c ad       	ldd	r25, Y+60	; 0x3c
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_sendCommand+0x466>
    199e:	9c af       	std	Y+60, r25	; 0x3c
    19a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9e af       	std	Y+62, r25	; 0x3e
    19aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f7       	brne	.-38     	; 0x198e <LCD_sendCommand+0x45a>
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	fe 01       	movw	r30, r28
    19b8:	ff 96       	adiw	r30, 0x3f	; 63
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e af       	std	Y+62, r25	; 0x3e
    19cc:	8d af       	std	Y+61, r24	; 0x3d
    19ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d2:	9a af       	std	Y+58, r25	; 0x3a
    19d4:	89 af       	std	Y+57, r24	; 0x39
    19d6:	89 ad       	ldd	r24, Y+57	; 0x39
    19d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_sendCommand+0x4a6>
    19de:	9a af       	std	Y+58, r25	; 0x3a
    19e0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	62 e0       	ldi	r22, 0x02	; 2
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 e8       	ldi	r26, 0x80	; 128
    19f2:	bf e3       	ldi	r27, 0x3F	; 63
    19f4:	8d ab       	std	Y+53, r24	; 0x35
    19f6:	9e ab       	std	Y+54, r25	; 0x36
    19f8:	af ab       	std	Y+55, r26	; 0x37
    19fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6d a9       	ldd	r22, Y+53	; 0x35
    19fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1a00:	8f a9       	ldd	r24, Y+55	; 0x37
    1a02:	98 ad       	ldd	r25, Y+56	; 0x38
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	55 e4       	ldi	r21, 0x45	; 69
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	89 ab       	std	Y+49, r24	; 0x31
    1a16:	9a ab       	std	Y+50, r25	; 0x32
    1a18:	ab ab       	std	Y+51, r26	; 0x33
    1a1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a20:	8b a9       	ldd	r24, Y+51	; 0x33
    1a22:	9c a9       	ldd	r25, Y+52	; 0x34
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <LCD_sendCommand+0x50a>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	98 ab       	std	Y+48, r25	; 0x30
    1a3a:	8f a7       	std	Y+47, r24	; 0x2f
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a40:	7a a9       	ldd	r23, Y+50	; 0x32
    1a42:	8b a9       	ldd	r24, Y+51	; 0x33
    1a44:	9c a9       	ldd	r25, Y+52	; 0x34
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6d a9       	ldd	r22, Y+53	; 0x35
    1a58:	7e a9       	ldd	r23, Y+54	; 0x36
    1a5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	98 ab       	std	Y+48, r25	; 0x30
    1a7c:	8f a7       	std	Y+47, r24	; 0x2f
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <LCD_sendCommand+0x56a>
    1a80:	80 e9       	ldi	r24, 0x90	; 144
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	9e a7       	std	Y+46, r25	; 0x2e
    1a86:	8d a7       	std	Y+45, r24	; 0x2d
    1a88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCommand+0x558>
    1a90:	9e a7       	std	Y+46, r25	; 0x2e
    1a92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a96:	98 a9       	ldd	r25, Y+48	; 0x30
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <LCD_sendCommand+0x54c>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1aac:	8b a9       	ldd	r24, Y+51	; 0x33
    1aae:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	98 ab       	std	Y+48, r25	; 0x30
    1aba:	8f a7       	std	Y+47, r24	; 0x2f
    1abc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1abe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac0:	9c a7       	std	Y+44, r25	; 0x2c
    1ac2:	8b a7       	std	Y+43, r24	; 0x2b
    1ac4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <LCD_sendCommand+0x594>
    1acc:	9c a7       	std	Y+44, r25	; 0x2c
    1ace:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	62 e0       	ldi	r22, 0x02	; 2
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a0 e8       	ldi	r26, 0x80	; 128
    1ae0:	bf e3       	ldi	r27, 0x3F	; 63
    1ae2:	8f a3       	std	Y+39, r24	; 0x27
    1ae4:	98 a7       	std	Y+40, r25	; 0x28
    1ae6:	a9 a7       	std	Y+41, r26	; 0x29
    1ae8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aea:	6f a1       	ldd	r22, Y+39	; 0x27
    1aec:	78 a5       	ldd	r23, Y+40	; 0x28
    1aee:	89 a5       	ldd	r24, Y+41	; 0x29
    1af0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	55 e4       	ldi	r21, 0x45	; 69
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8b a3       	std	Y+35, r24	; 0x23
    1b04:	9c a3       	std	Y+36, r25	; 0x24
    1b06:	ad a3       	std	Y+37, r26	; 0x25
    1b08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9a a3       	std	Y+34, r25	; 0x22
    1b28:	89 a3       	std	Y+33, r24	; 0x21
    1b2a:	3f c0       	rjmp	.+126    	; 0x1baa <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1b2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b30:	8d a1       	ldd	r24, Y+37	; 0x25
    1b32:	9e a1       	ldd	r25, Y+38	; 0x26
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	4c f5       	brge	.+82     	; 0x1b96 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	6f a1       	ldd	r22, Y+39	; 0x27
    1b46:	78 a5       	ldd	r23, Y+40	; 0x28
    1b48:	89 a5       	ldd	r24, Y+41	; 0x29
    1b4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9a a3       	std	Y+34, r25	; 0x22
    1b6a:	89 a3       	std	Y+33, r24	; 0x21
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <LCD_sendCommand+0x658>
    1b6e:	80 e9       	ldi	r24, 0x90	; 144
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	98 a3       	std	Y+32, r25	; 0x20
    1b74:	8f 8f       	std	Y+31, r24	; 0x1f
    1b76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b78:	98 a1       	ldd	r25, Y+32	; 0x20
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_sendCommand+0x646>
    1b7e:	98 a3       	std	Y+32, r25	; 0x20
    1b80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	89 a1       	ldd	r24, Y+33	; 0x21
    1b84:	9a a1       	ldd	r25, Y+34	; 0x22
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	9a a3       	std	Y+34, r25	; 0x22
    1b8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <LCD_sendCommand+0x63a>
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	6b a1       	ldd	r22, Y+35	; 0x23
    1b98:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9a a3       	std	Y+34, r25	; 0x22
    1ba8:	89 a3       	std	Y+33, r24	; 0x21
    1baa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bac:	9a a1       	ldd	r25, Y+34	; 0x22
    1bae:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb0:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_sendCommand+0x682>
    1bba:	9e 8f       	std	Y+30, r25	; 0x1e
    1bbc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ed 59       	subi	r30, 0x9D	; 157
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	91 70       	andi	r25, 0x01	; 1
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	49 2f       	mov	r20, r25
    1bd0:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	ed 59       	subi	r30, 0x9D	; 157
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	82 70       	andi	r24, 0x02	; 2
    1be2:	90 70       	andi	r25, 0x00	; 0
    1be4:	95 95       	asr	r25
    1be6:	87 95       	ror	r24
    1be8:	98 2f       	mov	r25, r24
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	49 2f       	mov	r20, r25
    1bf0:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ed 59       	subi	r30, 0x9D	; 157
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	84 70       	andi	r24, 0x04	; 4
    1c02:	90 70       	andi	r25, 0x00	; 0
    1c04:	95 95       	asr	r25
    1c06:	87 95       	ror	r24
    1c08:	95 95       	asr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	62 e0       	ldi	r22, 0x02	; 2
    1c12:	49 2f       	mov	r20, r25
    1c14:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ed 59       	subi	r30, 0x9D	; 157
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	88 70       	andi	r24, 0x08	; 8
    1c26:	90 70       	andi	r25, 0x00	; 0
    1c28:	95 95       	asr	r25
    1c2a:	87 95       	ror	r24
    1c2c:	95 95       	asr	r25
    1c2e:	87 95       	ror	r24
    1c30:	95 95       	asr	r25
    1c32:	87 95       	ror	r24
    1c34:	98 2f       	mov	r25, r24
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	49 2f       	mov	r20, r25
    1c3c:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e8       	ldi	r26, 0x80	; 128
    1c46:	bf e3       	ldi	r27, 0x3F	; 63
    1c48:	89 8f       	std	Y+25, r24	; 0x19
    1c4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	69 8d       	ldd	r22, Y+25	; 0x19
    1c52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a e7       	ldi	r20, 0x7A	; 122
    1c5e:	55 e4       	ldi	r21, 0x45	; 69
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8d 8b       	std	Y+21, r24	; 0x15
    1c6a:	9e 8b       	std	Y+22, r25	; 0x16
    1c6c:	af 8b       	std	Y+23, r26	; 0x17
    1c6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c70:	6d 89       	ldd	r22, Y+21	; 0x15
    1c72:	7e 89       	ldd	r23, Y+22	; 0x16
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1c92:	6d 89       	ldd	r22, Y+21	; 0x15
    1c94:	7e 89       	ldd	r23, Y+22	; 0x16
    1c96:	8f 89       	ldd	r24, Y+23	; 0x17
    1c98:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9c 8b       	std	Y+20, r25	; 0x14
    1cd0:	8b 8b       	std	Y+19, r24	; 0x13
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <LCD_sendCommand+0x7be>
    1cd4:	80 e9       	ldi	r24, 0x90	; 144
    1cd6:	91 e0       	ldi	r25, 0x01	; 1
    1cd8:	9a 8b       	std	Y+18, r25	; 0x12
    1cda:	89 8b       	std	Y+17, r24	; 0x11
    1cdc:	89 89       	ldd	r24, Y+17	; 0x11
    1cde:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_sendCommand+0x7ac>
    1ce4:	9a 8b       	std	Y+18, r25	; 0x12
    1ce6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cea:	9c 89       	ldd	r25, Y+20	; 0x14
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9c 8b       	std	Y+20, r25	; 0x14
    1cf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <LCD_sendCommand+0x7a0>
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	8b 89       	ldd	r24, Y+19	; 0x13
    1d12:	9c 89       	ldd	r25, Y+20	; 0x14
    1d14:	98 8b       	std	Y+16, r25	; 0x10
    1d16:	8f 87       	std	Y+15, r24	; 0x0f
    1d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1a:	98 89       	ldd	r25, Y+16	; 0x10
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_sendCommand+0x7e8>
    1d20:	98 8b       	std	Y+16, r25	; 0x10
    1d22:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	62 e0       	ldi	r22, 0x02	; 2
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a0 e8       	ldi	r26, 0x80	; 128
    1d34:	bf e3       	ldi	r27, 0x3F	; 63
    1d36:	8b 87       	std	Y+11, r24	; 0x0b
    1d38:	9c 87       	std	Y+12, r25	; 0x0c
    1d3a:	ad 87       	std	Y+13, r26	; 0x0d
    1d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	4a e7       	ldi	r20, 0x7A	; 122
    1d4c:	55 e4       	ldi	r21, 0x45	; 69
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8f 83       	std	Y+7, r24	; 0x07
    1d58:	98 87       	std	Y+8, r25	; 0x08
    1d5a:	a9 87       	std	Y+9, r26	; 0x09
    1d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9e 83       	std	Y+6, r25	; 0x06
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
    1d7e:	3f c0       	rjmp	.+126    	; 0x1dfe <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1d80:	6f 81       	ldd	r22, Y+7	; 0x07
    1d82:	78 85       	ldd	r23, Y+8	; 0x08
    1d84:	89 85       	ldd	r24, Y+9	; 0x09
    1d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	57 e4       	ldi	r21, 0x47	; 71
    1d90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	4c f5       	brge	.+82     	; 0x1dea <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <LCD_sendCommand+0x8ac>
    1dc2:	80 e9       	ldi	r24, 0x90	; 144
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_sendCommand+0x89a>
    1dd2:	9c 83       	std	Y+4, r25	; 0x04
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	8d 81       	ldd	r24, Y+5	; 0x05
    1de2:	9e 81       	ldd	r25, Y+6	; 0x06
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <LCD_sendCommand+0x88e>
    1de8:	14 c0       	rjmp	.+40     	; 0x1e12 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	89 85       	ldd	r24, Y+9	; 0x09
    1df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_sendCommand+0x8d6>
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e12:	cd 59       	subi	r28, 0x9D	; 157
    1e14:	df 4f       	sbci	r29, 0xFF	; 255
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	c3 56       	subi	r28, 0x63	; 99
    1e38:	d0 40       	sbci	r29, 0x00	; 0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	fe 01       	movw	r30, r28
    1e46:	ed 59       	subi	r30, 0x9D	; 157
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	63 e0       	ldi	r22, 0x03	; 3
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    1e56:	fe 01       	movw	r30, r28
    1e58:	e1 5a       	subi	r30, 0xA1	; 161
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e8       	ldi	r26, 0x80	; 128
    1e62:	bf e3       	ldi	r27, 0x3F	; 63
    1e64:	80 83       	st	Z, r24
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	a2 83       	std	Z+2, r26	; 0x02
    1e6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	8e 01       	movw	r16, r28
    1e6e:	05 5a       	subi	r16, 0xA5	; 165
    1e70:	1f 4f       	sbci	r17, 0xFF	; 255
    1e72:	fe 01       	movw	r30, r28
    1e74:	e1 5a       	subi	r30, 0xA1	; 161
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a e7       	ldi	r20, 0x7A	; 122
    1e86:	55 e4       	ldi	r21, 0x45	; 69
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	f8 01       	movw	r30, r16
    1e92:	80 83       	st	Z, r24
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	a2 83       	std	Z+2, r26	; 0x02
    1e98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e5 5a       	subi	r30, 0xA5	; 165
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	44 f4       	brge	.+16     	; 0x1ec8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e7 5a       	subi	r30, 0xA7	; 167
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	64 c0       	rjmp	.+200    	; 0x1f90 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e5 5a       	subi	r30, 0xA5	; 165
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	0c f0       	brlt	.+2      	; 0x1ee8 <LCD_displayCharacter+0xbe>
    1ee6:	43 c0       	rjmp	.+134    	; 0x1f6e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e1 5a       	subi	r30, 0xA1	; 161
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	60 81       	ld	r22, Z
    1ef0:	71 81       	ldd	r23, Z+1	; 0x01
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8e 01       	movw	r16, r28
    1f08:	07 5a       	subi	r16, 0xA7	; 167
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	f8 01       	movw	r30, r16
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    1f1e:	1f c0       	rjmp	.+62     	; 0x1f5e <LCD_displayCharacter+0x134>
    1f20:	fe 01       	movw	r30, r28
    1f22:	e9 5a       	subi	r30, 0xA9	; 169
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	80 e9       	ldi	r24, 0x90	; 144
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	80 83       	st	Z, r24
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e9 5a       	subi	r30, 0xA9	; 169
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_displayCharacter+0x10e>
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e9 5a       	subi	r30, 0xA9	; 169
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	de 01       	movw	r26, r28
    1f48:	a7 5a       	subi	r26, 0xA7	; 167
    1f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e7 5a       	subi	r30, 0xA7	; 167
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	11 96       	adiw	r26, 0x01	; 1
    1f5a:	9c 93       	st	X, r25
    1f5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e7 5a       	subi	r30, 0xA7	; 167
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	80 81       	ld	r24, Z
    1f66:	91 81       	ldd	r25, Z+1	; 0x01
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	d1 f6       	brne	.-76     	; 0x1f20 <LCD_displayCharacter+0xf6>
    1f6c:	27 c0       	rjmp	.+78     	; 0x1fbc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6e:	8e 01       	movw	r16, r28
    1f70:	07 5a       	subi	r16, 0xA7	; 167
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
    1f74:	fe 01       	movw	r30, r28
    1f76:	e5 5a       	subi	r30, 0xA5	; 165
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
    1f90:	de 01       	movw	r26, r28
    1f92:	ab 5a       	subi	r26, 0xAB	; 171
    1f94:	bf 4f       	sbci	r27, 0xFF	; 255
    1f96:	fe 01       	movw	r30, r28
    1f98:	e7 5a       	subi	r30, 0xA7	; 167
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	8d 93       	st	X+, r24
    1fa2:	9c 93       	st	X, r25
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	eb 5a       	subi	r30, 0xAB	; 171
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_displayCharacter+0x184>
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	eb 5a       	subi	r30, 0xAB	; 171
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	62 e0       	ldi	r22, 0x02	; 2
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ef 5a       	subi	r30, 0xAF	; 175
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	80 83       	st	Z, r24
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	a2 83       	std	Z+2, r26	; 0x02
    1fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	8e 01       	movw	r16, r28
    1fde:	03 5b       	subi	r16, 0xB3	; 179
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	ef 5a       	subi	r30, 0xAF	; 175
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a e7       	ldi	r20, 0x7A	; 122
    1ff6:	55 e4       	ldi	r21, 0x45	; 69
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200a:	fe 01       	movw	r30, r28
    200c:	e3 5b       	subi	r30, 0xB3	; 179
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	44 f4       	brge	.+16     	; 0x2038 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2028:	fe 01       	movw	r30, r28
    202a:	e5 5b       	subi	r30, 0xB5	; 181
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	64 c0       	rjmp	.+200    	; 0x2100 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2038:	fe 01       	movw	r30, r28
    203a:	e3 5b       	subi	r30, 0xB3	; 179
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2052:	18 16       	cp	r1, r24
    2054:	0c f0       	brlt	.+2      	; 0x2058 <LCD_displayCharacter+0x22e>
    2056:	43 c0       	rjmp	.+134    	; 0x20de <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	fe 01       	movw	r30, r28
    205a:	ef 5a       	subi	r30, 0xAF	; 175
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e2       	ldi	r20, 0x20	; 32
    206c:	51 e4       	ldi	r21, 0x41	; 65
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8e 01       	movw	r16, r28
    2078:	05 5b       	subi	r16, 0xB5	; 181
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	f8 01       	movw	r30, r16
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
    208e:	1f c0       	rjmp	.+62     	; 0x20ce <LCD_displayCharacter+0x2a4>
    2090:	fe 01       	movw	r30, r28
    2092:	e7 5b       	subi	r30, 0xB7	; 183
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 e9       	ldi	r24, 0x90	; 144
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	fe 01       	movw	r30, r28
    20a0:	e7 5b       	subi	r30, 0xB7	; 183
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_displayCharacter+0x27e>
    20ac:	fe 01       	movw	r30, r28
    20ae:	e7 5b       	subi	r30, 0xB7	; 183
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	de 01       	movw	r26, r28
    20b8:	a5 5b       	subi	r26, 0xB5	; 181
    20ba:	bf 4f       	sbci	r27, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e5 5b       	subi	r30, 0xB5	; 181
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	9c 93       	st	X, r25
    20cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	fe 01       	movw	r30, r28
    20d0:	e5 5b       	subi	r30, 0xB5	; 181
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	91 81       	ldd	r25, Z+1	; 0x01
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	d1 f6       	brne	.-76     	; 0x2090 <LCD_displayCharacter+0x266>
    20dc:	27 c0       	rjmp	.+78     	; 0x212c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	8e 01       	movw	r16, r28
    20e0:	05 5b       	subi	r16, 0xB5	; 181
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	fe 01       	movw	r30, r28
    20e6:	e3 5b       	subi	r30, 0xB3	; 179
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	60 81       	ld	r22, Z
    20ec:	71 81       	ldd	r23, Z+1	; 0x01
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	f8 01       	movw	r30, r16
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	de 01       	movw	r26, r28
    2102:	a9 5b       	subi	r26, 0xB9	; 185
    2104:	bf 4f       	sbci	r27, 0xFF	; 255
    2106:	fe 01       	movw	r30, r28
    2108:	e5 5b       	subi	r30, 0xB5	; 181
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	8d 93       	st	X+, r24
    2112:	9c 93       	st	X, r25
    2114:	fe 01       	movw	r30, r28
    2116:	e9 5b       	subi	r30, 0xB9	; 185
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_displayCharacter+0x2f4>
    2122:	fe 01       	movw	r30, r28
    2124:	e9 5b       	subi	r30, 0xB9	; 185
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    212c:	fe 01       	movw	r30, r28
    212e:	ed 59       	subi	r30, 0x9D	; 157
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	80 71       	andi	r24, 0x10	; 16
    213a:	90 70       	andi	r25, 0x00	; 0
    213c:	95 95       	asr	r25
    213e:	87 95       	ror	r24
    2140:	95 95       	asr	r25
    2142:	87 95       	ror	r24
    2144:	95 95       	asr	r25
    2146:	87 95       	ror	r24
    2148:	95 95       	asr	r25
    214a:	87 95       	ror	r24
    214c:	98 2f       	mov	r25, r24
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	49 2f       	mov	r20, r25
    2154:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2158:	fe 01       	movw	r30, r28
    215a:	ed 59       	subi	r30, 0x9D	; 157
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	80 72       	andi	r24, 0x20	; 32
    2166:	90 70       	andi	r25, 0x00	; 0
    2168:	95 95       	asr	r25
    216a:	87 95       	ror	r24
    216c:	95 95       	asr	r25
    216e:	87 95       	ror	r24
    2170:	95 95       	asr	r25
    2172:	87 95       	ror	r24
    2174:	95 95       	asr	r25
    2176:	87 95       	ror	r24
    2178:	95 95       	asr	r25
    217a:	87 95       	ror	r24
    217c:	98 2f       	mov	r25, r24
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	49 2f       	mov	r20, r25
    2184:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2188:	fe 01       	movw	r30, r28
    218a:	ed 59       	subi	r30, 0x9D	; 157
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	80 74       	andi	r24, 0x40	; 64
    2196:	90 70       	andi	r25, 0x00	; 0
    2198:	08 2e       	mov	r0, r24
    219a:	89 2f       	mov	r24, r25
    219c:	00 0c       	add	r0, r0
    219e:	88 1f       	adc	r24, r24
    21a0:	99 0b       	sbc	r25, r25
    21a2:	00 0c       	add	r0, r0
    21a4:	88 1f       	adc	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	98 2f       	mov	r25, r24
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	62 e0       	ldi	r22, 0x02	; 2
    21ae:	49 2f       	mov	r20, r25
    21b0:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    21b4:	fe 01       	movw	r30, r28
    21b6:	ed 59       	subi	r30, 0x9D	; 157
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	98 2f       	mov	r25, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	99 27       	eor	r25, r25
    21c2:	99 1f       	adc	r25, r25
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	64 e0       	ldi	r22, 0x04	; 4
    21c8:	49 2f       	mov	r20, r25
    21ca:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    21ce:	fe 01       	movw	r30, r28
    21d0:	ed 5b       	subi	r30, 0xBD	; 189
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e8       	ldi	r26, 0x80	; 128
    21da:	bf e3       	ldi	r27, 0x3F	; 63
    21dc:	80 83       	st	Z, r24
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	a2 83       	std	Z+2, r26	; 0x02
    21e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	8e 01       	movw	r16, r28
    21e6:	01 5c       	subi	r16, 0xC1	; 193
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	fe 01       	movw	r30, r28
    21ec:	ed 5b       	subi	r30, 0xBD	; 189
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	4a e7       	ldi	r20, 0x7A	; 122
    21fe:	55 e4       	ldi	r21, 0x45	; 69
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	80 83       	st	Z, r24
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	a2 83       	std	Z+2, r26	; 0x02
    2210:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2212:	fe 01       	movw	r30, r28
    2214:	ff 96       	adiw	r30, 0x3f	; 63
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9e af       	std	Y+62, r25	; 0x3e
    2234:	8d af       	std	Y+61, r24	; 0x3d
    2236:	46 c0       	rjmp	.+140    	; 0x22c4 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2238:	fe 01       	movw	r30, r28
    223a:	ff 96       	adiw	r30, 0x3f	; 63
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	3f ef       	ldi	r19, 0xFF	; 255
    2248:	4f e7       	ldi	r20, 0x7F	; 127
    224a:	57 e4       	ldi	r21, 0x47	; 71
    224c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2250:	18 16       	cp	r1, r24
    2252:	64 f5       	brge	.+88     	; 0x22ac <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2254:	fe 01       	movw	r30, r28
    2256:	ed 5b       	subi	r30, 0xBD	; 189
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9e af       	std	Y+62, r25	; 0x3e
    2280:	8d af       	std	Y+61, r24	; 0x3d
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <LCD_displayCharacter+0x478>
    2284:	80 e9       	ldi	r24, 0x90	; 144
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	9c af       	std	Y+60, r25	; 0x3c
    228a:	8b af       	std	Y+59, r24	; 0x3b
    228c:	8b ad       	ldd	r24, Y+59	; 0x3b
    228e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_displayCharacter+0x466>
    2294:	9c af       	std	Y+60, r25	; 0x3c
    2296:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	8d ad       	ldd	r24, Y+61	; 0x3d
    229a:	9e ad       	ldd	r25, Y+62	; 0x3e
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9e af       	std	Y+62, r25	; 0x3e
    22a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <LCD_displayCharacter+0x45a>
    22aa:	16 c0       	rjmp	.+44     	; 0x22d8 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	fe 01       	movw	r30, r28
    22ae:	ff 96       	adiw	r30, 0x3f	; 63
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9e af       	std	Y+62, r25	; 0x3e
    22c2:	8d af       	std	Y+61, r24	; 0x3d
    22c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22c8:	9a af       	std	Y+58, r25	; 0x3a
    22ca:	89 af       	std	Y+57, r24	; 0x39
    22cc:	89 ad       	ldd	r24, Y+57	; 0x39
    22ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_displayCharacter+0x4a6>
    22d4:	9a af       	std	Y+58, r25	; 0x3a
    22d6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e8       	ldi	r26, 0x80	; 128
    22e8:	bf e3       	ldi	r27, 0x3F	; 63
    22ea:	8d ab       	std	Y+53, r24	; 0x35
    22ec:	9e ab       	std	Y+54, r25	; 0x36
    22ee:	af ab       	std	Y+55, r26	; 0x37
    22f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f2:	6d a9       	ldd	r22, Y+53	; 0x35
    22f4:	7e a9       	ldd	r23, Y+54	; 0x36
    22f6:	8f a9       	ldd	r24, Y+55	; 0x37
    22f8:	98 ad       	ldd	r25, Y+56	; 0x38
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	4a e7       	ldi	r20, 0x7A	; 122
    2300:	55 e4       	ldi	r21, 0x45	; 69
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	89 ab       	std	Y+49, r24	; 0x31
    230c:	9a ab       	std	Y+50, r25	; 0x32
    230e:	ab ab       	std	Y+51, r26	; 0x33
    2310:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2312:	69 a9       	ldd	r22, Y+49	; 0x31
    2314:	7a a9       	ldd	r23, Y+50	; 0x32
    2316:	8b a9       	ldd	r24, Y+51	; 0x33
    2318:	9c a9       	ldd	r25, Y+52	; 0x34
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	2c f4       	brge	.+10     	; 0x2334 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	98 ab       	std	Y+48, r25	; 0x30
    2330:	8f a7       	std	Y+47, r24	; 0x2f
    2332:	3f c0       	rjmp	.+126    	; 0x23b2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2334:	69 a9       	ldd	r22, Y+49	; 0x31
    2336:	7a a9       	ldd	r23, Y+50	; 0x32
    2338:	8b a9       	ldd	r24, Y+51	; 0x33
    233a:	9c a9       	ldd	r25, Y+52	; 0x34
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	4c f5       	brge	.+82     	; 0x239e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	6d a9       	ldd	r22, Y+53	; 0x35
    234e:	7e a9       	ldd	r23, Y+54	; 0x36
    2350:	8f a9       	ldd	r24, Y+55	; 0x37
    2352:	98 ad       	ldd	r25, Y+56	; 0x38
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e2       	ldi	r20, 0x20	; 32
    235a:	51 e4       	ldi	r21, 0x41	; 65
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	98 ab       	std	Y+48, r25	; 0x30
    2372:	8f a7       	std	Y+47, r24	; 0x2f
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <LCD_displayCharacter+0x56a>
    2376:	80 e9       	ldi	r24, 0x90	; 144
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	9e a7       	std	Y+46, r25	; 0x2e
    237c:	8d a7       	std	Y+45, r24	; 0x2d
    237e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2380:	9e a5       	ldd	r25, Y+46	; 0x2e
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_displayCharacter+0x558>
    2386:	9e a7       	std	Y+46, r25	; 0x2e
    2388:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	8f a5       	ldd	r24, Y+47	; 0x2f
    238c:	98 a9       	ldd	r25, Y+48	; 0x30
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	98 ab       	std	Y+48, r25	; 0x30
    2392:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	8f a5       	ldd	r24, Y+47	; 0x2f
    2396:	98 a9       	ldd	r25, Y+48	; 0x30
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	69 f7       	brne	.-38     	; 0x2376 <LCD_displayCharacter+0x54c>
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239e:	69 a9       	ldd	r22, Y+49	; 0x31
    23a0:	7a a9       	ldd	r23, Y+50	; 0x32
    23a2:	8b a9       	ldd	r24, Y+51	; 0x33
    23a4:	9c a9       	ldd	r25, Y+52	; 0x34
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	98 ab       	std	Y+48, r25	; 0x30
    23b0:	8f a7       	std	Y+47, r24	; 0x2f
    23b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b4:	98 a9       	ldd	r25, Y+48	; 0x30
    23b6:	9c a7       	std	Y+44, r25	; 0x2c
    23b8:	8b a7       	std	Y+43, r24	; 0x2b
    23ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    23bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_displayCharacter+0x594>
    23c2:	9c a7       	std	Y+44, r25	; 0x2c
    23c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	62 e0       	ldi	r22, 0x02	; 2
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	a0 e8       	ldi	r26, 0x80	; 128
    23d6:	bf e3       	ldi	r27, 0x3F	; 63
    23d8:	8f a3       	std	Y+39, r24	; 0x27
    23da:	98 a7       	std	Y+40, r25	; 0x28
    23dc:	a9 a7       	std	Y+41, r26	; 0x29
    23de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e0:	6f a1       	ldd	r22, Y+39	; 0x27
    23e2:	78 a5       	ldd	r23, Y+40	; 0x28
    23e4:	89 a5       	ldd	r24, Y+41	; 0x29
    23e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4a e7       	ldi	r20, 0x7A	; 122
    23ee:	55 e4       	ldi	r21, 0x45	; 69
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	8b a3       	std	Y+35, r24	; 0x23
    23fa:	9c a3       	std	Y+36, r25	; 0x24
    23fc:	ad a3       	std	Y+37, r26	; 0x25
    23fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2400:	6b a1       	ldd	r22, Y+35	; 0x23
    2402:	7c a1       	ldd	r23, Y+36	; 0x24
    2404:	8d a1       	ldd	r24, Y+37	; 0x25
    2406:	9e a1       	ldd	r25, Y+38	; 0x26
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2414:	88 23       	and	r24, r24
    2416:	2c f4       	brge	.+10     	; 0x2422 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9a a3       	std	Y+34, r25	; 0x22
    241e:	89 a3       	std	Y+33, r24	; 0x21
    2420:	3f c0       	rjmp	.+126    	; 0x24a0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2422:	6b a1       	ldd	r22, Y+35	; 0x23
    2424:	7c a1       	ldd	r23, Y+36	; 0x24
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	9e a1       	ldd	r25, Y+38	; 0x26
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	3f ef       	ldi	r19, 0xFF	; 255
    242e:	4f e7       	ldi	r20, 0x7F	; 127
    2430:	57 e4       	ldi	r21, 0x47	; 71
    2432:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2436:	18 16       	cp	r1, r24
    2438:	4c f5       	brge	.+82     	; 0x248c <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243a:	6f a1       	ldd	r22, Y+39	; 0x27
    243c:	78 a5       	ldd	r23, Y+40	; 0x28
    243e:	89 a5       	ldd	r24, Y+41	; 0x29
    2440:	9a a5       	ldd	r25, Y+42	; 0x2a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e2       	ldi	r20, 0x20	; 32
    2448:	51 e4       	ldi	r21, 0x41	; 65
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9a a3       	std	Y+34, r25	; 0x22
    2460:	89 a3       	std	Y+33, r24	; 0x21
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <LCD_displayCharacter+0x658>
    2464:	80 e9       	ldi	r24, 0x90	; 144
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	98 a3       	std	Y+32, r25	; 0x20
    246a:	8f 8f       	std	Y+31, r24	; 0x1f
    246c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    246e:	98 a1       	ldd	r25, Y+32	; 0x20
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_displayCharacter+0x646>
    2474:	98 a3       	std	Y+32, r25	; 0x20
    2476:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2478:	89 a1       	ldd	r24, Y+33	; 0x21
    247a:	9a a1       	ldd	r25, Y+34	; 0x22
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	9a a3       	std	Y+34, r25	; 0x22
    2480:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2482:	89 a1       	ldd	r24, Y+33	; 0x21
    2484:	9a a1       	ldd	r25, Y+34	; 0x22
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f7       	brne	.-38     	; 0x2464 <LCD_displayCharacter+0x63a>
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248c:	6b a1       	ldd	r22, Y+35	; 0x23
    248e:	7c a1       	ldd	r23, Y+36	; 0x24
    2490:	8d a1       	ldd	r24, Y+37	; 0x25
    2492:	9e a1       	ldd	r25, Y+38	; 0x26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9a a3       	std	Y+34, r25	; 0x22
    249e:	89 a3       	std	Y+33, r24	; 0x21
    24a0:	89 a1       	ldd	r24, Y+33	; 0x21
    24a2:	9a a1       	ldd	r25, Y+34	; 0x22
    24a4:	9e 8f       	std	Y+30, r25	; 0x1e
    24a6:	8d 8f       	std	Y+29, r24	; 0x1d
    24a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_displayCharacter+0x682>
    24b0:	9e 8f       	std	Y+30, r25	; 0x1e
    24b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 59       	subi	r30, 0x9D	; 157
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	98 2f       	mov	r25, r24
    24be:	91 70       	andi	r25, 0x01	; 1
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	49 2f       	mov	r20, r25
    24c6:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    24ca:	fe 01       	movw	r30, r28
    24cc:	ed 59       	subi	r30, 0x9D	; 157
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	82 70       	andi	r24, 0x02	; 2
    24d8:	90 70       	andi	r25, 0x00	; 0
    24da:	95 95       	asr	r25
    24dc:	87 95       	ror	r24
    24de:	98 2f       	mov	r25, r24
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	49 2f       	mov	r20, r25
    24e6:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 59       	subi	r30, 0x9D	; 157
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	84 70       	andi	r24, 0x04	; 4
    24f8:	90 70       	andi	r25, 0x00	; 0
    24fa:	95 95       	asr	r25
    24fc:	87 95       	ror	r24
    24fe:	95 95       	asr	r25
    2500:	87 95       	ror	r24
    2502:	98 2f       	mov	r25, r24
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	62 e0       	ldi	r22, 0x02	; 2
    2508:	49 2f       	mov	r20, r25
    250a:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    250e:	fe 01       	movw	r30, r28
    2510:	ed 59       	subi	r30, 0x9D	; 157
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	80 81       	ld	r24, Z
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	88 70       	andi	r24, 0x08	; 8
    251c:	90 70       	andi	r25, 0x00	; 0
    251e:	95 95       	asr	r25
    2520:	87 95       	ror	r24
    2522:	95 95       	asr	r25
    2524:	87 95       	ror	r24
    2526:	95 95       	asr	r25
    2528:	87 95       	ror	r24
    252a:	98 2f       	mov	r25, r24
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	64 e0       	ldi	r22, 0x04	; 4
    2530:	49 2f       	mov	r20, r25
    2532:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a0 e8       	ldi	r26, 0x80	; 128
    253c:	bf e3       	ldi	r27, 0x3F	; 63
    253e:	89 8f       	std	Y+25, r24	; 0x19
    2540:	9a 8f       	std	Y+26, r25	; 0x1a
    2542:	ab 8f       	std	Y+27, r26	; 0x1b
    2544:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2546:	69 8d       	ldd	r22, Y+25	; 0x19
    2548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a e7       	ldi	r20, 0x7A	; 122
    2554:	55 e4       	ldi	r21, 0x45	; 69
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8d 8b       	std	Y+21, r24	; 0x15
    2560:	9e 8b       	std	Y+22, r25	; 0x16
    2562:	af 8b       	std	Y+23, r26	; 0x17
    2564:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2566:	6d 89       	ldd	r22, Y+21	; 0x15
    2568:	7e 89       	ldd	r23, Y+22	; 0x16
    256a:	8f 89       	ldd	r24, Y+23	; 0x17
    256c:	98 8d       	ldd	r25, Y+24	; 0x18
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	2c f4       	brge	.+10     	; 0x2588 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9c 8b       	std	Y+20, r25	; 0x14
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	3f c0       	rjmp	.+126    	; 0x2606 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	3f ef       	ldi	r19, 0xFF	; 255
    2594:	4f e7       	ldi	r20, 0x7F	; 127
    2596:	57 e4       	ldi	r21, 0x47	; 71
    2598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259c:	18 16       	cp	r1, r24
    259e:	4c f5       	brge	.+82     	; 0x25f2 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	69 8d       	ldd	r22, Y+25	; 0x19
    25a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e2       	ldi	r20, 0x20	; 32
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	0f c0       	rjmp	.+30     	; 0x25e8 <LCD_displayCharacter+0x7be>
    25ca:	80 e9       	ldi	r24, 0x90	; 144
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	9a 8b       	std	Y+18, r25	; 0x12
    25d0:	89 8b       	std	Y+17, r24	; 0x11
    25d2:	89 89       	ldd	r24, Y+17	; 0x11
    25d4:	9a 89       	ldd	r25, Y+18	; 0x12
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_displayCharacter+0x7ac>
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	9c 8b       	std	Y+20, r25	; 0x14
    25e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	69 f7       	brne	.-38     	; 0x25ca <LCD_displayCharacter+0x7a0>
    25f0:	14 c0       	rjmp	.+40     	; 0x261a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f2:	6d 89       	ldd	r22, Y+21	; 0x15
    25f4:	7e 89       	ldd	r23, Y+22	; 0x16
    25f6:	8f 89       	ldd	r24, Y+23	; 0x17
    25f8:	98 8d       	ldd	r25, Y+24	; 0x18
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	98 8b       	std	Y+16, r25	; 0x10
    260c:	8f 87       	std	Y+15, r24	; 0x0f
    260e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2610:	98 89       	ldd	r25, Y+16	; 0x10
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <LCD_displayCharacter+0x7e8>
    2616:	98 8b       	std	Y+16, r25	; 0x10
    2618:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	8b 87       	std	Y+11, r24	; 0x0b
    262e:	9c 87       	std	Y+12, r25	; 0x0c
    2630:	ad 87       	std	Y+13, r26	; 0x0d
    2632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6b 85       	ldd	r22, Y+11	; 0x0b
    2636:	7c 85       	ldd	r23, Y+12	; 0x0c
    2638:	8d 85       	ldd	r24, Y+13	; 0x0d
    263a:	9e 85       	ldd	r25, Y+14	; 0x0e
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	55 e4       	ldi	r21, 0x45	; 69
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8f 83       	std	Y+7, r24	; 0x07
    264e:	98 87       	std	Y+8, r25	; 0x08
    2650:	a9 87       	std	Y+9, r26	; 0x09
    2652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_displayCharacter+0x8ac>
    26b8:	80 e9       	ldi	r24, 0x90	; 144
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_displayCharacter+0x89a>
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_displayCharacter+0x88e>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_displayCharacter+0x8d6>
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2708:	cd 59       	subi	r28, 0x9D	; 157
    270a:	df 4f       	sbci	r29, 0xFF	; 255
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	08 95       	ret

00002720 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <LCD_displayString+0x6>
    2726:	0f 92       	push	r0
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	9b 83       	std	Y+3, r25	; 0x03
    272e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2730:	19 82       	std	Y+1, r1	; 0x01
    2732:	0e c0       	rjmp	.+28     	; 0x2750 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	fc 01       	movw	r30, r24
    2740:	e2 0f       	add	r30, r18
    2742:	f3 1f       	adc	r31, r19
    2744:	80 81       	ld	r24, Z
    2746:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <LCD_displayCharacter>
		i++;
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	fc 01       	movw	r30, r24
    275c:	e2 0f       	add	r30, r18
    275e:	f3 1f       	adc	r31, r19
    2760:	80 81       	ld	r24, Z
    2762:	88 23       	and	r24, r24
    2764:	39 f7       	brne	.-50     	; 0x2734 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	00 d0       	rcall	.+0      	; 0x2778 <LCD_moveCursor+0x6>
    2778:	00 d0       	rcall	.+0      	; 0x277a <LCD_moveCursor+0x8>
    277a:	0f 92       	push	r0
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	8a 83       	std	Y+2, r24	; 0x02
    2782:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	28 2f       	mov	r18, r24
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	3d 83       	std	Y+5, r19	; 0x05
    278c:	2c 83       	std	Y+4, r18	; 0x04
    278e:	8c 81       	ldd	r24, Y+4	; 0x04
    2790:	9d 81       	ldd	r25, Y+5	; 0x05
    2792:	81 30       	cpi	r24, 0x01	; 1
    2794:	91 05       	cpc	r25, r1
    2796:	c1 f0       	breq	.+48     	; 0x27c8 <LCD_moveCursor+0x56>
    2798:	2c 81       	ldd	r18, Y+4	; 0x04
    279a:	3d 81       	ldd	r19, Y+5	; 0x05
    279c:	22 30       	cpi	r18, 0x02	; 2
    279e:	31 05       	cpc	r19, r1
    27a0:	2c f4       	brge	.+10     	; 0x27ac <LCD_moveCursor+0x3a>
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	61 f0       	breq	.+24     	; 0x27c2 <LCD_moveCursor+0x50>
    27aa:	19 c0       	rjmp	.+50     	; 0x27de <LCD_moveCursor+0x6c>
    27ac:	2c 81       	ldd	r18, Y+4	; 0x04
    27ae:	3d 81       	ldd	r19, Y+5	; 0x05
    27b0:	22 30       	cpi	r18, 0x02	; 2
    27b2:	31 05       	cpc	r19, r1
    27b4:	69 f0       	breq	.+26     	; 0x27d0 <LCD_moveCursor+0x5e>
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ba:	83 30       	cpi	r24, 0x03	; 3
    27bc:	91 05       	cpc	r25, r1
    27be:	61 f0       	breq	.+24     	; 0x27d8 <LCD_moveCursor+0x66>
    27c0:	0e c0       	rjmp	.+28     	; 0x27de <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	0b c0       	rjmp	.+22     	; 0x27de <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0xC0;
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	80 54       	subi	r24, 0x40	; 64
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	07 c0       	rjmp	.+14     	; 0x27de <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x94;
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	8c 56       	subi	r24, 0x6C	; 108
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	03 c0       	rjmp	.+6      	; 0x27de <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0xD4;
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	8c 52       	subi	r24, 0x2C	; 44
    27dc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	80 68       	ori	r24, 0x80	; 128
    27e2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_sendCommand>
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <LCD_displayStringRowColumn+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <LCD_displayStringRowColumn+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	6a 83       	std	Y+2, r22	; 0x02
    2806:	5c 83       	std	Y+4, r21	; 0x04
    2808:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	6a 81       	ldd	r22, Y+2	; 0x02
    280e:	0e 94 b9 13 	call	0x2772	; 0x2772 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_displayString>
}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	62 97       	sbiw	r28, 0x12	; 18
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	9a 8b       	std	Y+18, r25	; 0x12
    283e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2840:	89 89       	ldd	r24, Y+17	; 0x11
    2842:	9a 89       	ldd	r25, Y+18	; 0x12
    2844:	9e 01       	movw	r18, r28
    2846:	2f 5f       	subi	r18, 0xFF	; 255
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	b9 01       	movw	r22, r18
    284c:	4a e0       	ldi	r20, 0x0A	; 10
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <itoa>
   LCD_displayString(buff); /* Display the string */
    2854:	ce 01       	movw	r24, r28
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_displayString>
}
    285c:	62 96       	adiw	r28, 0x12	; 18
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	0e 94 9a 0a 	call	0x1534	; 0x1534 <LCD_sendCommand>
}
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <main>:
*/
/* "GET http://mahmoud.freevar.com/status.txt\r\n" */
/*Length = "43" */

int main(void)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	60 97       	sbiw	r28, 0x10	; 16
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
	/*init*/
	uint8 LEDMode = 12;
    2896:	8c e0       	ldi	r24, 0x0C	; 12
    2898:	88 8b       	std	Y+16, r24	; 0x10
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	aa e7       	ldi	r26, 0x7A	; 122
    28a0:	b3 e4       	ldi	r27, 0x43	; 67
    28a2:	8b 87       	std	Y+11, r24	; 0x0b
    28a4:	9c 87       	std	Y+12, r25	; 0x0c
    28a6:	ad 87       	std	Y+13, r26	; 0x0d
    28a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a e7       	ldi	r20, 0x7A	; 122
    28b8:	55 e4       	ldi	r21, 0x45	; 69
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8f 83       	std	Y+7, r24	; 0x07
    28c4:	98 87       	std	Y+8, r25	; 0x08
    28c6:	a9 87       	std	Y+9, r26	; 0x09
    28c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	2c f4       	brge	.+10     	; 0x28ec <main+0x6a>
		__ticks = 1;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	3f c0       	rjmp	.+126    	; 0x296a <main+0xe8>
	else if (__tmp > 65535)
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	4c f5       	brge	.+82     	; 0x2956 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	6b 85       	ldd	r22, Y+11	; 0x0b
    2906:	7c 85       	ldd	r23, Y+12	; 0x0c
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	9e 85       	ldd	r25, Y+14	; 0x0e
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
    292c:	0f c0       	rjmp	.+30     	; 0x294c <main+0xca>
    292e:	80 e9       	ldi	r24, 0x90	; 144
    2930:	91 e0       	ldi	r25, 0x01	; 1
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <main+0xb8>
    293e:	9c 83       	std	Y+4, r25	; 0x04
    2940:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	9e 81       	ldd	r25, Y+6	; 0x06
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f7       	brne	.-38     	; 0x292e <main+0xac>
    2954:	14 c0       	rjmp	.+40     	; 0x297e <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	9e 81       	ldd	r25, Y+6	; 0x06
    296e:	9a 83       	std	Y+2, r25	; 0x02
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <main+0xf4>
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
	uint8 test;
	_delay_ms(250);
	ESP_init();
    297e:	0e 94 a3 05 	call	0xb46	; 0xb46 <ESP_init>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	67 e0       	ldi	r22, 0x07	; 7
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 aa 06 	call	0xd54	; 0xd54 <GPIO_setupPinDirection>

	ESP_networkConnect("MQOTP 5528", "90900000");
    298c:	88 eb       	ldi	r24, 0xB8	; 184
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	23 ec       	ldi	r18, 0xC3	; 195
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	b9 01       	movw	r22, r18
    2996:	0e 94 ca 05 	call	0xb94	; 0xb94 <ESP_networkConnect>

	ESP_serverConnect("172.107.162.12", "80");
    299a:	8c ec       	ldi	r24, 0xCC	; 204
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	2b ed       	ldi	r18, 0xDB	; 219
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	b9 01       	movw	r22, r18
    29a4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <ESP_serverConnect>

	while(1)
	{
		LEDMode = ESP_receiveDataFromServer("43","GET http://mahmoud.freevar.com/status.txt\r\n");
    29a8:	8e ed       	ldi	r24, 0xDE	; 222
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	21 ee       	ldi	r18, 0xE1	; 225
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	b9 01       	movw	r22, r18
    29b2:	0e 94 26 06 	call	0xc4c	; 0xc4c <ESP_receiveDataFromServer>
    29b6:	88 8b       	std	Y+16, r24	; 0x10
		if(LEDMode == 1)
    29b8:	88 89       	ldd	r24, Y+16	; 0x10
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	31 f4       	brne	.+12     	; 0x29ca <main+0x148>
		{
			GPIO_writePin(PORTB_ID,PIN7_ID,LOGIC_HIGH);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	67 e0       	ldi	r22, 0x07	; 7
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
    29c8:	08 c0       	rjmp	.+16     	; 0x29da <main+0x158>
		}
		else if(LEDMode == 0)
    29ca:	88 89       	ldd	r24, Y+16	; 0x10
    29cc:	88 23       	and	r24, r24
    29ce:	29 f4       	brne	.+10     	; 0x29da <main+0x158>
		{
			GPIO_writePin(PORTB_ID,PIN7_ID,LOGIC_LOW);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	67 e0       	ldi	r22, 0x07	; 7
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	0e 94 95 07 	call	0xf2a	; 0xf2a <GPIO_writePin>
		}
		else
		{
			/*Do Nothing*/
		}
		ESP_serverConnect("172.107.162.12", "80");
    29da:	8c ec       	ldi	r24, 0xCC	; 204
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	2b ed       	ldi	r18, 0xDB	; 219
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	b9 01       	movw	r22, r18
    29e4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <ESP_serverConnect>
    29e8:	df cf       	rjmp	.-66     	; 0x29a8 <main+0x126>

000029ea <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <UART_init+0x6>
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <UART_init+0x8>
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <UART_init+0xa>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	6b 83       	std	Y+3, r22	; 0x03
    29fa:	7c 83       	std	Y+4, r23	; 0x04
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2a00:	1a 82       	std	Y+2, r1	; 0x02
    2a02:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a04:	eb e2       	ldi	r30, 0x2B	; 43
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a0c:	ea e2       	ldi	r30, 0x2A	; 42
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	88 e1       	ldi	r24, 0x18	; 24
    2a12:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2a14:	e0 e4       	ldi	r30, 0x40	; 64
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	86 e8       	ldi	r24, 0x86	; 134
    2a1a:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a20:	ad 81       	ldd	r26, Y+5	; 0x05
    2a22:	be 81       	ldd	r27, Y+6	; 0x06
    2a24:	88 0f       	add	r24, r24
    2a26:	99 1f       	adc	r25, r25
    2a28:	aa 1f       	adc	r26, r26
    2a2a:	bb 1f       	adc	r27, r27
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	aa 1f       	adc	r26, r26
    2a32:	bb 1f       	adc	r27, r27
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	aa 1f       	adc	r26, r26
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	9c 01       	movw	r18, r24
    2a3e:	ad 01       	movw	r20, r26
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	94 e2       	ldi	r25, 0x24	; 36
    2a44:	a4 ef       	ldi	r26, 0xF4	; 244
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodsi4>
    2a50:	da 01       	movw	r26, r20
    2a52:	c9 01       	movw	r24, r18
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2a5a:	e0 e4       	ldi	r30, 0x40	; 64
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	89 2f       	mov	r24, r25
    2a64:	99 27       	eor	r25, r25
    2a66:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2a68:	e9 e2       	ldi	r30, 0x29	; 41
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	80 83       	st	Z, r24
}
    2a70:	26 96       	adiw	r28, 0x06	; 6
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	0f 92       	push	r0
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2a8e:	eb e2       	ldi	r30, 0x2B	; 43
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	88 2f       	mov	r24, r24
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	80 72       	andi	r24, 0x20	; 32
    2a9a:	90 70       	andi	r25, 0x00	; 0
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	b9 f3       	breq	.-18     	; 0x2a8e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2aa0:	ec e2       	ldi	r30, 0x2C	; 44
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ab8:	eb e2       	ldi	r30, 0x2B	; 43
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	88 23       	and	r24, r24
    2ac0:	dc f7       	brge	.-10     	; 0x2ab8 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2ac2:	ec e2       	ldi	r30, 0x2C	; 44
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
}
    2ac8:	cf 91       	pop	r28
    2aca:	df 91       	pop	r29
    2acc:	08 95       	ret

00002ace <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ace:	df 93       	push	r29
    2ad0:	cf 93       	push	r28
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <UART_sendString+0x6>
    2ad4:	0f 92       	push	r0
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	9b 83       	std	Y+3, r25	; 0x03
    2adc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ade:	19 82       	std	Y+1, r1	; 0x01
    2ae0:	0e c0       	rjmp	.+28     	; 0x2afe <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	fc 01       	movw	r30, r24
    2aee:	e2 0f       	add	r30, r18
    2af0:	f3 1f       	adc	r31, r19
    2af2:	80 81       	ld	r24, Z
    2af4:	0e 94 41 15 	call	0x2a82	; 0x2a82 <UART_sendByte>
		i++;
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	8f 5f       	subi	r24, 0xFF	; 255
    2afc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e2 0f       	add	r30, r18
    2b0c:	f3 1f       	adc	r31, r19
    2b0e:	80 81       	ld	r24, Z
    2b10:	88 23       	and	r24, r24
    2b12:	39 f7       	brne	.-50     	; 0x2ae2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <UART_receiveString+0xa>
    2b2a:	0f 92       	push	r0
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	9b 83       	std	Y+3, r25	; 0x03
    2b32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b34:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b40:	8c 01       	movw	r16, r24
    2b42:	02 0f       	add	r16, r18
    2b44:	13 1f       	adc	r17, r19
    2b46:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	80 83       	st	Z, r24
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	8c 01       	movw	r16, r24
    2b62:	02 0f       	add	r16, r18
    2b64:	13 1f       	adc	r17, r19
    2b66:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <UART_receiveByte>
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	9b 81       	ldd	r25, Y+3	; 0x03
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e2 0f       	add	r30, r18
    2b7c:	f3 1f       	adc	r31, r19
    2b7e:	80 81       	ld	r24, Z
    2b80:	83 32       	cpi	r24, 0x23	; 35
    2b82:	31 f7       	brne	.-52     	; 0x2b50 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8e:	fc 01       	movw	r30, r24
    2b90:	e2 0f       	add	r30, r18
    2b92:	f3 1f       	adc	r31, r19
    2b94:	10 82       	st	Z, r1
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	1f 91       	pop	r17
    2ba2:	0f 91       	pop	r16
    2ba4:	08 95       	ret

00002ba6 <__udivmodsi4>:
    2ba6:	a1 e2       	ldi	r26, 0x21	; 33
    2ba8:	1a 2e       	mov	r1, r26
    2baa:	aa 1b       	sub	r26, r26
    2bac:	bb 1b       	sub	r27, r27
    2bae:	fd 01       	movw	r30, r26
    2bb0:	0d c0       	rjmp	.+26     	; 0x2bcc <__udivmodsi4_ep>

00002bb2 <__udivmodsi4_loop>:
    2bb2:	aa 1f       	adc	r26, r26
    2bb4:	bb 1f       	adc	r27, r27
    2bb6:	ee 1f       	adc	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	a2 17       	cp	r26, r18
    2bbc:	b3 07       	cpc	r27, r19
    2bbe:	e4 07       	cpc	r30, r20
    2bc0:	f5 07       	cpc	r31, r21
    2bc2:	20 f0       	brcs	.+8      	; 0x2bcc <__udivmodsi4_ep>
    2bc4:	a2 1b       	sub	r26, r18
    2bc6:	b3 0b       	sbc	r27, r19
    2bc8:	e4 0b       	sbc	r30, r20
    2bca:	f5 0b       	sbc	r31, r21

00002bcc <__udivmodsi4_ep>:
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	1a 94       	dec	r1
    2bd6:	69 f7       	brne	.-38     	; 0x2bb2 <__udivmodsi4_loop>
    2bd8:	60 95       	com	r22
    2bda:	70 95       	com	r23
    2bdc:	80 95       	com	r24
    2bde:	90 95       	com	r25
    2be0:	9b 01       	movw	r18, r22
    2be2:	ac 01       	movw	r20, r24
    2be4:	bd 01       	movw	r22, r26
    2be6:	cf 01       	movw	r24, r30
    2be8:	08 95       	ret

00002bea <__prologue_saves__>:
    2bea:	2f 92       	push	r2
    2bec:	3f 92       	push	r3
    2bee:	4f 92       	push	r4
    2bf0:	5f 92       	push	r5
    2bf2:	6f 92       	push	r6
    2bf4:	7f 92       	push	r7
    2bf6:	8f 92       	push	r8
    2bf8:	9f 92       	push	r9
    2bfa:	af 92       	push	r10
    2bfc:	bf 92       	push	r11
    2bfe:	cf 92       	push	r12
    2c00:	df 92       	push	r13
    2c02:	ef 92       	push	r14
    2c04:	ff 92       	push	r15
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	ca 1b       	sub	r28, r26
    2c14:	db 0b       	sbc	r29, r27
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	09 94       	ijmp

00002c22 <__epilogue_restores__>:
    2c22:	2a 88       	ldd	r2, Y+18	; 0x12
    2c24:	39 88       	ldd	r3, Y+17	; 0x11
    2c26:	48 88       	ldd	r4, Y+16	; 0x10
    2c28:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c30:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c32:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c34:	b9 84       	ldd	r11, Y+9	; 0x09
    2c36:	c8 84       	ldd	r12, Y+8	; 0x08
    2c38:	df 80       	ldd	r13, Y+7	; 0x07
    2c3a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c3c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c3e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c40:	1b 81       	ldd	r17, Y+3	; 0x03
    2c42:	aa 81       	ldd	r26, Y+2	; 0x02
    2c44:	b9 81       	ldd	r27, Y+1	; 0x01
    2c46:	ce 0f       	add	r28, r30
    2c48:	d1 1d       	adc	r29, r1
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	ed 01       	movw	r28, r26
    2c56:	08 95       	ret

00002c58 <strtok>:
    2c58:	46 e1       	ldi	r20, 0x16	; 22
    2c5a:	51 e0       	ldi	r21, 0x01	; 1
    2c5c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <strtok_r>
    2c60:	08 95       	ret

00002c62 <strtok_r>:
    2c62:	fa 01       	movw	r30, r20
    2c64:	a1 91       	ld	r26, Z+
    2c66:	b0 81       	ld	r27, Z
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	19 f4       	brne	.+6      	; 0x2c72 <strtok_r+0x10>
    2c6c:	10 97       	sbiw	r26, 0x00	; 0
    2c6e:	e1 f0       	breq	.+56     	; 0x2ca8 <strtok_r+0x46>
    2c70:	cd 01       	movw	r24, r26
    2c72:	dc 01       	movw	r26, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0d 90       	ld	r0, X+
    2c78:	00 20       	and	r0, r0
    2c7a:	11 f4       	brne	.+4      	; 0x2c80 <strtok_r+0x1e>
    2c7c:	c0 01       	movw	r24, r0
    2c7e:	13 c0       	rjmp	.+38     	; 0x2ca6 <strtok_r+0x44>
    2c80:	fb 01       	movw	r30, r22
    2c82:	21 91       	ld	r18, Z+
    2c84:	22 23       	and	r18, r18
    2c86:	19 f0       	breq	.+6      	; 0x2c8e <strtok_r+0x2c>
    2c88:	20 15       	cp	r18, r0
    2c8a:	d9 f7       	brne	.-10     	; 0x2c82 <strtok_r+0x20>
    2c8c:	f3 cf       	rjmp	.-26     	; 0x2c74 <strtok_r+0x12>
    2c8e:	fb 01       	movw	r30, r22
    2c90:	21 91       	ld	r18, Z+
    2c92:	20 15       	cp	r18, r0
    2c94:	19 f4       	brne	.+6      	; 0x2c9c <strtok_r+0x3a>
    2c96:	1e 92       	st	-X, r1
    2c98:	11 96       	adiw	r26, 0x01	; 1
    2c9a:	06 c0       	rjmp	.+12     	; 0x2ca8 <strtok_r+0x46>
    2c9c:	22 23       	and	r18, r18
    2c9e:	c1 f7       	brne	.-16     	; 0x2c90 <strtok_r+0x2e>
    2ca0:	0d 90       	ld	r0, X+
    2ca2:	00 20       	and	r0, r0
    2ca4:	a1 f7       	brne	.-24     	; 0x2c8e <strtok_r+0x2c>
    2ca6:	d0 01       	movw	r26, r0
    2ca8:	fa 01       	movw	r30, r20
    2caa:	a1 93       	st	Z+, r26
    2cac:	b0 83       	st	Z, r27
    2cae:	08 95       	ret

00002cb0 <itoa>:
    2cb0:	fb 01       	movw	r30, r22
    2cb2:	9f 01       	movw	r18, r30
    2cb4:	e8 94       	clt
    2cb6:	42 30       	cpi	r20, 0x02	; 2
    2cb8:	c4 f0       	brlt	.+48     	; 0x2cea <itoa+0x3a>
    2cba:	45 32       	cpi	r20, 0x25	; 37
    2cbc:	b4 f4       	brge	.+44     	; 0x2cea <itoa+0x3a>
    2cbe:	4a 30       	cpi	r20, 0x0A	; 10
    2cc0:	29 f4       	brne	.+10     	; 0x2ccc <itoa+0x1c>
    2cc2:	97 fb       	bst	r25, 7
    2cc4:	1e f4       	brtc	.+6      	; 0x2ccc <itoa+0x1c>
    2cc6:	90 95       	com	r25
    2cc8:	81 95       	neg	r24
    2cca:	9f 4f       	sbci	r25, 0xFF	; 255
    2ccc:	64 2f       	mov	r22, r20
    2cce:	77 27       	eor	r23, r23
    2cd0:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__udivmodhi4>
    2cd4:	80 5d       	subi	r24, 0xD0	; 208
    2cd6:	8a 33       	cpi	r24, 0x3A	; 58
    2cd8:	0c f0       	brlt	.+2      	; 0x2cdc <itoa+0x2c>
    2cda:	89 5d       	subi	r24, 0xD9	; 217
    2cdc:	81 93       	st	Z+, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	a1 f7       	brne	.-24     	; 0x2ccc <itoa+0x1c>
    2ce4:	16 f4       	brtc	.+4      	; 0x2cea <itoa+0x3a>
    2ce6:	5d e2       	ldi	r21, 0x2D	; 45
    2ce8:	51 93       	st	Z+, r21
    2cea:	10 82       	st	Z, r1
    2cec:	c9 01       	movw	r24, r18
    2cee:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <strrev>

00002cf2 <strrev>:
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	67 2f       	mov	r22, r23
    2cf8:	71 91       	ld	r23, Z+
    2cfa:	77 23       	and	r23, r23
    2cfc:	e1 f7       	brne	.-8      	; 0x2cf6 <strrev+0x4>
    2cfe:	32 97       	sbiw	r30, 0x02	; 2
    2d00:	04 c0       	rjmp	.+8      	; 0x2d0a <strrev+0x18>
    2d02:	7c 91       	ld	r23, X
    2d04:	6d 93       	st	X+, r22
    2d06:	70 83       	st	Z, r23
    2d08:	62 91       	ld	r22, -Z
    2d0a:	ae 17       	cp	r26, r30
    2d0c:	bf 07       	cpc	r27, r31
    2d0e:	c8 f3       	brcs	.-14     	; 0x2d02 <strrev+0x10>
    2d10:	08 95       	ret

00002d12 <__udivmodhi4>:
    2d12:	aa 1b       	sub	r26, r26
    2d14:	bb 1b       	sub	r27, r27
    2d16:	51 e1       	ldi	r21, 0x11	; 17
    2d18:	07 c0       	rjmp	.+14     	; 0x2d28 <__udivmodhi4_ep>

00002d1a <__udivmodhi4_loop>:
    2d1a:	aa 1f       	adc	r26, r26
    2d1c:	bb 1f       	adc	r27, r27
    2d1e:	a6 17       	cp	r26, r22
    2d20:	b7 07       	cpc	r27, r23
    2d22:	10 f0       	brcs	.+4      	; 0x2d28 <__udivmodhi4_ep>
    2d24:	a6 1b       	sub	r26, r22
    2d26:	b7 0b       	sbc	r27, r23

00002d28 <__udivmodhi4_ep>:
    2d28:	88 1f       	adc	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	5a 95       	dec	r21
    2d2e:	a9 f7       	brne	.-22     	; 0x2d1a <__udivmodhi4_loop>
    2d30:	80 95       	com	r24
    2d32:	90 95       	com	r25
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	08 95       	ret

00002d3a <_exit>:
    2d3a:	f8 94       	cli

00002d3c <__stop_program>:
    2d3c:	ff cf       	rjmp	.-2      	; 0x2d3c <__stop_program>
