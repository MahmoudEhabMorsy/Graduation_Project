
test_yasser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000392a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000392a  000039be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00800060  00800060  000039be  2**0
                  ALLOC
  3 .stab         00004404  00000000  00000000  000039c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cac  00000000  00000000  00007dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00009a70  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00009aa0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00009adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00009fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000a465  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000a47f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_4>
      14:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_5>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_7>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_9>
      28:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_10>
      2c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a4 3b       	cpi	r26, 0xB4	; 180
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 af 08 	call	0x115e	; 0x115e <main>
      74:	0c 94 93 1c 	jmp	0x3926	; 0x3926 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TWI_init>:
 * 																		*
 * [Args]							*
 * [Return]															*
 *======================================================================*/

void TWI_init(void) {
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate Configuration */
#if BIT_RATE >= MINIMUM_BIT_RATE
	TWBR = BIT_RATE;
      84:	80 e2       	ldi	r24, 0x20	; 32
      86:	90 e0       	ldi	r25, 0x00	; 0
      88:	28 e4       	ldi	r18, 0x48	; 72
      8a:	fc 01       	movw	r30, r24
      8c:	20 83       	st	Z, r18
#else
#error "Invalid I2C bit rate configuration. Minimum bit rate allowed is 10."
#endif
	/* Prescaler Configuration */
#if PRESCALER_1 == PRESCALER
	CLEAR_BIT(TWSR, TWPS1);
      8e:	81 e2       	ldi	r24, 0x21	; 33
      90:	90 e0       	ldi	r25, 0x00	; 0
      92:	fc 01       	movw	r30, r24
      94:	20 81       	ld	r18, Z
      96:	81 e2       	ldi	r24, 0x21	; 33
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	2d 7f       	andi	r18, 0xFD	; 253
      9c:	fc 01       	movw	r30, r24
      9e:	20 83       	st	Z, r18
	CLEAR_BIT(TWSR, TWPS0);
      a0:	81 e2       	ldi	r24, 0x21	; 33
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	fc 01       	movw	r30, r24
      a6:	20 81       	ld	r18, Z
      a8:	81 e2       	ldi	r24, 0x21	; 33
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	2e 7f       	andi	r18, 0xFE	; 254
      ae:	fc 01       	movw	r30, r24
      b0:	20 83       	st	Z, r18
#else
#error "Invalid I2C prescaler configuration"
#endif
	/* Slave Address Configuration */
#if SLAVE_ADDRESS >= MINIMUM_ADDRESS && SLAVE_ADDRESS <= MAXIMUM_ADDRESS
	TWAR = (SLAVE_ADDRESS << 1);
      b2:	82 e2       	ldi	r24, 0x22	; 34
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	26 e0       	ldi	r18, 0x06	; 6
      b8:	fc 01       	movw	r30, r24
      ba:	20 83       	st	Z, r18
#error "Invalid I2C slave address configuration (out of range)."
#endif
#if ENABLE_GENERAL_CALL == GENERAL_CALL
	SET_BIT(TWAR, TWGCE);
#elif DISABLE_GENERAL_CALL == GENERAL_CALL
	CLEAR_BIT(TWAR, TWGCE);
      bc:	82 e2       	ldi	r24, 0x22	; 34
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	fc 01       	movw	r30, r24
      c2:	20 81       	ld	r18, Z
      c4:	82 e2       	ldi	r24, 0x22	; 34
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	2e 7f       	andi	r18, 0xFE	; 254
      ca:	fc 01       	movw	r30, r24
      cc:	20 83       	st	Z, r18
#else
#error "Invalid general call configuration"
#endif
	/* Enable I2C Peripheral */
	SET_BIT(TWCR, TWEN);
      ce:	86 e5       	ldi	r24, 0x56	; 86
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	fc 01       	movw	r30, r24
      d4:	20 81       	ld	r18, Z
      d6:	86 e5       	ldi	r24, 0x56	; 86
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	24 60       	ori	r18, 0x04	; 4
      dc:	fc 01       	movw	r30, r24
      de:	20 83       	st	Z, r18
}
      e0:	00 00       	nop
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <TWI_Start>:
 * 																		*
 * [Args]		uint8 slave_write_adress						*
 * [Return]															*
 *======================================================================*/

uint8 TWI_Start(uint8 slave_write_adress) {
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	00 d0       	rcall	.+0      	; 0xee <TWI_Start+0x6>
      ee:	cd b7       	in	r28, 0x3d	; 61
      f0:	de b7       	in	r29, 0x3e	; 62
      f2:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
      f4:	86 e5       	ldi	r24, 0x56	; 86
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	24 ea       	ldi	r18, 0xA4	; 164
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
      fe:	00 00       	nop
     100:	86 e5       	ldi	r24, 0x56	; 86
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	fc 01       	movw	r30, r24
     106:	80 81       	ld	r24, Z
     108:	88 23       	and	r24, r24
     10a:	d4 f7       	brge	.-12     	; 0x100 <TWI_Start+0x18>
		;
	status = TWI_getStatus();
     10c:	0e 94 88 01 	call	0x310	; 0x310 <TWI_getStatus>
     110:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	88 30       	cpi	r24, 0x08	; 8
     116:	11 f0       	breq	.+4      	; 0x11c <TWI_Start+0x34>
		return 0;
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	1f c0       	rjmp	.+62     	; 0x15a <TWI_Start+0x72>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     11c:	83 e2       	ldi	r24, 0x23	; 35
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	2a 81       	ldd	r18, Y+2	; 0x02
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     126:	86 e5       	ldi	r24, 0x56	; 86
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	24 e8       	ldi	r18, 0x84	; 132
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
	while (BIT_IS_CLEAR(TWCR, TWINT))
     130:	00 00       	nop
     132:	86 e5       	ldi	r24, 0x56	; 86
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	88 23       	and	r24, r24
     13c:	d4 f7       	brge	.-12     	; 0x132 <TWI_Start+0x4a>
		;
	status = TWI_getStatus();
     13e:	0e 94 88 01 	call	0x310	; 0x310 <TWI_getStatus>
     142:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	88 31       	cpi	r24, 0x18	; 24
     148:	11 f4       	brne	.+4      	; 0x14e <TWI_Start+0x66>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	06 c0       	rjmp	.+12     	; 0x15a <TWI_Start+0x72>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	80 32       	cpi	r24, 0x20	; 32
     152:	11 f4       	brne	.+4      	; 0x158 <TWI_Start+0x70>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	01 c0       	rjmp	.+2      	; 0x15a <TWI_Start+0x72>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     158:	83 e0       	ldi	r24, 0x03	; 3
}
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <TWI_Repeated_start>:
 * [Description]:	Function responsible for re-start the TWI communication.*
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
uint8 TWI_Repeated_start(uint8 slave_write_adress) {
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <TWI_Repeated_start+0x6>
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     170:	86 e5       	ldi	r24, 0x56	; 86
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	24 ea       	ldi	r18, 0xA4	; 164
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     17a:	00 00       	nop
     17c:	86 e5       	ldi	r24, 0x56	; 86
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	fc 01       	movw	r30, r24
     182:	80 81       	ld	r24, Z
     184:	88 23       	and	r24, r24
     186:	d4 f7       	brge	.-12     	; 0x17c <TWI_Repeated_start+0x18>
		;
	status = TWI_getStatus();
     188:	0e 94 88 01 	call	0x310	; 0x310 <TWI_getStatus>
     18c:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_REP_START) /* Check weather start condition transmitted successfully or not? */
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	80 31       	cpi	r24, 0x10	; 16
     192:	11 f0       	breq	.+4      	; 0x198 <TWI_Repeated_start+0x34>
		return 0;
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	1f c0       	rjmp	.+62     	; 0x1d6 <TWI_Repeated_start+0x72>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     198:	83 e2       	ldi	r24, 0x23	; 35
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2a 81       	ldd	r18, Y+2	; 0x02
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     1a2:	86 e5       	ldi	r24, 0x56	; 86
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	24 e8       	ldi	r18, 0x84	; 132
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
	while (BIT_IS_CLEAR(TWCR, TWINT))
     1ac:	00 00       	nop
     1ae:	86 e5       	ldi	r24, 0x56	; 86
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	fc 01       	movw	r30, r24
     1b4:	80 81       	ld	r24, Z
     1b6:	88 23       	and	r24, r24
     1b8:	d4 f7       	brge	.-12     	; 0x1ae <TWI_Repeated_start+0x4a>
		;
	status = TWI_getStatus();
     1ba:	0e 94 88 01 	call	0x310	; 0x310 <TWI_getStatus>
     1be:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_R_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	80 34       	cpi	r24, 0x40	; 64
     1c4:	11 f4       	brne	.+4      	; 0x1ca <TWI_Repeated_start+0x66>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <TWI_Repeated_start+0x72>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	80 32       	cpi	r24, 0x20	; 32
     1ce:	11 f4       	brne	.+4      	; 0x1d4 <TWI_Repeated_start+0x70>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <TWI_Repeated_start+0x72>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     1d4:	83 e0       	ldi	r24, 0x03	; 3
}
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <TWI_Start_Wait>:
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <TWI_Start_Wait+0x6>
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
     1ec:	86 e5       	ldi	r24, 0x56	; 86
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	24 ea       	ldi	r18, 0xA4	; 164
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
		while (BIT_IS_CLEAR(TWCR, TWINT))
     1f6:	00 00       	nop
     1f8:	86 e5       	ldi	r24, 0x56	; 86
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	fc 01       	movw	r30, r24
     1fe:	80 81       	ld	r24, Z
     200:	88 23       	and	r24, r24
     202:	d4 f7       	brge	.-12     	; 0x1f8 <TWI_Start_Wait+0x18>
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
     204:	81 e2       	ldi	r24, 0x21	; 33
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	fc 01       	movw	r30, r24
     20a:	80 81       	ld	r24, Z
     20c:	88 7f       	andi	r24, 0xF8	; 248
     20e:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	88 30       	cpi	r24, 0x08	; 8
     214:	e9 f4       	brne	.+58     	; 0x250 <TWI_Start_Wait+0x70>
			continue; /* If no then continue with start loop again */
		TWDR = slave_write_address; /* If yes then write SLA+W in TWI data register */
     216:	83 e2       	ldi	r24, 0x23	; 35
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2a 81       	ldd	r18, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
		TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     220:	86 e5       	ldi	r24, 0x56	; 86
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	24 e8       	ldi	r18, 0x84	; 132
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
		while (BIT_IS_CLEAR(TWCR, TWINT))
     22a:	00 00       	nop
     22c:	86 e5       	ldi	r24, 0x56	; 86
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	88 23       	and	r24, r24
     236:	d4 f7       	brge	.-12     	; 0x22c <TWI_Start_Wait+0x4c>
			; /* Wait until TWI finish its current job (Write operation) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
     238:	81 e2       	ldi	r24, 0x21	; 33
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	fc 01       	movw	r30, r24
     23e:	80 81       	ld	r24, Z
     240:	88 7f       	andi	r24, 0xF8	; 248
     242:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 31       	cpi	r24, 0x18	; 24
     248:	29 f0       	breq	.+10     	; 0x254 <TWI_Start_Wait+0x74>
		{
			TWI_Stop(); /* If not then generate stop condition */
     24a:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
			continue; /* continue with start loop again */
     24e:	01 c0       	rjmp	.+2      	; 0x252 <TWI_Start_Wait+0x72>
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
		while (BIT_IS_CLEAR(TWCR, TWINT))
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
			continue; /* If no then continue with start loop again */
     250:	00 00       	nop
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
     252:	cc cf       	rjmp	.-104    	; 0x1ec <TWI_Start_Wait+0xc>
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
		{
			TWI_Stop(); /* If not then generate stop condition */
			continue; /* continue with start loop again */
		}
		break; /* If yes then break loop */
     254:	00 00       	nop
	}
}
     256:	00 00       	nop
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <TWI_Stop>:
 * [Description]:	Function responsible for stop the TWI communication *
 * 																*
 * [Args]		void											*
 * [Return]			void										*
 *======================================================================*/
void TWI_Stop(void) {
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     26a:	86 e5       	ldi	r24, 0x56	; 86
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	24 e9       	ldi	r18, 0x94	; 148
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18
}
     274:	00 00       	nop
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <TWI_WriteByte>:
 * [Description]:	Function responsible for sending 1 byte *
 * 																*
 * [Args]		uint8 data											*
 * [Return]			void										*
 *======================================================================*/
void TWI_WriteByte(uint8 data) {
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	1f 92       	push	r1
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
     288:	83 e2       	ldi	r24, 0x23	; 35
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	29 81       	ldd	r18, Y+1	; 0x01
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     292:	86 e5       	ldi	r24, 0x56	; 86
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	24 e8       	ldi	r18, 0x84	; 132
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     29c:	00 00       	nop
     29e:	86 e5       	ldi	r24, 0x56	; 86
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	80 81       	ld	r24, Z
     2a6:	88 23       	and	r24, r24
     2a8:	d4 f7       	brge	.-12     	; 0x29e <TWI_WriteByte+0x22>
		;
}
     2aa:	00 00       	nop
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <TWI_ReadByteWithACK>:
 * [Description]:	Function responsible for reading 1 byte with ack *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithACK(void) {
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     2bc:	86 e5       	ldi	r24, 0x56	; 86
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	24 ec       	ldi	r18, 0xC4	; 196
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     2c6:	00 00       	nop
     2c8:	86 e5       	ldi	r24, 0x56	; 86
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	fc 01       	movw	r30, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	88 23       	and	r24, r24
     2d2:	d4 f7       	brge	.-12     	; 0x2c8 <TWI_ReadByteWithACK+0x14>
		;
	/* Read Data */
	return TWDR;
     2d4:	83 e2       	ldi	r24, 0x23	; 35
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc 01       	movw	r30, r24
     2da:	80 81       	ld	r24, Z
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <TWI_ReadByteWithNACK>:
 * [Description]:	Function responsible for reading 1 byte with NACK *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithNACK(void) {
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     2ea:	86 e5       	ldi	r24, 0x56	; 86
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	24 e8       	ldi	r18, 0x84	; 132
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 83       	st	Z, r18
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     2f4:	00 00       	nop
     2f6:	86 e5       	ldi	r24, 0x56	; 86
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	fc 01       	movw	r30, r24
     2fc:	80 81       	ld	r24, Z
     2fe:	88 23       	and	r24, r24
     300:	d4 f7       	brge	.-12     	; 0x2f6 <TWI_ReadByteWithNACK+0x14>
		;
	/* Read Data */
	return TWDR;
     302:	83 e2       	ldi	r24, 0x23	; 35
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	fc 01       	movw	r30, r24
     308:	80 81       	ld	r24, Z
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <TWI_getStatus>:
 * [Description]:	FET STATUS from TWSR register *
 * 																*
 * [Args]													*
 * [Return]			uint8 status									*
 *======================================================================*/
uint8 TWI_getStatus(void) {
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	1f 92       	push	r1
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
     31a:	81 e2       	ldi	r24, 0x21	; 33
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	88 7f       	andi	r24, 0xF8	; 248
     324:	89 83       	std	Y+1, r24	; 0x01
	return status;
     326:	89 81       	ldd	r24, Y+1	; 0x01
}
     328:	0f 90       	pop	r0
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <__vector_11>:
/********************************************************/
/*                     ISRs                              */
/********************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
     330:	1f 92       	push	r1
     332:	0f 92       	push	r0
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	2f 93       	push	r18
     33c:	3f 93       	push	r19
     33e:	4f 93       	push	r20
     340:	5f 93       	push	r21
     342:	6f 93       	push	r22
     344:	7f 93       	push	r23
     346:	8f 93       	push	r24
     348:	9f 93       	push	r25
     34a:	af 93       	push	r26
     34c:	bf 93       	push	r27
     34e:	ef 93       	push	r30
     350:	ff 93       	push	r31
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
     35a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     35e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     362:	89 2b       	or	r24, r25
     364:	31 f0       	breq	.+12     	; 0x372 <__vector_11+0x42>
		(*g_Timer0CallBackPtr)();
     366:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     36a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     36e:	fc 01       	movw	r30, r24
     370:	09 95       	icall
	}
}
     372:	00 00       	nop
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_10>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	4f 93       	push	r20
     3aa:	5f 93       	push	r21
     3ac:	6f 93       	push	r22
     3ae:	7f 93       	push	r23
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	af 93       	push	r26
     3b6:	bf 93       	push	r27
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
     3c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3c8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3cc:	89 2b       	or	r24, r25
     3ce:	31 f0       	breq	.+12     	; 0x3dc <__vector_10+0x42>
		(*g_Timer0CallBackPtr)();
     3d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3d4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3d8:	fc 01       	movw	r30, r24
     3da:	09 95       	icall
	}
}
     3dc:	00 00       	nop
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	ff 91       	pop	r31
     3e4:	ef 91       	pop	r30
     3e6:	bf 91       	pop	r27
     3e8:	af 91       	pop	r26
     3ea:	9f 91       	pop	r25
     3ec:	8f 91       	pop	r24
     3ee:	7f 91       	pop	r23
     3f0:	6f 91       	pop	r22
     3f2:	5f 91       	pop	r21
     3f4:	4f 91       	pop	r20
     3f6:	3f 91       	pop	r19
     3f8:	2f 91       	pop	r18
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <__vector_9>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
     42e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_Timer1CallBackPtr>
     432:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <g_Timer1CallBackPtr+0x1>
     436:	89 2b       	or	r24, r25
     438:	31 f0       	breq	.+12     	; 0x446 <__vector_9+0x42>
		(*g_Timer1CallBackPtr)();
     43a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_Timer1CallBackPtr>
     43e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <g_Timer1CallBackPtr+0x1>
     442:	fc 01       	movw	r30, r24
     444:	09 95       	icall
	}
}
     446:	00 00       	nop
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	ff 91       	pop	r31
     44e:	ef 91       	pop	r30
     450:	bf 91       	pop	r27
     452:	af 91       	pop	r26
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	7f 91       	pop	r23
     45a:	6f 91       	pop	r22
     45c:	5f 91       	pop	r21
     45e:	4f 91       	pop	r20
     460:	3f 91       	pop	r19
     462:	2f 91       	pop	r18
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	2f 93       	push	r18
     47a:	3f 93       	push	r19
     47c:	4f 93       	push	r20
     47e:	5f 93       	push	r21
     480:	6f 93       	push	r22
     482:	7f 93       	push	r23
     484:	8f 93       	push	r24
     486:	9f 93       	push	r25
     488:	af 93       	push	r26
     48a:	bf 93       	push	r27
     48c:	ef 93       	push	r30
     48e:	ff 93       	push	r31
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
     498:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_Timer1CallBackPtr>
     49c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <g_Timer1CallBackPtr+0x1>
     4a0:	89 2b       	or	r24, r25
     4a2:	31 f0       	breq	.+12     	; 0x4b0 <__vector_7+0x42>
		(*g_Timer1CallBackPtr)();
     4a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_Timer1CallBackPtr>
     4a8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <g_Timer1CallBackPtr+0x1>
     4ac:	fc 01       	movw	r30, r24
     4ae:	09 95       	icall
	}
}
     4b0:	00 00       	nop
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	ff 91       	pop	r31
     4b8:	ef 91       	pop	r30
     4ba:	bf 91       	pop	r27
     4bc:	af 91       	pop	r26
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	7f 91       	pop	r23
     4c4:	6f 91       	pop	r22
     4c6:	5f 91       	pop	r21
     4c8:	4f 91       	pop	r20
     4ca:	3f 91       	pop	r19
     4cc:	2f 91       	pop	r18
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <__vector_5>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
     502:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_Timer2CallBackPtr>
     506:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <g_Timer2CallBackPtr+0x1>
     50a:	89 2b       	or	r24, r25
     50c:	31 f0       	breq	.+12     	; 0x51a <__vector_5+0x42>
		(*g_Timer2CallBackPtr)();
     50e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_Timer2CallBackPtr>
     512:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <g_Timer2CallBackPtr+0x1>
     516:	fc 01       	movw	r30, r24
     518:	09 95       	icall
	}
}
     51a:	00 00       	nop
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	ff 91       	pop	r31
     522:	ef 91       	pop	r30
     524:	bf 91       	pop	r27
     526:	af 91       	pop	r26
     528:	9f 91       	pop	r25
     52a:	8f 91       	pop	r24
     52c:	7f 91       	pop	r23
     52e:	6f 91       	pop	r22
     530:	5f 91       	pop	r21
     532:	4f 91       	pop	r20
     534:	3f 91       	pop	r19
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <__vector_4>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	0f 92       	push	r0
     54a:	11 24       	eor	r1, r1
     54c:	2f 93       	push	r18
     54e:	3f 93       	push	r19
     550:	4f 93       	push	r20
     552:	5f 93       	push	r21
     554:	6f 93       	push	r22
     556:	7f 93       	push	r23
     558:	8f 93       	push	r24
     55a:	9f 93       	push	r25
     55c:	af 93       	push	r26
     55e:	bf 93       	push	r27
     560:	ef 93       	push	r30
     562:	ff 93       	push	r31
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
     56c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_Timer2CallBackPtr>
     570:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <g_Timer2CallBackPtr+0x1>
     574:	89 2b       	or	r24, r25
     576:	31 f0       	breq	.+12     	; 0x584 <__vector_4+0x42>
		(*g_Timer2CallBackPtr)();
     578:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_Timer2CallBackPtr>
     57c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <g_Timer2CallBackPtr+0x1>
     580:	fc 01       	movw	r30, r24
     582:	09 95       	icall
	}
}
     584:	00 00       	nop
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <Timer_init>:

/********************************************************/
/* Functions Implementation */
/********************************************************/

void Timer_init(const Timer_configuration *timer_config){
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <Timer_init+0x6>
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	fc 01       	movw	r30, r24
     5c0:	80 81       	ld	r24, Z
     5c2:	88 23       	and	r24, r24
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <Timer_init+0x1c>
     5c6:	79 c0       	rjmp	.+242    	; 0x6ba <Timer_init+0x10e>

		TCNT0 = timer_config->initialValue;
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	9a 81       	ldd	r25, Y+2	; 0x02
     5cc:	fc 01       	movw	r30, r24
     5ce:	22 81       	ldd	r18, Z+2	; 0x02
     5d0:	33 81       	ldd	r19, Z+3	; 0x03
     5d2:	82 e5       	ldi	r24, 0x52	; 82
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
		TCCR0 = 0;
     5da:	83 e5       	ldi	r24, 0x53	; 83
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
     5e2:	83 e5       	ldi	r24, 0x53	; 83
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	fc 01       	movw	r30, r24
     5e8:	30 81       	ld	r19, Z
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	fc 01       	movw	r30, r24
     5f0:	26 81       	ldd	r18, Z+6	; 0x06
     5f2:	83 e5       	ldi	r24, 0x53	; 83
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	23 2b       	or	r18, r19
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18

		if (timer_config->mode == Normal){
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	fc 01       	movw	r30, r24
     602:	81 81       	ldd	r24, Z+1	; 0x01
     604:	88 23       	and	r24, r24
     606:	e1 f4       	brne	.+56     	; 0x640 <Timer_init+0x94>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
     608:	83 e5       	ldi	r24, 0x53	; 83
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	20 81       	ld	r18, Z
     610:	83 e5       	ldi	r24, 0x53	; 83
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	20 68       	ori	r18, 0x80	; 128
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
     61a:	89 e5       	ldi	r24, 0x59	; 89
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	20 81       	ld	r18, Z
     622:	89 e5       	ldi	r24, 0x59	; 89
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	21 60       	ori	r18, 0x01	; 1
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
     62c:	88 e5       	ldi	r24, 0x58	; 88
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	20 81       	ld	r18, Z
     634:	88 e5       	ldi	r24, 0x58	; 88
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	21 60       	ori	r18, 0x01	; 1
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
     63e:	33 c0       	rjmp	.+102    	; 0x6a6 <Timer_init+0xfa>

		}else if (timer_config->mode == CTC){
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	fc 01       	movw	r30, r24
     646:	81 81       	ldd	r24, Z+1	; 0x01
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	69 f5       	brne	.+90     	; 0x6a6 <Timer_init+0xfa>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
     64c:	83 e5       	ldi	r24, 0x53	; 83
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	20 81       	ld	r18, Z
     654:	83 e5       	ldi	r24, 0x53	; 83
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	20 68       	ori	r18, 0x80	; 128
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
			SET_BIT(TCCR0,WGM01);
     65e:	83 e5       	ldi	r24, 0x53	; 83
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	fc 01       	movw	r30, r24
     664:	20 81       	ld	r18, Z
     666:	83 e5       	ldi	r24, 0x53	; 83
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	28 60       	ori	r18, 0x08	; 8
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
			OCR0 = timer_config->compareValue;
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	fc 01       	movw	r30, r24
     676:	24 81       	ldd	r18, Z+4	; 0x04
     678:	35 81       	ldd	r19, Z+5	; 0x05
     67a:	8c e5       	ldi	r24, 0x5C	; 92
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
     682:	89 e5       	ldi	r24, 0x59	; 89
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	fc 01       	movw	r30, r24
     688:	20 81       	ld	r18, Z
     68a:	89 e5       	ldi	r24, 0x59	; 89
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	22 60       	ori	r18, 0x02	; 2
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
     694:	88 e5       	ldi	r24, 0x58	; 88
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	fc 01       	movw	r30, r24
     69a:	20 81       	ld	r18, Z
     69c:	88 e5       	ldi	r24, 0x58	; 88
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	22 60       	ori	r18, 0x02	; 2
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	9a 81       	ldd	r25, Y+2	; 0x02
     6aa:	fc 01       	movw	r30, r24
     6ac:	87 81       	ldd	r24, Z+7	; 0x07
     6ae:	90 85       	ldd	r25, Z+8	; 0x08
     6b0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
	}
}
     6b8:	f3 c0       	rjmp	.+486    	; 0x8a0 <__stack+0x41>
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */


	}else if (timer_config->timer_ID == Timer1){
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <Timer_init+0x11c>
     6c6:	76 c0       	rjmp	.+236    	; 0x7b4 <Timer_init+0x208>
		TCCR1A =0;
     6c8:	8f e4       	ldi	r24, 0x4F	; 79
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	fc 01       	movw	r30, r24
     6ce:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
     6d0:	8f e4       	ldi	r24, 0x4F	; 79
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 81       	ld	r18, Z
     6d8:	8f e4       	ldi	r24, 0x4F	; 79
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	28 60       	ori	r18, 0x08	; 8
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
		SET_BIT(TCCR1A,FOC1B);
     6e2:	8f e4       	ldi	r24, 0x4F	; 79
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 81       	ld	r18, Z
     6ea:	8f e4       	ldi	r24, 0x4F	; 79
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	24 60       	ori	r18, 0x04	; 4
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
		TCCR1B = timer_config->prescaler;
     6f4:	8e e4       	ldi	r24, 0x4E	; 78
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	3a 81       	ldd	r19, Y+2	; 0x02
     6fc:	f9 01       	movw	r30, r18
     6fe:	26 81       	ldd	r18, Z+6	; 0x06
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18
		TCNT1 = timer_config->initialValue;
     704:	8c e4       	ldi	r24, 0x4C	; 76
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	29 81       	ldd	r18, Y+1	; 0x01
     70a:	3a 81       	ldd	r19, Y+2	; 0x02
     70c:	f9 01       	movw	r30, r18
     70e:	22 81       	ldd	r18, Z+2	; 0x02
     710:	33 81       	ldd	r19, Z+3	; 0x03
     712:	fc 01       	movw	r30, r24
     714:	31 83       	std	Z+1, r19	; 0x01
     716:	20 83       	st	Z, r18

		if (timer_config->mode == Normal) {
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	fc 01       	movw	r30, r24
     71e:	81 81       	ldd	r24, Z+1	; 0x01
     720:	88 23       	and	r24, r24
     722:	99 f4       	brne	.+38     	; 0x74a <Timer_init+0x19e>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
     724:	89 e5       	ldi	r24, 0x59	; 89
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	20 81       	ld	r18, Z
     72c:	89 e5       	ldi	r24, 0x59	; 89
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	24 60       	ori	r18, 0x04	; 4
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
			SET_BIT(TIFR,TOV1);
     736:	88 e5       	ldi	r24, 0x58	; 88
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	fc 01       	movw	r30, r24
     73c:	20 81       	ld	r18, Z
     73e:	88 e5       	ldi	r24, 0x58	; 88
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	24 60       	ori	r18, 0x04	; 4
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
     748:	2b c0       	rjmp	.+86     	; 0x7a0 <Timer_init+0x1f4>

		} else if (timer_config->mode == CTC) {
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	fc 01       	movw	r30, r24
     750:	81 81       	ldd	r24, Z+1	; 0x01
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	29 f5       	brne	.+74     	; 0x7a0 <Timer_init+0x1f4>
			SET_BIT(TCCR1B, WGM12);
     756:	8e e4       	ldi	r24, 0x4E	; 78
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	8e e4       	ldi	r24, 0x4E	; 78
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	28 60       	ori	r18, 0x08	; 8
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
			OCR1A = timer_config->compareValue;
     768:	8a e4       	ldi	r24, 0x4A	; 74
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	29 81       	ldd	r18, Y+1	; 0x01
     76e:	3a 81       	ldd	r19, Y+2	; 0x02
     770:	f9 01       	movw	r30, r18
     772:	24 81       	ldd	r18, Z+4	; 0x04
     774:	35 81       	ldd	r19, Z+5	; 0x05
     776:	fc 01       	movw	r30, r24
     778:	31 83       	std	Z+1, r19	; 0x01
     77a:	20 83       	st	Z, r18
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
     77c:	89 e5       	ldi	r24, 0x59	; 89
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	20 81       	ld	r18, Z
     784:	89 e5       	ldi	r24, 0x59	; 89
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	20 61       	ori	r18, 0x10	; 16
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
     78e:	88 e5       	ldi	r24, 0x58	; 88
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	fc 01       	movw	r30, r24
     794:	20 81       	ld	r18, Z
     796:	88 e5       	ldi	r24, 0x58	; 88
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	20 61       	ori	r18, 0x10	; 16
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	fc 01       	movw	r30, r24
     7a6:	87 81       	ldd	r24, Z+7	; 0x07
     7a8:	90 85       	ldd	r25, Z+8	; 0x08
     7aa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <g_Timer1CallBackPtr+0x1>
     7ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_Timer1CallBackPtr>
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
	}
}
     7b2:	76 c0       	rjmp	.+236    	; 0x8a0 <__stack+0x41>
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;


	}else if (timer_config->timer_ID == Timer2){
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	9a 81       	ldd	r25, Y+2	; 0x02
     7b8:	fc 01       	movw	r30, r24
     7ba:	80 81       	ld	r24, Z
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	09 f0       	breq	.+2      	; 0x7c2 <Timer_init+0x216>
     7c0:	6f c0       	rjmp	.+222    	; 0x8a0 <__stack+0x41>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
     7c2:	85 e4       	ldi	r24, 0x45	; 69
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 81       	ld	r18, Z
     7ca:	85 e4       	ldi	r24, 0x45	; 69
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	20 68       	ori	r18, 0x80	; 128
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
		TCNT2 = timer_config->initialValue;
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	9a 81       	ldd	r25, Y+2	; 0x02
     7d8:	fc 01       	movw	r30, r24
     7da:	22 81       	ldd	r18, Z+2	; 0x02
     7dc:	33 81       	ldd	r19, Z+3	; 0x03
     7de:	84 e4       	ldi	r24, 0x44	; 68
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 83       	st	Z, r18
		TCCR2 = 0;
     7e6:	85 e4       	ldi	r24, 0x45	; 69
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	fc 01       	movw	r30, r24
     7ec:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
     7ee:	85 e4       	ldi	r24, 0x45	; 69
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	fc 01       	movw	r30, r24
     7f4:	30 81       	ld	r19, Z
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	fc 01       	movw	r30, r24
     7fc:	26 81       	ldd	r18, Z+6	; 0x06
     7fe:	85 e4       	ldi	r24, 0x45	; 69
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	23 2b       	or	r18, r19
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18

		if (timer_config->mode == Normal) {
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	fc 01       	movw	r30, r24
     80e:	81 81       	ldd	r24, Z+1	; 0x01
     810:	88 23       	and	r24, r24
     812:	99 f4       	brne	.+38     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
     814:	89 e5       	ldi	r24, 0x59	; 89
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	fc 01       	movw	r30, r24
     81a:	20 81       	ld	r18, Z
     81c:	89 e5       	ldi	r24, 0x59	; 89
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	20 64       	ori	r18, 0x40	; 64
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
     826:	88 e5       	ldi	r24, 0x58	; 88
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	20 81       	ld	r18, Z
     82e:	88 e5       	ldi	r24, 0x58	; 88
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	20 64       	ori	r18, 0x40	; 64
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
     838:	2a c0       	rjmp	.+84     	; 0x88e <__stack+0x2f>

		} else if (timer_config->mode == CTC) {
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	9a 81       	ldd	r25, Y+2	; 0x02
     83e:	fc 01       	movw	r30, r24
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	21 f5       	brne	.+72     	; 0x88e <__stack+0x2f>
			SET_BIT(TCCR0, WGM21);
     846:	83 e5       	ldi	r24, 0x53	; 83
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	fc 01       	movw	r30, r24
     84c:	20 81       	ld	r18, Z
     84e:	83 e5       	ldi	r24, 0x53	; 83
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	28 60       	ori	r18, 0x08	; 8
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
			OCR2 = timer_config->compareValue;
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	9a 81       	ldd	r25, Y+2	; 0x02
     85c:	fc 01       	movw	r30, r24
     85e:	24 81       	ldd	r18, Z+4	; 0x04
     860:	35 81       	ldd	r19, Z+5	; 0x05
     862:	83 e4       	ldi	r24, 0x43	; 67
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	fc 01       	movw	r30, r24
     868:	20 83       	st	Z, r18
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
     86a:	89 e5       	ldi	r24, 0x59	; 89
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	fc 01       	movw	r30, r24
     870:	20 81       	ld	r18, Z
     872:	89 e5       	ldi	r24, 0x59	; 89
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	20 68       	ori	r18, 0x80	; 128
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
     87c:	88 e5       	ldi	r24, 0x58	; 88
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	fc 01       	movw	r30, r24
     882:	20 81       	ld	r18, Z
     884:	88 e5       	ldi	r24, 0x58	; 88
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	20 68       	ori	r18, 0x80	; 128
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	fc 01       	movw	r30, r24
     894:	87 81       	ldd	r24, Z+7	; 0x07
     896:	90 85       	ldd	r25, Z+8	; 0x08
     898:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <g_Timer2CallBackPtr+0x1>
     89c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_Timer2CallBackPtr>
	}
}
     8a0:	00 00       	nop
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	1f 92       	push	r1
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	88 23       	and	r24, r24
     8bc:	19 f5       	brne	.+70     	; 0x904 <Timer_deInit+0x58>
		TCCR0 = 0;
     8be:	83 e5       	ldi	r24, 0x53	; 83
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	fc 01       	movw	r30, r24
     8c4:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
     8c6:	82 e5       	ldi	r24, 0x52	; 82
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
     8ce:	8c e5       	ldi	r24, 0x5C	; 92
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	fc 01       	movw	r30, r24
     8d4:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
     8d6:	89 e5       	ldi	r24, 0x59	; 89
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	20 81       	ld	r18, Z
     8de:	89 e5       	ldi	r24, 0x59	; 89
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	2d 7f       	andi	r18, 0xFD	; 253
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
     8e8:	89 e5       	ldi	r24, 0x59	; 89
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 81       	ld	r18, Z
     8f0:	89 e5       	ldi	r24, 0x59	; 89
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	2e 7f       	andi	r18, 0xFE	; 254
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 83       	st	Z, r18
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
     8fa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     8fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		OCR2 = 0; /* clear compare value for CTC mode*/
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
		g_Timer2CallBackPtr = NULL_PTR;
	}
}
     902:	51 c0       	rjmp	.+162    	; 0x9a6 <Timer_deInit+0xfa>
		OCR0 = 0; /* clear compare value for CTC mode*/
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */

	}else if (timer_ID == Timer1){
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	49 f5       	brne	.+82     	; 0x95c <Timer_deInit+0xb0>
		TCCR1A =0;
     90a:	8f e4       	ldi	r24, 0x4F	; 79
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
     912:	8e e4       	ldi	r24, 0x4E	; 78
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	10 82       	st	Z, r1
		TCNT1 = 0;
     91a:	8c e4       	ldi	r24, 0x4C	; 76
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	fc 01       	movw	r30, r24
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
     924:	89 e5       	ldi	r24, 0x59	; 89
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	20 81       	ld	r18, Z
     92c:	89 e5       	ldi	r24, 0x59	; 89
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	2b 7f       	andi	r18, 0xFB	; 251
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
		OCR1A = 0;  /* clear compare value for CTC mode */
     936:	8a e4       	ldi	r24, 0x4A	; 74
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	fc 01       	movw	r30, r24
     93c:	11 82       	std	Z+1, r1	; 0x01
     93e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
     940:	89 e5       	ldi	r24, 0x59	; 89
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	fc 01       	movw	r30, r24
     946:	20 81       	ld	r18, Z
     948:	89 e5       	ldi	r24, 0x59	; 89
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	2f 7e       	andi	r18, 0xEF	; 239
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
		g_Timer1CallBackPtr = NULL_PTR;
     952:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <g_Timer1CallBackPtr+0x1>
     956:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <g_Timer1CallBackPtr>
		OCR2 = 0; /* clear compare value for CTC mode*/
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
		g_Timer2CallBackPtr = NULL_PTR;
	}
}
     95a:	25 c0       	rjmp	.+74     	; 0x9a6 <Timer_deInit+0xfa>
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
		OCR1A = 0;  /* clear compare value for CTC mode */
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
		g_Timer1CallBackPtr = NULL_PTR;

	}else if (timer_ID == Timer2){
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	11 f5       	brne	.+68     	; 0x9a6 <Timer_deInit+0xfa>
		TCCR2 = 0;
     962:	85 e4       	ldi	r24, 0x45	; 69
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	fc 01       	movw	r30, r24
     968:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
     96a:	84 e4       	ldi	r24, 0x44	; 68
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	fc 01       	movw	r30, r24
     970:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
     972:	83 e4       	ldi	r24, 0x43	; 67
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	fc 01       	movw	r30, r24
     978:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
     97a:	89 e5       	ldi	r24, 0x59	; 89
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	fc 01       	movw	r30, r24
     980:	20 81       	ld	r18, Z
     982:	89 e5       	ldi	r24, 0x59	; 89
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	2f 77       	andi	r18, 0x7F	; 127
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
     98c:	89 e5       	ldi	r24, 0x59	; 89
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	fc 01       	movw	r30, r24
     992:	20 81       	ld	r18, Z
     994:	89 e5       	ldi	r24, 0x59	; 89
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	2f 7b       	andi	r18, 0xBF	; 191
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
		g_Timer2CallBackPtr = NULL_PTR;
     99e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <g_Timer2CallBackPtr+0x1>
     9a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <g_Timer2CallBackPtr>
	}
}
     9a6:	00 00       	nop
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <DIO_setupPinDirection>:
 *      Author: MR.MAHMOUD
 */

#include"dio.h"
#include "../../CommonDef/common_macros.h"
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number, uint8 direction){
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <DIO_setupPinDirection+0x6>
     9b6:	1f 92       	push	r1
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	89 83       	std	Y+1, r24	; 0x01
     9be:	6a 83       	std	Y+2, r22	; 0x02
     9c0:	4b 83       	std	Y+3, r20	; 0x03
/*
 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	88 30       	cpi	r24, 0x08	; 8
     9c6:	08 f0       	brcs	.+2      	; 0x9ca <DIO_setupPinDirection+0x1a>
     9c8:	d9 c0       	rjmp	.+434    	; 0xb7c <DIO_setupPinDirection+0x1cc>
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	84 30       	cpi	r24, 0x04	; 4
     9ce:	08 f0       	brcs	.+2      	; 0x9d2 <DIO_setupPinDirection+0x22>
     9d0:	d5 c0       	rjmp	.+426    	; 0xb7c <DIO_setupPinDirection+0x1cc>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	88 2f       	mov	r24, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	91 05       	cpc	r25, r1
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <DIO_setupPinDirection+0x30>
     9de:	3e c0       	rjmp	.+124    	; 0xa5c <DIO_setupPinDirection+0xac>
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	91 05       	cpc	r25, r1
     9e4:	1c f4       	brge	.+6      	; 0x9ec <DIO_setupPinDirection+0x3c>
     9e6:	89 2b       	or	r24, r25
     9e8:	49 f0       	breq	.+18     	; 0x9fc <DIO_setupPinDirection+0x4c>
			}
			break;
		}
	}

}
     9ea:	c8 c0       	rjmp	.+400    	; 0xb7c <DIO_setupPinDirection+0x1cc>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	91 05       	cpc	r25, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <DIO_setupPinDirection+0x44>
     9f2:	64 c0       	rjmp	.+200    	; 0xabc <DIO_setupPinDirection+0x10c>
     9f4:	03 97       	sbiw	r24, 0x03	; 3
     9f6:	09 f4       	brne	.+2      	; 0x9fa <DIO_setupPinDirection+0x4a>
     9f8:	91 c0       	rjmp	.+290    	; 0xb1c <DIO_setupPinDirection+0x16c>
			}
			break;
		}
	}

}
     9fa:	c0 c0       	rjmp	.+384    	; 0xb7c <DIO_setupPinDirection+0x1cc>
	{
		/* Setup the pin direction*/
		switch (port_number)
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	b1 f4       	brne	.+44     	; 0xa2e <DIO_setupPinDirection+0x7e>
			{
				SET_BIT(DDRA, pin_number);
     a02:	8a e3       	ldi	r24, 0x3A	; 58
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	fc 01       	movw	r30, r24
     a08:	80 81       	ld	r24, Z
     a0a:	48 2f       	mov	r20, r24
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	28 2f       	mov	r18, r24
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <DIO_setupPinDirection+0x6c>
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	2a 95       	dec	r18
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <DIO_setupPinDirection+0x68>
     a20:	24 2f       	mov	r18, r20
     a22:	28 2b       	or	r18, r24
     a24:	8a e3       	ldi	r24, 0x3A	; 58
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
			}
			break;
     a2c:	a7 c0       	rjmp	.+334    	; 0xb7c <DIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRA, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
     a2e:	8a e3       	ldi	r24, 0x3A	; 58
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	fc 01       	movw	r30, r24
     a34:	80 81       	ld	r24, Z
     a36:	48 2f       	mov	r20, r24
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_setupPinDirection+0x98>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	2a 95       	dec	r18
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_setupPinDirection+0x94>
     a4c:	80 95       	com	r24
     a4e:	24 2f       	mov	r18, r20
     a50:	28 23       	and	r18, r24
     a52:	8a e3       	ldi	r24, 0x3A	; 58
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
			}
			break;
     a5a:	90 c0       	rjmp	.+288    	; 0xb7c <DIO_setupPinDirection+0x1cc>
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	b1 f4       	brne	.+44     	; 0xa8e <DIO_setupPinDirection+0xde>
			{
				SET_BIT(DDRB, pin_number);
     a62:	87 e3       	ldi	r24, 0x37	; 55
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	48 2f       	mov	r20, r24
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_setupPinDirection+0xcc>
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	2a 95       	dec	r18
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_setupPinDirection+0xc8>
     a80:	24 2f       	mov	r18, r20
     a82:	28 2b       	or	r18, r24
     a84:	87 e3       	ldi	r24, 0x37	; 55
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
			}
			break;
     a8c:	77 c0       	rjmp	.+238    	; 0xb7c <DIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRB, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
     a8e:	87 e3       	ldi	r24, 0x37	; 55
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	80 81       	ld	r24, Z
     a96:	48 2f       	mov	r20, r24
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	28 2f       	mov	r18, r24
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DIO_setupPinDirection+0xf8>
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	2a 95       	dec	r18
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <DIO_setupPinDirection+0xf4>
     aac:	80 95       	com	r24
     aae:	24 2f       	mov	r18, r20
     ab0:	28 23       	and	r18, r24
     ab2:	87 e3       	ldi	r24, 0x37	; 55
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
			}
			break;
     aba:	60 c0       	rjmp	.+192    	; 0xb7c <DIO_setupPinDirection+0x1cc>
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
     abc:	8b 81       	ldd	r24, Y+3	; 0x03
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	b1 f4       	brne	.+44     	; 0xaee <DIO_setupPinDirection+0x13e>
			{
				SET_BIT(DDRC, pin_number);
     ac2:	84 e3       	ldi	r24, 0x34	; 52
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	48 2f       	mov	r20, r24
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	28 2f       	mov	r18, r24
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_setupPinDirection+0x12c>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	2a 95       	dec	r18
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_setupPinDirection+0x128>
     ae0:	24 2f       	mov	r18, r20
     ae2:	28 2b       	or	r18, r24
     ae4:	84 e3       	ldi	r24, 0x34	; 52
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
			}
			break;
     aec:	47 c0       	rjmp	.+142    	; 0xb7c <DIO_setupPinDirection+0x1cc>
			{
				SET_BIT(DDRC, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
     aee:	84 e3       	ldi	r24, 0x34	; 52
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_setupPinDirection+0x158>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	2a 95       	dec	r18
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_setupPinDirection+0x154>
     b0c:	80 95       	com	r24
     b0e:	24 2f       	mov	r18, r20
     b10:	28 23       	and	r18, r24
     b12:	84 e3       	ldi	r24, 0x34	; 52
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
			}
			break;
     b1a:	30 c0       	rjmp	.+96     	; 0xb7c <DIO_setupPinDirection+0x1cc>
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	b1 f4       	brne	.+44     	; 0xb4e <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD, pin_number);
     b22:	81 e3       	ldi	r24, 0x31	; 49
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	fc 01       	movw	r30, r24
     b28:	80 81       	ld	r24, Z
     b2a:	48 2f       	mov	r20, r24
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	28 2f       	mov	r18, r24
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <DIO_setupPinDirection+0x18c>
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	2a 95       	dec	r18
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <DIO_setupPinDirection+0x188>
     b40:	24 2f       	mov	r18, r20
     b42:	28 2b       	or	r18, r24
     b44:	81 e3       	ldi	r24, 0x31	; 49
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	fc 01       	movw	r30, r24
     b4a:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
			}
			break;
     b4c:	16 c0       	rjmp	.+44     	; 0xb7a <DIO_setupPinDirection+0x1ca>
			{
				SET_BIT(DDRD, pin_number);
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
     b4e:	81 e3       	ldi	r24, 0x31	; 49
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	48 2f       	mov	r20, r24
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <DIO_setupPinDirection+0x1b8>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <DIO_setupPinDirection+0x1b4>
     b6c:	80 95       	com	r24
     b6e:	24 2f       	mov	r18, r20
     b70:	28 23       	and	r18, r24
     b72:	81 e3       	ldi	r24, 0x31	; 49
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
			}
			break;
     b7a:	00 00       	nop
		}
	}

}
     b7c:	00 00       	nop
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <DIO_writePin>:
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value){
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <DIO_writePin+0x6>
     b90:	1f 92       	push	r1
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	6a 83       	std	Y+2, r22	; 0x02
     b9a:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	88 30       	cpi	r24, 0x08	; 8
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <DIO_writePin+0x1a>
     ba2:	d9 c0       	rjmp	.+434    	; 0xd56 <DIO_writePin+0x1cc>
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	08 f0       	brcs	.+2      	; 0xbac <DIO_writePin+0x22>
     baa:	d5 c0       	rjmp	.+426    	; 0xd56 <DIO_writePin+0x1cc>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <DIO_writePin+0x30>
     bb8:	3e c0       	rjmp	.+124    	; 0xc36 <DIO_writePin+0xac>
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	91 05       	cpc	r25, r1
     bbe:	1c f4       	brge	.+6      	; 0xbc6 <DIO_writePin+0x3c>
     bc0:	89 2b       	or	r24, r25
     bc2:	49 f0       	breq	.+18     	; 0xbd6 <DIO_writePin+0x4c>
				CLEAR_BIT(PORTD, pin_number);
			}
			break;
		}
	}
}
     bc4:	c8 c0       	rjmp	.+400    	; 0xd56 <DIO_writePin+0x1cc>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	91 05       	cpc	r25, r1
     bca:	09 f4       	brne	.+2      	; 0xbce <DIO_writePin+0x44>
     bcc:	64 c0       	rjmp	.+200    	; 0xc96 <DIO_writePin+0x10c>
     bce:	03 97       	sbiw	r24, 0x03	; 3
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <DIO_writePin+0x4a>
     bd2:	91 c0       	rjmp	.+290    	; 0xcf6 <DIO_writePin+0x16c>
				CLEAR_BIT(PORTD, pin_number);
			}
			break;
		}
	}
}
     bd4:	c0 c0       	rjmp	.+384    	; 0xd56 <DIO_writePin+0x1cc>
	{
		/* Write the pin value*/
		switch (port_number)
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	b1 f4       	brne	.+44     	; 0xc08 <DIO_writePin+0x7e>
			{
				SET_BIT(PORTA, pin_number);
     bdc:	8b e3       	ldi	r24, 0x3B	; 59
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_writePin+0x6c>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	2a 95       	dec	r18
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_writePin+0x68>
     bfa:	24 2f       	mov	r18, r20
     bfc:	28 2b       	or	r18, r24
     bfe:	8b e3       	ldi	r24, 0x3B	; 59
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	fc 01       	movw	r30, r24
     c04:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
			}
			break;
     c06:	a7 c0       	rjmp	.+334    	; 0xd56 <DIO_writePin+0x1cc>
			{
				SET_BIT(PORTA, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
     c08:	8b e3       	ldi	r24, 0x3B	; 59
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	fc 01       	movw	r30, r24
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_writePin+0x98>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	2a 95       	dec	r18
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_writePin+0x94>
     c26:	80 95       	com	r24
     c28:	24 2f       	mov	r18, r20
     c2a:	28 23       	and	r18, r24
     c2c:	8b e3       	ldi	r24, 0x3B	; 59
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
			}
			break;
     c34:	90 c0       	rjmp	.+288    	; 0xd56 <DIO_writePin+0x1cc>
		case PORTB_ID:
			if (value == LOGIC_HIGH)
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	b1 f4       	brne	.+44     	; 0xc68 <DIO_writePin+0xde>
			{
				SET_BIT(PORTB, pin_number);
     c3c:	88 e3       	ldi	r24, 0x38	; 56
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_writePin+0xcc>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 95       	dec	r18
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_writePin+0xc8>
     c5a:	24 2f       	mov	r18, r20
     c5c:	28 2b       	or	r18, r24
     c5e:	88 e3       	ldi	r24, 0x38	; 56
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	fc 01       	movw	r30, r24
     c64:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
			}
			break;
     c66:	77 c0       	rjmp	.+238    	; 0xd56 <DIO_writePin+0x1cc>
			{
				SET_BIT(PORTB, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
     c68:	88 e3       	ldi	r24, 0x38	; 56
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	fc 01       	movw	r30, r24
     c6e:	80 81       	ld	r24, Z
     c70:	48 2f       	mov	r20, r24
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_writePin+0xf8>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	2a 95       	dec	r18
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_writePin+0xf4>
     c86:	80 95       	com	r24
     c88:	24 2f       	mov	r18, r20
     c8a:	28 23       	and	r18, r24
     c8c:	88 e3       	ldi	r24, 0x38	; 56
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	20 83       	st	Z, r18
			}
			break;
     c94:	60 c0       	rjmp	.+192    	; 0xd56 <DIO_writePin+0x1cc>
		case PORTC_ID:
			if (value == LOGIC_HIGH)
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	b1 f4       	brne	.+44     	; 0xcc8 <DIO_writePin+0x13e>
			{
				SET_BIT(PORTC, pin_number);
     c9c:	85 e3       	ldi	r24, 0x35	; 53
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_writePin+0x12c>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	2a 95       	dec	r18
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_writePin+0x128>
     cba:	24 2f       	mov	r18, r20
     cbc:	28 2b       	or	r18, r24
     cbe:	85 e3       	ldi	r24, 0x35	; 53
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	fc 01       	movw	r30, r24
     cc4:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
			}
			break;
     cc6:	47 c0       	rjmp	.+142    	; 0xd56 <DIO_writePin+0x1cc>
			{
				SET_BIT(PORTC, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
     cc8:	85 e3       	ldi	r24, 0x35	; 53
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	fc 01       	movw	r30, r24
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <DIO_writePin+0x158>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	2a 95       	dec	r18
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <DIO_writePin+0x154>
     ce6:	80 95       	com	r24
     ce8:	24 2f       	mov	r18, r20
     cea:	28 23       	and	r18, r24
     cec:	85 e3       	ldi	r24, 0x35	; 53
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
			}
			break;
     cf4:	30 c0       	rjmp	.+96     	; 0xd56 <DIO_writePin+0x1cc>
		case PORTD_ID:
			if (value == LOGIC_HIGH)
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	b1 f4       	brne	.+44     	; 0xd28 <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_number);
     cfc:	82 e3       	ldi	r24, 0x32	; 50
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	fc 01       	movw	r30, r24
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_writePin+0x18c>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	2a 95       	dec	r18
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_writePin+0x188>
     d1a:	24 2f       	mov	r18, r20
     d1c:	28 2b       	or	r18, r24
     d1e:	82 e3       	ldi	r24, 0x32	; 50
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	fc 01       	movw	r30, r24
     d24:	20 83       	st	Z, r18
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
			}
			break;
     d26:	16 c0       	rjmp	.+44     	; 0xd54 <DIO_writePin+0x1ca>
			{
				SET_BIT(PORTD, pin_number);
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
     d28:	82 e3       	ldi	r24, 0x32	; 50
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	fc 01       	movw	r30, r24
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_writePin+0x1b8>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	2a 95       	dec	r18
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_writePin+0x1b4>
     d46:	80 95       	com	r24
     d48:	24 2f       	mov	r18, r20
     d4a:	28 23       	and	r18, r24
     d4c:	82 e3       	ldi	r24, 0x32	; 50
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18
			}
			break;
     d54:	00 00       	nop
		}
	}
}
     d56:	00 00       	nop
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <DIO_readPin>:
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <DIO_readPin+0x6>
     d6a:	1f 92       	push	r1
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	8a 83       	std	Y+2, r24	; 0x02
     d72:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     d74:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <DIO_readPin+0x1a>
     d7c:	73 c0       	rjmp	.+230    	; 0xe64 <DIO_readPin+0x100>
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	08 f0       	brcs	.+2      	; 0xd86 <DIO_readPin+0x22>
     d84:	6f c0       	rjmp	.+222    	; 0xe64 <DIO_readPin+0x100>
	
	}
	else
	{
		/* Read the pin value*/
		switch (port_number)
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	21 f1       	breq	.+72     	; 0xdda <DIO_readPin+0x76>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	91 05       	cpc	r25, r1
     d96:	1c f4       	brge	.+6      	; 0xd9e <DIO_readPin+0x3a>
     d98:	89 2b       	or	r24, r25
     d9a:	41 f0       	breq	.+16     	; 0xdac <DIO_readPin+0x48>
     d9c:	63 c0       	rjmp	.+198    	; 0xe64 <DIO_readPin+0x100>
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	91 05       	cpc	r25, r1
     da2:	91 f1       	breq	.+100    	; 0xe08 <DIO_readPin+0xa4>
     da4:	03 97       	sbiw	r24, 0x03	; 3
     da6:	09 f4       	brne	.+2      	; 0xdaa <DIO_readPin+0x46>
     da8:	46 c0       	rjmp	.+140    	; 0xe36 <DIO_readPin+0xd2>
     daa:	5c c0       	rjmp	.+184    	; 0xe64 <DIO_readPin+0x100>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_number))
     dac:	89 e3       	ldi	r24, 0x39	; 57
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	2b 81       	ldd	r18, Y+3	; 0x03
     dba:	22 2f       	mov	r18, r18
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_readPin+0x60>
     dc0:	95 95       	asr	r25
     dc2:	87 95       	ror	r24
     dc4:	2a 95       	dec	r18
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_readPin+0x5c>
     dc8:	81 70       	andi	r24, 0x01	; 1
     dca:	99 27       	eor	r25, r25
     dcc:	89 2b       	or	r24, r25
     dce:	19 f0       	breq	.+6      	; 0xdd6 <DIO_readPin+0x72>
			{
				pin_value = LOGIC_HIGH;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     dd4:	47 c0       	rjmp	.+142    	; 0xe64 <DIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     dd6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     dd8:	45 c0       	rjmp	.+138    	; 0xe64 <DIO_readPin+0x100>
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_number))
     dda:	86 e3       	ldi	r24, 0x36	; 54
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	22 2f       	mov	r18, r18
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_readPin+0x8e>
     dee:	95 95       	asr	r25
     df0:	87 95       	ror	r24
     df2:	2a 95       	dec	r18
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_readPin+0x8a>
     df6:	81 70       	andi	r24, 0x01	; 1
     df8:	99 27       	eor	r25, r25
     dfa:	89 2b       	or	r24, r25
     dfc:	19 f0       	breq	.+6      	; 0xe04 <DIO_readPin+0xa0>
			{
				pin_value = LOGIC_HIGH;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     e02:	30 c0       	rjmp	.+96     	; 0xe64 <DIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     e04:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     e06:	2e c0       	rjmp	.+92     	; 0xe64 <DIO_readPin+0x100>
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_number))
     e08:	83 e3       	ldi	r24, 0x33	; 51
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	fc 01       	movw	r30, r24
     e0e:	80 81       	ld	r24, Z
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	2b 81       	ldd	r18, Y+3	; 0x03
     e16:	22 2f       	mov	r18, r18
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_readPin+0xbc>
     e1c:	95 95       	asr	r25
     e1e:	87 95       	ror	r24
     e20:	2a 95       	dec	r18
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_readPin+0xb8>
     e24:	81 70       	andi	r24, 0x01	; 1
     e26:	99 27       	eor	r25, r25
     e28:	89 2b       	or	r24, r25
     e2a:	19 f0       	breq	.+6      	; 0xe32 <DIO_readPin+0xce>
			{
				pin_value = LOGIC_HIGH;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     e30:	19 c0       	rjmp	.+50     	; 0xe64 <DIO_readPin+0x100>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     e32:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     e34:	17 c0       	rjmp	.+46     	; 0xe64 <DIO_readPin+0x100>
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_number))
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	80 81       	ld	r24, Z
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	22 2f       	mov	r18, r18
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_readPin+0xea>
     e4a:	95 95       	asr	r25
     e4c:	87 95       	ror	r24
     e4e:	2a 95       	dec	r18
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_readPin+0xe6>
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	99 27       	eor	r25, r25
     e56:	89 2b       	or	r24, r25
     e58:	19 f0       	breq	.+6      	; 0xe60 <DIO_readPin+0xfc>
			{
				pin_value = LOGIC_HIGH;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	89 83       	std	Y+1, r24	; 0x01
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <DIO_readPin+0xfe>
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     e60:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
     e62:	00 00       	nop
		}
	}

	return pin_value;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <DIO_setupPortDirection>:
void DIO_setupPortDirection(uint8 port_number, GPIO_PortDirectionType direction)
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	00 d0       	rcall	.+0      	; 0xe78 <DIO_setupPortDirection+0x6>
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_number >= NUM_OF_PORTS)
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	50 f5       	brcc	.+84     	; 0xeda <DIO_setupPortDirection+0x68>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 05       	cpc	r25, r1
     e90:	91 f0       	breq	.+36     	; 0xeb6 <DIO_setupPortDirection+0x44>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	91 05       	cpc	r25, r1
     e96:	1c f4       	brge	.+6      	; 0xe9e <DIO_setupPortDirection+0x2c>
     e98:	89 2b       	or	r24, r25
     e9a:	39 f0       	breq	.+14     	; 0xeaa <DIO_setupPortDirection+0x38>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     e9c:	1e c0       	rjmp	.+60     	; 0xeda <DIO_setupPortDirection+0x68>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	91 05       	cpc	r25, r1
     ea2:	79 f0       	breq	.+30     	; 0xec2 <DIO_setupPortDirection+0x50>
     ea4:	03 97       	sbiw	r24, 0x03	; 3
     ea6:	99 f0       	breq	.+38     	; 0xece <DIO_setupPortDirection+0x5c>
		case PORTD_ID:
			DDRD = direction;
			break;
		}
	}
}
     ea8:	18 c0       	rjmp	.+48     	; 0xeda <DIO_setupPortDirection+0x68>
	{
		/* Setup the port direction*/
		switch (port_number)
		{
		case PORTA_ID:
			DDRA = direction;
     eaa:	8a e3       	ldi	r24, 0x3A	; 58
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	2a 81       	ldd	r18, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
			break;
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <DIO_setupPortDirection+0x68>
		case PORTB_ID:
			DDRB = direction;
     eb6:	87 e3       	ldi	r24, 0x37	; 55
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	2a 81       	ldd	r18, Y+2	; 0x02
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
			break;
     ec0:	0c c0       	rjmp	.+24     	; 0xeda <DIO_setupPortDirection+0x68>
		case PORTC_ID:
			DDRC = direction;
     ec2:	84 e3       	ldi	r24, 0x34	; 52
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	2a 81       	ldd	r18, Y+2	; 0x02
     ec8:	fc 01       	movw	r30, r24
     eca:	20 83       	st	Z, r18
			break;
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <DIO_setupPortDirection+0x68>
		case PORTD_ID:
			DDRD = direction;
     ece:	81 e3       	ldi	r24, 0x31	; 49
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	2a 81       	ldd	r18, Y+2	; 0x02
     ed4:	fc 01       	movw	r30, r24
     ed6:	20 83       	st	Z, r18
			break;
     ed8:	00 00       	nop
		}
	}
}
     eda:	00 00       	nop
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_number, uint8 value)
{
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	00 d0       	rcall	.+0      	; 0xeec <DIO_writePort+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	50 f5       	brcc	.+84     	; 0xf4e <DIO_writePort+0x68>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	91 f0       	breq	.+36     	; 0xf2a <DIO_writePort+0x44>
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	91 05       	cpc	r25, r1
     f0a:	1c f4       	brge	.+6      	; 0xf12 <DIO_writePort+0x2c>
     f0c:	89 2b       	or	r24, r25
     f0e:	39 f0       	breq	.+14     	; 0xf1e <DIO_writePort+0x38>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     f10:	1e c0       	rjmp	.+60     	; 0xf4e <DIO_writePort+0x68>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	91 05       	cpc	r25, r1
     f16:	79 f0       	breq	.+30     	; 0xf36 <DIO_writePort+0x50>
     f18:	03 97       	sbiw	r24, 0x03	; 3
     f1a:	99 f0       	breq	.+38     	; 0xf42 <DIO_writePort+0x5c>
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}
     f1c:	18 c0       	rjmp	.+48     	; 0xf4e <DIO_writePort+0x68>
	{
		/* Write the port value*/
		switch (port_number)
		{
		case PORTA_ID:
			PORTA = value;
     f1e:	8b e3       	ldi	r24, 0x3B	; 59
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
			break;
     f28:	12 c0       	rjmp	.+36     	; 0xf4e <DIO_writePort+0x68>
		case PORTB_ID:
			PORTB = value;
     f2a:	88 e3       	ldi	r24, 0x38	; 56
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	2a 81       	ldd	r18, Y+2	; 0x02
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
			break;
     f34:	0c c0       	rjmp	.+24     	; 0xf4e <DIO_writePort+0x68>
		case PORTC_ID:
			PORTC = value;
     f36:	85 e3       	ldi	r24, 0x35	; 53
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	2a 81       	ldd	r18, Y+2	; 0x02
     f3c:	fc 01       	movw	r30, r24
     f3e:	20 83       	st	Z, r18
			break;
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <DIO_writePort+0x68>
		case PORTD_ID:
			PORTD = value;
     f42:	82 e3       	ldi	r24, 0x32	; 50
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	2a 81       	ldd	r18, Y+2	; 0x02
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
			break;
     f4c:	00 00       	nop
		}
	}
}
     f4e:	00 00       	nop
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_number)
{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <DIO_readPort+0x6>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     f66:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	84 30       	cpi	r24, 0x04	; 4
     f6c:	50 f5       	brcc	.+84     	; 0xfc2 <DIO_readPort+0x68>
		
	}
	else
	{
		/* Read the port value*/
		switch (port_number)
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	91 f0       	breq	.+36     	; 0xf9e <DIO_readPort+0x44>
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	91 05       	cpc	r25, r1
     f7e:	1c f4       	brge	.+6      	; 0xf86 <DIO_readPort+0x2c>
     f80:	89 2b       	or	r24, r25
     f82:	39 f0       	breq	.+14     	; 0xf92 <DIO_readPort+0x38>
     f84:	1e c0       	rjmp	.+60     	; 0xfc2 <DIO_readPort+0x68>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	91 05       	cpc	r25, r1
     f8a:	79 f0       	breq	.+30     	; 0xfaa <DIO_readPort+0x50>
     f8c:	03 97       	sbiw	r24, 0x03	; 3
     f8e:	99 f0       	breq	.+38     	; 0xfb6 <DIO_readPort+0x5c>
     f90:	18 c0       	rjmp	.+48     	; 0xfc2 <DIO_readPort+0x68>
		{
		case PORTA_ID:
			value = PINA;
     f92:	89 e3       	ldi	r24, 0x39	; 57
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	fc 01       	movw	r30, r24
     f98:	80 81       	ld	r24, Z
     f9a:	89 83       	std	Y+1, r24	; 0x01
			break;
     f9c:	12 c0       	rjmp	.+36     	; 0xfc2 <DIO_readPort+0x68>
		case PORTB_ID:
			value = PINB;
     f9e:	86 e3       	ldi	r24, 0x36	; 54
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	fc 01       	movw	r30, r24
     fa4:	80 81       	ld	r24, Z
     fa6:	89 83       	std	Y+1, r24	; 0x01
			break;
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <DIO_readPort+0x68>
		case PORTC_ID:
			value = PINC;
     faa:	83 e3       	ldi	r24, 0x33	; 51
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
			break;
     fb4:	06 c0       	rjmp	.+12     	; 0xfc2 <DIO_readPort+0x68>
		case PORTD_ID:
			value = PIND;
     fb6:	80 e3       	ldi	r24, 0x30	; 48
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	fc 01       	movw	r30, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	89 83       	std	Y+1, r24	; 0x01
			break;
     fc0:	00 00       	nop
		}
	}

	return value;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <Temp_state>:
STATE P_state = SAFE;
STATE T_state = SAFE;


void Temp_state(void)
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	if (g_temperature >= TEMPERATURE_SEVERE)
     fd6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_temperature>
     fda:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_temperature+0x1>
     fde:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_temperature+0x2>
     fe2:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_temperature+0x3>
     fe6:	8d 97       	sbiw	r24, 0x2d	; 45
     fe8:	a1 05       	cpc	r26, r1
     fea:	b1 05       	cpc	r27, r1
     fec:	20 f0       	brcs	.+8      	; 0xff6 <Temp_state+0x28>
	{
		T_state = SEVERE;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <T_state>
	}
	else if ((g_temperature >= TEMPERATURE_SAFE) && (g_temperature < TEMPERATURE_MODERATE))
	{
		T_state = SAFE;
	}
}
     ff4:	2a c0       	rjmp	.+84     	; 0x104a <Temp_state+0x7c>
{
	if (g_temperature >= TEMPERATURE_SEVERE)
	{
		T_state = SEVERE;
	}
	else if ((g_temperature >= TEMPERATURE_MODERATE) && (g_temperature < TEMPERATURE_SEVERE))
     ff6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_temperature>
     ffa:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_temperature+0x1>
     ffe:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_temperature+0x2>
    1002:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_temperature+0x3>
    1006:	80 97       	sbiw	r24, 0x20	; 32
    1008:	a1 05       	cpc	r26, r1
    100a:	b1 05       	cpc	r27, r1
    100c:	80 f0       	brcs	.+32     	; 0x102e <Temp_state+0x60>
    100e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_temperature>
    1012:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_temperature+0x1>
    1016:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_temperature+0x2>
    101a:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_temperature+0x3>
    101e:	8d 97       	sbiw	r24, 0x2d	; 45
    1020:	a1 05       	cpc	r26, r1
    1022:	b1 05       	cpc	r27, r1
    1024:	20 f4       	brcc	.+8      	; 0x102e <Temp_state+0x60>
	{
		T_state = MODERATE;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <T_state>
	}
	else if ((g_temperature >= TEMPERATURE_SAFE) && (g_temperature < TEMPERATURE_MODERATE))
	{
		T_state = SAFE;
	}
}
    102c:	0e c0       	rjmp	.+28     	; 0x104a <Temp_state+0x7c>
	}
	else if ((g_temperature >= TEMPERATURE_MODERATE) && (g_temperature < TEMPERATURE_SEVERE))
	{
		T_state = MODERATE;
	}
	else if ((g_temperature >= TEMPERATURE_SAFE) && (g_temperature < TEMPERATURE_MODERATE))
    102e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_temperature>
    1032:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_temperature+0x1>
    1036:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_temperature+0x2>
    103a:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_temperature+0x3>
    103e:	80 97       	sbiw	r24, 0x20	; 32
    1040:	a1 05       	cpc	r26, r1
    1042:	b1 05       	cpc	r27, r1
    1044:	10 f4       	brcc	.+4      	; 0x104a <Temp_state+0x7c>
	{
		T_state = SAFE;
    1046:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <T_state>
	}
}
    104a:	00 00       	nop
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <Press_state>:

void Press_state(void)
{
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	if (g_pressure >= PRESSURE_SEVERE)
    105a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_pressure>
    105e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <g_pressure+0x1>
    1062:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <g_pressure+0x2>
    1066:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <g_pressure+0x3>
    106a:	80 3a       	cpi	r24, 0xA0	; 160
    106c:	96 48       	sbci	r25, 0x86	; 134
    106e:	a1 40       	sbci	r26, 0x01	; 1
    1070:	b1 05       	cpc	r27, r1
    1072:	20 f0       	brcs	.+8      	; 0x107c <Press_state+0x2a>
	{
		P_state = SEVERE;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <P_state>
	}
	else if ((g_pressure >= PRESSURE_SAFE) && (g_pressure < PRESSURE_MODERATE))
	{
		P_state = SAFE;
	}
}
    107a:	3a c0       	rjmp	.+116    	; 0x10f0 <Press_state+0x9e>
{
	if (g_pressure >= PRESSURE_SEVERE)
	{
		P_state = SEVERE;
	}
	else if ((g_pressure >= PRESSURE_MODERATE) && (g_pressure < PRESSURE_SEVERE))
    107c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_pressure>
    1080:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <g_pressure+0x1>
    1084:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <g_pressure+0x2>
    1088:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <g_pressure+0x3>
    108c:	80 31       	cpi	r24, 0x10	; 16
    108e:	97 42       	sbci	r25, 0x27	; 39
    1090:	a1 05       	cpc	r26, r1
    1092:	b1 05       	cpc	r27, r1
    1094:	88 f0       	brcs	.+34     	; 0x10b8 <Press_state+0x66>
    1096:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_pressure>
    109a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <g_pressure+0x1>
    109e:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <g_pressure+0x2>
    10a2:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <g_pressure+0x3>
    10a6:	80 3a       	cpi	r24, 0xA0	; 160
    10a8:	96 48       	sbci	r25, 0x86	; 134
    10aa:	a1 40       	sbci	r26, 0x01	; 1
    10ac:	b1 05       	cpc	r27, r1
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <Press_state+0x66>
	{
		P_state = MODERATE;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <P_state>
	}
	else if ((g_pressure >= PRESSURE_SAFE) && (g_pressure < PRESSURE_MODERATE))
	{
		P_state = SAFE;
	}
}
    10b6:	1c c0       	rjmp	.+56     	; 0x10f0 <Press_state+0x9e>
	}
	else if ((g_pressure >= PRESSURE_MODERATE) && (g_pressure < PRESSURE_SEVERE))
	{
		P_state = MODERATE;
	}
	else if ((g_pressure >= PRESSURE_SAFE) && (g_pressure < PRESSURE_MODERATE))
    10b8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_pressure>
    10bc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <g_pressure+0x1>
    10c0:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <g_pressure+0x2>
    10c4:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <g_pressure+0x3>
    10c8:	8c 32       	cpi	r24, 0x2C	; 44
    10ca:	91 40       	sbci	r25, 0x01	; 1
    10cc:	a1 05       	cpc	r26, r1
    10ce:	b1 05       	cpc	r27, r1
    10d0:	78 f0       	brcs	.+30     	; 0x10f0 <Press_state+0x9e>
    10d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_pressure>
    10d6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <g_pressure+0x1>
    10da:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <g_pressure+0x2>
    10de:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <g_pressure+0x3>
    10e2:	80 31       	cpi	r24, 0x10	; 16
    10e4:	97 42       	sbci	r25, 0x27	; 39
    10e6:	a1 05       	cpc	r26, r1
    10e8:	b1 05       	cpc	r27, r1
    10ea:	10 f4       	brcc	.+4      	; 0x10f0 <Press_state+0x9e>
	{
		P_state = SAFE;
    10ec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <P_state>
	}
}
    10f0:	00 00       	nop
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <Action_severe>:

void Action_severe(void)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    1100:	0e 94 44 09 	call	0x1288	; 0x1288 <BUZZER_on>
	WATERPUMP_on();
    1104:	0e 94 18 09 	call	0x1230	; 0x1230 <WATERPUMP_on>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_HIGH);
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	67 e0       	ldi	r22, 0x07	; 7
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    1112:	00 00       	nop
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <Action_moderate>:

void Action_moderate(void)
{
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    1122:	0e 94 44 09 	call	0x1288	; 0x1288 <BUZZER_on>
	WATERPUMP_on();
    1126:	0e 94 18 09 	call	0x1230	; 0x1230 <WATERPUMP_on>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_LOW);
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	67 e0       	ldi	r22, 0x07	; 7
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    1134:	00 00       	nop
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <Action_safe>:

void Action_safe(void)
{
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	BUZZER_off();
    1144:	0e 94 51 09 	call	0x12a2	; 0x12a2 <BUZZER_off>
	WATERPUMP_off();
    1148:	0e 94 25 09 	call	0x124a	; 0x124a <WATERPUMP_off>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_LOW);
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	67 e0       	ldi	r22, 0x07	; 7
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    1156:	00 00       	nop
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <main>:



int main()
{
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62

	TWI_init();
    1166:	0e 94 3e 00 	call	0x7c	; 0x7c <TWI_init>
	BMP180_Start();
    116a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <BMP180_Start>
	BUZZER_init();
    116e:	0e 94 32 09 	call	0x1264	; 0x1264 <BUZZER_init>
	WATERPUMP_init();
    1172:	0e 94 06 09 	call	0x120c	; 0x120c <WATERPUMP_init>
	SREG |= (1<<7);
    1176:	8f e5       	ldi	r24, 0x5F	; 95
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fc 01       	movw	r30, r24
    117c:	20 81       	ld	r18, Z
    117e:	8f e5       	ldi	r24, 0x5F	; 95
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	20 68       	ori	r18, 0x80	; 128
    1184:	fc 01       	movw	r30, r24
    1186:	20 83       	st	Z, r18
	DIO_setupPinDirection(SLL_FLAG_PORT, SLL_FLAG_PIN, PIN_OUTPUT);
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	67 e0       	ldi	r22, 0x07	; 7
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_setupPinDirection>



	while (1)
	{
		g_temperature = BMP180_calculateTemperature();
    1192:	0e 94 99 13 	call	0x2732	; 0x2732 <BMP180_calculateTemperature>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <g_temperature>
    119e:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <g_temperature+0x1>
    11a2:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <g_temperature+0x2>
    11a6:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <g_temperature+0x3>
		g_pressure = BMP180_calculatePressure();
    11aa:	0e 94 a5 14 	call	0x294a	; 0x294a <BMP180_calculatePressure>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_pressure>
    11b6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <g_pressure+0x1>
    11ba:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <g_pressure+0x2>
    11be:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <g_pressure+0x3>

		Temp_state();
    11c2:	0e 94 e7 07 	call	0xfce	; 0xfce <Temp_state>
		Press_state();
    11c6:	0e 94 29 08 	call	0x1052	; 0x1052 <Press_state>

		if (P_state == SEVERE || T_state == SEVERE)
    11ca:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <P_state>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	21 f0       	breq	.+8      	; 0x11da <main+0x7c>
    11d2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <T_state>
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <main+0x82>
		{
			Action_severe();
    11da:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <Action_severe>
    11de:	15 c0       	rjmp	.+42     	; 0x120a <main+0xac>

		}
		else if (P_state == MODERATE || T_state == MODERATE)
    11e0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <P_state>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	21 f0       	breq	.+8      	; 0x11f0 <main+0x92>
    11e8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <T_state>
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	19 f4       	brne	.+6      	; 0x11f6 <main+0x98>
		{
			Action_moderate();
    11f0:	0e 94 8d 08 	call	0x111a	; 0x111a <Action_moderate>
    11f4:	0a c0       	rjmp	.+20     	; 0x120a <main+0xac>

		}
		else if (P_state == SAFE || T_state == SAFE)
    11f6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <P_state>
    11fa:	88 23       	and	r24, r24
    11fc:	21 f0       	breq	.+8      	; 0x1206 <main+0xa8>
    11fe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <T_state>
    1202:	88 23       	and	r24, r24
    1204:	31 f6       	brne	.-116    	; 0x1192 <main+0x34>
		{
			Action_safe();
    1206:	0e 94 9e 08 	call	0x113c	; 0x113c <Action_safe>



	while (1)
	{
		g_temperature = BMP180_calculateTemperature();
    120a:	c3 cf       	rjmp	.-122    	; 0x1192 <main+0x34>

0000120c <WATERPUMP_init>:

#include "../../MCAL/DIO/dio.h"
#include "../../ECUAL/WATERPUMP/waterpump.h"

void WATERPUMP_init(void)
{
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    1228:	00 00       	nop
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <WATERPUMP_on>:

void WATERPUMP_on(void)
{
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    1242:	00 00       	nop
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <WATERPUMP_off>:

void WATERPUMP_off(void)
{
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    125c:	00 00       	nop
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret

00001264 <BUZZER_init>:

#include "../../MCAL/DIO/dio.h"
#include "buzzer.h"

void BUZZER_init(void)
{
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    126c:	41 e0       	ldi	r20, 0x01	; 1
    126e:	66 e0       	ldi	r22, 0x06	; 6
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <DIO_setupPinDirection>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	66 e0       	ldi	r22, 0x06	; 6
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    1280:	00 00       	nop
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	08 95       	ret

00001288 <BUZZER_on>:

void BUZZER_on(void)
{
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    1290:	41 e0       	ldi	r20, 0x01	; 1
    1292:	66 e0       	ldi	r22, 0x06	; 6
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    129a:	00 00       	nop
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <BUZZER_off>:

void BUZZER_off(void)
{
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	66 e0       	ldi	r22, 0x06	; 6
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <DIO_writePin>
}
    12b4:	00 00       	nop
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <BMP180_ReadCalb>:
/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;
void delay(void);
void BMP180_ReadCalb(void) {
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	ca 5b       	subi	r28, 0xBA	; 186
    12ca:	d1 09       	sbc	r29, r1
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61

	uint8_t Callib_Data[22] = { 0 };
    12d6:	ce 01       	movw	r24, r28
    12d8:	8b 55       	subi	r24, 0x5B	; 91
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	26 e1       	ldi	r18, 0x16	; 22
    12de:	fc 01       	movw	r30, r24
    12e0:	32 2f       	mov	r19, r18
    12e2:	11 92       	st	Z+, r1
    12e4:	3a 95       	dec	r19
    12e6:	e9 f7       	brne	.-6      	; 0x12e2 <BMP180_ReadCalb+0x26>
	uint16_t Callib_Start = 0xAA;
    12e8:	8a ea       	ldi	r24, 0xAA	; 170
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03

	for (int i = 0; i < 22; i++) {
    12f0:	1a 82       	std	Y+2, r1	; 0x02
    12f2:	19 82       	std	Y+1, r1	; 0x01
    12f4:	eb c6       	rjmp	.+3542   	; 0x20cc <BMP180_ReadCalb+0xe10>
		TWI_Start_Wait(BMP180_ADDRESS_W);// To write
    12f6:	8e ee       	ldi	r24, 0xEE	; 238
    12f8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start_Wait>
    12fc:	9e 01       	movw	r18, r28
    12fe:	2b 57       	subi	r18, 0x7B	; 123
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a0 e2       	ldi	r26, 0x20	; 32
    1308:	b1 e4       	ldi	r27, 0x41	; 65
    130a:	f9 01       	movw	r30, r18
    130c:	80 83       	st	Z, r24
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	a2 83       	std	Z+2, r26	; 0x02
    1312:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1314:	8e 01       	movw	r16, r28
    1316:	07 57       	subi	r16, 0x77	; 119
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	ce 01       	movw	r24, r28
    131c:	8b 57       	subi	r24, 0x7B	; 123
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	2b ea       	ldi	r18, 0xAB	; 171
    1322:	3a ea       	ldi	r19, 0xAA	; 170
    1324:	4a ea       	ldi	r20, 0xAA	; 170
    1326:	50 e4       	ldi	r21, 0x40	; 64
    1328:	fc 01       	movw	r30, r24
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	f8 01       	movw	r30, r16
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	a2 83       	std	Z+2, r26	; 0x02
    1342:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1344:	8e 01       	movw	r16, r28
    1346:	03 57       	subi	r16, 0x73	; 115
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
    134a:	ce 01       	movw	r24, r28
    134c:	8b 57       	subi	r24, 0x7B	; 123
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e8       	ldi	r20, 0x80	; 128
    1356:	50 e4       	ldi	r21, 0x40	; 64
    1358:	fc 01       	movw	r30, r24
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	f8 01       	movw	r30, r16
    136c:	80 83       	st	Z, r24
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	a2 83       	std	Z+2, r26	; 0x02
    1372:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1374:	ce 01       	movw	r24, r28
    1376:	87 57       	subi	r24, 0x77	; 119
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	fc 01       	movw	r30, r24
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1390:	88 23       	and	r24, r24
    1392:	3c f4       	brge	.+14     	; 0x13a2 <BMP180_ReadCalb+0xe6>
		__ticks = 1;
    1394:	ce 01       	movw	r24, r28
    1396:	8f 56       	subi	r24, 0x6F	; 111
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	21 e0       	ldi	r18, 0x01	; 1
    139c:	fc 01       	movw	r30, r24
    139e:	20 83       	st	Z, r18
    13a0:	30 c1       	rjmp	.+608    	; 0x1602 <BMP180_ReadCalb+0x346>
	else if (__tmp2 > 65535)
    13a2:	ce 01       	movw	r24, r28
    13a4:	83 57       	subi	r24, 0x73	; 115
    13a6:	9f 4f       	sbci	r25, 0xFF	; 255
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	3f ef       	ldi	r19, 0xFF	; 255
    13ac:	4f e7       	ldi	r20, 0x7F	; 127
    13ae:	57 e4       	ldi	r21, 0x47	; 71
    13b0:	fc 01       	movw	r30, r24
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    13be:	18 16       	cp	r1, r24
    13c0:	0c f0       	brlt	.+2      	; 0x13c4 <BMP180_ReadCalb+0x108>
    13c2:	d1 c0       	rjmp	.+418    	; 0x1566 <BMP180_ReadCalb+0x2aa>
	{
		_delay_ms(__us / 1000.0);
    13c4:	ce 01       	movw	r24, r28
    13c6:	8b 57       	subi	r24, 0x7B	; 123
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a e7       	ldi	r20, 0x7A	; 122
    13d0:	54 e4       	ldi	r21, 0x44	; 68
    13d2:	fc 01       	movw	r30, r24
    13d4:	60 81       	ld	r22, Z
    13d6:	71 81       	ldd	r23, Z+1	; 0x01
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	93 81       	ldd	r25, Z+3	; 0x03
    13dc:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9e 01       	movw	r18, r28
    13e6:	2e 56       	subi	r18, 0x6E	; 110
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	f9 01       	movw	r30, r18
    13ec:	80 83       	st	Z, r24
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	a2 83       	std	Z+2, r26	; 0x02
    13f2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	8e 01       	movw	r16, r28
    13f6:	0a 56       	subi	r16, 0x6A	; 106
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	ce 01       	movw	r24, r28
    13fc:	8e 56       	subi	r24, 0x6E	; 110
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	4a e7       	ldi	r20, 0x7A	; 122
    1406:	55 e4       	ldi	r21, 0x45	; 69
    1408:	fc 01       	movw	r30, r24
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	f8 01       	movw	r30, r16
    141c:	80 83       	st	Z, r24
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	a2 83       	std	Z+2, r26	; 0x02
    1422:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1424:	ce 01       	movw	r24, r28
    1426:	8a 56       	subi	r24, 0x6A	; 106
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	5f e3       	ldi	r21, 0x3F	; 63
    1432:	fc 01       	movw	r30, r24
    1434:	60 81       	ld	r22, Z
    1436:	71 81       	ldd	r23, Z+1	; 0x01
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1440:	88 23       	and	r24, r24
    1442:	4c f4       	brge	.+18     	; 0x1456 <BMP180_ReadCalb+0x19a>
		__ticks = 1;
    1444:	ce 01       	movw	r24, r28
    1446:	86 56       	subi	r24, 0x66	; 102
    1448:	9f 4f       	sbci	r25, 0xFF	; 255
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	fc 01       	movw	r30, r24
    1450:	31 83       	std	Z+1, r19	; 0x01
    1452:	20 83       	st	Z, r18
    1454:	6d c0       	rjmp	.+218    	; 0x1530 <BMP180_ReadCalb+0x274>
	else if (__tmp > 65535)
    1456:	ce 01       	movw	r24, r28
    1458:	8a 56       	subi	r24, 0x6A	; 106
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	3f ef       	ldi	r19, 0xFF	; 255
    1460:	4f e7       	ldi	r20, 0x7F	; 127
    1462:	57 e4       	ldi	r21, 0x47	; 71
    1464:	fc 01       	movw	r30, r24
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1472:	18 16       	cp	r1, r24
    1474:	0c f0       	brlt	.+2      	; 0x1478 <BMP180_ReadCalb+0x1bc>
    1476:	4a c0       	rjmp	.+148    	; 0x150c <BMP180_ReadCalb+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1478:	ce 01       	movw	r24, r28
    147a:	8e 56       	subi	r24, 0x6E	; 110
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e2       	ldi	r20, 0x20	; 32
    1484:	51 e4       	ldi	r21, 0x41	; 65
    1486:	fc 01       	movw	r30, r24
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8e 01       	movw	r16, r28
    149a:	06 56       	subi	r16, 0x66	; 102
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	f8 01       	movw	r30, r16
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	80 83       	st	Z, r24
    14b0:	24 c0       	rjmp	.+72     	; 0x14fa <BMP180_ReadCalb+0x23e>
    14b2:	ce 01       	movw	r24, r28
    14b4:	84 56       	subi	r24, 0x64	; 100
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	20 e9       	ldi	r18, 0x90	; 144
    14ba:	31 e0       	ldi	r19, 0x01	; 1
    14bc:	fc 01       	movw	r30, r24
    14be:	31 83       	std	Z+1, r19	; 0x01
    14c0:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c2:	ce 01       	movw	r24, r28
    14c4:	84 56       	subi	r24, 0x64	; 100
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	fc 01       	movw	r30, r24
    14ca:	80 81       	ld	r24, Z
    14cc:	91 81       	ldd	r25, Z+1	; 0x01
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <BMP180_ReadCalb+0x212>
    14d2:	9e 01       	movw	r18, r28
    14d4:	24 56       	subi	r18, 0x64	; 100
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	f9 01       	movw	r30, r18
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	ce 01       	movw	r24, r28
    14e0:	86 56       	subi	r24, 0x66	; 102
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	9e 01       	movw	r18, r28
    14e6:	26 56       	subi	r18, 0x66	; 102
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	f9 01       	movw	r30, r18
    14ec:	20 81       	ld	r18, Z
    14ee:	31 81       	ldd	r19, Z+1	; 0x01
    14f0:	21 50       	subi	r18, 0x01	; 1
    14f2:	31 09       	sbc	r19, r1
    14f4:	fc 01       	movw	r30, r24
    14f6:	31 83       	std	Z+1, r19	; 0x01
    14f8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	ce 01       	movw	r24, r28
    14fc:	86 56       	subi	r24, 0x66	; 102
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	fc 01       	movw	r30, r24
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	89 2b       	or	r24, r25
    1508:	a1 f6       	brne	.-88     	; 0x14b2 <BMP180_ReadCalb+0x1f6>
    150a:	7b c0       	rjmp	.+246    	; 0x1602 <BMP180_ReadCalb+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	8e 01       	movw	r16, r28
    150e:	06 56       	subi	r16, 0x66	; 102
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	ce 01       	movw	r24, r28
    1514:	8a 56       	subi	r24, 0x6A	; 106
    1516:	9f 4f       	sbci	r25, 0xFF	; 255
    1518:	fc 01       	movw	r30, r24
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	f8 01       	movw	r30, r16
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
    1530:	ce 01       	movw	r24, r28
    1532:	82 56       	subi	r24, 0x62	; 98
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	9e 01       	movw	r18, r28
    1538:	26 56       	subi	r18, 0x66	; 102
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	f9 01       	movw	r30, r18
    153e:	20 81       	ld	r18, Z
    1540:	31 81       	ldd	r19, Z+1	; 0x01
    1542:	fc 01       	movw	r30, r24
    1544:	31 83       	std	Z+1, r19	; 0x01
    1546:	20 83       	st	Z, r18
    1548:	ce 01       	movw	r24, r28
    154a:	82 56       	subi	r24, 0x62	; 98
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	fc 01       	movw	r30, r24
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <BMP180_ReadCalb+0x298>
    1558:	9e 01       	movw	r18, r28
    155a:	22 56       	subi	r18, 0x62	; 98
    155c:	3f 4f       	sbci	r19, 0xFF	; 255
    155e:	f9 01       	movw	r30, r18
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	4e c0       	rjmp	.+156    	; 0x1602 <BMP180_ReadCalb+0x346>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1566:	ce 01       	movw	r24, r28
    1568:	87 57       	subi	r24, 0x77	; 119
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4f e7       	ldi	r20, 0x7F	; 127
    1572:	53 e4       	ldi	r21, 0x43	; 67
    1574:	fc 01       	movw	r30, r24
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1582:	18 16       	cp	r1, r24
    1584:	6c f5       	brge	.+90     	; 0x15e0 <BMP180_ReadCalb+0x324>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1586:	8e 01       	movw	r16, r28
    1588:	00 56       	subi	r16, 0x60	; 96
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	ce 01       	movw	r24, r28
    158e:	83 57       	subi	r24, 0x73	; 115
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	fc 01       	movw	r30, r24
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	f8 01       	movw	r30, r16
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
    15aa:	ce 01       	movw	r24, r28
    15ac:	8e 55       	subi	r24, 0x5E	; 94
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	9e 01       	movw	r18, r28
    15b2:	20 56       	subi	r18, 0x60	; 96
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	f9 01       	movw	r30, r18
    15b8:	20 81       	ld	r18, Z
    15ba:	31 81       	ldd	r19, Z+1	; 0x01
    15bc:	fc 01       	movw	r30, r24
    15be:	31 83       	std	Z+1, r19	; 0x01
    15c0:	20 83       	st	Z, r18
    15c2:	ce 01       	movw	r24, r28
    15c4:	8e 55       	subi	r24, 0x5E	; 94
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	fc 01       	movw	r30, r24
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <BMP180_ReadCalb+0x312>
    15d2:	9e 01       	movw	r18, r28
    15d4:	2e 55       	subi	r18, 0x5E	; 94
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	f9 01       	movw	r30, r18
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	28 c0       	rjmp	.+80     	; 0x1630 <BMP180_ReadCalb+0x374>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15e0:	8e 01       	movw	r16, r28
    15e2:	0f 56       	subi	r16, 0x6F	; 111
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	ce 01       	movw	r24, r28
    15e8:	87 57       	subi	r24, 0x77	; 119
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	fc 01       	movw	r30, r24
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	f8 01       	movw	r30, r16
    1600:	80 83       	st	Z, r24
    1602:	ce 01       	movw	r24, r28
    1604:	8c 55       	subi	r24, 0x5C	; 92
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	9e 01       	movw	r18, r28
    160a:	2f 56       	subi	r18, 0x6F	; 111
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	f9 01       	movw	r30, r18
    1610:	20 81       	ld	r18, Z
    1612:	fc 01       	movw	r30, r24
    1614:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1616:	ce 01       	movw	r24, r28
    1618:	8c 55       	subi	r24, 0x5C	; 92
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	fc 01       	movw	r30, r24
    161e:	80 81       	ld	r24, Z
    1620:	28 2f       	mov	r18, r24
    1622:	2a 95       	dec	r18
    1624:	f1 f7       	brne	.-4      	; 0x1622 <BMP180_ReadCalb+0x366>
    1626:	ce 01       	movw	r24, r28
    1628:	8c 55       	subi	r24, 0x5C	; 92
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	fc 01       	movw	r30, r24
    162e:	20 83       	st	Z, r18
		_delay_us(10);
		TWI_WriteByte(Callib_Start + i);
    1630:	9b 81       	ldd	r25, Y+3	; 0x03
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	89 0f       	add	r24, r25
    1636:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
    163a:	9e 01       	movw	r18, r28
    163c:	2b 59       	subi	r18, 0x9B	; 155
    163e:	3f 4f       	sbci	r19, 0xFF	; 255
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e2       	ldi	r26, 0x20	; 32
    1646:	b1 e4       	ldi	r27, 0x41	; 65
    1648:	f9 01       	movw	r30, r18
    164a:	80 83       	st	Z, r24
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	a2 83       	std	Z+2, r26	; 0x02
    1650:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1652:	8e 01       	movw	r16, r28
    1654:	07 59       	subi	r16, 0x97	; 151
    1656:	1f 4f       	sbci	r17, 0xFF	; 255
    1658:	ce 01       	movw	r24, r28
    165a:	8b 59       	subi	r24, 0x9B	; 155
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	2b ea       	ldi	r18, 0xAB	; 171
    1660:	3a ea       	ldi	r19, 0xAA	; 170
    1662:	4a ea       	ldi	r20, 0xAA	; 170
    1664:	50 e4       	ldi	r21, 0x40	; 64
    1666:	fc 01       	movw	r30, r24
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	f8 01       	movw	r30, r16
    167a:	80 83       	st	Z, r24
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	a2 83       	std	Z+2, r26	; 0x02
    1680:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1682:	8e 01       	movw	r16, r28
    1684:	03 59       	subi	r16, 0x93	; 147
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	ce 01       	movw	r24, r28
    168a:	8b 59       	subi	r24, 0x9B	; 155
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	50 e4       	ldi	r21, 0x40	; 64
    1696:	fc 01       	movw	r30, r24
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	80 83       	st	Z, r24
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	a2 83       	std	Z+2, r26	; 0x02
    16b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16b2:	ce 01       	movw	r24, r28
    16b4:	87 59       	subi	r24, 0x97	; 151
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	fc 01       	movw	r30, r24
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	3c f4       	brge	.+14     	; 0x16e0 <BMP180_ReadCalb+0x424>
		__ticks = 1;
    16d2:	ce 01       	movw	r24, r28
    16d4:	8f 58       	subi	r24, 0x8F	; 143
    16d6:	9f 4f       	sbci	r25, 0xFF	; 255
    16d8:	21 e0       	ldi	r18, 0x01	; 1
    16da:	fc 01       	movw	r30, r24
    16dc:	20 83       	st	Z, r18
    16de:	30 c1       	rjmp	.+608    	; 0x1940 <BMP180_ReadCalb+0x684>
	else if (__tmp2 > 65535)
    16e0:	ce 01       	movw	r24, r28
    16e2:	83 59       	subi	r24, 0x93	; 147
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	fc 01       	movw	r30, r24
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	93 81       	ldd	r25, Z+3	; 0x03
    16f8:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	0c f0       	brlt	.+2      	; 0x1702 <BMP180_ReadCalb+0x446>
    1700:	d1 c0       	rjmp	.+418    	; 0x18a4 <BMP180_ReadCalb+0x5e8>
	{
		_delay_ms(__us / 1000.0);
    1702:	ce 01       	movw	r24, r28
    1704:	8b 59       	subi	r24, 0x9B	; 155
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a e7       	ldi	r20, 0x7A	; 122
    170e:	54 e4       	ldi	r21, 0x44	; 68
    1710:	fc 01       	movw	r30, r24
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 01       	movw	r18, r28
    1724:	2e 58       	subi	r18, 0x8E	; 142
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	f9 01       	movw	r30, r18
    172a:	80 83       	st	Z, r24
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	a2 83       	std	Z+2, r26	; 0x02
    1730:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1732:	8e 01       	movw	r16, r28
    1734:	0a 58       	subi	r16, 0x8A	; 138
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	ce 01       	movw	r24, r28
    173a:	8e 58       	subi	r24, 0x8E	; 142
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a e7       	ldi	r20, 0x7A	; 122
    1744:	55 e4       	ldi	r21, 0x45	; 69
    1746:	fc 01       	movw	r30, r24
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	80 83       	st	Z, r24
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	a2 83       	std	Z+2, r26	; 0x02
    1760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1762:	ce 01       	movw	r24, r28
    1764:	8a 58       	subi	r24, 0x8A	; 138
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	fc 01       	movw	r30, r24
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    177e:	88 23       	and	r24, r24
    1780:	4c f4       	brge	.+18     	; 0x1794 <BMP180_ReadCalb+0x4d8>
		__ticks = 1;
    1782:	ce 01       	movw	r24, r28
    1784:	86 58       	subi	r24, 0x86	; 134
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	fc 01       	movw	r30, r24
    178e:	31 83       	std	Z+1, r19	; 0x01
    1790:	20 83       	st	Z, r18
    1792:	6d c0       	rjmp	.+218    	; 0x186e <BMP180_ReadCalb+0x5b2>
	else if (__tmp > 65535)
    1794:	ce 01       	movw	r24, r28
    1796:	8a 58       	subi	r24, 0x8A	; 138
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	fc 01       	movw	r30, r24
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	0c f0       	brlt	.+2      	; 0x17b6 <BMP180_ReadCalb+0x4fa>
    17b4:	4a c0       	rjmp	.+148    	; 0x184a <BMP180_ReadCalb+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b6:	ce 01       	movw	r24, r28
    17b8:	8e 58       	subi	r24, 0x8E	; 142
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e2       	ldi	r20, 0x20	; 32
    17c2:	51 e4       	ldi	r21, 0x41	; 65
    17c4:	fc 01       	movw	r30, r24
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8e 01       	movw	r16, r28
    17d8:	06 58       	subi	r16, 0x86	; 134
    17da:	1f 4f       	sbci	r17, 0xFF	; 255
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	f8 01       	movw	r30, r16
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24
    17ee:	24 c0       	rjmp	.+72     	; 0x1838 <BMP180_ReadCalb+0x57c>
    17f0:	ce 01       	movw	r24, r28
    17f2:	84 58       	subi	r24, 0x84	; 132
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	20 e9       	ldi	r18, 0x90	; 144
    17f8:	31 e0       	ldi	r19, 0x01	; 1
    17fa:	fc 01       	movw	r30, r24
    17fc:	31 83       	std	Z+1, r19	; 0x01
    17fe:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1800:	ce 01       	movw	r24, r28
    1802:	84 58       	subi	r24, 0x84	; 132
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	fc 01       	movw	r30, r24
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <BMP180_ReadCalb+0x550>
    1810:	9e 01       	movw	r18, r28
    1812:	24 58       	subi	r18, 0x84	; 132
    1814:	3f 4f       	sbci	r19, 0xFF	; 255
    1816:	f9 01       	movw	r30, r18
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	ce 01       	movw	r24, r28
    181e:	86 58       	subi	r24, 0x86	; 134
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	9e 01       	movw	r18, r28
    1824:	26 58       	subi	r18, 0x86	; 134
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	f9 01       	movw	r30, r18
    182a:	20 81       	ld	r18, Z
    182c:	31 81       	ldd	r19, Z+1	; 0x01
    182e:	21 50       	subi	r18, 0x01	; 1
    1830:	31 09       	sbc	r19, r1
    1832:	fc 01       	movw	r30, r24
    1834:	31 83       	std	Z+1, r19	; 0x01
    1836:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1838:	ce 01       	movw	r24, r28
    183a:	86 58       	subi	r24, 0x86	; 134
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	fc 01       	movw	r30, r24
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	89 2b       	or	r24, r25
    1846:	a1 f6       	brne	.-88     	; 0x17f0 <BMP180_ReadCalb+0x534>
    1848:	7b c0       	rjmp	.+246    	; 0x1940 <BMP180_ReadCalb+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	8e 01       	movw	r16, r28
    184c:	06 58       	subi	r16, 0x86	; 134
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	ce 01       	movw	r24, r28
    1852:	8a 58       	subi	r24, 0x8A	; 138
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	fc 01       	movw	r30, r24
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	f8 01       	movw	r30, r16
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
    186e:	ce 01       	movw	r24, r28
    1870:	82 58       	subi	r24, 0x82	; 130
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	9e 01       	movw	r18, r28
    1876:	26 58       	subi	r18, 0x86	; 134
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	f9 01       	movw	r30, r18
    187c:	20 81       	ld	r18, Z
    187e:	31 81       	ldd	r19, Z+1	; 0x01
    1880:	fc 01       	movw	r30, r24
    1882:	31 83       	std	Z+1, r19	; 0x01
    1884:	20 83       	st	Z, r18
    1886:	ce 01       	movw	r24, r28
    1888:	82 58       	subi	r24, 0x82	; 130
    188a:	9f 4f       	sbci	r25, 0xFF	; 255
    188c:	fc 01       	movw	r30, r24
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <BMP180_ReadCalb+0x5d6>
    1896:	9e 01       	movw	r18, r28
    1898:	22 58       	subi	r18, 0x82	; 130
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	f9 01       	movw	r30, r18
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
    18a2:	4e c0       	rjmp	.+156    	; 0x1940 <BMP180_ReadCalb+0x684>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    18a4:	ce 01       	movw	r24, r28
    18a6:	87 59       	subi	r24, 0x97	; 151
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	53 e4       	ldi	r21, 0x43	; 67
    18b2:	fc 01       	movw	r30, r24
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    18c0:	18 16       	cp	r1, r24
    18c2:	6c f5       	brge	.+90     	; 0x191e <BMP180_ReadCalb+0x662>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    18c4:	8e 01       	movw	r16, r28
    18c6:	00 58       	subi	r16, 0x80	; 128
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	ce 01       	movw	r24, r28
    18cc:	83 59       	subi	r24, 0x93	; 147
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	fc 01       	movw	r30, r24
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	f8 01       	movw	r30, r16
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	ce 01       	movw	r24, r28
    18ea:	8e 57       	subi	r24, 0x7E	; 126
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	9e 01       	movw	r18, r28
    18f0:	20 58       	subi	r18, 0x80	; 128
    18f2:	3f 4f       	sbci	r19, 0xFF	; 255
    18f4:	f9 01       	movw	r30, r18
    18f6:	20 81       	ld	r18, Z
    18f8:	31 81       	ldd	r19, Z+1	; 0x01
    18fa:	fc 01       	movw	r30, r24
    18fc:	31 83       	std	Z+1, r19	; 0x01
    18fe:	20 83       	st	Z, r18
    1900:	ce 01       	movw	r24, r28
    1902:	8e 57       	subi	r24, 0x7E	; 126
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <BMP180_ReadCalb+0x650>
    1910:	9e 01       	movw	r18, r28
    1912:	2e 57       	subi	r18, 0x7E	; 126
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	f9 01       	movw	r30, r18
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
    191c:	28 c0       	rjmp	.+80     	; 0x196e <BMP180_ReadCalb+0x6b2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    191e:	8e 01       	movw	r16, r28
    1920:	0f 58       	subi	r16, 0x8F	; 143
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	ce 01       	movw	r24, r28
    1926:	87 59       	subi	r24, 0x97	; 151
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	fc 01       	movw	r30, r24
    192c:	60 81       	ld	r22, Z
    192e:	71 81       	ldd	r23, Z+1	; 0x01
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	93 81       	ldd	r25, Z+3	; 0x03
    1934:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	f8 01       	movw	r30, r16
    193e:	80 83       	st	Z, r24
    1940:	ce 01       	movw	r24, r28
    1942:	8c 57       	subi	r24, 0x7C	; 124
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	9e 01       	movw	r18, r28
    1948:	2f 58       	subi	r18, 0x8F	; 143
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	f9 01       	movw	r30, r18
    194e:	20 81       	ld	r18, Z
    1950:	fc 01       	movw	r30, r24
    1952:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1954:	ce 01       	movw	r24, r28
    1956:	8c 57       	subi	r24, 0x7C	; 124
    1958:	9f 4f       	sbci	r25, 0xFF	; 255
    195a:	fc 01       	movw	r30, r24
    195c:	80 81       	ld	r24, Z
    195e:	28 2f       	mov	r18, r24
    1960:	2a 95       	dec	r18
    1962:	f1 f7       	brne	.-4      	; 0x1960 <BMP180_ReadCalb+0x6a4>
    1964:	ce 01       	movw	r24, r28
    1966:	8c 57       	subi	r24, 0x7C	; 124
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	fc 01       	movw	r30, r24
    196c:	20 83       	st	Z, r18
		_delay_us(10);
		TWI_Repeated_start(BMP180_ADDRESS_R);	// To read
    196e:	8f ee       	ldi	r24, 0xEF	; 239
    1970:	0e 94 b2 00 	call	0x164	; 0x164 <TWI_Repeated_start>
    1974:	9e 01       	movw	r18, r28
    1976:	2b 5b       	subi	r18, 0xBB	; 187
    1978:	3f 4f       	sbci	r19, 0xFF	; 255
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e2       	ldi	r26, 0x20	; 32
    1980:	b1 e4       	ldi	r27, 0x41	; 65
    1982:	f9 01       	movw	r30, r18
    1984:	80 83       	st	Z, r24
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	a2 83       	std	Z+2, r26	; 0x02
    198a:	b3 83       	std	Z+3, r27	; 0x03
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    198c:	8e 01       	movw	r16, r28
    198e:	07 5b       	subi	r16, 0xB7	; 183
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	ce 01       	movw	r24, r28
    1994:	8b 5b       	subi	r24, 0xBB	; 187
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	2b ea       	ldi	r18, 0xAB	; 171
    199a:	3a ea       	ldi	r19, 0xAA	; 170
    199c:	4a ea       	ldi	r20, 0xAA	; 170
    199e:	50 e4       	ldi	r21, 0x40	; 64
    19a0:	fc 01       	movw	r30, r24
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	f8 01       	movw	r30, r16
    19b4:	80 83       	st	Z, r24
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	a2 83       	std	Z+2, r26	; 0x02
    19ba:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    19bc:	8e 01       	movw	r16, r28
    19be:	03 5b       	subi	r16, 0xB3	; 179
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	ce 01       	movw	r24, r28
    19c4:	8b 5b       	subi	r24, 0xBB	; 187
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	50 e4       	ldi	r21, 0x40	; 64
    19d0:	fc 01       	movw	r30, r24
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	f8 01       	movw	r30, r16
    19e4:	80 83       	st	Z, r24
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	a2 83       	std	Z+2, r26	; 0x02
    19ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ec:	ce 01       	movw	r24, r28
    19ee:	87 5b       	subi	r24, 0xB7	; 183
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	fc 01       	movw	r30, r24
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	3c f4       	brge	.+14     	; 0x1a1a <BMP180_ReadCalb+0x75e>
		__ticks = 1;
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	8f 5a       	subi	r24, 0xAF	; 175
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	21 e0       	ldi	r18, 0x01	; 1
    1a14:	fc 01       	movw	r30, r24
    1a16:	20 83       	st	Z, r18
    1a18:	30 c1       	rjmp	.+608    	; 0x1c7a <BMP180_ReadCalb+0x9be>
	else if (__tmp2 > 65535)
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	83 5b       	subi	r24, 0xB3	; 179
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	fc 01       	movw	r30, r24
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	0c f0       	brlt	.+2      	; 0x1a3c <BMP180_ReadCalb+0x780>
    1a3a:	d1 c0       	rjmp	.+418    	; 0x1bde <BMP180_ReadCalb+0x922>
	{
		_delay_ms(__us / 1000.0);
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	8b 5b       	subi	r24, 0xBB	; 187
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a e7       	ldi	r20, 0x7A	; 122
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	60 81       	ld	r22, Z
    1a4e:	71 81       	ldd	r23, Z+1	; 0x01
    1a50:	82 81       	ldd	r24, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 01       	movw	r18, r28
    1a5e:	2e 5a       	subi	r18, 0xAE	; 174
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	f9 01       	movw	r30, r18
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	8e 01       	movw	r16, r28
    1a6e:	0a 5a       	subi	r16, 0xAA	; 170
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	ce 01       	movw	r24, r28
    1a74:	8e 5a       	subi	r24, 0xAE	; 174
    1a76:	9f 4f       	sbci	r25, 0xFF	; 255
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	4a e7       	ldi	r20, 0x7A	; 122
    1a7e:	55 e4       	ldi	r21, 0x45	; 69
    1a80:	fc 01       	movw	r30, r24
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 83       	st	Z, r24
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	a2 83       	std	Z+2, r26	; 0x02
    1a9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	8a 5a       	subi	r24, 0xAA	; 170
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	fc 01       	movw	r30, r24
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	4c f4       	brge	.+18     	; 0x1ace <BMP180_ReadCalb+0x812>
		__ticks = 1;
    1abc:	ce 01       	movw	r24, r28
    1abe:	86 5a       	subi	r24, 0xA6	; 166
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	21 e0       	ldi	r18, 0x01	; 1
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	31 83       	std	Z+1, r19	; 0x01
    1aca:	20 83       	st	Z, r18
    1acc:	6d c0       	rjmp	.+218    	; 0x1ba8 <BMP180_ReadCalb+0x8ec>
	else if (__tmp > 65535)
    1ace:	ce 01       	movw	r24, r28
    1ad0:	8a 5a       	subi	r24, 0xAA	; 170
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	3f ef       	ldi	r19, 0xFF	; 255
    1ad8:	4f e7       	ldi	r20, 0x7F	; 127
    1ada:	57 e4       	ldi	r21, 0x47	; 71
    1adc:	fc 01       	movw	r30, r24
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	0c f0       	brlt	.+2      	; 0x1af0 <BMP180_ReadCalb+0x834>
    1aee:	4a c0       	rjmp	.+148    	; 0x1b84 <BMP180_ReadCalb+0x8c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	ce 01       	movw	r24, r28
    1af2:	8e 5a       	subi	r24, 0xAE	; 174
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	51 e4       	ldi	r21, 0x41	; 65
    1afe:	fc 01       	movw	r30, r24
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8e 01       	movw	r16, r28
    1b12:	06 5a       	subi	r16, 0xA6	; 166
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	f8 01       	movw	r30, r16
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	24 c0       	rjmp	.+72     	; 0x1b72 <BMP180_ReadCalb+0x8b6>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	84 5a       	subi	r24, 0xA4	; 164
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	20 e9       	ldi	r18, 0x90	; 144
    1b32:	31 e0       	ldi	r19, 0x01	; 1
    1b34:	fc 01       	movw	r30, r24
    1b36:	31 83       	std	Z+1, r19	; 0x01
    1b38:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	84 5a       	subi	r24, 0xA4	; 164
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	fc 01       	movw	r30, r24
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <BMP180_ReadCalb+0x88a>
    1b4a:	9e 01       	movw	r18, r28
    1b4c:	24 5a       	subi	r18, 0xA4	; 164
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	f9 01       	movw	r30, r18
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	ce 01       	movw	r24, r28
    1b58:	86 5a       	subi	r24, 0xA6	; 166
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	9e 01       	movw	r18, r28
    1b5e:	26 5a       	subi	r18, 0xA6	; 166
    1b60:	3f 4f       	sbci	r19, 0xFF	; 255
    1b62:	f9 01       	movw	r30, r18
    1b64:	20 81       	ld	r18, Z
    1b66:	31 81       	ldd	r19, Z+1	; 0x01
    1b68:	21 50       	subi	r18, 0x01	; 1
    1b6a:	31 09       	sbc	r19, r1
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	31 83       	std	Z+1, r19	; 0x01
    1b70:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	ce 01       	movw	r24, r28
    1b74:	86 5a       	subi	r24, 0xA6	; 166
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	fc 01       	movw	r30, r24
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	89 2b       	or	r24, r25
    1b80:	a1 f6       	brne	.-88     	; 0x1b2a <BMP180_ReadCalb+0x86e>
    1b82:	7b c0       	rjmp	.+246    	; 0x1c7a <BMP180_ReadCalb+0x9be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b84:	8e 01       	movw	r16, r28
    1b86:	06 5a       	subi	r16, 0xA6	; 166
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	8a 5a       	subi	r24, 0xAA	; 170
    1b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b90:	fc 01       	movw	r30, r24
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	ce 01       	movw	r24, r28
    1baa:	82 5a       	subi	r24, 0xA2	; 162
    1bac:	9f 4f       	sbci	r25, 0xFF	; 255
    1bae:	9e 01       	movw	r18, r28
    1bb0:	26 5a       	subi	r18, 0xA6	; 166
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	f9 01       	movw	r30, r18
    1bb6:	20 81       	ld	r18, Z
    1bb8:	31 81       	ldd	r19, Z+1	; 0x01
    1bba:	fc 01       	movw	r30, r24
    1bbc:	31 83       	std	Z+1, r19	; 0x01
    1bbe:	20 83       	st	Z, r18
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	82 5a       	subi	r24, 0xA2	; 162
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <BMP180_ReadCalb+0x910>
    1bd0:	9e 01       	movw	r18, r28
    1bd2:	22 5a       	subi	r18, 0xA2	; 162
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	f9 01       	movw	r30, r18
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	4e c0       	rjmp	.+156    	; 0x1c7a <BMP180_ReadCalb+0x9be>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1bde:	ce 01       	movw	r24, r28
    1be0:	87 5b       	subi	r24, 0xB7	; 183
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	53 e4       	ldi	r21, 0x43	; 67
    1bec:	fc 01       	movw	r30, r24
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	6c f5       	brge	.+90     	; 0x1c58 <BMP180_ReadCalb+0x99c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1bfe:	8e 01       	movw	r16, r28
    1c00:	00 5a       	subi	r16, 0xA0	; 160
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	ce 01       	movw	r24, r28
    1c06:	83 5b       	subi	r24, 0xB3	; 179
    1c08:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
    1c22:	ce 01       	movw	r24, r28
    1c24:	8e 59       	subi	r24, 0x9E	; 158
    1c26:	9f 4f       	sbci	r25, 0xFF	; 255
    1c28:	9e 01       	movw	r18, r28
    1c2a:	20 5a       	subi	r18, 0xA0	; 160
    1c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2e:	f9 01       	movw	r30, r18
    1c30:	20 81       	ld	r18, Z
    1c32:	31 81       	ldd	r19, Z+1	; 0x01
    1c34:	fc 01       	movw	r30, r24
    1c36:	31 83       	std	Z+1, r19	; 0x01
    1c38:	20 83       	st	Z, r18
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	8e 59       	subi	r24, 0x9E	; 158
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	fc 01       	movw	r30, r24
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <BMP180_ReadCalb+0x98a>
    1c4a:	9e 01       	movw	r18, r28
    1c4c:	2e 59       	subi	r18, 0x9E	; 158
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	f9 01       	movw	r30, r18
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	28 c0       	rjmp	.+80     	; 0x1ca8 <BMP180_ReadCalb+0x9ec>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c58:	8e 01       	movw	r16, r28
    1c5a:	0f 5a       	subi	r16, 0xAF	; 175
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	ce 01       	movw	r24, r28
    1c60:	87 5b       	subi	r24, 0xB7	; 183
    1c62:	9f 4f       	sbci	r25, 0xFF	; 255
    1c64:	fc 01       	movw	r30, r24
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	f8 01       	movw	r30, r16
    1c78:	80 83       	st	Z, r24
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	8c 59       	subi	r24, 0x9C	; 156
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	9e 01       	movw	r18, r28
    1c82:	2f 5a       	subi	r18, 0xAF	; 175
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	f9 01       	movw	r30, r18
    1c88:	20 81       	ld	r18, Z
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c8e:	ce 01       	movw	r24, r28
    1c90:	8c 59       	subi	r24, 0x9C	; 156
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	fc 01       	movw	r30, r24
    1c96:	80 81       	ld	r24, Z
    1c98:	28 2f       	mov	r18, r24
    1c9a:	2a 95       	dec	r18
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <BMP180_ReadCalb+0x9de>
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	8c 59       	subi	r24, 0x9C	; 156
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	20 83       	st	Z, r18
		_delay_us(10);
		Callib_Data[i] = TWI_ReadByteWithNACK();
    1ca8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_ReadByteWithNACK>
    1cac:	48 2f       	mov	r20, r24
    1cae:	9e 01       	movw	r18, r28
    1cb0:	2b 55       	subi	r18, 0x5B	; 91
    1cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	40 83       	st	Z, r20
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e2       	ldi	r26, 0x20	; 32
    1cc6:	b1 e4       	ldi	r27, 0x41	; 65
    1cc8:	8d a3       	std	Y+37, r24	; 0x25
    1cca:	9e a3       	std	Y+38, r25	; 0x26
    1ccc:	af a3       	std	Y+39, r26	; 0x27
    1cce:	b8 a7       	std	Y+40, r27	; 0x28
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1cd0:	2b ea       	ldi	r18, 0xAB	; 171
    1cd2:	3a ea       	ldi	r19, 0xAA	; 170
    1cd4:	4a ea       	ldi	r20, 0xAA	; 170
    1cd6:	50 e4       	ldi	r21, 0x40	; 64
    1cd8:	6d a1       	ldd	r22, Y+37	; 0x25
    1cda:	7e a1       	ldd	r23, Y+38	; 0x26
    1cdc:	8f a1       	ldd	r24, Y+39	; 0x27
    1cde:	98 a5       	ldd	r25, Y+40	; 0x28
    1ce0:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	89 a7       	std	Y+41, r24	; 0x29
    1cea:	9a a7       	std	Y+42, r25	; 0x2a
    1cec:	ab a7       	std	Y+43, r26	; 0x2b
    1cee:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	50 e4       	ldi	r21, 0x40	; 64
    1cf8:	6d a1       	ldd	r22, Y+37	; 0x25
    1cfa:	7e a1       	ldd	r23, Y+38	; 0x26
    1cfc:	8f a1       	ldd	r24, Y+39	; 0x27
    1cfe:	98 a5       	ldd	r25, Y+40	; 0x28
    1d00:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8d a7       	std	Y+45, r24	; 0x2d
    1d0a:	9e a7       	std	Y+46, r25	; 0x2e
    1d0c:	af a7       	std	Y+47, r26	; 0x2f
    1d0e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	69 a5       	ldd	r22, Y+41	; 0x29
    1d1a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d20:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	1c f4       	brge	.+6      	; 0x1d2e <BMP180_ReadCalb+0xa72>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	89 ab       	std	Y+49, r24	; 0x31
    1d2c:	c6 c0       	rjmp	.+396    	; 0x1eba <BMP180_ReadCalb+0xbfe>
	else if (__tmp2 > 65535)
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d38:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3e:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1d42:	18 16       	cp	r1, r24
    1d44:	0c f0       	brlt	.+2      	; 0x1d48 <BMP180_ReadCalb+0xa8c>
    1d46:	7b c0       	rjmp	.+246    	; 0x1e3e <BMP180_ReadCalb+0xb82>
	{
		_delay_ms(__us / 1000.0);
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a e7       	ldi	r20, 0x7A	; 122
    1d4e:	54 e4       	ldi	r21, 0x44	; 68
    1d50:	6d a1       	ldd	r22, Y+37	; 0x25
    1d52:	7e a1       	ldd	r23, Y+38	; 0x26
    1d54:	8f a1       	ldd	r24, Y+39	; 0x27
    1d56:	98 a5       	ldd	r25, Y+40	; 0x28
    1d58:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8a ab       	std	Y+50, r24	; 0x32
    1d62:	9b ab       	std	Y+51, r25	; 0x33
    1d64:	ac ab       	std	Y+52, r26	; 0x34
    1d66:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4a e7       	ldi	r20, 0x7A	; 122
    1d6e:	55 e4       	ldi	r21, 0x45	; 69
    1d70:	6a a9       	ldd	r22, Y+50	; 0x32
    1d72:	7b a9       	ldd	r23, Y+51	; 0x33
    1d74:	8c a9       	ldd	r24, Y+52	; 0x34
    1d76:	9d a9       	ldd	r25, Y+53	; 0x35
    1d78:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8e ab       	std	Y+54, r24	; 0x36
    1d82:	9f ab       	std	Y+55, r25	; 0x37
    1d84:	a8 af       	std	Y+56, r26	; 0x38
    1d86:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e8       	ldi	r20, 0x80	; 128
    1d8e:	5f e3       	ldi	r21, 0x3F	; 63
    1d90:	6e a9       	ldd	r22, Y+54	; 0x36
    1d92:	7f a9       	ldd	r23, Y+55	; 0x37
    1d94:	88 ad       	ldd	r24, Y+56	; 0x38
    1d96:	99 ad       	ldd	r25, Y+57	; 0x39
    1d98:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <BMP180_ReadCalb+0xaee>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9b af       	std	Y+59, r25	; 0x3b
    1da6:	8a af       	std	Y+58, r24	; 0x3a
    1da8:	3f c0       	rjmp	.+126    	; 0x1e28 <BMP180_ReadCalb+0xb6c>
	else if (__tmp > 65535)
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	6e a9       	ldd	r22, Y+54	; 0x36
    1db4:	7f a9       	ldd	r23, Y+55	; 0x37
    1db6:	88 ad       	ldd	r24, Y+56	; 0x38
    1db8:	99 ad       	ldd	r25, Y+57	; 0x39
    1dba:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1dbe:	18 16       	cp	r1, r24
    1dc0:	4c f5       	brge	.+82     	; 0x1e14 <BMP180_ReadCalb+0xb58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	6a a9       	ldd	r22, Y+50	; 0x32
    1dcc:	7b a9       	ldd	r23, Y+51	; 0x33
    1dce:	8c a9       	ldd	r24, Y+52	; 0x34
    1dd0:	9d a9       	ldd	r25, Y+53	; 0x35
    1dd2:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9b af       	std	Y+59, r25	; 0x3b
    1de8:	8a af       	std	Y+58, r24	; 0x3a
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <BMP180_ReadCalb+0xb4e>
    1dec:	80 e9       	ldi	r24, 0x90	; 144
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	9d af       	std	Y+61, r25	; 0x3d
    1df2:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1df4:	8c ad       	ldd	r24, Y+60	; 0x3c
    1df6:	9d ad       	ldd	r25, Y+61	; 0x3d
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <BMP180_ReadCalb+0xb3c>
    1dfc:	9d af       	std	Y+61, r25	; 0x3d
    1dfe:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e02:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9b af       	std	Y+59, r25	; 0x3b
    1e08:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e0c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e0e:	89 2b       	or	r24, r25
    1e10:	69 f7       	brne	.-38     	; 0x1dec <BMP180_ReadCalb+0xb30>
    1e12:	53 c0       	rjmp	.+166    	; 0x1eba <BMP180_ReadCalb+0xbfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e14:	6e a9       	ldd	r22, Y+54	; 0x36
    1e16:	7f a9       	ldd	r23, Y+55	; 0x37
    1e18:	88 ad       	ldd	r24, Y+56	; 0x38
    1e1a:	99 ad       	ldd	r25, Y+57	; 0x39
    1e1c:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9b af       	std	Y+59, r25	; 0x3b
    1e26:	8a af       	std	Y+58, r24	; 0x3a
    1e28:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e2a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e2c:	9f af       	std	Y+63, r25	; 0x3f
    1e2e:	8e af       	std	Y+62, r24	; 0x3e
    1e30:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e32:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <BMP180_ReadCalb+0xb78>
    1e38:	9f af       	std	Y+63, r25	; 0x3f
    1e3a:	8e af       	std	Y+62, r24	; 0x3e
    1e3c:	3e c0       	rjmp	.+124    	; 0x1eba <BMP180_ReadCalb+0xbfe>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	53 e4       	ldi	r21, 0x43	; 67
    1e46:	69 a5       	ldd	r22, Y+41	; 0x29
    1e48:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4e:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <BMP180_ReadCalb+0xbec>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1e56:	8e 01       	movw	r16, r28
    1e58:	00 5c       	subi	r16, 0xC0	; 192
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e62:	98 a9       	ldd	r25, Y+48	; 0x30
    1e64:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24
    1e72:	ce 01       	movw	r24, r28
    1e74:	8e 5b       	subi	r24, 0xBE	; 190
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	9e 01       	movw	r18, r28
    1e7a:	20 5c       	subi	r18, 0xC0	; 192
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	f9 01       	movw	r30, r18
    1e80:	20 81       	ld	r18, Z
    1e82:	31 81       	ldd	r19, Z+1	; 0x01
    1e84:	fc 01       	movw	r30, r24
    1e86:	31 83       	std	Z+1, r19	; 0x01
    1e88:	20 83       	st	Z, r18
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	8e 5b       	subi	r24, 0xBE	; 190
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	fc 01       	movw	r30, r24
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <BMP180_ReadCalb+0xbda>
    1e9a:	9e 01       	movw	r18, r28
    1e9c:	2e 5b       	subi	r18, 0xBE	; 190
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
    1ea6:	1c c0       	rjmp	.+56     	; 0x1ee0 <BMP180_ReadCalb+0xc24>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ea8:	69 a5       	ldd	r22, Y+41	; 0x29
    1eaa:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb0:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	89 ab       	std	Y+49, r24	; 0x31
    1eba:	ce 01       	movw	r24, r28
    1ebc:	8c 5b       	subi	r24, 0xBC	; 188
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	29 a9       	ldd	r18, Y+49	; 0x31
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	8c 5b       	subi	r24, 0xBC	; 188
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	fc 01       	movw	r30, r24
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	2a 95       	dec	r18
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <BMP180_ReadCalb+0xc16>
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	8c 5b       	subi	r24, 0xBC	; 188
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	fc 01       	movw	r30, r24
    1ede:	20 83       	st	Z, r18
		_delay_us(10);
		TWI_Stop();
    1ee0:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e2       	ldi	r26, 0x20	; 32
    1eea:	b1 e4       	ldi	r27, 0x41	; 65
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	af 83       	std	Y+7, r26	; 0x07
    1ef2:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1ef4:	2b ea       	ldi	r18, 0xAB	; 171
    1ef6:	3a ea       	ldi	r19, 0xAA	; 170
    1ef8:	4a ea       	ldi	r20, 0xAA	; 170
    1efa:	50 e4       	ldi	r21, 0x40	; 64
    1efc:	6d 81       	ldd	r22, Y+5	; 0x05
    1efe:	7e 81       	ldd	r23, Y+6	; 0x06
    1f00:	8f 81       	ldd	r24, Y+7	; 0x07
    1f02:	98 85       	ldd	r25, Y+8	; 0x08
    1f04:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	89 87       	std	Y+9, r24	; 0x09
    1f0e:	9a 87       	std	Y+10, r25	; 0x0a
    1f10:	ab 87       	std	Y+11, r26	; 0x0b
    1f12:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	50 e4       	ldi	r21, 0x40	; 64
    1f1c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f1e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f20:	8f 81       	ldd	r24, Y+7	; 0x07
    1f22:	98 85       	ldd	r25, Y+8	; 0x08
    1f24:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	8d 87       	std	Y+13, r24	; 0x0d
    1f2e:	9e 87       	std	Y+14, r25	; 0x0e
    1f30:	af 87       	std	Y+15, r26	; 0x0f
    1f32:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	69 85       	ldd	r22, Y+9	; 0x09
    1f3e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f42:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f44:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1f48:	88 23       	and	r24, r24
    1f4a:	1c f4       	brge	.+6      	; 0x1f52 <BMP180_ReadCalb+0xc96>
		__ticks = 1;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 8b       	std	Y+17, r24	; 0x11
    1f50:	b2 c0       	rjmp	.+356    	; 0x20b6 <BMP180_ReadCalb+0xdfa>
	else if (__tmp2 > 65535)
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	57 e4       	ldi	r21, 0x47	; 71
    1f5a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f5c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f60:	98 89       	ldd	r25, Y+16	; 0x10
    1f62:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	0c f0       	brlt	.+2      	; 0x1f6c <BMP180_ReadCalb+0xcb0>
    1f6a:	7b c0       	rjmp	.+246    	; 0x2062 <BMP180_ReadCalb+0xda6>
	{
		_delay_ms(__us / 1000.0);
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a e7       	ldi	r20, 0x7A	; 122
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	6d 81       	ldd	r22, Y+5	; 0x05
    1f76:	7e 81       	ldd	r23, Y+6	; 0x06
    1f78:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7a:	98 85       	ldd	r25, Y+8	; 0x08
    1f7c:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8a 8b       	std	Y+18, r24	; 0x12
    1f86:	9b 8b       	std	Y+19, r25	; 0x13
    1f88:	ac 8b       	std	Y+20, r26	; 0x14
    1f8a:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a e7       	ldi	r20, 0x7A	; 122
    1f92:	55 e4       	ldi	r21, 0x45	; 69
    1f94:	6a 89       	ldd	r22, Y+18	; 0x12
    1f96:	7b 89       	ldd	r23, Y+19	; 0x13
    1f98:	8c 89       	ldd	r24, Y+20	; 0x14
    1f9a:	9d 89       	ldd	r25, Y+21	; 0x15
    1f9c:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8e 8b       	std	Y+22, r24	; 0x16
    1fa6:	9f 8b       	std	Y+23, r25	; 0x17
    1fa8:	a8 8f       	std	Y+24, r26	; 0x18
    1faa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	6e 89       	ldd	r22, Y+22	; 0x16
    1fb6:	7f 89       	ldd	r23, Y+23	; 0x17
    1fb8:	88 8d       	ldd	r24, Y+24	; 0x18
    1fba:	99 8d       	ldd	r25, Y+25	; 0x19
    1fbc:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <BMP180_ReadCalb+0xd12>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9b 8f       	std	Y+27, r25	; 0x1b
    1fca:	8a 8f       	std	Y+26, r24	; 0x1a
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <BMP180_ReadCalb+0xd90>
	else if (__tmp > 65535)
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	6e 89       	ldd	r22, Y+22	; 0x16
    1fd8:	7f 89       	ldd	r23, Y+23	; 0x17
    1fda:	88 8d       	ldd	r24, Y+24	; 0x18
    1fdc:	99 8d       	ldd	r25, Y+25	; 0x19
    1fde:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <BMP180_ReadCalb+0xd7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	6a 89       	ldd	r22, Y+18	; 0x12
    1ff0:	7b 89       	ldd	r23, Y+19	; 0x13
    1ff2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ff4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ff6:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9b 8f       	std	Y+27, r25	; 0x1b
    200c:	8a 8f       	std	Y+26, r24	; 0x1a
    200e:	0f c0       	rjmp	.+30     	; 0x202e <BMP180_ReadCalb+0xd72>
    2010:	80 e9       	ldi	r24, 0x90	; 144
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	9d 8f       	std	Y+29, r25	; 0x1d
    2016:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2018:	8c 8d       	ldd	r24, Y+28	; 0x1c
    201a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <BMP180_ReadCalb+0xd60>
    2020:	9d 8f       	std	Y+29, r25	; 0x1d
    2022:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2026:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9b 8f       	std	Y+27, r25	; 0x1b
    202c:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2030:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2032:	89 2b       	or	r24, r25
    2034:	69 f7       	brne	.-38     	; 0x2010 <BMP180_ReadCalb+0xd54>
    2036:	3f c0       	rjmp	.+126    	; 0x20b6 <BMP180_ReadCalb+0xdfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	6e 89       	ldd	r22, Y+22	; 0x16
    203a:	7f 89       	ldd	r23, Y+23	; 0x17
    203c:	88 8d       	ldd	r24, Y+24	; 0x18
    203e:	99 8d       	ldd	r25, Y+25	; 0x19
    2040:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9b 8f       	std	Y+27, r25	; 0x1b
    204a:	8a 8f       	std	Y+26, r24	; 0x1a
    204c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    204e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2050:	9f 8f       	std	Y+31, r25	; 0x1f
    2052:	8e 8f       	std	Y+30, r24	; 0x1e
    2054:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2056:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <BMP180_ReadCalb+0xd9c>
    205c:	9f 8f       	std	Y+31, r25	; 0x1f
    205e:	8e 8f       	std	Y+30, r24	; 0x1e
    2060:	2a c0       	rjmp	.+84     	; 0x20b6 <BMP180_ReadCalb+0xdfa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	53 e4       	ldi	r21, 0x43	; 67
    206a:	69 85       	ldd	r22, Y+9	; 0x09
    206c:	7a 85       	ldd	r23, Y+10	; 0x0a
    206e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2070:	9c 85       	ldd	r25, Y+12	; 0x0c
    2072:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    2076:	18 16       	cp	r1, r24
    2078:	ac f4       	brge	.+42     	; 0x20a4 <BMP180_ReadCalb+0xde8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    207a:	6d 85       	ldd	r22, Y+13	; 0x0d
    207c:	7e 85       	ldd	r23, Y+14	; 0x0e
    207e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2080:	98 89       	ldd	r25, Y+16	; 0x10
    2082:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	99 a3       	std	Y+33, r25	; 0x21
    208c:	88 a3       	std	Y+32, r24	; 0x20
    208e:	88 a1       	ldd	r24, Y+32	; 0x20
    2090:	99 a1       	ldd	r25, Y+33	; 0x21
    2092:	9b a3       	std	Y+35, r25	; 0x23
    2094:	8a a3       	std	Y+34, r24	; 0x22
    2096:	8a a1       	ldd	r24, Y+34	; 0x22
    2098:	9b a1       	ldd	r25, Y+35	; 0x23
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <BMP180_ReadCalb+0xdde>
    209e:	9b a3       	std	Y+35, r25	; 0x23
    20a0:	8a a3       	std	Y+34, r24	; 0x22
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <BMP180_ReadCalb+0xe06>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20a4:	69 85       	ldd	r22, Y+9	; 0x09
    20a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    20a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    20aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ac:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	89 8b       	std	Y+17, r24	; 0x11
    20b6:	89 89       	ldd	r24, Y+17	; 0x11
    20b8:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ba:	8c a1       	ldd	r24, Y+36	; 0x24
    20bc:	8a 95       	dec	r24
    20be:	f1 f7       	brne	.-4      	; 0x20bc <BMP180_ReadCalb+0xe00>
    20c0:	8c a3       	std	Y+36, r24	; 0x24
void BMP180_ReadCalb(void) {

	uint8_t Callib_Data[22] = { 0 };
	uint16_t Callib_Start = 0xAA;

	for (int i = 0; i < 22; i++) {
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	46 97       	sbiw	r24, 0x16	; 22
    20d2:	0c f4       	brge	.+2      	; 0x20d6 <BMP180_ReadCalb+0xe1a>
    20d4:	10 c9       	rjmp	.-3552   	; 0x12f6 <BMP180_ReadCalb+0x3a>
		_delay_us(10);
		TWI_Stop();
		_delay_us(10);
	}

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
    20d6:	ce 01       	movw	r24, r28
    20d8:	8b 55       	subi	r24, 0x5B	; 91
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	fc 01       	movw	r30, r24
    20de:	80 81       	ld	r24, Z
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	38 2f       	mov	r19, r24
    20e6:	22 27       	eor	r18, r18
    20e8:	ce 01       	movw	r24, r28
    20ea:	8b 55       	subi	r24, 0x5B	; 91
    20ec:	9f 4f       	sbci	r25, 0xFF	; 255
    20ee:	fc 01       	movw	r30, r24
    20f0:	81 81       	ldd	r24, Z+1	; 0x01
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	82 2b       	or	r24, r18
    20f8:	93 2b       	or	r25, r19
    20fa:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <AC1+0x1>
    20fe:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <AC1>
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
    2102:	ce 01       	movw	r24, r28
    2104:	8b 55       	subi	r24, 0x5B	; 91
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	fc 01       	movw	r30, r24
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	38 2f       	mov	r19, r24
    2112:	22 27       	eor	r18, r18
    2114:	ce 01       	movw	r24, r28
    2116:	8b 55       	subi	r24, 0x5B	; 91
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	fc 01       	movw	r30, r24
    211c:	83 81       	ldd	r24, Z+3	; 0x03
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	82 2b       	or	r24, r18
    2124:	93 2b       	or	r25, r19
    2126:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <AC2+0x1>
    212a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <AC2>
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
    212e:	ce 01       	movw	r24, r28
    2130:	8b 55       	subi	r24, 0x5B	; 91
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	fc 01       	movw	r30, r24
    2136:	84 81       	ldd	r24, Z+4	; 0x04
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	38 2f       	mov	r19, r24
    213e:	22 27       	eor	r18, r18
    2140:	ce 01       	movw	r24, r28
    2142:	8b 55       	subi	r24, 0x5B	; 91
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	fc 01       	movw	r30, r24
    2148:	85 81       	ldd	r24, Z+5	; 0x05
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	82 2b       	or	r24, r18
    2150:	93 2b       	or	r25, r19
    2152:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <AC3+0x1>
    2156:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <AC3>
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
    215a:	ce 01       	movw	r24, r28
    215c:	8b 55       	subi	r24, 0x5B	; 91
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	fc 01       	movw	r30, r24
    2162:	86 81       	ldd	r24, Z+6	; 0x06
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	38 2f       	mov	r19, r24
    216a:	22 27       	eor	r18, r18
    216c:	ce 01       	movw	r24, r28
    216e:	8b 55       	subi	r24, 0x5B	; 91
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	fc 01       	movw	r30, r24
    2174:	87 81       	ldd	r24, Z+7	; 0x07
    2176:	88 2f       	mov	r24, r24
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	82 2b       	or	r24, r18
    217c:	93 2b       	or	r25, r19
    217e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <AC4+0x1>
    2182:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <AC4>
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
    2186:	ce 01       	movw	r24, r28
    2188:	8b 55       	subi	r24, 0x5B	; 91
    218a:	9f 4f       	sbci	r25, 0xFF	; 255
    218c:	fc 01       	movw	r30, r24
    218e:	80 85       	ldd	r24, Z+8	; 0x08
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	38 2f       	mov	r19, r24
    2196:	22 27       	eor	r18, r18
    2198:	ce 01       	movw	r24, r28
    219a:	8b 55       	subi	r24, 0x5B	; 91
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	fc 01       	movw	r30, r24
    21a0:	81 85       	ldd	r24, Z+9	; 0x09
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	82 2b       	or	r24, r18
    21a8:	93 2b       	or	r25, r19
    21aa:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <AC5+0x1>
    21ae:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <AC5>
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
    21b2:	ce 01       	movw	r24, r28
    21b4:	8b 55       	subi	r24, 0x5B	; 91
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	fc 01       	movw	r30, r24
    21ba:	82 85       	ldd	r24, Z+10	; 0x0a
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	38 2f       	mov	r19, r24
    21c2:	22 27       	eor	r18, r18
    21c4:	ce 01       	movw	r24, r28
    21c6:	8b 55       	subi	r24, 0x5B	; 91
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	fc 01       	movw	r30, r24
    21cc:	83 85       	ldd	r24, Z+11	; 0x0b
    21ce:	88 2f       	mov	r24, r24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	82 2b       	or	r24, r18
    21d4:	93 2b       	or	r25, r19
    21d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <AC6+0x1>
    21da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <AC6>
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
    21de:	ce 01       	movw	r24, r28
    21e0:	8b 55       	subi	r24, 0x5B	; 91
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	fc 01       	movw	r30, r24
    21e6:	84 85       	ldd	r24, Z+12	; 0x0c
    21e8:	88 2f       	mov	r24, r24
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	38 2f       	mov	r19, r24
    21ee:	22 27       	eor	r18, r18
    21f0:	ce 01       	movw	r24, r28
    21f2:	8b 55       	subi	r24, 0x5B	; 91
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	fc 01       	movw	r30, r24
    21f8:	85 85       	ldd	r24, Z+13	; 0x0d
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	82 2b       	or	r24, r18
    2200:	93 2b       	or	r25, r19
    2202:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <B1+0x1>
    2206:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <B1>
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
    220a:	ce 01       	movw	r24, r28
    220c:	8b 55       	subi	r24, 0x5B	; 91
    220e:	9f 4f       	sbci	r25, 0xFF	; 255
    2210:	fc 01       	movw	r30, r24
    2212:	86 85       	ldd	r24, Z+14	; 0x0e
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	38 2f       	mov	r19, r24
    221a:	22 27       	eor	r18, r18
    221c:	ce 01       	movw	r24, r28
    221e:	8b 55       	subi	r24, 0x5B	; 91
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	fc 01       	movw	r30, r24
    2224:	87 85       	ldd	r24, Z+15	; 0x0f
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	82 2b       	or	r24, r18
    222c:	93 2b       	or	r25, r19
    222e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <B2+0x1>
    2232:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <B2>
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
    2236:	ce 01       	movw	r24, r28
    2238:	8b 55       	subi	r24, 0x5B	; 91
    223a:	9f 4f       	sbci	r25, 0xFF	; 255
    223c:	fc 01       	movw	r30, r24
    223e:	80 89       	ldd	r24, Z+16	; 0x10
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	38 2f       	mov	r19, r24
    2246:	22 27       	eor	r18, r18
    2248:	ce 01       	movw	r24, r28
    224a:	8b 55       	subi	r24, 0x5B	; 91
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	fc 01       	movw	r30, r24
    2250:	81 89       	ldd	r24, Z+17	; 0x11
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	82 2b       	or	r24, r18
    2258:	93 2b       	or	r25, r19
    225a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <MB+0x1>
    225e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <MB>
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
    2262:	ce 01       	movw	r24, r28
    2264:	8b 55       	subi	r24, 0x5B	; 91
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	fc 01       	movw	r30, r24
    226a:	82 89       	ldd	r24, Z+18	; 0x12
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	38 2f       	mov	r19, r24
    2272:	22 27       	eor	r18, r18
    2274:	ce 01       	movw	r24, r28
    2276:	8b 55       	subi	r24, 0x5B	; 91
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	fc 01       	movw	r30, r24
    227c:	83 89       	ldd	r24, Z+19	; 0x13
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	82 2b       	or	r24, r18
    2284:	93 2b       	or	r25, r19
    2286:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <MC+0x1>
    228a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <MC>
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
    228e:	ce 01       	movw	r24, r28
    2290:	8b 55       	subi	r24, 0x5B	; 91
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	fc 01       	movw	r30, r24
    2296:	84 89       	ldd	r24, Z+20	; 0x14
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	38 2f       	mov	r19, r24
    229e:	22 27       	eor	r18, r18
    22a0:	ce 01       	movw	r24, r28
    22a2:	8b 55       	subi	r24, 0x5B	; 91
    22a4:	9f 4f       	sbci	r25, 0xFF	; 255
    22a6:	fc 01       	movw	r30, r24
    22a8:	85 89       	ldd	r24, Z+21	; 0x15
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	82 2b       	or	r24, r18
    22b0:	93 2b       	or	r25, r19
    22b2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <MD+0x1>
    22b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <MD>

}
    22ba:	00 00       	nop
    22bc:	c6 54       	subi	r28, 0x46	; 70
    22be:	df 4f       	sbci	r29, 0xFF	; 255
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	08 95       	ret

000022d4 <Get_UP>:

uint32 Get_UP(void) {
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	66 97       	sbiw	r28, 0x16	; 22
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
	// calculate the value to write to the BMP180 control register based on the oversampling setting
	uint8 datatowrite = 0x34 + (OSS << 6);
    22e8:	84 e3       	ldi	r24, 0x34	; 52
    22ea:	89 83       	std	Y+1, r24	; 0x01
	// array to store the raw pressure data
	uint8 Pressure_RAW[3] = { 0 };
    22ec:	1c 8a       	std	Y+20, r1	; 0x14
    22ee:	1d 8a       	std	Y+21, r1	; 0x15
    22f0:	1e 8a       	std	Y+22, r1	; 0x16

	uint32 data=0;
    22f2:	1a 82       	std	Y+2, r1	; 0x02
    22f4:	1b 82       	std	Y+3, r1	; 0x03
    22f6:	1c 82       	std	Y+4, r1	; 0x04
    22f8:	1d 82       	std	Y+5, r1	; 0x05

	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    22fa:	8e ee       	ldi	r24, 0xEE	; 238
    22fc:	0e 94 74 00 	call	0xe8	; 0xe8 <TWI_Start>
	delay();
    2300:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// send the address of the BMP180 control register to initiate the pressure measurement
	TWI_WriteByte(0xF4);
    2304:	84 ef       	ldi	r24, 0xF4	; 244
    2306:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    230a:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// send the value calculated above to start the measurement with the selected oversampling setting
	TWI_WriteByte(datatowrite);
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    2314:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    2318:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 ea       	ldi	r26, 0xA0	; 160
    2322:	b0 e4       	ldi	r27, 0x40	; 64
    2324:	8e 83       	std	Y+6, r24	; 0x06
    2326:	9f 83       	std	Y+7, r25	; 0x07
    2328:	a8 87       	std	Y+8, r26	; 0x08
    232a:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a e7       	ldi	r20, 0x7A	; 122
    2332:	55 e4       	ldi	r21, 0x45	; 69
    2334:	6e 81       	ldd	r22, Y+6	; 0x06
    2336:	7f 81       	ldd	r23, Y+7	; 0x07
    2338:	88 85       	ldd	r24, Y+8	; 0x08
    233a:	99 85       	ldd	r25, Y+9	; 0x09
    233c:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8a 87       	std	Y+10, r24	; 0x0a
    2346:	9b 87       	std	Y+11, r25	; 0x0b
    2348:	ac 87       	std	Y+12, r26	; 0x0c
    234a:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	6a 85       	ldd	r22, Y+10	; 0x0a
    2356:	7b 85       	ldd	r23, Y+11	; 0x0b
    2358:	8c 85       	ldd	r24, Y+12	; 0x0c
    235a:	9d 85       	ldd	r25, Y+13	; 0x0d
    235c:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <Get_UP+0x9a>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9f 87       	std	Y+15, r25	; 0x0f
    236a:	8e 87       	std	Y+14, r24	; 0x0e
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <Get_UP+0x118>
	else if (__tmp > 65535)
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	6a 85       	ldd	r22, Y+10	; 0x0a
    2378:	7b 85       	ldd	r23, Y+11	; 0x0b
    237a:	8c 85       	ldd	r24, Y+12	; 0x0c
    237c:	9d 85       	ldd	r25, Y+13	; 0x0d
    237e:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <Get_UP+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	6e 81       	ldd	r22, Y+6	; 0x06
    2390:	7f 81       	ldd	r23, Y+7	; 0x07
    2392:	88 85       	ldd	r24, Y+8	; 0x08
    2394:	99 85       	ldd	r25, Y+9	; 0x09
    2396:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9f 87       	std	Y+15, r25	; 0x0f
    23ac:	8e 87       	std	Y+14, r24	; 0x0e
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <Get_UP+0xfa>
    23b0:	80 e9       	ldi	r24, 0x90	; 144
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	99 8b       	std	Y+17, r25	; 0x11
    23b6:	88 8b       	std	Y+16, r24	; 0x10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b8:	88 89       	ldd	r24, Y+16	; 0x10
    23ba:	99 89       	ldd	r25, Y+17	; 0x11
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <Get_UP+0xe8>
    23c0:	99 8b       	std	Y+17, r25	; 0x11
    23c2:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9f 87       	std	Y+15, r25	; 0x0f
    23cc:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d2:	89 2b       	or	r24, r25
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <Get_UP+0xdc>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <Get_UP+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    23da:	7b 85       	ldd	r23, Y+11	; 0x0b
    23dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    23de:	9d 85       	ldd	r25, Y+13	; 0x0d
    23e0:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9f 87       	std	Y+15, r25	; 0x0f
    23ea:	8e 87       	std	Y+14, r24	; 0x0e
    23ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    23f0:	9b 8b       	std	Y+19, r25	; 0x13
    23f2:	8a 8b       	std	Y+18, r24	; 0x12
    23f4:	8a 89       	ldd	r24, Y+18	; 0x12
    23f6:	9b 89       	ldd	r25, Y+19	; 0x13
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <Get_UP+0x124>
    23fc:	9b 8b       	std	Y+19, r25	; 0x13
    23fe:	8a 8b       	std	Y+18, r24	; 0x12



	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    2400:	8e ee       	ldi	r24, 0xEE	; 238
    2402:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start_Wait>
	delay();
    2406:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_WriteByte(0xF6);
    240a:	86 ef       	ldi	r24, 0xF6	; 246
    240c:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    2410:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    2414:	8f ee       	ldi	r24, 0xEF	; 239
    2416:	0e 94 b2 00 	call	0x164	; 0x164 <TWI_Repeated_start>
	delay();// To read
    241a:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	Pressure_RAW[0] = TWI_ReadByteWithNACK();
    241e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_ReadByteWithNACK>
    2422:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    2424:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Stop();
    2428:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
	delay();
    242c:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    2430:	8e ee       	ldi	r24, 0xEE	; 238
    2432:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start_Wait>
	delay();
    2436:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_WriteByte(0xF7);
    243a:	87 ef       	ldi	r24, 0xF7	; 247
    243c:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    2440:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    2444:	8f ee       	ldi	r24, 0xEF	; 239
    2446:	0e 94 b2 00 	call	0x164	; 0x164 <TWI_Repeated_start>
	delay();// To read
    244a:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	Pressure_RAW[1] = TWI_ReadByteWithNACK();
    244e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_ReadByteWithNACK>
    2452:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    2454:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Stop();
    2458:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
	delay();
    245c:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// read the LSB of the raw pressure data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    2460:	8e ee       	ldi	r24, 0xEE	; 238
    2462:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start_Wait>
	delay();
    2466:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_WriteByte(0xF8);
    246a:	88 ef       	ldi	r24, 0xF8	; 248
    246c:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    2470:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    2474:	8f ee       	ldi	r24, 0xEF	; 239
    2476:	0e 94 b2 00 	call	0x164	; 0x164 <TWI_Repeated_start>
	delay();// To read
    247a:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	Pressure_RAW[2] = TWI_ReadByteWithNACK();
    247e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_ReadByteWithNACK>
    2482:	8e 8b       	std	Y+22, r24	; 0x16
	delay();
    2484:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Stop();
    2488:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
	// stop the I2C communication with BMP180

	// combine the raw pressure data into a single 24-bit value and shift it right to adjust for the oversampling setting
	data|=((uint32)(Pressure_RAW[0] << 16));
    248c:	8c 89       	ldd	r24, Y+20	; 0x14
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	20 e1       	ldi	r18, 0x10	; 16
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	02 c0       	rjmp	.+4      	; 0x249c <Get_UP+0x1c8>
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	2a 95       	dec	r18
    249e:	e2 f7       	brpl	.-8      	; 0x2498 <Get_UP+0x1c4>
    24a0:	09 2e       	mov	r0, r25
    24a2:	00 0c       	add	r0, r0
    24a4:	aa 0b       	sbc	r26, r26
    24a6:	bb 0b       	sbc	r27, r27
    24a8:	2a 81       	ldd	r18, Y+2	; 0x02
    24aa:	3b 81       	ldd	r19, Y+3	; 0x03
    24ac:	4c 81       	ldd	r20, Y+4	; 0x04
    24ae:	5d 81       	ldd	r21, Y+5	; 0x05
    24b0:	82 2b       	or	r24, r18
    24b2:	93 2b       	or	r25, r19
    24b4:	a4 2b       	or	r26, r20
    24b6:	b5 2b       	or	r27, r21
    24b8:	8a 83       	std	Y+2, r24	; 0x02
    24ba:	9b 83       	std	Y+3, r25	; 0x03
    24bc:	ac 83       	std	Y+4, r26	; 0x04
    24be:	bd 83       	std	Y+5, r27	; 0x05
	data|=(uint32)(Pressure_RAW[1] << 8);
    24c0:	8d 89       	ldd	r24, Y+21	; 0x15
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	98 2f       	mov	r25, r24
    24c8:	88 27       	eor	r24, r24
    24ca:	09 2e       	mov	r0, r25
    24cc:	00 0c       	add	r0, r0
    24ce:	aa 0b       	sbc	r26, r26
    24d0:	bb 0b       	sbc	r27, r27
    24d2:	2a 81       	ldd	r18, Y+2	; 0x02
    24d4:	3b 81       	ldd	r19, Y+3	; 0x03
    24d6:	4c 81       	ldd	r20, Y+4	; 0x04
    24d8:	5d 81       	ldd	r21, Y+5	; 0x05
    24da:	82 2b       	or	r24, r18
    24dc:	93 2b       	or	r25, r19
    24de:	a4 2b       	or	r26, r20
    24e0:	b5 2b       	or	r27, r21
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	9b 83       	std	Y+3, r25	; 0x03
    24e6:	ac 83       	std	Y+4, r26	; 0x04
    24e8:	bd 83       	std	Y+5, r27	; 0x05
	data|=(uint32)(Pressure_RAW[2]);
    24ea:	8e 89       	ldd	r24, Y+22	; 0x16
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	a0 e0       	ldi	r26, 0x00	; 0
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	2a 81       	ldd	r18, Y+2	; 0x02
    24f6:	3b 81       	ldd	r19, Y+3	; 0x03
    24f8:	4c 81       	ldd	r20, Y+4	; 0x04
    24fa:	5d 81       	ldd	r21, Y+5	; 0x05
    24fc:	82 2b       	or	r24, r18
    24fe:	93 2b       	or	r25, r19
    2500:	a4 2b       	or	r26, r20
    2502:	b5 2b       	or	r27, r21
    2504:	8a 83       	std	Y+2, r24	; 0x02
    2506:	9b 83       	std	Y+3, r25	; 0x03
    2508:	ac 83       	std	Y+4, r26	; 0x04
    250a:	bd 83       	std	Y+5, r27	; 0x05
	data=(data >> (8 - OSS));
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	ac 81       	ldd	r26, Y+4	; 0x04
    2512:	bd 81       	ldd	r27, Y+5	; 0x05
    2514:	89 2f       	mov	r24, r25
    2516:	9a 2f       	mov	r25, r26
    2518:	ab 2f       	mov	r26, r27
    251a:	bb 27       	eor	r27, r27
    251c:	8a 83       	std	Y+2, r24	; 0x02
    251e:	9b 83       	std	Y+3, r25	; 0x03
    2520:	ac 83       	std	Y+4, r26	; 0x04
    2522:	bd 83       	std	Y+5, r27	; 0x05
	return data;
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	9b 81       	ldd	r25, Y+3	; 0x03
    2528:	ac 81       	ldd	r26, Y+4	; 0x04
    252a:	bd 81       	ldd	r27, Y+5	; 0x05

	//    data = ((Pressure_RAW[0] << 16) + (Pressure_RAW[1] << 8) + Pressure_RAW[2]) >> (8 - OSS);

	//    return data;
}
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	66 96       	adiw	r28, 0x16	; 22
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <Get_UT>:

uint32 Get_UT(void) {
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	65 97       	sbiw	r28, 0x15	; 21
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
	uint32 data=0;
    2556:	19 82       	std	Y+1, r1	; 0x01
    2558:	1a 82       	std	Y+2, r1	; 0x02
    255a:	1b 82       	std	Y+3, r1	; 0x03
    255c:	1c 82       	std	Y+4, r1	; 0x04
	uint8 datatowrite = 0x2E;
    255e:	8e e2       	ldi	r24, 0x2E	; 46
    2560:	8d 83       	std	Y+5, r24	; 0x05
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = { 0 };
    2562:	1d 8a       	std	Y+21, r1	; 0x15
    2564:	1c 8a       	std	Y+20, r1	; 0x14
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    2566:	8e ee       	ldi	r24, 0xEE	; 238
    2568:	0e 94 74 00 	call	0xe8	; 0xe8 <TWI_Start>
	delay();
    256c:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    2570:	84 ef       	ldi	r24, 0xF4	; 244
    2572:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    2576:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// send the value calculated above to start the measurement
	TWI_WriteByte(datatowrite);
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    2580:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    2584:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 ea       	ldi	r26, 0xA0	; 160
    258e:	b0 e4       	ldi	r27, 0x40	; 64
    2590:	8e 83       	std	Y+6, r24	; 0x06
    2592:	9f 83       	std	Y+7, r25	; 0x07
    2594:	a8 87       	std	Y+8, r26	; 0x08
    2596:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	55 e4       	ldi	r21, 0x45	; 69
    25a0:	6e 81       	ldd	r22, Y+6	; 0x06
    25a2:	7f 81       	ldd	r23, Y+7	; 0x07
    25a4:	88 85       	ldd	r24, Y+8	; 0x08
    25a6:	99 85       	ldd	r25, Y+9	; 0x09
    25a8:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8a 87       	std	Y+10, r24	; 0x0a
    25b2:	9b 87       	std	Y+11, r25	; 0x0b
    25b4:	ac 87       	std	Y+12, r26	; 0x0c
    25b6:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	6a 85       	ldd	r22, Y+10	; 0x0a
    25c2:	7b 85       	ldd	r23, Y+11	; 0x0b
    25c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    25c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    25c8:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <Get_UT+0x98>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9f 87       	std	Y+15, r25	; 0x0f
    25d6:	8e 87       	std	Y+14, r24	; 0x0e
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <Get_UT+0x116>
	else if (__tmp > 65535)
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    25e4:	7b 85       	ldd	r23, Y+11	; 0x0b
    25e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    25e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    25ea:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <Get_UT+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	6e 81       	ldd	r22, Y+6	; 0x06
    25fc:	7f 81       	ldd	r23, Y+7	; 0x07
    25fe:	88 85       	ldd	r24, Y+8	; 0x08
    2600:	99 85       	ldd	r25, Y+9	; 0x09
    2602:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9f 87       	std	Y+15, r25	; 0x0f
    2618:	8e 87       	std	Y+14, r24	; 0x0e
    261a:	0f c0       	rjmp	.+30     	; 0x263a <Get_UT+0xf8>
    261c:	80 e9       	ldi	r24, 0x90	; 144
    261e:	91 e0       	ldi	r25, 0x01	; 1
    2620:	99 8b       	std	Y+17, r25	; 0x11
    2622:	88 8b       	std	Y+16, r24	; 0x10
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	99 89       	ldd	r25, Y+17	; 0x11
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <Get_UT+0xe6>
    262c:	99 8b       	std	Y+17, r25	; 0x11
    262e:	88 8b       	std	Y+16, r24	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	8e 85       	ldd	r24, Y+14	; 0x0e
    2632:	9f 85       	ldd	r25, Y+15	; 0x0f
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9f 87       	std	Y+15, r25	; 0x0f
    2638:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	8e 85       	ldd	r24, Y+14	; 0x0e
    263c:	9f 85       	ldd	r25, Y+15	; 0x0f
    263e:	89 2b       	or	r24, r25
    2640:	69 f7       	brne	.-38     	; 0x261c <Get_UT+0xda>
    2642:	14 c0       	rjmp	.+40     	; 0x266c <Get_UT+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6a 85       	ldd	r22, Y+10	; 0x0a
    2646:	7b 85       	ldd	r23, Y+11	; 0x0b
    2648:	8c 85       	ldd	r24, Y+12	; 0x0c
    264a:	9d 85       	ldd	r25, Y+13	; 0x0d
    264c:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9f 87       	std	Y+15, r25	; 0x0f
    2656:	8e 87       	std	Y+14, r24	; 0x0e
    2658:	8e 85       	ldd	r24, Y+14	; 0x0e
    265a:	9f 85       	ldd	r25, Y+15	; 0x0f
    265c:	9b 8b       	std	Y+19, r25	; 0x13
    265e:	8a 8b       	std	Y+18, r24	; 0x12
    2660:	8a 89       	ldd	r24, Y+18	; 0x12
    2662:	9b 89       	ldd	r25, Y+19	; 0x13
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <Get_UT+0x122>
    2668:	9b 8b       	std	Y+19, r25	; 0x13
    266a:	8a 8b       	std	Y+18, r24	; 0x12

	_delay_ms(5);
	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw temperature data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    266c:	8e ee       	ldi	r24, 0xEE	; 238
    266e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start_Wait>
	delay();
    2672:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_WriteByte(0xF6);
    2676:	86 ef       	ldi	r24, 0xF6	; 246
    2678:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    267c:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    2680:	8f ee       	ldi	r24, 0xEF	; 239
    2682:	0e 94 b2 00 	call	0x164	; 0x164 <TWI_Repeated_start>
	delay();// To read
    2686:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	Temperature_RAW[0] = TWI_ReadByteWithNACK();
    268a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_ReadByteWithNACK>
    268e:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    2690:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Stop();
    2694:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
	delay();
    2698:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	// read the LSB of the raw temperature data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    269c:	8e ee       	ldi	r24, 0xEE	; 238
    269e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Start_Wait>
	delay();
    26a2:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_WriteByte(0xF7);
    26a6:	87 ef       	ldi	r24, 0xF7	; 247
    26a8:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_WriteByte>
	delay();
    26ac:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    26b0:	8f ee       	ldi	r24, 0xEF	; 239
    26b2:	0e 94 b2 00 	call	0x164	; 0x164 <TWI_Repeated_start>
	delay();// To read
    26b6:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	Temperature_RAW[1] = TWI_ReadByteWithNACK();
    26ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TWI_ReadByteWithNACK>
    26be:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    26c0:	0e 94 df 18 	call	0x31be	; 0x31be <delay>
	TWI_Stop();
    26c4:	0e 94 31 01 	call	0x262	; 0x262 <TWI_Stop>
	// stop the I2C communication with BMP180
	data|=(uint32)(Temperature_RAW[0] << 8);
    26c8:	8c 89       	ldd	r24, Y+20	; 0x14
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	98 2f       	mov	r25, r24
    26d0:	88 27       	eor	r24, r24
    26d2:	09 2e       	mov	r0, r25
    26d4:	00 0c       	add	r0, r0
    26d6:	aa 0b       	sbc	r26, r26
    26d8:	bb 0b       	sbc	r27, r27
    26da:	29 81       	ldd	r18, Y+1	; 0x01
    26dc:	3a 81       	ldd	r19, Y+2	; 0x02
    26de:	4b 81       	ldd	r20, Y+3	; 0x03
    26e0:	5c 81       	ldd	r21, Y+4	; 0x04
    26e2:	82 2b       	or	r24, r18
    26e4:	93 2b       	or	r25, r19
    26e6:	a4 2b       	or	r26, r20
    26e8:	b5 2b       	or	r27, r21
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	ab 83       	std	Y+3, r26	; 0x03
    26f0:	bc 83       	std	Y+4, r27	; 0x04
	data|=(uint32)Temperature_RAW[1];
    26f2:	8d 89       	ldd	r24, Y+21	; 0x15
    26f4:	88 2f       	mov	r24, r24
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	29 81       	ldd	r18, Y+1	; 0x01
    26fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2700:	4b 81       	ldd	r20, Y+3	; 0x03
    2702:	5c 81       	ldd	r21, Y+4	; 0x04
    2704:	82 2b       	or	r24, r18
    2706:	93 2b       	or	r25, r19
    2708:	a4 2b       	or	r26, r20
    270a:	b5 2b       	or	r27, r21
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	ab 83       	std	Y+3, r26	; 0x03
    2712:	bc 83       	std	Y+4, r27	; 0x04
	return data;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	ab 81       	ldd	r26, Y+3	; 0x03
    271a:	bc 81       	ldd	r27, Y+4	; 0x04

}
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	65 96       	adiw	r28, 0x15	; 21
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <BMP180_calculateTemperature>:

sint32 BMP180_calculateTemperature(void) {
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	00 d0       	rcall	.+0      	; 0x2744 <BMP180_calculateTemperature+0x12>
    2744:	00 d0       	rcall	.+0      	; 0x2746 <BMP180_calculateTemperature+0x14>
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62

	float32 temperature = 0;
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	1a 82       	std	Y+2, r1	; 0x02
    274e:	1b 82       	std	Y+3, r1	; 0x03
    2750:	1c 82       	std	Y+4, r1	; 0x04

	UT = Get_UT();
    2752:	0e 94 a1 12 	call	0x2542	; 0x2542 <Get_UT>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <UT>
    275e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <UT+0x1>
    2762:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <UT+0x2>
    2766:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <UT+0x3>

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    276a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <UT>
    276e:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <UT+0x1>
    2772:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <UT+0x2>
    2776:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <UT+0x3>
    277a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <AC6>
    277e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <AC6+0x1>
    2782:	cc 01       	movw	r24, r24
    2784:	a0 e0       	ldi	r26, 0x00	; 0
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	79 01       	movw	r14, r18
    278a:	8a 01       	movw	r16, r20
    278c:	e8 1a       	sub	r14, r24
    278e:	f9 0a       	sbc	r15, r25
    2790:	0a 0b       	sbc	r16, r26
    2792:	1b 0b       	sbc	r17, r27
    2794:	d8 01       	movw	r26, r16
    2796:	c7 01       	movw	r24, r14
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    27a0:	6b 01       	movw	r12, r22
    27a2:	7c 01       	movw	r14, r24
    27a4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <AC5>
    27a8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <AC5+0x1>
    27ac:	cc 01       	movw	r24, r24
    27ae:	a0 e0       	ldi	r26, 0x00	; 0
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 6f 1b 	call	0x36de	; 0x36de <__floatunsisf>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9c 01       	movw	r18, r24
    27d4:	ad 01       	movw	r20, r26
    27d6:	c7 01       	movw	r24, r14
    27d8:	b6 01       	movw	r22, r12
    27da:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <X1>
    27f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <X1+0x1>
    27f6:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <X1+0x2>
    27fa:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <X1+0x3>
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    27fe:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <MC>
    2802:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <MC+0x1>
    2806:	09 2e       	mov	r0, r25
    2808:	00 0c       	add	r0, r0
    280a:	aa 0b       	sbc	r26, r26
    280c:	bb 0b       	sbc	r27, r27
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	55 e4       	ldi	r21, 0x45	; 69
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	6c 01       	movw	r12, r24
    2830:	7d 01       	movw	r14, r26
    2832:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <MD>
    2836:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <MD+0x1>
    283a:	9c 01       	movw	r18, r24
    283c:	99 0f       	add	r25, r25
    283e:	44 0b       	sbc	r20, r20
    2840:	55 0b       	sbc	r21, r21
    2842:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <X1>
    2846:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <X1+0x1>
    284a:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <X1+0x2>
    284e:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <X1+0x3>
    2852:	82 0f       	add	r24, r18
    2854:	93 1f       	adc	r25, r19
    2856:	a4 1f       	adc	r26, r20
    2858:	b5 1f       	adc	r27, r21
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9c 01       	movw	r18, r24
    2868:	ad 01       	movw	r20, r26
    286a:	c7 01       	movw	r24, r14
    286c:	b6 01       	movw	r22, r12
    286e:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <X2>
    2886:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <X2+0x1>
    288a:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <X2+0x2>
    288e:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <X2+0x3>
	B5 = X1 + X2;
    2892:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <X1>
    2896:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <X1+0x1>
    289a:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <X1+0x2>
    289e:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <X1+0x3>
    28a2:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <X2>
    28a6:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <X2+0x1>
    28aa:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <X2+0x2>
    28ae:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <X2+0x3>
    28b2:	82 0f       	add	r24, r18
    28b4:	93 1f       	adc	r25, r19
    28b6:	a4 1f       	adc	r26, r20
    28b8:	b5 1f       	adc	r27, r21
    28ba:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <B5>
    28be:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <B5+0x1>
    28c2:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <B5+0x2>
    28c6:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <B5+0x3>
	temperature = (B5 + 8) / (pow(2, 4));
    28ca:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <B5>
    28ce:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <B5+0x1>
    28d2:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <B5+0x2>
    28d6:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <B5+0x3>
    28da:	08 96       	adiw	r24, 0x08	; 8
    28dc:	a1 1d       	adc	r26, r1
    28de:	b1 1d       	adc	r27, r1
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	51 e4       	ldi	r21, 0x41	; 65
    28f4:	bc 01       	movw	r22, r24
    28f6:	cd 01       	movw	r24, r26
    28f8:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	ab 83       	std	Y+3, r26	; 0x03
    2906:	bc 83       	std	Y+4, r27	; 0x04
	return temperature / 10.0;
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	69 81       	ldd	r22, Y+1	; 0x01
    2912:	7a 81       	ldd	r23, Y+2	; 0x02
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
}
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	cf 90       	pop	r12
    2948:	08 95       	ret

0000294a <BMP180_calculatePressure>:

sint32 BMP180_calculatePressure(void) {
    294a:	cf 92       	push	r12
    294c:	df 92       	push	r13
    294e:	ef 92       	push	r14
    2950:	ff 92       	push	r15
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
	UP = Get_UP();
    295e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <Get_UP>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <UP>
    296a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <UP+0x1>
    296e:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <UP+0x2>
    2972:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <UP+0x3>

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    2976:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <UT>
    297a:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <UT+0x1>
    297e:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <UT+0x2>
    2982:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <UT+0x3>
    2986:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <AC6>
    298a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <AC6+0x1>
    298e:	cc 01       	movw	r24, r24
    2990:	a0 e0       	ldi	r26, 0x00	; 0
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	79 01       	movw	r14, r18
    2996:	8a 01       	movw	r16, r20
    2998:	e8 1a       	sub	r14, r24
    299a:	f9 0a       	sbc	r15, r25
    299c:	0a 0b       	sbc	r16, r26
    299e:	1b 0b       	sbc	r17, r27
    29a0:	d8 01       	movw	r26, r16
    29a2:	c7 01       	movw	r24, r14
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    29ac:	6b 01       	movw	r12, r22
    29ae:	7c 01       	movw	r14, r24
    29b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <AC5>
    29b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <AC5+0x1>
    29b8:	cc 01       	movw	r24, r24
    29ba:	a0 e0       	ldi	r26, 0x00	; 0
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 6f 1b 	call	0x36de	; 0x36de <__floatunsisf>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9c 01       	movw	r18, r24
    29e0:	ad 01       	movw	r20, r26
    29e2:	c7 01       	movw	r24, r14
    29e4:	b6 01       	movw	r22, r12
    29e6:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <X1>
    29fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <X1+0x1>
    2a02:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <X1+0x2>
    2a06:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <X1+0x3>
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    2a0a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <MC>
    2a0e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <MC+0x1>
    2a12:	09 2e       	mov	r0, r25
    2a14:	00 0c       	add	r0, r0
    2a16:	aa 0b       	sbc	r26, r26
    2a18:	bb 0b       	sbc	r27, r27
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	55 e4       	ldi	r21, 0x45	; 69
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	6c 01       	movw	r12, r24
    2a3c:	7d 01       	movw	r14, r26
    2a3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <MD>
    2a42:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <MD+0x1>
    2a46:	9c 01       	movw	r18, r24
    2a48:	99 0f       	add	r25, r25
    2a4a:	44 0b       	sbc	r20, r20
    2a4c:	55 0b       	sbc	r21, r21
    2a4e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <X1>
    2a52:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <X1+0x1>
    2a56:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <X1+0x2>
    2a5a:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <X1+0x3>
    2a5e:	82 0f       	add	r24, r18
    2a60:	93 1f       	adc	r25, r19
    2a62:	a4 1f       	adc	r26, r20
    2a64:	b5 1f       	adc	r27, r21
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9c 01       	movw	r18, r24
    2a74:	ad 01       	movw	r20, r26
    2a76:	c7 01       	movw	r24, r14
    2a78:	b6 01       	movw	r22, r12
    2a7a:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <X2>
    2a92:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <X2+0x1>
    2a96:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <X2+0x2>
    2a9a:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <X2+0x3>
	B5 = X1 + X2;
    2a9e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <X1>
    2aa2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <X1+0x1>
    2aa6:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <X1+0x2>
    2aaa:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <X1+0x3>
    2aae:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <X2>
    2ab2:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <X2+0x1>
    2ab6:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <X2+0x2>
    2aba:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <X2+0x3>
    2abe:	82 0f       	add	r24, r18
    2ac0:	93 1f       	adc	r25, r19
    2ac2:	a4 1f       	adc	r26, r20
    2ac4:	b5 1f       	adc	r27, r21
    2ac6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <B5>
    2aca:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <B5+0x1>
    2ace:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <B5+0x2>
    2ad2:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <B5+0x3>
	B6 = B5 - 4000;
    2ad6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <B5>
    2ada:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <B5+0x1>
    2ade:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <B5+0x2>
    2ae2:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <B5+0x3>
    2ae6:	80 5a       	subi	r24, 0xA0	; 160
    2ae8:	9f 40       	sbci	r25, 0x0F	; 15
    2aea:	a1 09       	sbc	r26, r1
    2aec:	b1 09       	sbc	r27, r1
    2aee:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <B6>
    2af2:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <B6+0x1>
    2af6:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <B6+0x2>
    2afa:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <B6+0x3>
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
    2afe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <B2>
    2b02:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <B2+0x1>
    2b06:	09 2e       	mov	r0, r25
    2b08:	00 0c       	add	r0, r0
    2b0a:	aa 0b       	sbc	r26, r26
    2b0c:	bb 0b       	sbc	r27, r27
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2b16:	6b 01       	movw	r12, r22
    2b18:	7c 01       	movw	r14, r24
    2b1a:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <B6>
    2b1e:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <B6+0x1>
    2b22:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <B6+0x2>
    2b26:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <B6+0x3>
    2b2a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <B6>
    2b2e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <B6+0x1>
    2b32:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <B6+0x2>
    2b36:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <B6+0x3>
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e8       	ldi	r20, 0x80	; 128
    2b58:	55 e4       	ldi	r21, 0x45	; 69
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9c 01       	movw	r18, r24
    2b68:	ad 01       	movw	r20, r26
    2b6a:	c7 01       	movw	r24, r14
    2b6c:	b6 01       	movw	r22, r12
    2b6e:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	55 e4       	ldi	r21, 0x45	; 69
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <X1>
    2b9a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <X1+0x1>
    2b9e:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <X1+0x2>
    2ba2:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <X1+0x3>
	X2 = AC2 * B6 / (pow(2, 11));
    2ba6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <AC2>
    2baa:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <AC2+0x1>
    2bae:	9c 01       	movw	r18, r24
    2bb0:	99 0f       	add	r25, r25
    2bb2:	44 0b       	sbc	r20, r20
    2bb4:	55 0b       	sbc	r21, r21
    2bb6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <B6>
    2bba:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <B6+0x1>
    2bbe:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <B6+0x2>
    2bc2:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <B6+0x3>
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	55 e4       	ldi	r21, 0x45	; 69
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <X2>
    2c02:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <X2+0x1>
    2c06:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <X2+0x2>
    2c0a:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <X2+0x3>
	X3 = X1 + X2;
    2c0e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <X1>
    2c12:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <X1+0x1>
    2c16:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <X1+0x2>
    2c1a:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <X1+0x3>
    2c1e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <X2>
    2c22:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <X2+0x1>
    2c26:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <X2+0x2>
    2c2a:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <X2+0x3>
    2c2e:	82 0f       	add	r24, r18
    2c30:	93 1f       	adc	r25, r19
    2c32:	a4 1f       	adc	r26, r20
    2c34:	b5 1f       	adc	r27, r21
    2c36:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <X3>
    2c3a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <X3+0x1>
    2c3e:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <X3+0x2>
    2c42:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <X3+0x3>
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
    2c46:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <AC1>
    2c4a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <AC1+0x1>
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	9c 01       	movw	r18, r24
    2c58:	99 0f       	add	r25, r25
    2c5a:	44 0b       	sbc	r20, r20
    2c5c:	55 0b       	sbc	r21, r21
    2c5e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <X3>
    2c62:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <X3+0x1>
    2c66:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <X3+0x2>
    2c6a:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <X3+0x3>
    2c6e:	82 0f       	add	r24, r18
    2c70:	93 1f       	adc	r25, r19
    2c72:	a4 1f       	adc	r26, r20
    2c74:	b5 1f       	adc	r27, r21
    2c76:	02 96       	adiw	r24, 0x02	; 2
    2c78:	a1 1d       	adc	r26, r1
    2c7a:	b1 1d       	adc	r27, r1
    2c7c:	bb 23       	and	r27, r27
    2c7e:	1c f4       	brge	.+6      	; 0x2c86 <BMP180_calculatePressure+0x33c>
    2c80:	03 96       	adiw	r24, 0x03	; 3
    2c82:	a1 1d       	adc	r26, r1
    2c84:	b1 1d       	adc	r27, r1
    2c86:	b5 95       	asr	r27
    2c88:	a7 95       	ror	r26
    2c8a:	97 95       	ror	r25
    2c8c:	87 95       	ror	r24
    2c8e:	b5 95       	asr	r27
    2c90:	a7 95       	ror	r26
    2c92:	97 95       	ror	r25
    2c94:	87 95       	ror	r24
    2c96:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <B3>
    2c9a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <B3+0x1>
    2c9e:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <B3+0x2>
    2ca2:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <B3+0x3>
	X1 = AC3 * B6 / (pow(2, 13));
    2ca6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <AC3>
    2caa:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <AC3+0x1>
    2cae:	9c 01       	movw	r18, r24
    2cb0:	99 0f       	add	r25, r25
    2cb2:	44 0b       	sbc	r20, r20
    2cb4:	55 0b       	sbc	r21, r21
    2cb6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <B6>
    2cba:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <B6+0x1>
    2cbe:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <B6+0x2>
    2cc2:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <B6+0x3>
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	56 e4       	ldi	r21, 0x46	; 70
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <X1>
    2d02:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <X1+0x1>
    2d06:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <X1+0x2>
    2d0a:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <X1+0x3>
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
    2d0e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <B1>
    2d12:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <B1+0x1>
    2d16:	09 2e       	mov	r0, r25
    2d18:	00 0c       	add	r0, r0
    2d1a:	aa 0b       	sbc	r26, r26
    2d1c:	bb 0b       	sbc	r27, r27
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2d26:	6b 01       	movw	r12, r22
    2d28:	7c 01       	movw	r14, r24
    2d2a:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <B6>
    2d2e:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <B6+0x1>
    2d32:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <B6+0x2>
    2d36:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <B6+0x3>
    2d3a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <B6>
    2d3e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <B6+0x1>
    2d42:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <B6+0x2>
    2d46:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <B6+0x3>
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e8       	ldi	r20, 0x80	; 128
    2d68:	55 e4       	ldi	r21, 0x45	; 69
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9c 01       	movw	r18, r24
    2d78:	ad 01       	movw	r20, r26
    2d7a:	c7 01       	movw	r24, r14
    2d7c:	b6 01       	movw	r22, r12
    2d7e:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	40 e8       	ldi	r20, 0x80	; 128
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	bc 01       	movw	r22, r24
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <X2>
    2daa:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <X2+0x1>
    2dae:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <X2+0x2>
    2db2:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <X2+0x3>
	X3 = ((X1 + X2) + 2) / (pow(2, 2));
    2db6:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <X1>
    2dba:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <X1+0x1>
    2dbe:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <X1+0x2>
    2dc2:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <X1+0x3>
    2dc6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <X2>
    2dca:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <X2+0x1>
    2dce:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <X2+0x2>
    2dd2:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <X2+0x3>
    2dd6:	82 0f       	add	r24, r18
    2dd8:	93 1f       	adc	r25, r19
    2dda:	a4 1f       	adc	r26, r20
    2ddc:	b5 1f       	adc	r27, r21
    2dde:	02 96       	adiw	r24, 0x02	; 2
    2de0:	a1 1d       	adc	r26, r1
    2de2:	b1 1d       	adc	r27, r1
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	50 e4       	ldi	r21, 0x40	; 64
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <X3>
    2e14:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <X3+0x1>
    2e18:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <X3+0x2>
    2e1c:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <X3+0x3>
	B4 = (AC4 * (uint32) (X3 + 32768)) / (pow(2, 15));
    2e20:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <AC4>
    2e24:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <AC4+0x1>
    2e28:	9c 01       	movw	r18, r24
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	50 e0       	ldi	r21, 0x00	; 0
    2e2e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <X3>
    2e32:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <X3+0x1>
    2e36:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <X3+0x2>
    2e3a:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <X3+0x3>
    2e3e:	90 58       	subi	r25, 0x80	; 128
    2e40:	af 4f       	sbci	r26, 0xFF	; 255
    2e42:	bf 4f       	sbci	r27, 0xFF	; 255
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__mulsi3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	bc 01       	movw	r22, r24
    2e52:	cd 01       	movw	r24, r26
    2e54:	0e 94 6f 1b 	call	0x36de	; 0x36de <__floatunsisf>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <B4>
    2e80:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <B4+0x1>
    2e84:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <B4+0x2>
    2e88:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <B4+0x3>
	B7 = ((uint32) UP - B3) * (50000 >> OSS);
    2e8c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <UP>
    2e90:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <UP+0x1>
    2e94:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <UP+0x2>
    2e98:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <UP+0x3>
    2e9c:	9c 01       	movw	r18, r24
    2e9e:	ad 01       	movw	r20, r26
    2ea0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <B3>
    2ea4:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <B3+0x1>
    2ea8:	a0 91 9e 00 	lds	r26, 0x009E	; 0x80009e <B3+0x2>
    2eac:	b0 91 9f 00 	lds	r27, 0x009F	; 0x80009f <B3+0x3>
    2eb0:	28 1b       	sub	r18, r24
    2eb2:	39 0b       	sbc	r19, r25
    2eb4:	4a 0b       	sbc	r20, r26
    2eb6:	5b 0b       	sbc	r21, r27
    2eb8:	80 e5       	ldi	r24, 0x50	; 80
    2eba:	93 ec       	ldi	r25, 0xC3	; 195
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	0e 94 33 1a 	call	0x3466	; 0x3466 <__muluhisi3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <B7>
    2eca:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <B7+0x1>
    2ece:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <B7+0x2>
    2ed2:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <B7+0x3>

	if (B7 < 0x80000000) {
    2ed6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <B7>
    2eda:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <B7+0x1>
    2ede:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <B7+0x2>
    2ee2:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <B7+0x3>
    2ee6:	bb 23       	and	r27, r27
    2ee8:	1c f1       	brlt	.+70     	; 0x2f30 <BMP180_calculatePressure+0x5e6>
		P = (B7 * 2) / B4;
    2eea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <B7>
    2eee:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <B7+0x1>
    2ef2:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <B7+0x2>
    2ef6:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <B7+0x3>
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	aa 1f       	adc	r26, r26
    2f00:	bb 1f       	adc	r27, r27
    2f02:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <B4>
    2f06:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <B4+0x1>
    2f0a:	40 91 ae 00 	lds	r20, 0x00AE	; 0x8000ae <B4+0x2>
    2f0e:	50 91 af 00 	lds	r21, 0x00AF	; 0x8000af <B4+0x3>
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__udivmodsi4>
    2f1a:	da 01       	movw	r26, r20
    2f1c:	c9 01       	movw	r24, r18
    2f1e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <P>
    2f22:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <P+0x1>
    2f26:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <P+0x2>
    2f2a:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <P+0x3>
    2f2e:	22 c0       	rjmp	.+68     	; 0x2f74 <BMP180_calculatePressure+0x62a>
	} else {
		P = (B7 / B4) * 2;
    2f30:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <B7>
    2f34:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <B7+0x1>
    2f38:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <B7+0x2>
    2f3c:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <B7+0x3>
    2f40:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <B4>
    2f44:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <B4+0x1>
    2f48:	40 91 ae 00 	lds	r20, 0x00AE	; 0x8000ae <B4+0x2>
    2f4c:	50 91 af 00 	lds	r21, 0x00AF	; 0x8000af <B4+0x3>
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__udivmodsi4>
    2f58:	da 01       	movw	r26, r20
    2f5a:	c9 01       	movw	r24, r18
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	aa 1f       	adc	r26, r26
    2f62:	bb 1f       	adc	r27, r27
    2f64:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <P>
    2f68:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <P+0x1>
    2f6c:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <P+0x2>
    2f70:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <P+0x3>
	}
	X1 = (P / (pow(2, 8))) * (P / (pow(2, 8)));
    2f74:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <P>
    2f78:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <P+0x1>
    2f7c:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <P+0x2>
    2f80:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <P+0x3>
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	53 e4       	ldi	r21, 0x43	; 67
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	6c 01       	movw	r12, r24
    2fa6:	7d 01       	movw	r14, r26
    2fa8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <P>
    2fac:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <P+0x1>
    2fb0:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <P+0x2>
    2fb4:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <P+0x3>
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e8       	ldi	r20, 0x80	; 128
    2fca:	53 e4       	ldi	r21, 0x43	; 67
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	9c 01       	movw	r18, r24
    2fda:	ad 01       	movw	r20, r26
    2fdc:	c7 01       	movw	r24, r14
    2fde:	b6 01       	movw	r22, r12
    2fe0:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	bc 01       	movw	r22, r24
    2fea:	cd 01       	movw	r24, r26
    2fec:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <X1>
    2ff8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <X1+0x1>
    2ffc:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <X1+0x2>
    3000:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <X1+0x3>
	X1 = (X1 * 3038) / (pow(2, 16));
    3004:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <X1>
    3008:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <X1+0x1>
    300c:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <X1+0x2>
    3010:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <X1+0x3>
    3014:	8e ed       	ldi	r24, 0xDE	; 222
    3016:	9b e0       	ldi	r25, 0x0B	; 11
    3018:	dc 01       	movw	r26, r24
    301a:	0e 94 33 1a 	call	0x3466	; 0x3466 <__muluhisi3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	bc 01       	movw	r22, r24
    3024:	cd 01       	movw	r24, r26
    3026:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	57 e4       	ldi	r21, 0x47	; 71
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <X1>
    3052:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <X1+0x1>
    3056:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <X1+0x2>
    305a:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <X1+0x3>
	X2 = (-7357 * P) / (pow(2, 16));
    305e:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <P>
    3062:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <P+0x1>
    3066:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <P+0x2>
    306a:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <P+0x3>
    306e:	83 e4       	ldi	r24, 0x43	; 67
    3070:	93 ee       	ldi	r25, 0xE3	; 227
    3072:	dc 01       	movw	r26, r24
    3074:	0e 94 41 1a 	call	0x3482	; 0x3482 <__mulohisi3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	57 e4       	ldi	r21, 0x47	; 71
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <X2>
    30ac:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <X2+0x1>
    30b0:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <X2+0x2>
    30b4:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <X2+0x3>
	P = P + (X1 + X2 + 3791) / (pow(2, 4));
    30b8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <P>
    30bc:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <P+0x1>
    30c0:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <P+0x2>
    30c4:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <P+0x3>
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    30d0:	6b 01       	movw	r12, r22
    30d2:	7c 01       	movw	r14, r24
    30d4:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <X1>
    30d8:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <X1+0x1>
    30dc:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <X1+0x2>
    30e0:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <X1+0x3>
    30e4:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <X2>
    30e8:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <X2+0x1>
    30ec:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <X2+0x2>
    30f0:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <X2+0x3>
    30f4:	82 0f       	add	r24, r18
    30f6:	93 1f       	adc	r25, r19
    30f8:	a4 1f       	adc	r26, r20
    30fa:	b5 1f       	adc	r27, r21
    30fc:	81 53       	subi	r24, 0x31	; 49
    30fe:	91 4f       	sbci	r25, 0xF1	; 241
    3100:	af 4f       	sbci	r26, 0xFF	; 255
    3102:	bf 4f       	sbci	r27, 0xFF	; 255
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__floatsisf>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	51 e4       	ldi	r21, 0x41	; 65
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9c 01       	movw	r18, r24
    3126:	ad 01       	movw	r20, r26
    3128:	c7 01       	movw	r24, r14
    312a:	b6 01       	movw	r22, r12
    312c:	0e 94 56 1a 	call	0x34ac	; 0x34ac <__addsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	bc 01       	movw	r22, r24
    3136:	cd 01       	movw	r24, r26
    3138:	0e 94 39 1b 	call	0x3672	; 0x3672 <__fixsfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <P>
    3144:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <P+0x1>
    3148:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <P+0x2>
    314c:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <P+0x3>

	P = P / 100;
    3150:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <P>
    3154:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <P+0x1>
    3158:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <P+0x2>
    315c:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <P+0x3>
    3160:	24 e6       	ldi	r18, 0x64	; 100
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 14 1a 	call	0x3428	; 0x3428 <__divmodsi4>
    3170:	da 01       	movw	r26, r20
    3172:	c9 01       	movw	r24, r18
    3174:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <P>
    3178:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <P+0x1>
    317c:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <P+0x2>
    3180:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <P+0x3>

	return P;
    3184:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <P>
    3188:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <P+0x1>
    318c:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <P+0x2>
    3190:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <P+0x3>
}
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	df 90       	pop	r13
    31a6:	cf 90       	pop	r12
    31a8:	08 95       	ret

000031aa <BMP180_Start>:

void BMP180_Start(void) {
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
	BMP180_ReadCalb();
    31b2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <BMP180_ReadCalb>
}
    31b6:	00 00       	nop
    31b8:	df 91       	pop	r29
    31ba:	cf 91       	pop	r28
    31bc:	08 95       	ret

000031be <delay>:

void delay(void){
    31be:	cf 93       	push	r28
    31c0:	df 93       	push	r29
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
    31c6:	a0 97       	sbiw	r28, 0x20	; 32
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	de bf       	out	0x3e, r29	; 62
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	cd bf       	out	0x3d, r28	; 61
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a0 e2       	ldi	r26, 0x20	; 32
    31d8:	b1 e4       	ldi	r27, 0x41	; 65
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	9a 83       	std	Y+2, r25	; 0x02
    31de:	ab 83       	std	Y+3, r26	; 0x03
    31e0:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    31e2:	2b ea       	ldi	r18, 0xAB	; 171
    31e4:	3a ea       	ldi	r19, 0xAA	; 170
    31e6:	4a ea       	ldi	r20, 0xAA	; 170
    31e8:	50 e4       	ldi	r21, 0x40	; 64
    31ea:	69 81       	ldd	r22, Y+1	; 0x01
    31ec:	7a 81       	ldd	r23, Y+2	; 0x02
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	9c 81       	ldd	r25, Y+4	; 0x04
    31f2:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	9e 83       	std	Y+6, r25	; 0x06
    31fe:	af 83       	std	Y+7, r26	; 0x07
    3200:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	50 e4       	ldi	r21, 0x40	; 64
    320a:	69 81       	ldd	r22, Y+1	; 0x01
    320c:	7a 81       	ldd	r23, Y+2	; 0x02
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	89 87       	std	Y+9, r24	; 0x09
    321c:	9a 87       	std	Y+10, r25	; 0x0a
    321e:	ab 87       	std	Y+11, r26	; 0x0b
    3220:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	6d 81       	ldd	r22, Y+5	; 0x05
    322c:	7e 81       	ldd	r23, Y+6	; 0x06
    322e:	8f 81       	ldd	r24, Y+7	; 0x07
    3230:	98 85       	ldd	r25, Y+8	; 0x08
    3232:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    3236:	88 23       	and	r24, r24
    3238:	1c f4       	brge	.+6      	; 0x3240 <delay+0x82>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	8d 87       	std	Y+13, r24	; 0x0d
    323e:	b2 c0       	rjmp	.+356    	; 0x33a4 <delay+0x1e6>
	else if (__tmp2 > 65535)
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	3f ef       	ldi	r19, 0xFF	; 255
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	57 e4       	ldi	r21, 0x47	; 71
    3248:	69 85       	ldd	r22, Y+9	; 0x09
    324a:	7a 85       	ldd	r23, Y+10	; 0x0a
    324c:	8b 85       	ldd	r24, Y+11	; 0x0b
    324e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3250:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    3254:	18 16       	cp	r1, r24
    3256:	0c f0       	brlt	.+2      	; 0x325a <delay+0x9c>
    3258:	7b c0       	rjmp	.+246    	; 0x3350 <delay+0x192>
	{
		_delay_ms(__us / 1000.0);
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	4a e7       	ldi	r20, 0x7A	; 122
    3260:	54 e4       	ldi	r21, 0x44	; 68
    3262:	69 81       	ldd	r22, Y+1	; 0x01
    3264:	7a 81       	ldd	r23, Y+2	; 0x02
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	9c 81       	ldd	r25, Y+4	; 0x04
    326a:	0e 94 c7 1a 	call	0x358e	; 0x358e <__divsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8e 87       	std	Y+14, r24	; 0x0e
    3274:	9f 87       	std	Y+15, r25	; 0x0f
    3276:	a8 8b       	std	Y+16, r26	; 0x10
    3278:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a e7       	ldi	r20, 0x7A	; 122
    3280:	55 e4       	ldi	r21, 0x45	; 69
    3282:	6e 85       	ldd	r22, Y+14	; 0x0e
    3284:	7f 85       	ldd	r23, Y+15	; 0x0f
    3286:	88 89       	ldd	r24, Y+16	; 0x10
    3288:	99 89       	ldd	r25, Y+17	; 0x11
    328a:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	8a 8b       	std	Y+18, r24	; 0x12
    3294:	9b 8b       	std	Y+19, r25	; 0x13
    3296:	ac 8b       	std	Y+20, r26	; 0x14
    3298:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e8       	ldi	r20, 0x80	; 128
    32a0:	5f e3       	ldi	r21, 0x3F	; 63
    32a2:	6a 89       	ldd	r22, Y+18	; 0x12
    32a4:	7b 89       	ldd	r23, Y+19	; 0x13
    32a6:	8c 89       	ldd	r24, Y+20	; 0x14
    32a8:	9d 89       	ldd	r25, Y+21	; 0x15
    32aa:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__cmpsf2>
    32ae:	88 23       	and	r24, r24
    32b0:	2c f4       	brge	.+10     	; 0x32bc <delay+0xfe>
		__ticks = 1;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	9f 8b       	std	Y+23, r25	; 0x17
    32b8:	8e 8b       	std	Y+22, r24	; 0x16
    32ba:	3f c0       	rjmp	.+126    	; 0x333a <delay+0x17c>
	else if (__tmp > 65535)
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	57 e4       	ldi	r21, 0x47	; 71
    32c4:	6a 89       	ldd	r22, Y+18	; 0x12
    32c6:	7b 89       	ldd	r23, Y+19	; 0x13
    32c8:	8c 89       	ldd	r24, Y+20	; 0x14
    32ca:	9d 89       	ldd	r25, Y+21	; 0x15
    32cc:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    32d0:	18 16       	cp	r1, r24
    32d2:	4c f5       	brge	.+82     	; 0x3326 <delay+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e2       	ldi	r20, 0x20	; 32
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	6e 85       	ldd	r22, Y+14	; 0x0e
    32de:	7f 85       	ldd	r23, Y+15	; 0x0f
    32e0:	88 89       	ldd	r24, Y+16	; 0x10
    32e2:	99 89       	ldd	r25, Y+17	; 0x11
    32e4:	0e 94 26 1c 	call	0x384c	; 0x384c <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	bc 01       	movw	r22, r24
    32ee:	cd 01       	movw	r24, r26
    32f0:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	9f 8b       	std	Y+23, r25	; 0x17
    32fa:	8e 8b       	std	Y+22, r24	; 0x16
    32fc:	0f c0       	rjmp	.+30     	; 0x331c <delay+0x15e>
    32fe:	80 e9       	ldi	r24, 0x90	; 144
    3300:	91 e0       	ldi	r25, 0x01	; 1
    3302:	99 8f       	std	Y+25, r25	; 0x19
    3304:	88 8f       	std	Y+24, r24	; 0x18
    3306:	88 8d       	ldd	r24, Y+24	; 0x18
    3308:	99 8d       	ldd	r25, Y+25	; 0x19
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <delay+0x14c>
    330e:	99 8f       	std	Y+25, r25	; 0x19
    3310:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3312:	8e 89       	ldd	r24, Y+22	; 0x16
    3314:	9f 89       	ldd	r25, Y+23	; 0x17
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	9f 8b       	std	Y+23, r25	; 0x17
    331a:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	8e 89       	ldd	r24, Y+22	; 0x16
    331e:	9f 89       	ldd	r25, Y+23	; 0x17
    3320:	89 2b       	or	r24, r25
    3322:	69 f7       	brne	.-38     	; 0x32fe <delay+0x140>
    3324:	3f c0       	rjmp	.+126    	; 0x33a4 <delay+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3326:	6a 89       	ldd	r22, Y+18	; 0x12
    3328:	7b 89       	ldd	r23, Y+19	; 0x13
    332a:	8c 89       	ldd	r24, Y+20	; 0x14
    332c:	9d 89       	ldd	r25, Y+21	; 0x15
    332e:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	9f 8b       	std	Y+23, r25	; 0x17
    3338:	8e 8b       	std	Y+22, r24	; 0x16
    333a:	8e 89       	ldd	r24, Y+22	; 0x16
    333c:	9f 89       	ldd	r25, Y+23	; 0x17
    333e:	9b 8f       	std	Y+27, r25	; 0x1b
    3340:	8a 8f       	std	Y+26, r24	; 0x1a
    3342:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3344:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <delay+0x188>
    334a:	9b 8f       	std	Y+27, r25	; 0x1b
    334c:	8a 8f       	std	Y+26, r24	; 0x1a
    334e:	2a c0       	rjmp	.+84     	; 0x33a4 <delay+0x1e6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	4f e7       	ldi	r20, 0x7F	; 127
    3356:	53 e4       	ldi	r21, 0x43	; 67
    3358:	6d 81       	ldd	r22, Y+5	; 0x05
    335a:	7e 81       	ldd	r23, Y+6	; 0x06
    335c:	8f 81       	ldd	r24, Y+7	; 0x07
    335e:	98 85       	ldd	r25, Y+8	; 0x08
    3360:	0e 94 21 1c 	call	0x3842	; 0x3842 <__gesf2>
    3364:	18 16       	cp	r1, r24
    3366:	ac f4       	brge	.+42     	; 0x3392 <delay+0x1d4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    3368:	69 85       	ldd	r22, Y+9	; 0x09
    336a:	7a 85       	ldd	r23, Y+10	; 0x0a
    336c:	8b 85       	ldd	r24, Y+11	; 0x0b
    336e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3370:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9d 8f       	std	Y+29, r25	; 0x1d
    337a:	8c 8f       	std	Y+28, r24	; 0x1c
    337c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    337e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3380:	9f 8f       	std	Y+31, r25	; 0x1f
    3382:	8e 8f       	std	Y+30, r24	; 0x1e
    3384:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3386:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <delay+0x1ca>
    338c:	9f 8f       	std	Y+31, r25	; 0x1f
    338e:	8e 8f       	std	Y+30, r24	; 0x1e
	_delay_us(10);
}
    3390:	0f c0       	rjmp	.+30     	; 0x33b0 <delay+0x1f2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3392:	6d 81       	ldd	r22, Y+5	; 0x05
    3394:	7e 81       	ldd	r23, Y+6	; 0x06
    3396:	8f 81       	ldd	r24, Y+7	; 0x07
    3398:	98 85       	ldd	r25, Y+8	; 0x08
    339a:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	8d 87       	std	Y+13, r24	; 0x0d
    33a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a6:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33a8:	88 a1       	ldd	r24, Y+32	; 0x20
    33aa:	8a 95       	dec	r24
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <delay+0x1ec>
    33ae:	88 a3       	std	Y+32, r24	; 0x20
    33b0:	00 00       	nop
    33b2:	a0 96       	adiw	r28, 0x20	; 32
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	df 91       	pop	r29
    33c0:	cf 91       	pop	r28
    33c2:	08 95       	ret

000033c4 <__mulsi3>:
    33c4:	db 01       	movw	r26, r22
    33c6:	8f 93       	push	r24
    33c8:	9f 93       	push	r25
    33ca:	0e 94 33 1a 	call	0x3466	; 0x3466 <__muluhisi3>
    33ce:	bf 91       	pop	r27
    33d0:	af 91       	pop	r26
    33d2:	a2 9f       	mul	r26, r18
    33d4:	80 0d       	add	r24, r0
    33d6:	91 1d       	adc	r25, r1
    33d8:	a3 9f       	mul	r26, r19
    33da:	90 0d       	add	r25, r0
    33dc:	b2 9f       	mul	r27, r18
    33de:	90 0d       	add	r25, r0
    33e0:	11 24       	eor	r1, r1
    33e2:	08 95       	ret

000033e4 <__udivmodsi4>:
    33e4:	a1 e2       	ldi	r26, 0x21	; 33
    33e6:	1a 2e       	mov	r1, r26
    33e8:	aa 1b       	sub	r26, r26
    33ea:	bb 1b       	sub	r27, r27
    33ec:	fd 01       	movw	r30, r26
    33ee:	0d c0       	rjmp	.+26     	; 0x340a <__udivmodsi4_ep>

000033f0 <__udivmodsi4_loop>:
    33f0:	aa 1f       	adc	r26, r26
    33f2:	bb 1f       	adc	r27, r27
    33f4:	ee 1f       	adc	r30, r30
    33f6:	ff 1f       	adc	r31, r31
    33f8:	a2 17       	cp	r26, r18
    33fa:	b3 07       	cpc	r27, r19
    33fc:	e4 07       	cpc	r30, r20
    33fe:	f5 07       	cpc	r31, r21
    3400:	20 f0       	brcs	.+8      	; 0x340a <__udivmodsi4_ep>
    3402:	a2 1b       	sub	r26, r18
    3404:	b3 0b       	sbc	r27, r19
    3406:	e4 0b       	sbc	r30, r20
    3408:	f5 0b       	sbc	r31, r21

0000340a <__udivmodsi4_ep>:
    340a:	66 1f       	adc	r22, r22
    340c:	77 1f       	adc	r23, r23
    340e:	88 1f       	adc	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	1a 94       	dec	r1
    3414:	69 f7       	brne	.-38     	; 0x33f0 <__udivmodsi4_loop>
    3416:	60 95       	com	r22
    3418:	70 95       	com	r23
    341a:	80 95       	com	r24
    341c:	90 95       	com	r25
    341e:	9b 01       	movw	r18, r22
    3420:	ac 01       	movw	r20, r24
    3422:	bd 01       	movw	r22, r26
    3424:	cf 01       	movw	r24, r30
    3426:	08 95       	ret

00003428 <__divmodsi4>:
    3428:	05 2e       	mov	r0, r21
    342a:	97 fb       	bst	r25, 7
    342c:	1e f4       	brtc	.+6      	; 0x3434 <__divmodsi4+0xc>
    342e:	00 94       	com	r0
    3430:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__negsi2>
    3434:	57 fd       	sbrc	r21, 7
    3436:	07 d0       	rcall	.+14     	; 0x3446 <__divmodsi4_neg2>
    3438:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__udivmodsi4>
    343c:	07 fc       	sbrc	r0, 7
    343e:	03 d0       	rcall	.+6      	; 0x3446 <__divmodsi4_neg2>
    3440:	4e f4       	brtc	.+18     	; 0x3454 <__divmodsi4_exit>
    3442:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <__negsi2>

00003446 <__divmodsi4_neg2>:
    3446:	50 95       	com	r21
    3448:	40 95       	com	r20
    344a:	30 95       	com	r19
    344c:	21 95       	neg	r18
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	4f 4f       	sbci	r20, 0xFF	; 255
    3452:	5f 4f       	sbci	r21, 0xFF	; 255

00003454 <__divmodsi4_exit>:
    3454:	08 95       	ret

00003456 <__negsi2>:
    3456:	90 95       	com	r25
    3458:	80 95       	com	r24
    345a:	70 95       	com	r23
    345c:	61 95       	neg	r22
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	8f 4f       	sbci	r24, 0xFF	; 255
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	08 95       	ret

00003466 <__muluhisi3>:
    3466:	0e 94 46 1a 	call	0x348c	; 0x348c <__umulhisi3>
    346a:	a5 9f       	mul	r26, r21
    346c:	90 0d       	add	r25, r0
    346e:	b4 9f       	mul	r27, r20
    3470:	90 0d       	add	r25, r0
    3472:	a4 9f       	mul	r26, r20
    3474:	80 0d       	add	r24, r0
    3476:	91 1d       	adc	r25, r1
    3478:	11 24       	eor	r1, r1
    347a:	08 95       	ret

0000347c <__mulshisi3>:
    347c:	b7 ff       	sbrs	r27, 7
    347e:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__muluhisi3>

00003482 <__mulohisi3>:
    3482:	0e 94 33 1a 	call	0x3466	; 0x3466 <__muluhisi3>
    3486:	82 1b       	sub	r24, r18
    3488:	93 0b       	sbc	r25, r19
    348a:	08 95       	ret

0000348c <__umulhisi3>:
    348c:	a2 9f       	mul	r26, r18
    348e:	b0 01       	movw	r22, r0
    3490:	b3 9f       	mul	r27, r19
    3492:	c0 01       	movw	r24, r0
    3494:	a3 9f       	mul	r26, r19
    3496:	70 0d       	add	r23, r0
    3498:	81 1d       	adc	r24, r1
    349a:	11 24       	eor	r1, r1
    349c:	91 1d       	adc	r25, r1
    349e:	b2 9f       	mul	r27, r18
    34a0:	70 0d       	add	r23, r0
    34a2:	81 1d       	adc	r24, r1
    34a4:	11 24       	eor	r1, r1
    34a6:	91 1d       	adc	r25, r1
    34a8:	08 95       	ret

000034aa <__subsf3>:
    34aa:	50 58       	subi	r21, 0x80	; 128

000034ac <__addsf3>:
    34ac:	bb 27       	eor	r27, r27
    34ae:	aa 27       	eor	r26, r26
    34b0:	0e 94 6d 1a 	call	0x34da	; 0x34da <__addsf3x>
    34b4:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__fp_round>
    34b8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fp_pscA>
    34bc:	38 f0       	brcs	.+14     	; 0x34cc <__addsf3+0x20>
    34be:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__fp_pscB>
    34c2:	20 f0       	brcs	.+8      	; 0x34cc <__addsf3+0x20>
    34c4:	39 f4       	brne	.+14     	; 0x34d4 <__addsf3+0x28>
    34c6:	9f 3f       	cpi	r25, 0xFF	; 255
    34c8:	19 f4       	brne	.+6      	; 0x34d0 <__addsf3+0x24>
    34ca:	26 f4       	brtc	.+8      	; 0x34d4 <__addsf3+0x28>
    34cc:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__fp_nan>
    34d0:	0e f4       	brtc	.+2      	; 0x34d4 <__addsf3+0x28>
    34d2:	e0 95       	com	r30
    34d4:	e7 fb       	bst	r30, 7
    34d6:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__fp_inf>

000034da <__addsf3x>:
    34da:	e9 2f       	mov	r30, r25
    34dc:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__fp_split3>
    34e0:	58 f3       	brcs	.-42     	; 0x34b8 <__addsf3+0xc>
    34e2:	ba 17       	cp	r27, r26
    34e4:	62 07       	cpc	r22, r18
    34e6:	73 07       	cpc	r23, r19
    34e8:	84 07       	cpc	r24, r20
    34ea:	95 07       	cpc	r25, r21
    34ec:	20 f0       	brcs	.+8      	; 0x34f6 <__addsf3x+0x1c>
    34ee:	79 f4       	brne	.+30     	; 0x350e <__addsf3x+0x34>
    34f0:	a6 f5       	brtc	.+104    	; 0x355a <__addsf3x+0x80>
    34f2:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__fp_zero>
    34f6:	0e f4       	brtc	.+2      	; 0x34fa <__addsf3x+0x20>
    34f8:	e0 95       	com	r30
    34fa:	0b 2e       	mov	r0, r27
    34fc:	ba 2f       	mov	r27, r26
    34fe:	a0 2d       	mov	r26, r0
    3500:	0b 01       	movw	r0, r22
    3502:	b9 01       	movw	r22, r18
    3504:	90 01       	movw	r18, r0
    3506:	0c 01       	movw	r0, r24
    3508:	ca 01       	movw	r24, r20
    350a:	a0 01       	movw	r20, r0
    350c:	11 24       	eor	r1, r1
    350e:	ff 27       	eor	r31, r31
    3510:	59 1b       	sub	r21, r25
    3512:	99 f0       	breq	.+38     	; 0x353a <__addsf3x+0x60>
    3514:	59 3f       	cpi	r21, 0xF9	; 249
    3516:	50 f4       	brcc	.+20     	; 0x352c <__addsf3x+0x52>
    3518:	50 3e       	cpi	r21, 0xE0	; 224
    351a:	68 f1       	brcs	.+90     	; 0x3576 <__addsf3x+0x9c>
    351c:	1a 16       	cp	r1, r26
    351e:	f0 40       	sbci	r31, 0x00	; 0
    3520:	a2 2f       	mov	r26, r18
    3522:	23 2f       	mov	r18, r19
    3524:	34 2f       	mov	r19, r20
    3526:	44 27       	eor	r20, r20
    3528:	58 5f       	subi	r21, 0xF8	; 248
    352a:	f3 cf       	rjmp	.-26     	; 0x3512 <__addsf3x+0x38>
    352c:	46 95       	lsr	r20
    352e:	37 95       	ror	r19
    3530:	27 95       	ror	r18
    3532:	a7 95       	ror	r26
    3534:	f0 40       	sbci	r31, 0x00	; 0
    3536:	53 95       	inc	r21
    3538:	c9 f7       	brne	.-14     	; 0x352c <__addsf3x+0x52>
    353a:	7e f4       	brtc	.+30     	; 0x355a <__addsf3x+0x80>
    353c:	1f 16       	cp	r1, r31
    353e:	ba 0b       	sbc	r27, r26
    3540:	62 0b       	sbc	r22, r18
    3542:	73 0b       	sbc	r23, r19
    3544:	84 0b       	sbc	r24, r20
    3546:	ba f0       	brmi	.+46     	; 0x3576 <__addsf3x+0x9c>
    3548:	91 50       	subi	r25, 0x01	; 1
    354a:	a1 f0       	breq	.+40     	; 0x3574 <__addsf3x+0x9a>
    354c:	ff 0f       	add	r31, r31
    354e:	bb 1f       	adc	r27, r27
    3550:	66 1f       	adc	r22, r22
    3552:	77 1f       	adc	r23, r23
    3554:	88 1f       	adc	r24, r24
    3556:	c2 f7       	brpl	.-16     	; 0x3548 <__addsf3x+0x6e>
    3558:	0e c0       	rjmp	.+28     	; 0x3576 <__addsf3x+0x9c>
    355a:	ba 0f       	add	r27, r26
    355c:	62 1f       	adc	r22, r18
    355e:	73 1f       	adc	r23, r19
    3560:	84 1f       	adc	r24, r20
    3562:	48 f4       	brcc	.+18     	; 0x3576 <__addsf3x+0x9c>
    3564:	87 95       	ror	r24
    3566:	77 95       	ror	r23
    3568:	67 95       	ror	r22
    356a:	b7 95       	ror	r27
    356c:	f7 95       	ror	r31
    356e:	9e 3f       	cpi	r25, 0xFE	; 254
    3570:	08 f0       	brcs	.+2      	; 0x3574 <__addsf3x+0x9a>
    3572:	b0 cf       	rjmp	.-160    	; 0x34d4 <__addsf3+0x28>
    3574:	93 95       	inc	r25
    3576:	88 0f       	add	r24, r24
    3578:	08 f0       	brcs	.+2      	; 0x357c <__addsf3x+0xa2>
    357a:	99 27       	eor	r25, r25
    357c:	ee 0f       	add	r30, r30
    357e:	97 95       	ror	r25
    3580:	87 95       	ror	r24
    3582:	08 95       	ret

00003584 <__cmpsf2>:
    3584:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__fp_cmp>
    3588:	08 f4       	brcc	.+2      	; 0x358c <__cmpsf2+0x8>
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	08 95       	ret

0000358e <__divsf3>:
    358e:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <__divsf3x>
    3592:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__fp_round>
    3596:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__fp_pscB>
    359a:	58 f0       	brcs	.+22     	; 0x35b2 <__divsf3+0x24>
    359c:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fp_pscA>
    35a0:	40 f0       	brcs	.+16     	; 0x35b2 <__divsf3+0x24>
    35a2:	29 f4       	brne	.+10     	; 0x35ae <__divsf3+0x20>
    35a4:	5f 3f       	cpi	r21, 0xFF	; 255
    35a6:	29 f0       	breq	.+10     	; 0x35b2 <__divsf3+0x24>
    35a8:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__fp_inf>
    35ac:	51 11       	cpse	r21, r1
    35ae:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_szero>
    35b2:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__fp_nan>

000035b6 <__divsf3x>:
    35b6:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__fp_split3>
    35ba:	68 f3       	brcs	.-38     	; 0x3596 <__divsf3+0x8>

000035bc <__divsf3_pse>:
    35bc:	99 23       	and	r25, r25
    35be:	b1 f3       	breq	.-20     	; 0x35ac <__divsf3+0x1e>
    35c0:	55 23       	and	r21, r21
    35c2:	91 f3       	breq	.-28     	; 0x35a8 <__divsf3+0x1a>
    35c4:	95 1b       	sub	r25, r21
    35c6:	55 0b       	sbc	r21, r21
    35c8:	bb 27       	eor	r27, r27
    35ca:	aa 27       	eor	r26, r26
    35cc:	62 17       	cp	r22, r18
    35ce:	73 07       	cpc	r23, r19
    35d0:	84 07       	cpc	r24, r20
    35d2:	38 f0       	brcs	.+14     	; 0x35e2 <__divsf3_pse+0x26>
    35d4:	9f 5f       	subi	r25, 0xFF	; 255
    35d6:	5f 4f       	sbci	r21, 0xFF	; 255
    35d8:	22 0f       	add	r18, r18
    35da:	33 1f       	adc	r19, r19
    35dc:	44 1f       	adc	r20, r20
    35de:	aa 1f       	adc	r26, r26
    35e0:	a9 f3       	breq	.-22     	; 0x35cc <__divsf3_pse+0x10>
    35e2:	35 d0       	rcall	.+106    	; 0x364e <__divsf3_pse+0x92>
    35e4:	0e 2e       	mov	r0, r30
    35e6:	3a f0       	brmi	.+14     	; 0x35f6 <__divsf3_pse+0x3a>
    35e8:	e0 e8       	ldi	r30, 0x80	; 128
    35ea:	32 d0       	rcall	.+100    	; 0x3650 <__divsf3_pse+0x94>
    35ec:	91 50       	subi	r25, 0x01	; 1
    35ee:	50 40       	sbci	r21, 0x00	; 0
    35f0:	e6 95       	lsr	r30
    35f2:	00 1c       	adc	r0, r0
    35f4:	ca f7       	brpl	.-14     	; 0x35e8 <__divsf3_pse+0x2c>
    35f6:	2b d0       	rcall	.+86     	; 0x364e <__divsf3_pse+0x92>
    35f8:	fe 2f       	mov	r31, r30
    35fa:	29 d0       	rcall	.+82     	; 0x364e <__divsf3_pse+0x92>
    35fc:	66 0f       	add	r22, r22
    35fe:	77 1f       	adc	r23, r23
    3600:	88 1f       	adc	r24, r24
    3602:	bb 1f       	adc	r27, r27
    3604:	26 17       	cp	r18, r22
    3606:	37 07       	cpc	r19, r23
    3608:	48 07       	cpc	r20, r24
    360a:	ab 07       	cpc	r26, r27
    360c:	b0 e8       	ldi	r27, 0x80	; 128
    360e:	09 f0       	breq	.+2      	; 0x3612 <__divsf3_pse+0x56>
    3610:	bb 0b       	sbc	r27, r27
    3612:	80 2d       	mov	r24, r0
    3614:	bf 01       	movw	r22, r30
    3616:	ff 27       	eor	r31, r31
    3618:	93 58       	subi	r25, 0x83	; 131
    361a:	5f 4f       	sbci	r21, 0xFF	; 255
    361c:	3a f0       	brmi	.+14     	; 0x362c <__divsf3_pse+0x70>
    361e:	9e 3f       	cpi	r25, 0xFE	; 254
    3620:	51 05       	cpc	r21, r1
    3622:	78 f0       	brcs	.+30     	; 0x3642 <__divsf3_pse+0x86>
    3624:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__fp_inf>
    3628:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_szero>
    362c:	5f 3f       	cpi	r21, 0xFF	; 255
    362e:	e4 f3       	brlt	.-8      	; 0x3628 <__divsf3_pse+0x6c>
    3630:	98 3e       	cpi	r25, 0xE8	; 232
    3632:	d4 f3       	brlt	.-12     	; 0x3628 <__divsf3_pse+0x6c>
    3634:	86 95       	lsr	r24
    3636:	77 95       	ror	r23
    3638:	67 95       	ror	r22
    363a:	b7 95       	ror	r27
    363c:	f7 95       	ror	r31
    363e:	9f 5f       	subi	r25, 0xFF	; 255
    3640:	c9 f7       	brne	.-14     	; 0x3634 <__divsf3_pse+0x78>
    3642:	88 0f       	add	r24, r24
    3644:	91 1d       	adc	r25, r1
    3646:	96 95       	lsr	r25
    3648:	87 95       	ror	r24
    364a:	97 f9       	bld	r25, 7
    364c:	08 95       	ret
    364e:	e1 e0       	ldi	r30, 0x01	; 1
    3650:	66 0f       	add	r22, r22
    3652:	77 1f       	adc	r23, r23
    3654:	88 1f       	adc	r24, r24
    3656:	bb 1f       	adc	r27, r27
    3658:	62 17       	cp	r22, r18
    365a:	73 07       	cpc	r23, r19
    365c:	84 07       	cpc	r24, r20
    365e:	ba 07       	cpc	r27, r26
    3660:	20 f0       	brcs	.+8      	; 0x366a <__divsf3_pse+0xae>
    3662:	62 1b       	sub	r22, r18
    3664:	73 0b       	sbc	r23, r19
    3666:	84 0b       	sbc	r24, r20
    3668:	ba 0b       	sbc	r27, r26
    366a:	ee 1f       	adc	r30, r30
    366c:	88 f7       	brcc	.-30     	; 0x3650 <__divsf3_pse+0x94>
    366e:	e0 95       	com	r30
    3670:	08 95       	ret

00003672 <__fixsfsi>:
    3672:	0e 94 40 1b 	call	0x3680	; 0x3680 <__fixunssfsi>
    3676:	68 94       	set
    3678:	b1 11       	cpse	r27, r1
    367a:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_szero>
    367e:	08 95       	ret

00003680 <__fixunssfsi>:
    3680:	0e 94 00 1c 	call	0x3800	; 0x3800 <__fp_splitA>
    3684:	88 f0       	brcs	.+34     	; 0x36a8 <__fixunssfsi+0x28>
    3686:	9f 57       	subi	r25, 0x7F	; 127
    3688:	98 f0       	brcs	.+38     	; 0x36b0 <__fixunssfsi+0x30>
    368a:	b9 2f       	mov	r27, r25
    368c:	99 27       	eor	r25, r25
    368e:	b7 51       	subi	r27, 0x17	; 23
    3690:	b0 f0       	brcs	.+44     	; 0x36be <__fixunssfsi+0x3e>
    3692:	e1 f0       	breq	.+56     	; 0x36cc <__fixunssfsi+0x4c>
    3694:	66 0f       	add	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	88 1f       	adc	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	1a f0       	brmi	.+6      	; 0x36a4 <__fixunssfsi+0x24>
    369e:	ba 95       	dec	r27
    36a0:	c9 f7       	brne	.-14     	; 0x3694 <__fixunssfsi+0x14>
    36a2:	14 c0       	rjmp	.+40     	; 0x36cc <__fixunssfsi+0x4c>
    36a4:	b1 30       	cpi	r27, 0x01	; 1
    36a6:	91 f0       	breq	.+36     	; 0x36cc <__fixunssfsi+0x4c>
    36a8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__fp_zero>
    36ac:	b1 e0       	ldi	r27, 0x01	; 1
    36ae:	08 95       	ret
    36b0:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__fp_zero>
    36b4:	67 2f       	mov	r22, r23
    36b6:	78 2f       	mov	r23, r24
    36b8:	88 27       	eor	r24, r24
    36ba:	b8 5f       	subi	r27, 0xF8	; 248
    36bc:	39 f0       	breq	.+14     	; 0x36cc <__fixunssfsi+0x4c>
    36be:	b9 3f       	cpi	r27, 0xF9	; 249
    36c0:	cc f3       	brlt	.-14     	; 0x36b4 <__fixunssfsi+0x34>
    36c2:	86 95       	lsr	r24
    36c4:	77 95       	ror	r23
    36c6:	67 95       	ror	r22
    36c8:	b3 95       	inc	r27
    36ca:	d9 f7       	brne	.-10     	; 0x36c2 <__fixunssfsi+0x42>
    36cc:	3e f4       	brtc	.+14     	; 0x36dc <__fixunssfsi+0x5c>
    36ce:	90 95       	com	r25
    36d0:	80 95       	com	r24
    36d2:	70 95       	com	r23
    36d4:	61 95       	neg	r22
    36d6:	7f 4f       	sbci	r23, 0xFF	; 255
    36d8:	8f 4f       	sbci	r24, 0xFF	; 255
    36da:	9f 4f       	sbci	r25, 0xFF	; 255
    36dc:	08 95       	ret

000036de <__floatunsisf>:
    36de:	e8 94       	clt
    36e0:	09 c0       	rjmp	.+18     	; 0x36f4 <__floatsisf+0x12>

000036e2 <__floatsisf>:
    36e2:	97 fb       	bst	r25, 7
    36e4:	3e f4       	brtc	.+14     	; 0x36f4 <__floatsisf+0x12>
    36e6:	90 95       	com	r25
    36e8:	80 95       	com	r24
    36ea:	70 95       	com	r23
    36ec:	61 95       	neg	r22
    36ee:	7f 4f       	sbci	r23, 0xFF	; 255
    36f0:	8f 4f       	sbci	r24, 0xFF	; 255
    36f2:	9f 4f       	sbci	r25, 0xFF	; 255
    36f4:	99 23       	and	r25, r25
    36f6:	a9 f0       	breq	.+42     	; 0x3722 <__floatsisf+0x40>
    36f8:	f9 2f       	mov	r31, r25
    36fa:	96 e9       	ldi	r25, 0x96	; 150
    36fc:	bb 27       	eor	r27, r27
    36fe:	93 95       	inc	r25
    3700:	f6 95       	lsr	r31
    3702:	87 95       	ror	r24
    3704:	77 95       	ror	r23
    3706:	67 95       	ror	r22
    3708:	b7 95       	ror	r27
    370a:	f1 11       	cpse	r31, r1
    370c:	f8 cf       	rjmp	.-16     	; 0x36fe <__floatsisf+0x1c>
    370e:	fa f4       	brpl	.+62     	; 0x374e <__floatsisf+0x6c>
    3710:	bb 0f       	add	r27, r27
    3712:	11 f4       	brne	.+4      	; 0x3718 <__floatsisf+0x36>
    3714:	60 ff       	sbrs	r22, 0
    3716:	1b c0       	rjmp	.+54     	; 0x374e <__floatsisf+0x6c>
    3718:	6f 5f       	subi	r22, 0xFF	; 255
    371a:	7f 4f       	sbci	r23, 0xFF	; 255
    371c:	8f 4f       	sbci	r24, 0xFF	; 255
    371e:	9f 4f       	sbci	r25, 0xFF	; 255
    3720:	16 c0       	rjmp	.+44     	; 0x374e <__floatsisf+0x6c>
    3722:	88 23       	and	r24, r24
    3724:	11 f0       	breq	.+4      	; 0x372a <__floatsisf+0x48>
    3726:	96 e9       	ldi	r25, 0x96	; 150
    3728:	11 c0       	rjmp	.+34     	; 0x374c <__floatsisf+0x6a>
    372a:	77 23       	and	r23, r23
    372c:	21 f0       	breq	.+8      	; 0x3736 <__floatsisf+0x54>
    372e:	9e e8       	ldi	r25, 0x8E	; 142
    3730:	87 2f       	mov	r24, r23
    3732:	76 2f       	mov	r23, r22
    3734:	05 c0       	rjmp	.+10     	; 0x3740 <__floatsisf+0x5e>
    3736:	66 23       	and	r22, r22
    3738:	71 f0       	breq	.+28     	; 0x3756 <__floatsisf+0x74>
    373a:	96 e8       	ldi	r25, 0x86	; 134
    373c:	86 2f       	mov	r24, r22
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	2a f0       	brmi	.+10     	; 0x374e <__floatsisf+0x6c>
    3744:	9a 95       	dec	r25
    3746:	66 0f       	add	r22, r22
    3748:	77 1f       	adc	r23, r23
    374a:	88 1f       	adc	r24, r24
    374c:	da f7       	brpl	.-10     	; 0x3744 <__floatsisf+0x62>
    374e:	88 0f       	add	r24, r24
    3750:	96 95       	lsr	r25
    3752:	87 95       	ror	r24
    3754:	97 f9       	bld	r25, 7
    3756:	08 95       	ret

00003758 <__fp_cmp>:
    3758:	99 0f       	add	r25, r25
    375a:	00 08       	sbc	r0, r0
    375c:	55 0f       	add	r21, r21
    375e:	aa 0b       	sbc	r26, r26
    3760:	e0 e8       	ldi	r30, 0x80	; 128
    3762:	fe ef       	ldi	r31, 0xFE	; 254
    3764:	16 16       	cp	r1, r22
    3766:	17 06       	cpc	r1, r23
    3768:	e8 07       	cpc	r30, r24
    376a:	f9 07       	cpc	r31, r25
    376c:	c0 f0       	brcs	.+48     	; 0x379e <__fp_cmp+0x46>
    376e:	12 16       	cp	r1, r18
    3770:	13 06       	cpc	r1, r19
    3772:	e4 07       	cpc	r30, r20
    3774:	f5 07       	cpc	r31, r21
    3776:	98 f0       	brcs	.+38     	; 0x379e <__fp_cmp+0x46>
    3778:	62 1b       	sub	r22, r18
    377a:	73 0b       	sbc	r23, r19
    377c:	84 0b       	sbc	r24, r20
    377e:	95 0b       	sbc	r25, r21
    3780:	39 f4       	brne	.+14     	; 0x3790 <__fp_cmp+0x38>
    3782:	0a 26       	eor	r0, r26
    3784:	61 f0       	breq	.+24     	; 0x379e <__fp_cmp+0x46>
    3786:	23 2b       	or	r18, r19
    3788:	24 2b       	or	r18, r20
    378a:	25 2b       	or	r18, r21
    378c:	21 f4       	brne	.+8      	; 0x3796 <__fp_cmp+0x3e>
    378e:	08 95       	ret
    3790:	0a 26       	eor	r0, r26
    3792:	09 f4       	brne	.+2      	; 0x3796 <__fp_cmp+0x3e>
    3794:	a1 40       	sbci	r26, 0x01	; 1
    3796:	a6 95       	lsr	r26
    3798:	8f ef       	ldi	r24, 0xFF	; 255
    379a:	81 1d       	adc	r24, r1
    379c:	81 1d       	adc	r24, r1
    379e:	08 95       	ret

000037a0 <__fp_inf>:
    37a0:	97 f9       	bld	r25, 7
    37a2:	9f 67       	ori	r25, 0x7F	; 127
    37a4:	80 e8       	ldi	r24, 0x80	; 128
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	08 95       	ret

000037ac <__fp_nan>:
    37ac:	9f ef       	ldi	r25, 0xFF	; 255
    37ae:	80 ec       	ldi	r24, 0xC0	; 192
    37b0:	08 95       	ret

000037b2 <__fp_pscA>:
    37b2:	00 24       	eor	r0, r0
    37b4:	0a 94       	dec	r0
    37b6:	16 16       	cp	r1, r22
    37b8:	17 06       	cpc	r1, r23
    37ba:	18 06       	cpc	r1, r24
    37bc:	09 06       	cpc	r0, r25
    37be:	08 95       	ret

000037c0 <__fp_pscB>:
    37c0:	00 24       	eor	r0, r0
    37c2:	0a 94       	dec	r0
    37c4:	12 16       	cp	r1, r18
    37c6:	13 06       	cpc	r1, r19
    37c8:	14 06       	cpc	r1, r20
    37ca:	05 06       	cpc	r0, r21
    37cc:	08 95       	ret

000037ce <__fp_round>:
    37ce:	09 2e       	mov	r0, r25
    37d0:	03 94       	inc	r0
    37d2:	00 0c       	add	r0, r0
    37d4:	11 f4       	brne	.+4      	; 0x37da <__fp_round+0xc>
    37d6:	88 23       	and	r24, r24
    37d8:	52 f0       	brmi	.+20     	; 0x37ee <__fp_round+0x20>
    37da:	bb 0f       	add	r27, r27
    37dc:	40 f4       	brcc	.+16     	; 0x37ee <__fp_round+0x20>
    37de:	bf 2b       	or	r27, r31
    37e0:	11 f4       	brne	.+4      	; 0x37e6 <__fp_round+0x18>
    37e2:	60 ff       	sbrs	r22, 0
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <__fp_round+0x20>
    37e6:	6f 5f       	subi	r22, 0xFF	; 255
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ea:	8f 4f       	sbci	r24, 0xFF	; 255
    37ec:	9f 4f       	sbci	r25, 0xFF	; 255
    37ee:	08 95       	ret

000037f0 <__fp_split3>:
    37f0:	57 fd       	sbrc	r21, 7
    37f2:	90 58       	subi	r25, 0x80	; 128
    37f4:	44 0f       	add	r20, r20
    37f6:	55 1f       	adc	r21, r21
    37f8:	59 f0       	breq	.+22     	; 0x3810 <__fp_splitA+0x10>
    37fa:	5f 3f       	cpi	r21, 0xFF	; 255
    37fc:	71 f0       	breq	.+28     	; 0x381a <__fp_splitA+0x1a>
    37fe:	47 95       	ror	r20

00003800 <__fp_splitA>:
    3800:	88 0f       	add	r24, r24
    3802:	97 fb       	bst	r25, 7
    3804:	99 1f       	adc	r25, r25
    3806:	61 f0       	breq	.+24     	; 0x3820 <__fp_splitA+0x20>
    3808:	9f 3f       	cpi	r25, 0xFF	; 255
    380a:	79 f0       	breq	.+30     	; 0x382a <__fp_splitA+0x2a>
    380c:	87 95       	ror	r24
    380e:	08 95       	ret
    3810:	12 16       	cp	r1, r18
    3812:	13 06       	cpc	r1, r19
    3814:	14 06       	cpc	r1, r20
    3816:	55 1f       	adc	r21, r21
    3818:	f2 cf       	rjmp	.-28     	; 0x37fe <__fp_split3+0xe>
    381a:	46 95       	lsr	r20
    381c:	f1 df       	rcall	.-30     	; 0x3800 <__fp_splitA>
    381e:	08 c0       	rjmp	.+16     	; 0x3830 <__fp_splitA+0x30>
    3820:	16 16       	cp	r1, r22
    3822:	17 06       	cpc	r1, r23
    3824:	18 06       	cpc	r1, r24
    3826:	99 1f       	adc	r25, r25
    3828:	f1 cf       	rjmp	.-30     	; 0x380c <__fp_splitA+0xc>
    382a:	86 95       	lsr	r24
    382c:	71 05       	cpc	r23, r1
    382e:	61 05       	cpc	r22, r1
    3830:	08 94       	sec
    3832:	08 95       	ret

00003834 <__fp_zero>:
    3834:	e8 94       	clt

00003836 <__fp_szero>:
    3836:	bb 27       	eor	r27, r27
    3838:	66 27       	eor	r22, r22
    383a:	77 27       	eor	r23, r23
    383c:	cb 01       	movw	r24, r22
    383e:	97 f9       	bld	r25, 7
    3840:	08 95       	ret

00003842 <__gesf2>:
    3842:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__fp_cmp>
    3846:	08 f4       	brcc	.+2      	; 0x384a <__gesf2+0x8>
    3848:	8f ef       	ldi	r24, 0xFF	; 255
    384a:	08 95       	ret

0000384c <__mulsf3>:
    384c:	0e 94 39 1c 	call	0x3872	; 0x3872 <__mulsf3x>
    3850:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__fp_round>
    3854:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__fp_pscA>
    3858:	38 f0       	brcs	.+14     	; 0x3868 <__mulsf3+0x1c>
    385a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__fp_pscB>
    385e:	20 f0       	brcs	.+8      	; 0x3868 <__mulsf3+0x1c>
    3860:	95 23       	and	r25, r21
    3862:	11 f0       	breq	.+4      	; 0x3868 <__mulsf3+0x1c>
    3864:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__fp_inf>
    3868:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__fp_nan>
    386c:	11 24       	eor	r1, r1
    386e:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_szero>

00003872 <__mulsf3x>:
    3872:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__fp_split3>
    3876:	70 f3       	brcs	.-36     	; 0x3854 <__mulsf3+0x8>

00003878 <__mulsf3_pse>:
    3878:	95 9f       	mul	r25, r21
    387a:	c1 f3       	breq	.-16     	; 0x386c <__mulsf3+0x20>
    387c:	95 0f       	add	r25, r21
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	55 1f       	adc	r21, r21
    3882:	62 9f       	mul	r22, r18
    3884:	f0 01       	movw	r30, r0
    3886:	72 9f       	mul	r23, r18
    3888:	bb 27       	eor	r27, r27
    388a:	f0 0d       	add	r31, r0
    388c:	b1 1d       	adc	r27, r1
    388e:	63 9f       	mul	r22, r19
    3890:	aa 27       	eor	r26, r26
    3892:	f0 0d       	add	r31, r0
    3894:	b1 1d       	adc	r27, r1
    3896:	aa 1f       	adc	r26, r26
    3898:	64 9f       	mul	r22, r20
    389a:	66 27       	eor	r22, r22
    389c:	b0 0d       	add	r27, r0
    389e:	a1 1d       	adc	r26, r1
    38a0:	66 1f       	adc	r22, r22
    38a2:	82 9f       	mul	r24, r18
    38a4:	22 27       	eor	r18, r18
    38a6:	b0 0d       	add	r27, r0
    38a8:	a1 1d       	adc	r26, r1
    38aa:	62 1f       	adc	r22, r18
    38ac:	73 9f       	mul	r23, r19
    38ae:	b0 0d       	add	r27, r0
    38b0:	a1 1d       	adc	r26, r1
    38b2:	62 1f       	adc	r22, r18
    38b4:	83 9f       	mul	r24, r19
    38b6:	a0 0d       	add	r26, r0
    38b8:	61 1d       	adc	r22, r1
    38ba:	22 1f       	adc	r18, r18
    38bc:	74 9f       	mul	r23, r20
    38be:	33 27       	eor	r19, r19
    38c0:	a0 0d       	add	r26, r0
    38c2:	61 1d       	adc	r22, r1
    38c4:	23 1f       	adc	r18, r19
    38c6:	84 9f       	mul	r24, r20
    38c8:	60 0d       	add	r22, r0
    38ca:	21 1d       	adc	r18, r1
    38cc:	82 2f       	mov	r24, r18
    38ce:	76 2f       	mov	r23, r22
    38d0:	6a 2f       	mov	r22, r26
    38d2:	11 24       	eor	r1, r1
    38d4:	9f 57       	subi	r25, 0x7F	; 127
    38d6:	50 40       	sbci	r21, 0x00	; 0
    38d8:	9a f0       	brmi	.+38     	; 0x3900 <__mulsf3_pse+0x88>
    38da:	f1 f0       	breq	.+60     	; 0x3918 <__mulsf3_pse+0xa0>
    38dc:	88 23       	and	r24, r24
    38de:	4a f0       	brmi	.+18     	; 0x38f2 <__mulsf3_pse+0x7a>
    38e0:	ee 0f       	add	r30, r30
    38e2:	ff 1f       	adc	r31, r31
    38e4:	bb 1f       	adc	r27, r27
    38e6:	66 1f       	adc	r22, r22
    38e8:	77 1f       	adc	r23, r23
    38ea:	88 1f       	adc	r24, r24
    38ec:	91 50       	subi	r25, 0x01	; 1
    38ee:	50 40       	sbci	r21, 0x00	; 0
    38f0:	a9 f7       	brne	.-22     	; 0x38dc <__mulsf3_pse+0x64>
    38f2:	9e 3f       	cpi	r25, 0xFE	; 254
    38f4:	51 05       	cpc	r21, r1
    38f6:	80 f0       	brcs	.+32     	; 0x3918 <__mulsf3_pse+0xa0>
    38f8:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__fp_inf>
    38fc:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__fp_szero>
    3900:	5f 3f       	cpi	r21, 0xFF	; 255
    3902:	e4 f3       	brlt	.-8      	; 0x38fc <__mulsf3_pse+0x84>
    3904:	98 3e       	cpi	r25, 0xE8	; 232
    3906:	d4 f3       	brlt	.-12     	; 0x38fc <__mulsf3_pse+0x84>
    3908:	86 95       	lsr	r24
    390a:	77 95       	ror	r23
    390c:	67 95       	ror	r22
    390e:	b7 95       	ror	r27
    3910:	f7 95       	ror	r31
    3912:	e7 95       	ror	r30
    3914:	9f 5f       	subi	r25, 0xFF	; 255
    3916:	c1 f7       	brne	.-16     	; 0x3908 <__mulsf3_pse+0x90>
    3918:	fe 2b       	or	r31, r30
    391a:	88 0f       	add	r24, r24
    391c:	91 1d       	adc	r25, r1
    391e:	96 95       	lsr	r25
    3920:	87 95       	ror	r24
    3922:	97 f9       	bld	r25, 7
    3924:	08 95       	ret

00003926 <_exit>:
    3926:	f8 94       	cli

00003928 <__stop_program>:
    3928:	ff cf       	rjmp	.-2      	; 0x3928 <__stop_program>
