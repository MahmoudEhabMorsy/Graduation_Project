/************************************************************************
 *																		*
 * [FILE NAME]:		bmp180.c											*
 *																		*
 * [AUTHOR]:		Ahmed Y Kaead										*
 *																		*
 * [DATE CREATED]:	13/04/2023											*
 *																		*
 * [DESCRIPTION]:	BMP180 - source file for BMP180 Module				*
 *																		*
 ************************************************************************/

#include "twi.h"
#include "bmp180.h"
#include "common_macros.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "lcd.h"
#include <util/delay.h>

/* Callibration Data */
sint16 AC1 = 0, AC2 = 0, AC3 = 0, B1 = 0;
sint16 B2 = 0, MB = 0, MC = 0, MD = 0;
uint16 AC4 = 0, AC5 = 0, AC6 = 0;

/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;


void BMP180_ReadCalb(void)
{

	uint8_t Callib_Data[22] = {0};
	uint16_t Callib_Start = 0xAA;

	TWI_Start(BMP180_ADDRESS_W);		// To write
	TWI_WriteByte(Callib_Start);
	TWI_Start(BMP180_ADDRESS_R) ;	// To read
	for (int i = 0; i < 22; i++)
	{
		Callib_Data[i] = TWI_ReadByteWithACK();
	}
	TWI_Stop();

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);

}


uint32 Get_UP(void)
{
	// calculate the value to write to the BMP180 control register based on the oversampling setting
    uint8 datatowrite = 0x34 + (OSS << 6);
    // array to store the raw pressure data
    uint8 Pressure_RAW[3] = {0};

    // start the I2C communication with BMP180 by sending its address
    TWI_Start(BMP180_ADDRESS_W);
    // send the address of the BMP180 control register to initiate the pressure measurement
    TWI_WriteByte(0xF4);
    // send the value calculated above to start the measurement with the selected oversampling setting
    TWI_WriteByte(datatowrite);
    // stop the I2C communication with BMP180
    TWI_Stop();

    // wait for the measurement to complete based on the oversampling setting
    switch (OSS)
    {
        case (0):
            _delay_ms(5);
            break;
        case (1):
            _delay_ms(8);
            break;
        case (2):
            _delay_ms(14);
            break;
        case (3):
            _delay_ms(26);
            break;
    }

    // start the I2C communication with BMP180 in read mode by sending its address with the read bit set
    TWI_Start(BMP180_ADDRESS_R);
    // read the MSB of the raw pressure data and acknowledge the read
    Pressure_RAW[0] = TWI_ReadByteWithACK();
    // read the middle byte of the raw pressure data and acknowledge the read
    Pressure_RAW[1] = TWI_ReadByteWithACK();
    // read the LSB of the raw pressure data and don't acknowledge the read
    Pressure_RAW[2] = TWI_ReadByteWithNACK();
    // stop the I2C communication with BMP180
    TWI_Stop();

    // combine the raw pressure data into a single 24-bit value and shift it right to adjust for the oversampling setting
    return (((Pressure_RAW[0] << 16) + (Pressure_RAW[1] << 8) + Pressure_RAW[2]) >> (8 - OSS));
}

uint32 Get_UT(void)
{

	uint8 datatowrite = 0x2E;
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = {0};
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    // send the value calculated above to start the measurement
    TWI_WriteByte(datatowrite);
    // stop the I2C communication with BMP180
    TWI_Stop();

    _delay_ms(5);
    // start the I2C communication with BMP180 in read mode by sending its address with the read bit set
    TWI_Start(BMP180_ADDRESS_R);
    // read the MSB of the raw temperature data and acknowledge the read
    Temperature_RAW[0] = TWI_ReadByteWithACK();
    // read the LSB of the raw temperature data and don't acknowledge the read
    Temperature_RAW[1] = TWI_ReadByteWithNACK();
    // stop the I2C communication with BMP180
    TWI_Stop();

    return ((Temperature_RAW[0] << 8) + Temperature_RAW[1]);

}


float32 BMP180_calculateTemperature(void)
{
	float32 temperature = 0;

	UT = Get_UT();
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
	X2 = (MC *(pow(2,11))) / (X1 + MD);
	B5 = X1 + X2;
	temperature = (B5 + 8)/(pow(2,4));
	return temperature/10.0;
}

float32 BMP180_calculatePressure(void)
{
	UP = Get_UP();
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
	X2 = (MC *(pow(2,11))) / (X1 + MD);
	B5 = X1 + X2;
	B6 = B5 - 4000;
	X1 = (B2 * (B6 * B6/(pow(2,12)))) / (pow(2,11));
	X2 = AC2 * B6 / (pow(2,11));
	X3 = X1 + X2;
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
	X1 = AC3 * B6 / (pow(2,13));
	X2 = (B1 * (B6 * B6/(pow(2,12)))) / (pow(2,16));
	X3 = ((X1 + X2) + 2) >> 2;
	B4 = (AC4 * (uint32)(X3 + 32768)) >> 15;
	B7 = ((uint32)UP - B3) * (50000 >> 3);  // OSS = 3 here

	if (B7 < 0x80000000)
	{
		P = (B7 << 1) / B4;
	}
	else
	{
		P = (B7 / B4) << 1;
	}
	X1 = (P >> 8) * (P >> 8);
	X1 = ((X1 * 3038) >> 16);
	X2 = (-7357 * P) >> 16;
	P = P + ((X1 + X2 + 3791) >> 4);
	return P;
}

void BMP180_Start(void)
{
	BMP180_ReadCalb();
}



