/************************************************************************
 *																		*
 * [FILE NAME]:		lcd.c												*
 *																		*
 * [AUTHOR]:		Ahmed Yasser										*
 *																		*
 * [DATE CREATED]:	06/10/2022											*
 *																		*
 * [DESCRIPTION]:	LCD - Source file for LCD Module					*
 *																		*
 ************************************************************************/

/* For the delay functions */
#include <util/delay.h>
#include "common_macros.h"
#include "lcd.h"
#include "Dio.h"


void LCD_init(void)
{
	DIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
	DIO_setupPinDirection(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,PIN_OUTPUT);
	DIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
}




void LCD_sendCommand(uint8 command)
{
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
	DIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH);
	_delay_ms(1);
	DIO_writePort(LCD_DATA_PORT_ID,command);
	_delay_ms(1);
	DIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
}




void LCD_displayCharacter(uint8 data)
{
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
	_delay_ms(1);
	DIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_HIGH);
	_delay_ms(1);
	DIO_writePort(LCD_DATA_PORT_ID,data);
	_delay_ms(1);
	DIO_writePin(LCD_ENABLE_PORT_ID,LCD_ENABLE_PIN_ID,LOGIC_LOW);
	_delay_ms(1);
}


void LCD_displayString(uint8 *Str)
{
	uint8 counter = 0;
	while(Str[counter] != '\0')
	{
		LCD_displayCharacter(Str[counter]);
		counter++;
	}
}


void LCD_moveCursor(uint8 row, uint8 column)
{
	uint8 lcd_address;
	switch(row)
	{
	case 0:
		lcd_address = column;
		break;
	case 1:
		lcd_address = column + 0x40;
		break;
	case 2:
		lcd_address = column + 0x10;
		break;
	case 3:
		lcd_address = column + 0x50;
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_address | LCD_CURSOR_BEGIN_FIRST_LINE);
}


void LCD_displayStringRowColumn(uint8 row, uint8 column, uint8 *Str)
{
	LCD_moveCursor(row,column);
	LCD_displayString(Str);
}



void LCD_clearScreen()
{
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
}


void LCD_intgerToString(uint32 data)
{
	uint32 buff[32];
	itoa(data,buff,10);
	LCD_displayString(buff);
}




