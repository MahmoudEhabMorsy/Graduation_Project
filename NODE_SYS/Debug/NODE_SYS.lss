
NODE_SYS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000184  00800060  00006244  000062d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  008001e4  008001e4  0000645c  2**0
                  ALLOC
  3 .stab         00006090  00000000  00000000  0000645c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002726  00000000  00000000  0000c4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ec12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000edd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000efe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000115f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00012ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00013dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00013fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000142bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014cd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_4>
      14:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_5>
      18:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_6>
      1c:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_9>
      28:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_10>
      2c:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 34       	cpi	r26, 0x4E	; 78
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 11 	call	0x22fc	; 0x22fc <main>
      8a:	0c 94 20 31 	jmp	0x6240	; 0x6240 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a4 30 	jmp	0x6148	; 0x6148 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ed       	ldi	r26, 0xD3	; 211
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c0 30 	jmp	0x6180	; 0x6180 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cc 30 	jmp	0x6198	; 0x6198 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cc 30 	jmp	0x6198	; 0x6198 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a4 30 	jmp	0x6148	; 0x6148 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ed       	ldi	r24, 0xD3	; 211
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c0 30 	jmp	0x6180	; 0x6180 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ac 30 	jmp	0x6158	; 0x6158 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 ed       	ldi	r22, 0xD3	; 211
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c8 30 	jmp	0x6190	; 0x6190 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cc 30 	jmp	0x6198	; 0x6198 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cc 30 	jmp	0x6198	; 0x6198 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 cc 30 	jmp	0x6198	; 0x6198 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ad 30 	jmp	0x615a	; 0x615a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c9 30 	jmp	0x6192	; 0x6192 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b4 30 	jmp	0x6168	; 0x6168 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d0 30 	jmp	0x61a0	; 0x61a0 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 ac 30 	jmp	0x6158	; 0x6158 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 c8 30 	jmp	0x6190	; 0x6190 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e5 52       	subi	r30, 0x25	; 37
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TWI_init>:
 * 																		*
 * [Args]							*
 * [Return]															*
 *======================================================================*/

void TWI_init(void) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Bit Rate Configuration */
#if BIT_RATE >= MINIMUM_BIT_RATE
	TWBR = BIT_RATE;
     ef2:	e0 e2       	ldi	r30, 0x20	; 32
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	88 e4       	ldi	r24, 0x48	; 72
     ef8:	80 83       	st	Z, r24
#else
#error "Invalid I2C bit rate configuration. Minimum bit rate allowed is 10."
#endif
	/* Prescaler Configuration */
#if PRESCALER_1 == PRESCALER
	CLEAR_BIT(TWSR, TWPS1);
     efa:	a1 e2       	ldi	r26, 0x21	; 33
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e2       	ldi	r30, 0x21	; 33
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWPS0);
     f08:	a1 e2       	ldi	r26, 0x21	; 33
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e1 e2       	ldi	r30, 0x21	; 33
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8c 93       	st	X, r24
#else
#error "Invalid I2C prescaler configuration"
#endif
	/* Slave Address Configuration */
#if SLAVE_ADDRESS >= MINIMUM_ADDRESS && SLAVE_ADDRESS <= MAXIMUM_ADDRESS
	TWAR = (SLAVE_ADDRESS << 1);
     f16:	e2 e2       	ldi	r30, 0x22	; 34
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	80 83       	st	Z, r24
#error "Invalid I2C slave address configuration (out of range)."
#endif
#if ENABLE_GENERAL_CALL == GENERAL_CALL
	SET_BIT(TWAR, TWGCE);
#elif DISABLE_GENERAL_CALL == GENERAL_CALL
	CLEAR_BIT(TWAR, TWGCE);
     f1e:	a2 e2       	ldi	r26, 0x22	; 34
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e2       	ldi	r30, 0x22	; 34
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8e 7f       	andi	r24, 0xFE	; 254
     f2a:	8c 93       	st	X, r24
#else
#error "Invalid general call configuration"
#endif
	/* Enable I2C Peripheral */
	SET_BIT(TWCR, TWEN);
     f2c:	a6 e5       	ldi	r26, 0x56	; 86
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	8c 93       	st	X, r24
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <TWI_Start>:
 * 																		*
 * [Args]		uint8 slave_write_adress						*
 * [Return]															*
 *======================================================================*/

uint8 TWI_Start(uint8 slave_write_adress) {
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <TWI_Start+0x6>
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	84 ea       	ldi	r24, 0xA4	; 164
     f54:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f56:	e6 e5       	ldi	r30, 0x56	; 86
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <TWI_Start+0x16>
		;
	status = TWI_getStatus();
     f60:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f64:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 30       	cpi	r24, 0x08	; 8
     f6a:	11 f0       	breq	.+4      	; 0xf70 <TWI_Start+0x30>
		return 0;
     f6c:	1b 82       	std	Y+3, r1	; 0x03
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <TWI_Start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     f70:	e3 e2       	ldi	r30, 0x23	; 35
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     f78:	e6 e5       	ldi	r30, 0x56	; 86
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	84 e8       	ldi	r24, 0x84	; 132
     f7e:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     f80:	e6 e5       	ldi	r30, 0x56	; 86
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	dc f7       	brge	.-10     	; 0xf80 <TWI_Start+0x40>
		;
	status = TWI_getStatus();
     f8a:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     f8e:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	88 31       	cpi	r24, 0x18	; 24
     f94:	19 f4       	brne	.+6      	; 0xf9c <TWI_Start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <TWI_Start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	80 32       	cpi	r24, 0x20	; 32
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <TWI_Start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8b 83       	std	Y+3, r24	; 0x03
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <TWI_Start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
}
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <TWI_Repeated_start>:
 * [Description]:	Function responsible for re-start the TWI communication.*
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
uint8 TWI_Repeated_start(uint8 slave_write_adress) {
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <TWI_Repeated_start+0x6>
     fc0:	0f 92       	push	r0
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	84 ea       	ldi	r24, 0xA4	; 164
     fce:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <TWI_Repeated_start+0x16>
		;
	status = TWI_getStatus();
     fda:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
     fde:	89 83       	std	Y+1, r24	; 0x01
	if (status != TWI_REP_START) /* Check weather start condition transmitted successfully or not? */
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	11 f0       	breq	.+4      	; 0xfea <TWI_Repeated_start+0x30>
		return 0;
     fe6:	1b 82       	std	Y+3, r1	; 0x03
     fe8:	1e c0       	rjmp	.+60     	; 0x1026 <TWI_Repeated_start+0x6c>
	TWDR = slave_write_adress; /* If yes then write SLA+W in TWI data register */
     fea:	e3 e2       	ldi	r30, 0x23	; 35
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
	TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(TWCR, TWINT))
     ffa:	e6 e5       	ldi	r30, 0x56	; 86
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 23       	and	r24, r24
    1002:	dc f7       	brge	.-10     	; 0xffa <TWI_Repeated_start+0x40>
		;
	status = TWI_getStatus();
    1004:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_getStatus>
    1008:	89 83       	std	Y+1, r24	; 0x01
	if (status == TWI_MT_SLA_R_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	19 f4       	brne	.+6      	; 0x1016 <TWI_Repeated_start+0x5c>
		return 1; /* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <TWI_Repeated_start+0x6c>
	if (status == TWI_MT_SLA_W_NACK) /* Check weather SLA+W transmitted & nack received or not? */
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 32       	cpi	r24, 0x20	; 32
    101a:	19 f4       	brne	.+6      	; 0x1022 <TWI_Repeated_start+0x68>
		return 2; /* If yes then return 2 to indicate nack received i.e. device is busy */
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <TWI_Repeated_start+0x6c>
	else
		return 3; /* Else return 3 to indicate SLA+W failed */
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_Start_Wait>:
 * 																			*
 * [Args]		uint8 slave_write_adress									*
 * [Return]																	*
 *======================================================================*/
void TWI_Start_Wait(char slave_write_address) /* I2C start wait function */
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <TWI_Start_Wait+0x6>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status; /* Declare variable */
	while (1) {
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); /* Enable TWI, generate start condition and clear interrupt flag */
    1040:	e6 e5       	ldi	r30, 0x56	; 86
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	84 ea       	ldi	r24, 0xA4	; 164
    1046:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	dc f7       	brge	.-10     	; 0x1048 <TWI_Start_Wait+0x14>
			; /* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    1052:	e1 e2       	ldi	r30, 0x21	; 33
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_START) /* Check weather start condition transmitted successfully or not? */
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	79 f7       	brne	.-34     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* If no then continue with start loop again */
		TWDR = slave_write_address; /* If yes then write SLA+W in TWI data register */
    1062:	e3 e2       	ldi	r30, 0x23	; 35
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	80 83       	st	Z, r24
		TWCR = (1 << TWEN) | (1 << TWINT); /* Enable TWI and clear interrupt flag */
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	84 e8       	ldi	r24, 0x84	; 132
    1070:	80 83       	st	Z, r24
		while (BIT_IS_CLEAR(TWCR, TWINT))
    1072:	e6 e5       	ldi	r30, 0x56	; 86
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 23       	and	r24, r24
    107a:	dc f7       	brge	.-10     	; 0x1072 <TWI_Start_Wait+0x3e>
			; /* Wait until TWI finish its current job (Write operation) */
		status = TWSR & 0xF8; /* Read TWI status register with masking lower three bits */
    107c:	e1 e2       	ldi	r30, 0x21	; 33
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 7f       	andi	r24, 0xF8	; 248
    1084:	89 83       	std	Y+1, r24	; 0x01
		if (status != TWI_MT_SLA_W_ACK) /* Check weather SLA+W transmitted & ack received or not? */
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	88 31       	cpi	r24, 0x18	; 24
    108a:	19 f0       	breq	.+6      	; 0x1092 <TWI_Start_Wait+0x5e>
		{
			TWI_Stop(); /* If not then generate stop condition */
    108c:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    1090:	d7 cf       	rjmp	.-82     	; 0x1040 <TWI_Start_Wait+0xc>
			continue; /* continue with start loop again */
		}
		break; /* If yes then break loop */
	}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <TWI_Stop>:
 * [Description]:	Function responsible for stop the TWI communication *
 * 																*
 * [Args]		void											*
 * [Return]			void										*
 *======================================================================*/
void TWI_Stop(void) {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	84 e9       	ldi	r24, 0x94	; 148
    10aa:	80 83       	st	Z, r24
}
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <TWI_WriteByte>:
 * [Description]:	Function responsible for sending 1 byte *
 * 																*
 * [Args]		uint8 data											*
 * [Return]			void										*
 *======================================================================*/
void TWI_WriteByte(uint8 data) {
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    10be:	e3 e2       	ldi	r30, 0x23	; 35
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    10c6:	e6 e5       	ldi	r30, 0x56	; 86
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	84 e8       	ldi	r24, 0x84	; 132
    10cc:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10ce:	e6 e5       	ldi	r30, 0x56	; 86
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 23       	and	r24, r24
    10d6:	dc f7       	brge	.-10     	; 0x10ce <TWI_WriteByte+0x1c>
		;
}
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TWI_ReadByteWithACK>:
 * [Description]:	Function responsible for reading 1 byte with ack *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithACK(void) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    10e8:	e6 e5       	ldi	r30, 0x56	; 86
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	84 ec       	ldi	r24, 0xC4	; 196
    10ee:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	dc f7       	brge	.-10     	; 0x10f0 <TWI_ReadByteWithACK+0x10>
		;
	/* Read Data */
	return TWDR;
    10fa:	e3 e2       	ldi	r30, 0x23	; 35
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
}
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <TWI_ReadByteWithNACK>:
 * [Description]:	Function responsible for reading 1 byte with NACK *
 * 																*
 * [Args]				void									*
 * [Return]			uint8 data										*
 *======================================================================*/
uint8 TWI_ReadByteWithNACK(void) {
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 e8       	ldi	r24, 0x84	; 132
    1114:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	88 23       	and	r24, r24
    111e:	dc f7       	brge	.-10     	; 0x1116 <TWI_ReadByteWithNACK+0x10>
		;
	/* Read Data */
	return TWDR;
    1120:	e3 e2       	ldi	r30, 0x23	; 35
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
}
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <TWI_getStatus>:
 * [Description]:	FET STATUS from TWSR register *
 * 																*
 * [Args]													*
 * [Return]			uint8 status									*
 *======================================================================*/
uint8 TWI_getStatus(void) {
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    1136:	e1 e2       	ldi	r30, 0x21	; 33
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
}
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <__vector_11>:
/********************************************************/
/*                     ISRs                              */
/********************************************************/

/* Timer0 overflow*/
ISR(TIMER0_OVF_vect) {
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    1174:	80 91 e4 01 	lds	r24, 0x01E4
    1178:	90 91 e5 01 	lds	r25, 0x01E5
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	29 f0       	breq	.+10     	; 0x118a <__vector_11+0x40>
		(*g_Timer0CallBackPtr)();
    1180:	e0 91 e4 01 	lds	r30, 0x01E4
    1184:	f0 91 e5 01 	lds	r31, 0x01E5
    1188:	09 95       	icall
	}
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_10>:

/* Timer0 compare */
ISR(TIMER0_COMP_vect) {
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0CallBackPtr != NULL_PTR) {
    11da:	80 91 e4 01 	lds	r24, 0x01E4
    11de:	90 91 e5 01 	lds	r25, 0x01E5
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <__vector_10+0x40>
		(*g_Timer0CallBackPtr)();
    11e6:	e0 91 e4 01 	lds	r30, 0x01E4
    11ea:	f0 91 e5 01 	lds	r31, 0x01E5
    11ee:	09 95       	icall
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_9>:

/* Timer1 overflow*/
ISR(TIMER1_OVF_vect) {
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	2f 93       	push	r18
    1222:	3f 93       	push	r19
    1224:	4f 93       	push	r20
    1226:	5f 93       	push	r21
    1228:	6f 93       	push	r22
    122a:	7f 93       	push	r23
    122c:	8f 93       	push	r24
    122e:	9f 93       	push	r25
    1230:	af 93       	push	r26
    1232:	bf 93       	push	r27
    1234:	ef 93       	push	r30
    1236:	ff 93       	push	r31
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    1240:	80 91 e6 01 	lds	r24, 0x01E6
    1244:	90 91 e7 01 	lds	r25, 0x01E7
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	29 f0       	breq	.+10     	; 0x1256 <__vector_9+0x40>
		(*g_Timer1CallBackPtr)();
    124c:	e0 91 e6 01 	lds	r30, 0x01E6
    1250:	f0 91 e7 01 	lds	r31, 0x01E7
    1254:	09 95       	icall
	}
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	ff 91       	pop	r31
    125c:	ef 91       	pop	r30
    125e:	bf 91       	pop	r27
    1260:	af 91       	pop	r26
    1262:	9f 91       	pop	r25
    1264:	8f 91       	pop	r24
    1266:	7f 91       	pop	r23
    1268:	6f 91       	pop	r22
    126a:	5f 91       	pop	r21
    126c:	4f 91       	pop	r20
    126e:	3f 91       	pop	r19
    1270:	2f 91       	pop	r18
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0f 90       	pop	r0
    1278:	1f 90       	pop	r1
    127a:	18 95       	reti

0000127c <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect) {
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1CallBackPtr != NULL_PTR) {
    12a6:	80 91 e6 01 	lds	r24, 0x01E6
    12aa:	90 91 e7 01 	lds	r25, 0x01E7
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	29 f0       	breq	.+10     	; 0x12bc <__vector_7+0x40>
		(*g_Timer1CallBackPtr)();
    12b2:	e0 91 e6 01 	lds	r30, 0x01E6
    12b6:	f0 91 e7 01 	lds	r31, 0x01E7
    12ba:	09 95       	icall
	}
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <__vector_5>:

/* Timer2 overflow*/
ISR(TIMER2_OVF_vect) {
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    130c:	80 91 e8 01 	lds	r24, 0x01E8
    1310:	90 91 e9 01 	lds	r25, 0x01E9
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	29 f0       	breq	.+10     	; 0x1322 <__vector_5+0x40>
		(*g_Timer2CallBackPtr)();
    1318:	e0 91 e8 01 	lds	r30, 0x01E8
    131c:	f0 91 e9 01 	lds	r31, 0x01E9
    1320:	09 95       	icall
	}
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	ff 91       	pop	r31
    1328:	ef 91       	pop	r30
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_4>:

/* Timer2 compare */
ISR(TIMER2_COMP_vect) {
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2CallBackPtr != NULL_PTR) {
    1372:	80 91 e8 01 	lds	r24, 0x01E8
    1376:	90 91 e9 01 	lds	r25, 0x01E9
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <__vector_4+0x40>
		(*g_Timer2CallBackPtr)();
    137e:	e0 91 e8 01 	lds	r30, 0x01E8
    1382:	f0 91 e9 01 	lds	r31, 0x01E9
    1386:	09 95       	icall
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

000013ae <Timer_init>:

/********************************************************/
/* Functions Implementation */
/********************************************************/

void Timer_init(const Timer_configuration *timer_config){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Timer_init+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	if (timer_config->timer_ID == Timer0){
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	fa 81       	ldd	r31, Y+2	; 0x02
    13c0:	80 81       	ld	r24, Z
    13c2:	88 23       	and	r24, r24
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <Timer_init+0x1a>
    13c6:	60 c0       	rjmp	.+192    	; 0x1488 <Timer_init+0xda>

		TCNT0 = timer_config->initialValue;
    13c8:	a2 e5       	ldi	r26, 0x52	; 82
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e9 81       	ldd	r30, Y+1	; 0x01
    13ce:	fa 81       	ldd	r31, Y+2	; 0x02
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	8c 93       	st	X, r24
		TCCR0 = 0;
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	10 82       	st	Z, r1
		TCCR0 |= (timer_config->prescaler);
    13dc:	a3 e5       	ldi	r26, 0x53	; 83
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	90 81       	ld	r25, Z
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	89 2b       	or	r24, r25
    13ee:	8c 93       	st	X, r24

		if (timer_config->mode == Normal){
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	81 81       	ldd	r24, Z+1	; 0x01
    13f6:	88 23       	and	r24, r24
    13f8:	b1 f4       	brne	.+44     	; 0x1426 <Timer_init+0x78>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    13fa:	a3 e5       	ldi	r26, 0x53	; 83
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e3 e5       	ldi	r30, 0x53	; 83
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
			SET_BIT(TIMSK,TOIE0); /* enable interrupts for overflow mode */
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV0); /* enable overflow flag */
    1416:	a8 e5       	ldi	r26, 0x58	; 88
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e5       	ldi	r30, 0x58	; 88
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	8c 93       	st	X, r24
    1424:	28 c0       	rjmp	.+80     	; 0x1476 <Timer_init+0xc8>

		}else if (timer_config->mode == CTC){
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	81 81       	ldd	r24, Z+1	; 0x01
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	19 f5       	brne	.+70     	; 0x1476 <Timer_init+0xc8>
			SET_BIT(TCCR0,FOC0); /* for non-PWM */
    1430:	a3 e5       	ldi	r26, 0x53	; 83
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e3 e5       	ldi	r30, 0x53	; 83
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    143e:	a3 e5       	ldi	r26, 0x53	; 83
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e3 e5       	ldi	r30, 0x53	; 83
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	88 60       	ori	r24, 0x08	; 8
    144a:	8c 93       	st	X, r24
			OCR0 = timer_config->compareValue;
    144c:	ac e5       	ldi	r26, 0x5C	; 92
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	84 81       	ldd	r24, Z+4	; 0x04
    1456:	95 81       	ldd	r25, Z+5	; 0x05
    1458:	8c 93       	st	X, r24
			SET_BIT(TIMSK,OCIE0); /* enable interrupts for CTC mode */
    145a:	a9 e5       	ldi	r26, 0x59	; 89
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e9 e5       	ldi	r30, 0x59	; 89
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF0); /* enable CTC flag */
    1468:	a8 e5       	ldi	r26, 0x58	; 88
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e8 e5       	ldi	r30, 0x58	; 88
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	8c 93       	st	X, r24
		}

		g_Timer0CallBackPtr = timer_config->callBackPtr; /* set call back function */
    1476:	e9 81       	ldd	r30, Y+1	; 0x01
    1478:	fa 81       	ldd	r31, Y+2	; 0x02
    147a:	87 81       	ldd	r24, Z+7	; 0x07
    147c:	90 85       	ldd	r25, Z+8	; 0x08
    147e:	90 93 e5 01 	sts	0x01E5, r25
    1482:	80 93 e4 01 	sts	0x01E4, r24
    1486:	c4 c0       	rjmp	.+392    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer1){
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	80 81       	ld	r24, Z
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <Timer_init+0xe6>
    1492:	60 c0       	rjmp	.+192    	; 0x1554 <Timer_init+0x1a6>
		TCCR1A =0;
    1494:	ef e4       	ldi	r30, 0x4F	; 79
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	10 82       	st	Z, r1
		SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    149a:	af e4       	ldi	r26, 0x4F	; 79
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ef e4       	ldi	r30, 0x4F	; 79
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    14a8:	af e4       	ldi	r26, 0x4F	; 79
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e4       	ldi	r30, 0x4F	; 79
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	8c 93       	st	X, r24
		TCCR1B = timer_config->prescaler;
    14b6:	ae e4       	ldi	r26, 0x4E	; 78
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	8c 93       	st	X, r24
		TCNT1 = timer_config->initialValue;
    14c2:	ac e4       	ldi	r26, 0x4C	; 76
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24

		if (timer_config->mode == Normal) {
    14d4:	e9 81       	ldd	r30, Y+1	; 0x01
    14d6:	fa 81       	ldd	r31, Y+2	; 0x02
    14d8:	81 81       	ldd	r24, Z+1	; 0x01
    14da:	88 23       	and	r24, r24
    14dc:	79 f4       	brne	.+30     	; 0x14fc <Timer_init+0x14e>
			SET_BIT(TIMSK, TOIE1); /* enable interrupts for overflow mode */
    14de:	a9 e5       	ldi	r26, 0x59	; 89
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e9 e5       	ldi	r30, 0x59	; 89
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV1);
    14ec:	a8 e5       	ldi	r26, 0x58	; 88
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e8 e5       	ldi	r30, 0x58	; 88
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	84 60       	ori	r24, 0x04	; 4
    14f8:	8c 93       	st	X, r24
    14fa:	23 c0       	rjmp	.+70     	; 0x1542 <Timer_init+0x194>

		} else if (timer_config->mode == CTC) {
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	81 81       	ldd	r24, Z+1	; 0x01
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	f1 f4       	brne	.+60     	; 0x1542 <Timer_init+0x194>
			SET_BIT(TCCR1B, WGM12);
    1506:	ae e4       	ldi	r26, 0x4E	; 78
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ee e4       	ldi	r30, 0x4E	; 78
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	8c 93       	st	X, r24
			OCR1A = timer_config->compareValue;
    1514:	aa e4       	ldi	r26, 0x4A	; 74
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e9 81       	ldd	r30, Y+1	; 0x01
    151a:	fa 81       	ldd	r31, Y+2	; 0x02
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A); /* enable interrupts for CTC mode */
    1526:	a9 e5       	ldi	r26, 0x59	; 89
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 61       	ori	r24, 0x10	; 16
    1532:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    1534:	a8 e5       	ldi	r26, 0x58	; 88
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e8 e5       	ldi	r30, 0x58	; 88
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	8c 93       	st	X, r24
		}
		g_Timer1CallBackPtr = timer_config->callBackPtr;
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	87 81       	ldd	r24, Z+7	; 0x07
    1548:	90 85       	ldd	r25, Z+8	; 0x08
    154a:	90 93 e7 01 	sts	0x01E7, r25
    154e:	80 93 e6 01 	sts	0x01E6, r24
    1552:	5e c0       	rjmp	.+188    	; 0x1610 <Timer_init+0x262>


	}else if (timer_config->timer_ID == Timer2){
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	80 81       	ld	r24, Z
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	09 f0       	breq	.+2      	; 0x1560 <Timer_init+0x1b2>
    155e:	58 c0       	rjmp	.+176    	; 0x1610 <Timer_init+0x262>
		SET_BIT(TCCR2, FOC2); /* for non-PWM */
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
		TCNT2 = timer_config->initialValue;
    156e:	a4 e4       	ldi	r26, 0x44	; 68
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	8c 93       	st	X, r24
		TCCR2 = 0;
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
		TCCR2 |= (timer_config->prescaler);
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	90 81       	ld	r25, Z
    158c:	e9 81       	ldd	r30, Y+1	; 0x01
    158e:	fa 81       	ldd	r31, Y+2	; 0x02
    1590:	86 81       	ldd	r24, Z+6	; 0x06
    1592:	89 2b       	or	r24, r25
    1594:	8c 93       	st	X, r24

		if (timer_config->mode == Normal) {
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	88 23       	and	r24, r24
    159e:	79 f4       	brne	.+30     	; 0x15be <Timer_init+0x210>
			SET_BIT(TIMSK, TOIE2); /* enable interrupts for overflow mode */
    15a0:	a9 e5       	ldi	r26, 0x59	; 89
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e9 e5       	ldi	r30, 0x59	; 89
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 64       	ori	r24, 0x40	; 64
    15ac:	8c 93       	st	X, r24
			SET_BIT(TIFR,TOV2); /* enable overflow flag */
    15ae:	a8 e5       	ldi	r26, 0x58	; 88
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e5       	ldi	r30, 0x58	; 88
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	8c 93       	st	X, r24
    15bc:	21 c0       	rjmp	.+66     	; 0x1600 <Timer_init+0x252>

		} else if (timer_config->mode == CTC) {
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	81 81       	ldd	r24, Z+1	; 0x01
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	e1 f4       	brne	.+56     	; 0x1600 <Timer_init+0x252>
			SET_BIT(TCCR0, WGM21);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
			OCR2 = timer_config->compareValue;
    15d6:	a3 e4       	ldi	r26, 0x43	; 67
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	84 81       	ldd	r24, Z+4	; 0x04
    15e0:	95 81       	ldd	r25, Z+5	; 0x05
    15e2:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2); /* enable interrupts for CTC mode */
    15e4:	a9 e5       	ldi	r26, 0x59	; 89
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e9 e5       	ldi	r30, 0x59	; 89
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF2); /* enable CTC flag */
    15f2:	a8 e5       	ldi	r26, 0x58	; 88
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e5       	ldi	r30, 0x58	; 88
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	8c 93       	st	X, r24
		}
		g_Timer2CallBackPtr = timer_config->callBackPtr;
    1600:	e9 81       	ldd	r30, Y+1	; 0x01
    1602:	fa 81       	ldd	r31, Y+2	; 0x02
    1604:	87 81       	ldd	r24, Z+7	; 0x07
    1606:	90 85       	ldd	r25, Z+8	; 0x08
    1608:	90 93 e9 01 	sts	0x01E9, r25
    160c:	80 93 e8 01 	sts	0x01E8, r24
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Timer_deInit>:


void Timer_deInit(Timer_ID timer_ID){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
	if (timer_ID == Timer0){
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	88 23       	and	r24, r24
    162a:	e1 f4       	brne	.+56     	; 0x1664 <Timer_deInit+0x4a>
		TCCR0 = 0;
    162c:	e3 e5       	ldi	r30, 0x53	; 83
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	10 82       	st	Z, r1
		TCNT0= 0; /* clear initial value */
    1632:	e2 e5       	ldi	r30, 0x52	; 82
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	10 82       	st	Z, r1
		OCR0 = 0; /* clear compare value for CTC mode*/
    1638:	ec e5       	ldi	r30, 0x5C	; 92
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,OCIE0); /* disable interrupts for CTC mode */
    163e:	a9 e5       	ldi	r26, 0x59	; 89
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e9 e5       	ldi	r30, 0x59	; 89
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8d 7f       	andi	r24, 0xFD	; 253
    164a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,TOIE0); /* disable interrupts for overflow mode */
    164c:	a9 e5       	ldi	r26, 0x59	; 89
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e9 e5       	ldi	r30, 0x59	; 89
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8e 7f       	andi	r24, 0xFE	; 254
    1658:	8c 93       	st	X, r24
		g_Timer0CallBackPtr = NULL_PTR; /* clear the call-back function */
    165a:	10 92 e5 01 	sts	0x01E5, r1
    165e:	10 92 e4 01 	sts	0x01E4, r1
    1662:	42 c0       	rjmp	.+132    	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer1){
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f5       	brne	.+66     	; 0x16ac <Timer_deInit+0x92>
		TCCR1A =0;
    166a:	ef e4       	ldi	r30, 0x4F	; 79
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
		TCCR1B = 0; /* disable clock */
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
		TCNT1 = 0;
    1676:	ec e4       	ldi	r30, 0x4C	; 76
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	11 82       	std	Z+1, r1	; 0x01
    167c:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    167e:	a9 e5       	ldi	r26, 0x59	; 89
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
		OCR1A = 0;  /* clear compare value for CTC mode */
    168c:	ea e4       	ldi	r30, 0x4A	; 74
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    1694:	a9 e5       	ldi	r26, 0x59	; 89
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e9 e5       	ldi	r30, 0x59	; 89
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8f 7e       	andi	r24, 0xEF	; 239
    16a0:	8c 93       	st	X, r24
		g_Timer1CallBackPtr = NULL_PTR;
    16a2:	10 92 e7 01 	sts	0x01E7, r1
    16a6:	10 92 e6 01 	sts	0x01E6, r1
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <Timer_deInit+0xce>

	}else if (timer_ID == Timer2){
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	d9 f4       	brne	.+54     	; 0x16e8 <Timer_deInit+0xce>
		TCCR2 = 0;
    16b2:	e5 e4       	ldi	r30, 0x45	; 69
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	10 82       	st	Z, r1
		TCNT2 = 0; /* clear initial value */
    16b8:	e4 e4       	ldi	r30, 0x44	; 68
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1
		OCR2 = 0; /* clear compare value for CTC mode*/
    16be:	e3 e4       	ldi	r30, 0x43	; 67
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK, OCIE2); /* disable interrupts for CTC mode */
    16c4:	a9 e5       	ldi	r26, 0x59	; 89
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e9 e5       	ldi	r30, 0x59	; 89
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE2); /* disable interrupts for overflow mode */
    16d2:	a9 e5       	ldi	r26, 0x59	; 89
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e9 e5       	ldi	r30, 0x59	; 89
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7b       	andi	r24, 0xBF	; 191
    16de:	8c 93       	st	X, r24
		g_Timer2CallBackPtr = NULL_PTR;
    16e0:	10 92 e9 01 	sts	0x01E9, r1
    16e4:	10 92 e8 01 	sts	0x01E8, r1
	}
}
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	2f 93       	push	r18
    16fc:	3f 93       	push	r19
    16fe:	4f 93       	push	r20
    1700:	5f 93       	push	r21
    1702:	6f 93       	push	r22
    1704:	7f 93       	push	r23
    1706:	8f 93       	push	r24
    1708:	9f 93       	push	r25
    170a:	af 93       	push	r26
    170c:	bf 93       	push	r27
    170e:	ef 93       	push	r30
    1710:	ff 93       	push	r31
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    171a:	80 91 ea 01 	lds	r24, 0x01EA
    171e:	90 91 eb 01 	lds	r25, 0x01EB
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	29 f0       	breq	.+10     	; 0x1730 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1726:	e0 91 ea 01 	lds	r30, 0x01EA
    172a:	f0 91 eb 01 	lds	r31, 0x01EB
    172e:	09 95       	icall
	}
}
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <Icu_init+0x6>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B = (1<<ICES1)|(1<<CS11); //start by catching the rising edge & no prescaler
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	82 e4       	ldi	r24, 0x42	; 66
    176a:	80 83       	st	Z, r24
	TCNT1  = 0;
    176c:	ec e4       	ldi	r30, 0x4C	; 76
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	11 82       	std	Z+1, r1	; 0x01
    1772:	10 82       	st	Z, r1
	ICR1   = 0;
    1774:	e6 e4       	ldi	r30, 0x46	; 70
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	11 82       	std	Z+1, r1	; 0x01
    177a:	10 82       	st	Z, r1
	TIMSK |= (1<<TICIE1);
    177c:	a9 e5       	ldi	r26, 0x59	; 89
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e9 e5       	ldi	r30, 0x59	; 89
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 62       	ori	r24, 0x20	; 32
    1788:	8c 93       	st	X, r24

	/* Configure ICP1/PD6 as i/p pin */
	//DDRD &= ~(1<<PD6);
	CLEAR_BIT(DDRB,6);
    178a:	a7 e3       	ldi	r26, 0x37	; 55
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e7 e3       	ldi	r30, 0x37	; 55
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 7b       	andi	r24, 0xBF	; 191
    1796:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1798:	ef e4       	ldi	r30, 0x4F	; 79
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8c e0       	ldi	r24, 0x0C	; 12
    179e:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | ((Config_Ptr->clock));
    17a0:	ae e4       	ldi	r26, 0x4E	; 78
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ee e4       	ldi	r30, 0x4E	; 78
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	98 2f       	mov	r25, r24
    17ac:	98 7f       	andi	r25, 0xF8	; 248
    17ae:	e9 81       	ldd	r30, Y+1	; 0x01
    17b0:	fa 81       	ldd	r31, Y+2	; 0x02
    17b2:	80 81       	ld	r24, Z
    17b4:	89 2b       	or	r24, r25
    17b6:	8c 93       	st	X, r24
	/*
    * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    17b8:	ae e4       	ldi	r26, 0x4E	; 78
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ee e4       	ldi	r30, 0x4E	; 78
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	2f 7b       	andi	r18, 0xBF	; 191
    17c6:	e9 81       	ldd	r30, Y+1	; 0x01
    17c8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ca:	81 81       	ldd	r24, Z+1	; 0x01
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	00 24       	eor	r0, r0
    17d2:	96 95       	lsr	r25
    17d4:	87 95       	ror	r24
    17d6:	07 94       	ror	r0
    17d8:	96 95       	lsr	r25
    17da:	87 95       	ror	r24
    17dc:	07 94       	ror	r0
    17de:	98 2f       	mov	r25, r24
    17e0:	80 2d       	mov	r24, r0
    17e2:	82 2b       	or	r24, r18
    17e4:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    17e6:	ec e4       	ldi	r30, 0x4C	; 76
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	11 82       	std	Z+1, r1	; 0x01
    17ec:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    17ee:	e6 e4       	ldi	r30, 0x46	; 70
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	11 82       	std	Z+1, r1	; 0x01
    17f4:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    17f6:	a9 e5       	ldi	r26, 0x59	; 89
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 e5       	ldi	r30, 0x59	; 89
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 62       	ori	r24, 0x20	; 32
    1802:	8c 93       	st	X, r24
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <Icu_setCallBack+0x6>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	90 93 eb 01 	sts	0x01EB, r25
    1824:	80 93 ea 01 	sts	0x01EA, r24
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <Icu_setEdgeDetectionType>:

/*
* Description: Function to set the required edge detection.
*/
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    183e:	ae e4       	ldi	r26, 0x4E	; 78
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ee e4       	ldi	r30, 0x4E	; 78
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	2f 7b       	andi	r18, 0xBF	; 191
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	00 24       	eor	r0, r0
    1854:	96 95       	lsr	r25
    1856:	87 95       	ror	r24
    1858:	07 94       	ror	r0
    185a:	96 95       	lsr	r25
    185c:	87 95       	ror	r24
    185e:	07 94       	ror	r0
    1860:	98 2f       	mov	r25, r24
    1862:	80 2d       	mov	r24, r0
    1864:	82 2b       	or	r24, r18
    1866:	8c 93       	st	X, r24
}
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <Icu_getInputCaptureValue>:
/*
* Description: Function to get the Timer1 Value when the input is captured
*              The value stored at Input Capture Register ICR1
*/
uint16 Icu_getInputCaptureValue(void)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1878:	e6 e4       	ldi	r30, 0x46	; 70
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <Icu_clearTimerValue>:

/*
* Description: Function to clear the Timer1 Value to start count from ZERO
*/
void Icu_clearTimerValue(void)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    188e:	ec e4       	ldi	r30, 0x4C	; 76
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	11 82       	std	Z+1, r1	; 0x01
    1894:	10 82       	st	Z, r1
}
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <Icu_DeInit>:

/*
* Description: Function to disable the Timer1 to stop the ICU Driver
*/
void Icu_DeInit(void)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    18a4:	ef e4       	ldi	r30, 0x4F	; 79
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	10 82       	st	Z, r1
	TCCR1B = 0;
    18aa:	ee e4       	ldi	r30, 0x4E	; 78
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	10 82       	st	Z, r1
	TCNT1 = 0;
    18b0:	ec e4       	ldi	r30, 0x4C	; 76
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	11 82       	std	Z+1, r1	; 0x01
    18b6:	10 82       	st	Z, r1
	ICR1 = 0;
    18b8:	e6 e4       	ldi	r30, 0x46	; 70
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	11 82       	std	Z+1, r1	; 0x01
    18be:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    18c0:	a9 e5       	ldi	r26, 0x59	; 89
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e9 e5       	ldi	r30, 0x59	; 89
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7d       	andi	r24, 0xDF	; 223
    18cc:	8c 93       	st	X, r24
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <DIO_setupPinDirection>:
 *      Author: MR.MAHMOUD
 */

#include"dio.h"
#include "../../CommonDef/common_macros.h"
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number, uint8 direction){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <DIO_setupPinDirection+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <DIO_setupPinDirection+0x8>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	6a 83       	std	Y+2, r22	; 0x02
    18e6:	4b 83       	std	Y+3, r20	; 0x03
/*
 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	88 30       	cpi	r24, 0x08	; 8
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <DIO_setupPinDirection+0x1c>
    18ee:	d5 c0       	rjmp	.+426    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <DIO_setupPinDirection+0x24>
    18f6:	d1 c0       	rjmp	.+418    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3d 83       	std	Y+5, r19	; 0x05
    1900:	2c 83       	std	Y+4, r18	; 0x04
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <DIO_setupPinDirection+0x3a>
    190c:	43 c0       	rjmp	.+134    	; 0x1994 <DIO_setupPinDirection+0xc0>
    190e:	2c 81       	ldd	r18, Y+4	; 0x04
    1910:	3d 81       	ldd	r19, Y+5	; 0x05
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	2c f4       	brge	.+10     	; 0x1922 <DIO_setupPinDirection+0x4e>
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	9d 81       	ldd	r25, Y+5	; 0x05
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	71 f0       	breq	.+28     	; 0x193c <DIO_setupPinDirection+0x68>
    1920:	bc c0       	rjmp	.+376    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
    1922:	2c 81       	ldd	r18, Y+4	; 0x04
    1924:	3d 81       	ldd	r19, Y+5	; 0x05
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	31 05       	cpc	r19, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <DIO_setupPinDirection+0x5a>
    192c:	5f c0       	rjmp	.+190    	; 0x19ec <DIO_setupPinDirection+0x118>
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	91 05       	cpc	r25, r1
    1936:	09 f4       	brne	.+2      	; 0x193a <DIO_setupPinDirection+0x66>
    1938:	85 c0       	rjmp	.+266    	; 0x1a44 <DIO_setupPinDirection+0x170>
    193a:	af c0       	rjmp	.+350    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	a1 f4       	brne	.+40     	; 0x196a <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA, pin_number);
    1942:	aa e3       	ldi	r26, 0x3A	; 58
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ea e3       	ldi	r30, 0x3A	; 58
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_setupPinDirection+0x8c>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_setupPinDirection+0x88>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	98 c0       	rjmp	.+304    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
    196a:	aa e3       	ldi	r26, 0x3A	; 58
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ea e3       	ldi	r30, 0x3A	; 58
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <DIO_setupPinDirection+0xb4>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <DIO_setupPinDirection+0xb0>
    198c:	80 95       	com	r24
    198e:	84 23       	and	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	83 c0       	rjmp	.+262    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	a1 f4       	brne	.+40     	; 0x19c2 <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB, pin_number);
    199a:	a7 e3       	ldi	r26, 0x37	; 55
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e7 e3       	ldi	r30, 0x37	; 55
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	48 2f       	mov	r20, r24
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_setupPinDirection+0xe4>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <DIO_setupPinDirection+0xe0>
    19bc:	84 2b       	or	r24, r20
    19be:	8c 93       	st	X, r24
    19c0:	6c c0       	rjmp	.+216    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
    19c2:	a7 e3       	ldi	r26, 0x37	; 55
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 e3       	ldi	r30, 0x37	; 55
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 2e       	mov	r0, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <DIO_setupPinDirection+0x10c>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	0a 94       	dec	r0
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <DIO_setupPinDirection+0x108>
    19e4:	80 95       	com	r24
    19e6:	84 23       	and	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	57 c0       	rjmp	.+174    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	a1 f4       	brne	.+40     	; 0x1a1a <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC, pin_number);
    19f2:	a4 e3       	ldi	r26, 0x34	; 52
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e4 e3       	ldi	r30, 0x34	; 52
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 2e       	mov	r0, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <DIO_setupPinDirection+0x13c>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	0a 94       	dec	r0
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <DIO_setupPinDirection+0x138>
    1a14:	84 2b       	or	r24, r20
    1a16:	8c 93       	st	X, r24
    1a18:	40 c0       	rjmp	.+128    	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
    1a1a:	a4 e3       	ldi	r26, 0x34	; 52
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e4 e3       	ldi	r30, 0x34	; 52
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_setupPinDirection+0x164>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_setupPinDirection+0x160>
    1a3c:	80 95       	com	r24
    1a3e:	84 23       	and	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	2b c0       	rjmp	.+86     	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	a1 f4       	brne	.+40     	; 0x1a72 <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD, pin_number);
    1a4a:	a1 e3       	ldi	r26, 0x31	; 49
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e1 e3       	ldi	r30, 0x31	; 49
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	48 2f       	mov	r20, r24
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <DIO_setupPinDirection+0x194>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <DIO_setupPinDirection+0x190>
    1a6c:	84 2b       	or	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
    1a72:	a1 e3       	ldi	r26, 0x31	; 49
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e1 e3       	ldi	r30, 0x31	; 49
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_setupPinDirection+0x1bc>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_setupPinDirection+0x1b8>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <DIO_writePin>:
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value){
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <DIO_writePin+0x6>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <DIO_writePin+0x8>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	6a 83       	std	Y+2, r22	; 0x02
    1abc:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	88 30       	cpi	r24, 0x08	; 8
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <DIO_writePin+0x1c>
    1ac4:	d5 c0       	rjmp	.+426    	; 0x1c70 <DIO_writePin+0x1c6>
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <DIO_writePin+0x24>
    1acc:	d1 c0       	rjmp	.+418    	; 0x1c70 <DIO_writePin+0x1c6>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3d 83       	std	Y+5, r19	; 0x05
    1ad6:	2c 83       	std	Y+4, r18	; 0x04
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	9d 81       	ldd	r25, Y+5	; 0x05
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <DIO_writePin+0x3a>
    1ae2:	43 c0       	rjmp	.+134    	; 0x1b6a <DIO_writePin+0xc0>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <DIO_writePin+0x4e>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	71 f0       	breq	.+28     	; 0x1b12 <DIO_writePin+0x68>
    1af6:	bc c0       	rjmp	.+376    	; 0x1c70 <DIO_writePin+0x1c6>
    1af8:	2c 81       	ldd	r18, Y+4	; 0x04
    1afa:	3d 81       	ldd	r19, Y+5	; 0x05
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <DIO_writePin+0x5a>
    1b02:	5f c0       	rjmp	.+190    	; 0x1bc2 <DIO_writePin+0x118>
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	9d 81       	ldd	r25, Y+5	; 0x05
    1b08:	83 30       	cpi	r24, 0x03	; 3
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <DIO_writePin+0x66>
    1b0e:	85 c0       	rjmp	.+266    	; 0x1c1a <DIO_writePin+0x170>
    1b10:	af c0       	rjmp	.+350    	; 0x1c70 <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	81 30       	cpi	r24, 0x01	; 1
    1b16:	a1 f4       	brne	.+40     	; 0x1b40 <DIO_writePin+0x96>
			{
				SET_BIT(PORTA, pin_number);
    1b18:	ab e3       	ldi	r26, 0x3B	; 59
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_writePin+0x8c>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_writePin+0x88>
    1b3a:	84 2b       	or	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	98 c0       	rjmp	.+304    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
    1b40:	ab e3       	ldi	r26, 0x3B	; 59
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e3       	ldi	r30, 0x3B	; 59
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <DIO_writePin+0xb4>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <DIO_writePin+0xb0>
    1b62:	80 95       	com	r24
    1b64:	84 23       	and	r24, r20
    1b66:	8c 93       	st	X, r24
    1b68:	83 c0       	rjmp	.+262    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	a1 f4       	brne	.+40     	; 0x1b98 <DIO_writePin+0xee>
			{
				SET_BIT(PORTB, pin_number);
    1b70:	a8 e3       	ldi	r26, 0x38	; 56
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e8 e3       	ldi	r30, 0x38	; 56
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 2e       	mov	r0, r18
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <DIO_writePin+0xe4>
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	0a 94       	dec	r0
    1b90:	e2 f7       	brpl	.-8      	; 0x1b8a <DIO_writePin+0xe0>
    1b92:	84 2b       	or	r24, r20
    1b94:	8c 93       	st	X, r24
    1b96:	6c c0       	rjmp	.+216    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
    1b98:	a8 e3       	ldi	r26, 0x38	; 56
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e8 e3       	ldi	r30, 0x38	; 56
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <DIO_writePin+0x10c>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <DIO_writePin+0x108>
    1bba:	80 95       	com	r24
    1bbc:	84 23       	and	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	57 c0       	rjmp	.+174    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	a1 f4       	brne	.+40     	; 0x1bf0 <DIO_writePin+0x146>
			{
				SET_BIT(PORTC, pin_number);
    1bc8:	a5 e3       	ldi	r26, 0x35	; 53
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e5 e3       	ldi	r30, 0x35	; 53
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <DIO_writePin+0x13c>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <DIO_writePin+0x138>
    1bea:	84 2b       	or	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	40 c0       	rjmp	.+128    	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
    1bf0:	a5 e3       	ldi	r26, 0x35	; 53
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e3       	ldi	r30, 0x35	; 53
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_writePin+0x164>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_writePin+0x160>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	2b c0       	rjmp	.+86     	; 0x1c70 <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	a1 f4       	brne	.+40     	; 0x1c48 <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_number);
    1c20:	a2 e3       	ldi	r26, 0x32	; 50
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e2 e3       	ldi	r30, 0x32	; 50
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_writePin+0x194>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_writePin+0x190>
    1c42:	84 2b       	or	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
    1c48:	a2 e3       	ldi	r26, 0x32	; 50
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e2 e3       	ldi	r30, 0x32	; 50
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_writePin+0x1bc>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_writePin+0x1b8>
    1c6a:	80 95       	com	r24
    1c6c:	84 23       	and	r24, r20
    1c6e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <DIO_readPin>:
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_readPin+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <DIO_readPin+0x8>
    1c88:	0f 92       	push	r0
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c92:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <DIO_readPin+0x1c>
    1c9a:	84 c0       	rjmp	.+264    	; 0x1da4 <DIO_readPin+0x124>
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	84 30       	cpi	r24, 0x04	; 4
    1ca0:	08 f0       	brcs	.+2      	; 0x1ca4 <DIO_readPin+0x24>
    1ca2:	80 c0       	rjmp	.+256    	; 0x1da4 <DIO_readPin+0x124>
	
	}
	else
	{
		/* Read the pin value*/
		switch (port_number)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	3d 83       	std	Y+5, r19	; 0x05
    1cac:	2c 83       	std	Y+4, r18	; 0x04
    1cae:	4c 81       	ldd	r20, Y+4	; 0x04
    1cb0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cb2:	41 30       	cpi	r20, 0x01	; 1
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	79 f1       	breq	.+94     	; 0x1d16 <DIO_readPin+0x96>
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	34 f4       	brge	.+12     	; 0x1cce <DIO_readPin+0x4e>
    1cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc6:	21 15       	cp	r18, r1
    1cc8:	31 05       	cpc	r19, r1
    1cca:	69 f0       	breq	.+26     	; 0x1ce6 <DIO_readPin+0x66>
    1ccc:	6b c0       	rjmp	.+214    	; 0x1da4 <DIO_readPin+0x124>
    1cce:	4c 81       	ldd	r20, Y+4	; 0x04
    1cd0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cd2:	42 30       	cpi	r20, 0x02	; 2
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	b9 f1       	breq	.+110    	; 0x1d46 <DIO_readPin+0xc6>
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	91 05       	cpc	r25, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <DIO_readPin+0x64>
    1ce2:	49 c0       	rjmp	.+146    	; 0x1d76 <DIO_readPin+0xf6>
    1ce4:	5f c0       	rjmp	.+190    	; 0x1da4 <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_number))
    1ce6:	e9 e3       	ldi	r30, 0x39	; 57
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_readPin+0x7e>
    1cfa:	55 95       	asr	r21
    1cfc:	47 95       	ror	r20
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_readPin+0x7a>
    1d02:	ca 01       	movw	r24, r20
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	88 23       	and	r24, r24
    1d0a:	19 f0       	breq	.+6      	; 0x1d12 <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	49 c0       	rjmp	.+146    	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d12:	19 82       	std	Y+1, r1	; 0x01
    1d14:	47 c0       	rjmp	.+142    	; 0x1da4 <DIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_number))
    1d16:	e6 e3       	ldi	r30, 0x36	; 54
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a9 01       	movw	r20, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_readPin+0xae>
    1d2a:	55 95       	asr	r21
    1d2c:	47 95       	ror	r20
    1d2e:	8a 95       	dec	r24
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_readPin+0xaa>
    1d32:	ca 01       	movw	r24, r20
    1d34:	81 70       	andi	r24, 0x01	; 1
    1d36:	90 70       	andi	r25, 0x00	; 0
    1d38:	88 23       	and	r24, r24
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	31 c0       	rjmp	.+98     	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	2f c0       	rjmp	.+94     	; 0x1da4 <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_number))
    1d46:	e3 e3       	ldi	r30, 0x33	; 51
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a9 01       	movw	r20, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_readPin+0xde>
    1d5a:	55 95       	asr	r21
    1d5c:	47 95       	ror	r20
    1d5e:	8a 95       	dec	r24
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_readPin+0xda>
    1d62:	ca 01       	movw	r24, r20
    1d64:	81 70       	andi	r24, 0x01	; 1
    1d66:	90 70       	andi	r25, 0x00	; 0
    1d68:	88 23       	and	r24, r24
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	19 c0       	rjmp	.+50     	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	17 c0       	rjmp	.+46     	; 0x1da4 <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_number))
    1d76:	e0 e3       	ldi	r30, 0x30	; 48
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a9 01       	movw	r20, r18
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <DIO_readPin+0x10e>
    1d8a:	55 95       	asr	r21
    1d8c:	47 95       	ror	r20
    1d8e:	8a 95       	dec	r24
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <DIO_readPin+0x10a>
    1d92:	ca 01       	movw	r24, r20
    1d94:	81 70       	andi	r24, 0x01	; 1
    1d96:	90 70       	andi	r25, 0x00	; 0
    1d98:	88 23       	and	r24, r24
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1da2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <DIO_setupPortDirection>:
void DIO_setupPortDirection(uint8 port_number, GPIO_PortDirectionType direction)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <DIO_setupPortDirection+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <DIO_setupPortDirection+0x8>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_number >= NUM_OF_PORTS)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	84 30       	cpi	r24, 0x04	; 4
    1dca:	90 f5       	brcc	.+100    	; 0x1e30 <DIO_setupPortDirection+0x7a>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3c 83       	std	Y+4, r19	; 0x04
    1dd4:	2b 83       	std	Y+3, r18	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	d1 f0       	breq	.+52     	; 0x1e14 <DIO_setupPortDirection+0x5e>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <DIO_setupPortDirection+0x3e>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <DIO_setupPortDirection+0x54>
    1df2:	1e c0       	rjmp	.+60     	; 0x1e30 <DIO_setupPortDirection+0x7a>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <DIO_setupPortDirection+0x68>
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <DIO_setupPortDirection+0x72>
    1e08:	13 c0       	rjmp	.+38     	; 0x1e30 <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e0a:	ea e3       	ldi	r30, 0x3A	; 58
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	80 83       	st	Z, r24
    1e12:	0e c0       	rjmp	.+28     	; 0x1e30 <DIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e14:	e7 e3       	ldi	r30, 0x37	; 55
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	80 83       	st	Z, r24
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <DIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e1e:	e4 e3       	ldi	r30, 0x34	; 52
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	80 83       	st	Z, r24
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <DIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e28:	e1 e3       	ldi	r30, 0x31	; 49
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_number, uint8 value)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <DIO_writePort+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <DIO_writePort+0x8>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	90 f5       	brcc	.+100    	; 0x1eb8 <DIO_writePort+0x7a>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	3c 83       	std	Y+4, r19	; 0x04
    1e5c:	2b 83       	std	Y+3, r18	; 0x03
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	d1 f0       	breq	.+52     	; 0x1e9c <DIO_writePort+0x5e>
    1e68:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <DIO_writePort+0x3e>
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <DIO_writePort+0x54>
    1e7a:	1e c0       	rjmp	.+60     	; 0x1eb8 <DIO_writePort+0x7a>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	81 f0       	breq	.+32     	; 0x1ea6 <DIO_writePort+0x68>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	81 f0       	breq	.+32     	; 0x1eb0 <DIO_writePort+0x72>
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <DIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e92:	eb e3       	ldi	r30, 0x3B	; 59
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	80 83       	st	Z, r24
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <DIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e9c:	e8 e3       	ldi	r30, 0x38	; 56
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	80 83       	st	Z, r24
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <DIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ea6:	e5 e3       	ldi	r30, 0x35	; 53
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <DIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1eb0:	e2 e3       	ldi	r30, 0x32	; 50
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_number)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <DIO_readPort+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <DIO_readPort+0x8>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ed4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	90 f5       	brcc	.+100    	; 0x1f40 <DIO_readPort+0x7a>
		
	}
	else
	{
		/* Read the port value*/
		switch (port_number)
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	3c 83       	std	Y+4, r19	; 0x04
    1ee4:	2b 83       	std	Y+3, r18	; 0x03
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	d1 f0       	breq	.+52     	; 0x1f24 <DIO_readPort+0x5e>
    1ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <DIO_readPort+0x3e>
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	61 f0       	breq	.+24     	; 0x1f1a <DIO_readPort+0x54>
    1f02:	1e c0       	rjmp	.+60     	; 0x1f40 <DIO_readPort+0x7a>
    1f04:	2b 81       	ldd	r18, Y+3	; 0x03
    1f06:	3c 81       	ldd	r19, Y+4	; 0x04
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <DIO_readPort+0x68>
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	83 30       	cpi	r24, 0x03	; 3
    1f14:	91 05       	cpc	r25, r1
    1f16:	81 f0       	breq	.+32     	; 0x1f38 <DIO_readPort+0x72>
    1f18:	13 c0       	rjmp	.+38     	; 0x1f40 <DIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f1a:	e9 e3       	ldi	r30, 0x39	; 57
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <DIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f24:	e6 e3       	ldi	r30, 0x36	; 54
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	09 c0       	rjmp	.+18     	; 0x1f40 <DIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f2e:	e3 e3       	ldi	r30, 0x33	; 51
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <DIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f38:	e0 e3       	ldi	r30, 0x30	; 48
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <APP_displayPress>:

STATE P_state = SAFE;
STATE T_state = SAFE;

void APP_displayPress(uint32 pressure)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <APP_displayPress+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <APP_displayPress+0x8>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	69 83       	std	Y+1, r22	; 0x01
    1f5e:	7a 83       	std	Y+2, r23	; 0x02
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(0,8);
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	68 e0       	ldi	r22, 0x08	; 8
    1f68:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <LCD_moveCursor>
	if ((10000 <= pressure) || (0 > pressure))
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	ab 81       	ldd	r26, Y+3	; 0x03
    1f72:	bc 81       	ldd	r27, Y+4	; 0x04
    1f74:	80 31       	cpi	r24, 0x10	; 16
    1f76:	27 e2       	ldi	r18, 0x27	; 39
    1f78:	92 07       	cpc	r25, r18
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	a2 07       	cpc	r26, r18
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	b2 07       	cpc	r27, r18
    1f82:	48 f0       	brcs	.+18     	; 0x1f96 <APP_displayPress+0x46>
	{
		LCD_displayString("ERR");
    1f84:	80 e6       	ldi	r24, 0x60	; 96
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
		LCD_displayString(" ");
    1f8c:	84 e6       	ldi	r24, 0x64	; 100
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    1f94:	67 c0       	rjmp	.+206    	; 0x2064 <APP_displayPress+0x114>
	}
	else if((1000 <= pressure) && (10000 > pressure))
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f9e:	88 3e       	cpi	r24, 0xE8	; 232
    1fa0:	23 e0       	ldi	r18, 0x03	; 3
    1fa2:	92 07       	cpc	r25, r18
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	a2 07       	cpc	r26, r18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	b2 07       	cpc	r27, r18
    1fac:	88 f0       	brcs	.+34     	; 0x1fd0 <APP_displayPress+0x80>
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	ab 81       	ldd	r26, Y+3	; 0x03
    1fb4:	bc 81       	ldd	r27, Y+4	; 0x04
    1fb6:	80 31       	cpi	r24, 0x10	; 16
    1fb8:	27 e2       	ldi	r18, 0x27	; 39
    1fba:	92 07       	cpc	r25, r18
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	a2 07       	cpc	r26, r18
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	b2 07       	cpc	r27, r18
    1fc4:	28 f4       	brcc	.+10     	; 0x1fd0 <APP_displayPress+0x80>
	{
		LCD_intgerToString(pressure);
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
    1fce:	4a c0       	rjmp	.+148    	; 0x2064 <APP_displayPress+0x114>
	}
	else if((100 <= pressure) && (1000 > pressure))
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fd6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fd8:	84 36       	cpi	r24, 0x64	; 100
    1fda:	91 05       	cpc	r25, r1
    1fdc:	a1 05       	cpc	r26, r1
    1fde:	b1 05       	cpc	r27, r1
    1fe0:	a8 f0       	brcs	.+42     	; 0x200c <APP_displayPress+0xbc>
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	ab 81       	ldd	r26, Y+3	; 0x03
    1fe8:	bc 81       	ldd	r27, Y+4	; 0x04
    1fea:	88 3e       	cpi	r24, 0xE8	; 232
    1fec:	23 e0       	ldi	r18, 0x03	; 3
    1fee:	92 07       	cpc	r25, r18
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	a2 07       	cpc	r26, r18
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	b2 07       	cpc	r27, r18
    1ff8:	48 f4       	brcc	.+18     	; 0x200c <APP_displayPress+0xbc>
	{
		LCD_intgerToString(pressure);
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString(" ");
    2002:	84 e6       	ldi	r24, 0x64	; 100
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    200a:	2c c0       	rjmp	.+88     	; 0x2064 <APP_displayPress+0x114>
	}
	else if((10 <= pressure) && (100 > pressure))
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	ab 81       	ldd	r26, Y+3	; 0x03
    2012:	bc 81       	ldd	r27, Y+4	; 0x04
    2014:	8a 30       	cpi	r24, 0x0A	; 10
    2016:	91 05       	cpc	r25, r1
    2018:	a1 05       	cpc	r26, r1
    201a:	b1 05       	cpc	r27, r1
    201c:	90 f0       	brcs	.+36     	; 0x2042 <APP_displayPress+0xf2>
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	ab 81       	ldd	r26, Y+3	; 0x03
    2024:	bc 81       	ldd	r27, Y+4	; 0x04
    2026:	84 36       	cpi	r24, 0x64	; 100
    2028:	91 05       	cpc	r25, r1
    202a:	a1 05       	cpc	r26, r1
    202c:	b1 05       	cpc	r27, r1
    202e:	48 f4       	brcc	.+18     	; 0x2042 <APP_displayPress+0xf2>
	{
		LCD_intgerToString(pressure);
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString("  ");
    2038:	86 e6       	ldi	r24, 0x66	; 102
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    2040:	11 c0       	rjmp	.+34     	; 0x2064 <APP_displayPress+0x114>
	}
	else if((0 <= pressure) && (10 > pressure))
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	ab 81       	ldd	r26, Y+3	; 0x03
    2048:	bc 81       	ldd	r27, Y+4	; 0x04
    204a:	8a 30       	cpi	r24, 0x0A	; 10
    204c:	91 05       	cpc	r25, r1
    204e:	a1 05       	cpc	r26, r1
    2050:	b1 05       	cpc	r27, r1
    2052:	40 f4       	brcc	.+16     	; 0x2064 <APP_displayPress+0x114>
	{
		LCD_intgerToString(pressure);
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString("   ");
    205c:	89 e6       	ldi	r24, 0x69	; 105
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
	}
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <APP_displayTemp>:
	}
}*/


void APP_displayTemp(uint32 temperature)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <APP_displayTemp+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <APP_displayTemp+0x8>
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	69 83       	std	Y+1, r22	; 0x01
    2080:	7a 83       	std	Y+2, r23	; 0x02
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(1,7);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	67 e0       	ldi	r22, 0x07	; 7
    208a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <LCD_moveCursor>
	if ((1000 <= temperature) || (0 > temperature))
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	ab 81       	ldd	r26, Y+3	; 0x03
    2094:	bc 81       	ldd	r27, Y+4	; 0x04
    2096:	88 3e       	cpi	r24, 0xE8	; 232
    2098:	23 e0       	ldi	r18, 0x03	; 3
    209a:	92 07       	cpc	r25, r18
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	a2 07       	cpc	r26, r18
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	b2 07       	cpc	r27, r18
    20a4:	28 f0       	brcs	.+10     	; 0x20b0 <APP_displayTemp+0x3e>
	{
		LCD_intgerToString(temperature);
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
    20ae:	3a c0       	rjmp	.+116    	; 0x2124 <APP_displayTemp+0xb2>
	}
	else if(100 <= temperature)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	ab 81       	ldd	r26, Y+3	; 0x03
    20b6:	bc 81       	ldd	r27, Y+4	; 0x04
    20b8:	84 36       	cpi	r24, 0x64	; 100
    20ba:	91 05       	cpc	r25, r1
    20bc:	a1 05       	cpc	r26, r1
    20be:	b1 05       	cpc	r27, r1
    20c0:	28 f0       	brcs	.+10     	; 0x20cc <APP_displayTemp+0x5a>
	{
		LCD_intgerToString(temperature);
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
    20ca:	2c c0       	rjmp	.+88     	; 0x2124 <APP_displayTemp+0xb2>
	}
	else if((10 <= temperature) && (100 > temperature))
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	ab 81       	ldd	r26, Y+3	; 0x03
    20d2:	bc 81       	ldd	r27, Y+4	; 0x04
    20d4:	8a 30       	cpi	r24, 0x0A	; 10
    20d6:	91 05       	cpc	r25, r1
    20d8:	a1 05       	cpc	r26, r1
    20da:	b1 05       	cpc	r27, r1
    20dc:	90 f0       	brcs	.+36     	; 0x2102 <APP_displayTemp+0x90>
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	ab 81       	ldd	r26, Y+3	; 0x03
    20e4:	bc 81       	ldd	r27, Y+4	; 0x04
    20e6:	84 36       	cpi	r24, 0x64	; 100
    20e8:	91 05       	cpc	r25, r1
    20ea:	a1 05       	cpc	r26, r1
    20ec:	b1 05       	cpc	r27, r1
    20ee:	48 f4       	brcc	.+18     	; 0x2102 <APP_displayTemp+0x90>
	{
		LCD_intgerToString(temperature);
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString(" ");
    20f8:	84 e6       	ldi	r24, 0x64	; 100
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    2100:	11 c0       	rjmp	.+34     	; 0x2124 <APP_displayTemp+0xb2>
	}
	else if((0 <= temperature) && (10 > temperature))
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	ab 81       	ldd	r26, Y+3	; 0x03
    2108:	bc 81       	ldd	r27, Y+4	; 0x04
    210a:	8a 30       	cpi	r24, 0x0A	; 10
    210c:	91 05       	cpc	r25, r1
    210e:	a1 05       	cpc	r26, r1
    2110:	b1 05       	cpc	r27, r1
    2112:	40 f4       	brcc	.+16     	; 0x2124 <APP_displayTemp+0xb2>
	{
		LCD_intgerToString(temperature);
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString("  ");
    211c:	86 e6       	ldi	r24, 0x66	; 102
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
	}
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <Temp_state>:



void Temp_state(void)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
	if (g_temperature >= TEMPERATURE_SEVERE)
    213a:	80 91 ec 01 	lds	r24, 0x01EC
    213e:	90 91 ed 01 	lds	r25, 0x01ED
    2142:	a0 91 ee 01 	lds	r26, 0x01EE
    2146:	b0 91 ef 01 	lds	r27, 0x01EF
    214a:	8d 32       	cpi	r24, 0x2D	; 45
    214c:	91 05       	cpc	r25, r1
    214e:	a1 05       	cpc	r26, r1
    2150:	b1 05       	cpc	r27, r1
    2152:	20 f0       	brcs	.+8      	; 0x215c <Temp_state+0x2a>
	{
		T_state = SEVERE;
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	80 93 f7 01 	sts	0x01F7, r24
    215a:	2d c0       	rjmp	.+90     	; 0x21b6 <Temp_state+0x84>
	}
	else if ((g_temperature >= TEMPERATURE_MODERATE) && (g_temperature < TEMPERATURE_SEVERE))
    215c:	80 91 ec 01 	lds	r24, 0x01EC
    2160:	90 91 ed 01 	lds	r25, 0x01ED
    2164:	a0 91 ee 01 	lds	r26, 0x01EE
    2168:	b0 91 ef 01 	lds	r27, 0x01EF
    216c:	8e 31       	cpi	r24, 0x1E	; 30
    216e:	91 05       	cpc	r25, r1
    2170:	a1 05       	cpc	r26, r1
    2172:	b1 05       	cpc	r27, r1
    2174:	88 f0       	brcs	.+34     	; 0x2198 <Temp_state+0x66>
    2176:	80 91 ec 01 	lds	r24, 0x01EC
    217a:	90 91 ed 01 	lds	r25, 0x01ED
    217e:	a0 91 ee 01 	lds	r26, 0x01EE
    2182:	b0 91 ef 01 	lds	r27, 0x01EF
    2186:	8d 32       	cpi	r24, 0x2D	; 45
    2188:	91 05       	cpc	r25, r1
    218a:	a1 05       	cpc	r26, r1
    218c:	b1 05       	cpc	r27, r1
    218e:	20 f4       	brcc	.+8      	; 0x2198 <Temp_state+0x66>
	{
		T_state = MODERATE;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 f7 01 	sts	0x01F7, r24
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <Temp_state+0x84>
	}
	else if ((g_temperature >= TEMPERATURE_SAFE) && (g_temperature < TEMPERATURE_MODERATE))
    2198:	80 91 ec 01 	lds	r24, 0x01EC
    219c:	90 91 ed 01 	lds	r25, 0x01ED
    21a0:	a0 91 ee 01 	lds	r26, 0x01EE
    21a4:	b0 91 ef 01 	lds	r27, 0x01EF
    21a8:	8e 31       	cpi	r24, 0x1E	; 30
    21aa:	91 05       	cpc	r25, r1
    21ac:	a1 05       	cpc	r26, r1
    21ae:	b1 05       	cpc	r27, r1
    21b0:	10 f4       	brcc	.+4      	; 0x21b6 <Temp_state+0x84>
	{
		T_state = SAFE;
    21b2:	10 92 f7 01 	sts	0x01F7, r1
	}
}
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <Press_state>:

void Press_state(void)
{
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	if (g_pressure >= PRESSURE_SEVERE)
    21c4:	80 91 f0 01 	lds	r24, 0x01F0
    21c8:	90 91 f1 01 	lds	r25, 0x01F1
    21cc:	a0 91 f2 01 	lds	r26, 0x01F2
    21d0:	b0 91 f3 01 	lds	r27, 0x01F3
    21d4:	80 3a       	cpi	r24, 0xA0	; 160
    21d6:	26 e8       	ldi	r18, 0x86	; 134
    21d8:	92 07       	cpc	r25, r18
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	a2 07       	cpc	r26, r18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	b2 07       	cpc	r27, r18
    21e2:	20 f0       	brcs	.+8      	; 0x21ec <Press_state+0x30>
	{
		P_state = SEVERE;
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	80 93 f6 01 	sts	0x01F6, r24
    21ea:	46 c0       	rjmp	.+140    	; 0x2278 <Press_state+0xbc>
	}
	else if ((g_pressure >= PRESSURE_MODERATE) && (g_pressure < PRESSURE_SEVERE))
    21ec:	80 91 f0 01 	lds	r24, 0x01F0
    21f0:	90 91 f1 01 	lds	r25, 0x01F1
    21f4:	a0 91 f2 01 	lds	r26, 0x01F2
    21f8:	b0 91 f3 01 	lds	r27, 0x01F3
    21fc:	80 31       	cpi	r24, 0x10	; 16
    21fe:	27 e2       	ldi	r18, 0x27	; 39
    2200:	92 07       	cpc	r25, r18
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	a2 07       	cpc	r26, r18
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	b2 07       	cpc	r27, r18
    220a:	a0 f0       	brcs	.+40     	; 0x2234 <Press_state+0x78>
    220c:	80 91 f0 01 	lds	r24, 0x01F0
    2210:	90 91 f1 01 	lds	r25, 0x01F1
    2214:	a0 91 f2 01 	lds	r26, 0x01F2
    2218:	b0 91 f3 01 	lds	r27, 0x01F3
    221c:	80 3a       	cpi	r24, 0xA0	; 160
    221e:	26 e8       	ldi	r18, 0x86	; 134
    2220:	92 07       	cpc	r25, r18
    2222:	21 e0       	ldi	r18, 0x01	; 1
    2224:	a2 07       	cpc	r26, r18
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	b2 07       	cpc	r27, r18
    222a:	20 f4       	brcc	.+8      	; 0x2234 <Press_state+0x78>
	{
		P_state = MODERATE;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	80 93 f6 01 	sts	0x01F6, r24
    2232:	22 c0       	rjmp	.+68     	; 0x2278 <Press_state+0xbc>
	}
	else if ((g_pressure >= PRESSURE_SAFE) && (g_pressure < PRESSURE_MODERATE))
    2234:	80 91 f0 01 	lds	r24, 0x01F0
    2238:	90 91 f1 01 	lds	r25, 0x01F1
    223c:	a0 91 f2 01 	lds	r26, 0x01F2
    2240:	b0 91 f3 01 	lds	r27, 0x01F3
    2244:	8c 32       	cpi	r24, 0x2C	; 44
    2246:	21 e0       	ldi	r18, 0x01	; 1
    2248:	92 07       	cpc	r25, r18
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	a2 07       	cpc	r26, r18
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	b2 07       	cpc	r27, r18
    2252:	90 f0       	brcs	.+36     	; 0x2278 <Press_state+0xbc>
    2254:	80 91 f0 01 	lds	r24, 0x01F0
    2258:	90 91 f1 01 	lds	r25, 0x01F1
    225c:	a0 91 f2 01 	lds	r26, 0x01F2
    2260:	b0 91 f3 01 	lds	r27, 0x01F3
    2264:	80 31       	cpi	r24, 0x10	; 16
    2266:	27 e2       	ldi	r18, 0x27	; 39
    2268:	92 07       	cpc	r25, r18
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	a2 07       	cpc	r26, r18
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	b2 07       	cpc	r27, r18
    2272:	10 f4       	brcc	.+4      	; 0x2278 <Press_state+0xbc>
	{
		P_state = SAFE;
    2274:	10 92 f6 01 	sts	0x01F6, r1
	}
}
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <Action_severe>:

void Action_severe(void)
{
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    2286:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <BUZZER_on>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_HIGH);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	67 e0       	ldi	r22, 0x07	; 7
    228e:	41 e0       	ldi	r20, 0x01	; 1
    2290:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_displayStringRowColumn(3,10,"FLAG ON");
    2294:	2d e6       	ldi	r18, 0x6D	; 109
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	6a e0       	ldi	r22, 0x0A	; 10
    229c:	a9 01       	movw	r20, r18
    229e:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <Action_moderate>:

void Action_moderate(void)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
    22b0:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <BUZZER_on>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_LOW);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	67 e0       	ldi	r22, 0x07	; 7
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_displayStringRowColumn(3,10,"FLAG OFF");
    22be:	25 e7       	ldi	r18, 0x75	; 117
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	6a e0       	ldi	r22, 0x0A	; 10
    22c6:	a9 01       	movw	r20, r18
    22c8:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
}
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <Action_safe>:

void Action_safe(void)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
	BUZZER_off();
    22da:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <BUZZER_off>
	DIO_writePin(SLL_FLAG_PORT, SLL_FLAG_PIN, LOGIC_LOW);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	67 e0       	ldi	r22, 0x07	; 7
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_displayStringRowColumn(3,10,"FLAG OFF");
    22e8:	25 e7       	ldi	r18, 0x75	; 117
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	6a e0       	ldi	r22, 0x0A	; 10
    22f0:	a9 01       	movw	r20, r18
    22f2:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <main>:


int main()
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <main+0x6>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    2306:	af e5       	ldi	r26, 0x5F	; 95
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	ef e5       	ldi	r30, 0x5F	; 95
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	80 68       	ori	r24, 0x80	; 128
    2312:	8c 93       	st	X, r24

	uint16 LCD_distance; 		/*distance shown on the LCD screen*/
	Ultrasonic_init(); /*initializing Ultrasonic*/
    2314:	0e 94 b5 13 	call	0x276a	; 0x276a <Ultrasonic_init>
	TWI_init();
    2318:	0e 94 75 07 	call	0xeea	; 0xeea <TWI_init>
	BMP180_Start();
    231c:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <BMP180_Start>
	//	WSS_Init();
	LCD_init();
    2320:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_init>
	BUZZER_init();
    2324:	0e 94 67 1f 	call	0x3ece	; 0x3ece <BUZZER_init>
	//	WATERPUMP_init();
	DIO_setupPinDirection(SLL_FLAG_PORT, SLL_FLAG_PIN, PIN_OUTPUT);
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	67 e0       	ldi	r22, 0x07	; 7
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

	LCD_displayStringRowColumn(0,0,"Press = ");
    2332:	2e e7       	ldi	r18, 0x7E	; 126
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	a9 01       	movw	r20, r18
    233c:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,13,"hPa");
    2340:	27 e8       	ldi	r18, 0x87	; 135
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	6d e0       	ldi	r22, 0x0D	; 13
    2348:	a9 01       	movw	r20, r18
    234a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Temp = ");
    234e:	2b e8       	ldi	r18, 0x8B	; 139
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	a9 01       	movw	r20, r18
    2358:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,11,"C");
    235c:	23 e9       	ldi	r18, 0x93	; 147
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	6b e0       	ldi	r22, 0x0B	; 11
    2364:	a9 01       	movw	r20, r18
    2366:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,0,"Distance= ");
    236a:	25 e9       	ldi	r18, 0x95	; 149
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	a9 01       	movw	r20, r18
    2374:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,15,"cm");
    2378:	20 ea       	ldi	r18, 0xA0	; 160
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	6f e0       	ldi	r22, 0x0F	; 15
    2380:	a9 01       	movw	r20, r18
    2382:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>

	while (1)
	{
		LCD_distance=Ultrasonic_readDistance(); /*storing the measured distance*/
    2386:	0e 94 64 14 	call	0x28c8	; 0x28c8 <Ultrasonic_readDistance>
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(2, 11);
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	6b e0       	ldi	r22, 0x0B	; 11
    2392:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <LCD_moveCursor>
		if(LCD_distance>=100)                  /*LCD handling*/
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	84 36       	cpi	r24, 0x64	; 100
    239c:	91 05       	cpc	r25, r1
    239e:	28 f0       	brcs	.+10     	; 0x23aa <main+0xae>
			LCD_intgerToString(LCD_distance);
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <main+0xbc>
		else{
			LCD_intgerToString(LCD_distance);
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	9a 81       	ldd	r25, Y+2	; 0x02
    23ae:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
			LCD_displayCharacter(' ');
    23b2:	80 e2       	ldi	r24, 0x20	; 32
    23b4:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
		}
		g_temperature = BMP180_calculateTemperature();
    23b8:	0e 94 90 27 	call	0x4f20	; 0x4f20 <BMP180_calculateTemperature>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	80 93 ec 01 	sts	0x01EC, r24
    23c4:	90 93 ed 01 	sts	0x01ED, r25
    23c8:	a0 93 ee 01 	sts	0x01EE, r26
    23cc:	b0 93 ef 01 	sts	0x01EF, r27
		g_pressure = BMP180_calculatePressure();
    23d0:	0e 94 9b 28 	call	0x5136	; 0x5136 <BMP180_calculatePressure>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	80 93 f0 01 	sts	0x01F0, r24
    23dc:	90 93 f1 01 	sts	0x01F1, r25
    23e0:	a0 93 f2 01 	sts	0x01F2, r26
    23e4:	b0 93 f3 01 	sts	0x01F3, r27
		//		g_rpm = WSS_getRPM();
		APP_displayTemp(g_temperature);
    23e8:	80 91 ec 01 	lds	r24, 0x01EC
    23ec:	90 91 ed 01 	lds	r25, 0x01ED
    23f0:	a0 91 ee 01 	lds	r26, 0x01EE
    23f4:	b0 91 ef 01 	lds	r27, 0x01EF
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 39 10 	call	0x2072	; 0x2072 <APP_displayTemp>
		APP_displayPress(g_pressure);
    2400:	80 91 f0 01 	lds	r24, 0x01F0
    2404:	90 91 f1 01 	lds	r25, 0x01F1
    2408:	a0 91 f2 01 	lds	r26, 0x01F2
    240c:	b0 91 f3 01 	lds	r27, 0x01F3
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <APP_displayPress>

		Temp_state();
    2418:	0e 94 99 10 	call	0x2132	; 0x2132 <Temp_state>
		Press_state();
    241c:	0e 94 de 10 	call	0x21bc	; 0x21bc <Press_state>

		if (P_state == SEVERE || T_state == SEVERE)
    2420:	80 91 f6 01 	lds	r24, 0x01F6
    2424:	82 30       	cpi	r24, 0x02	; 2
    2426:	21 f0       	breq	.+8      	; 0x2430 <main+0x134>
    2428:	80 91 f7 01 	lds	r24, 0x01F7
    242c:	82 30       	cpi	r24, 0x02	; 2
    242e:	61 f4       	brne	.+24     	; 0x2448 <main+0x14c>
		{
			Action_severe();
    2430:	0e 94 3f 11 	call	0x227e	; 0x227e <Action_severe>
			WATERPUMP_on();
    2434:	0e 94 78 13 	call	0x26f0	; 0x26f0 <WATERPUMP_on>
			LCD_displayStringRowColumn(3,0,"PUMP ON ");
    2438:	23 ea       	ldi	r18, 0xA3	; 163
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	a9 01       	movw	r20, r18
    2442:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
    2446:	9f cf       	rjmp	.-194    	; 0x2386 <main+0x8a>
		}
		else if (P_state == MODERATE || T_state == MODERATE)
    2448:	80 91 f6 01 	lds	r24, 0x01F6
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	21 f0       	breq	.+8      	; 0x2458 <main+0x15c>
    2450:	80 91 f7 01 	lds	r24, 0x01F7
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	61 f4       	brne	.+24     	; 0x2470 <main+0x174>
		{
			Action_moderate();
    2458:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Action_moderate>
			WATERPUMP_on();
    245c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <WATERPUMP_on>
			LCD_displayStringRowColumn(3,0,"PUMP ON ");
    2460:	23 ea       	ldi	r18, 0xA3	; 163
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	83 e0       	ldi	r24, 0x03	; 3
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	a9 01       	movw	r20, r18
    246a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
    246e:	8b cf       	rjmp	.-234    	; 0x2386 <main+0x8a>
		}
		else if (P_state == SAFE || T_state == SAFE)
    2470:	80 91 f6 01 	lds	r24, 0x01F6
    2474:	88 23       	and	r24, r24
    2476:	29 f0       	breq	.+10     	; 0x2482 <main+0x186>
    2478:	80 91 f7 01 	lds	r24, 0x01F7
    247c:	88 23       	and	r24, r24
    247e:	09 f0       	breq	.+2      	; 0x2482 <main+0x186>
    2480:	82 cf       	rjmp	.-252    	; 0x2386 <main+0x8a>
		{
			Action_safe();
    2482:	0e 94 69 11 	call	0x22d2	; 0x22d2 <Action_safe>
			WATERPUMP_off();
    2486:	0e 94 84 13 	call	0x2708	; 0x2708 <WATERPUMP_off>
			LCD_displayStringRowColumn(3,0,"PUMP OFF");
    248a:	2c ea       	ldi	r18, 0xAC	; 172
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	83 e0       	ldi	r24, 0x03	; 3
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	a9 01       	movw	r20, r18
    2494:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
    2498:	76 cf       	rjmp	.-276    	; 0x2386 <main+0x8a>

0000249a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <KEYPAD_getPressedKey+0x6>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	DIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	62 e0       	ldi	r22, 0x02	; 2
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	63 e0       	ldi	r22, 0x03	; 3
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    24b8:	82 e0       	ldi	r24, 0x02	; 2
    24ba:	64 e0       	ldi	r22, 0x04	; 4
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	65 e0       	ldi	r22, 0x05	; 5
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	64 e0       	ldi	r22, 0x04	; 4
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	65 e0       	ldi	r22, 0x05	; 5
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	66 e0       	ldi	r22, 0x06	; 6
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	67 e0       	ldi	r22, 0x07	; 7
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    24f4:	19 82       	std	Y+1, r1	; 0x01
    24f6:	3c c0       	rjmp	.+120    	; 0x2570 <KEYPAD_getPressedKey+0xd6>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			DIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	98 2f       	mov	r25, r24
    24fc:	9e 5f       	subi	r25, 0xFE	; 254
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	69 2f       	mov	r22, r25
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

			/* Set/Clear the row output pin */
			DIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	98 2f       	mov	r25, r24
    250c:	9e 5f       	subi	r25, 0xFE	; 254
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	69 2f       	mov	r22, r25
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2518:	1a 82       	std	Y+2, r1	; 0x02
    251a:	1c c0       	rjmp	.+56     	; 0x2554 <KEYPAD_getPressedKey+0xba>
			{
				/* Check if the switch is pressed in this column */
				if(DIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	98 2f       	mov	r25, r24
    2520:	9c 5f       	subi	r25, 0xFC	; 252
    2522:	83 e0       	ldi	r24, 0x03	; 3
    2524:	69 2f       	mov	r22, r25
    2526:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <DIO_readPin>
    252a:	88 23       	and	r24, r24
    252c:	81 f4       	brne	.+32     	; 0x254e <KEYPAD_getPressedKey+0xb4>
						#else
							return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	98 2f       	mov	r25, r24
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	89 0f       	add	r24, r25
    2542:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			DIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret
			DIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			DIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	8a 83       	std	Y+2, r24	; 0x02
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	08 f3       	brcs	.-62     	; 0x251c <KEYPAD_getPressedKey+0x82>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			DIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	98 2f       	mov	r25, r24
    255e:	9e 5f       	subi	r25, 0xFE	; 254
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	69 2f       	mov	r22, r25
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	DIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	08 f2       	brcs	.-126    	; 0x24f8 <KEYPAD_getPressedKey+0x5e>
    2576:	be cf       	rjmp	.-132    	; 0x24f4 <KEYPAD_getPressedKey+0x5a>

00002578 <__vector_1>:
/*------------------------------------------------------------------------------
 |                          ISR's Definitions                                  |
 ------------------------------------------------------------------------------*/

/* ISR for INT0 external interrupt triggered by WSS */
ISR(INT0_vect) {
    2578:	1f 92       	push	r1
    257a:	0f 92       	push	r0
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	0f 92       	push	r0
    2580:	11 24       	eor	r1, r1
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	/* checks on the flag if flag = 1 the one second must be elapsed */
	if (g_oneSecFlag == 1) {
    258e:	80 91 fa 01 	lds	r24, 0x01FA
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	79 f4       	brne	.+30     	; 0x25b4 <__vector_1+0x3c>
		/* Store number of wheel pulses in one second */
		g_pulsesPerSecond = g_revolutions;
    2596:	80 91 f8 01 	lds	r24, 0x01F8
    259a:	90 91 f9 01 	lds	r25, 0x01F9
    259e:	90 93 fc 01 	sts	0x01FC, r25
    25a2:	80 93 fb 01 	sts	0x01FB, r24

		/* Reset one second flag of the timer */
		g_oneSecFlag = 0;
    25a6:	10 92 fa 01 	sts	0x01FA, r1

		/* Reset the number of revolutions of the wheel */
		g_revolutions = 0;
    25aa:	10 92 f9 01 	sts	0x01F9, r1
    25ae:	10 92 f8 01 	sts	0x01F8, r1
    25b2:	0d c0       	rjmp	.+26     	; 0x25ce <__vector_1+0x56>
	}
	/* if flag not equal to one then continue counting revolutions */
	else if (g_oneSecFlag == 0) {
    25b4:	80 91 fa 01 	lds	r24, 0x01FA
    25b8:	88 23       	and	r24, r24
    25ba:	49 f4       	brne	.+18     	; 0x25ce <__vector_1+0x56>
		g_revolutions++;
    25bc:	80 91 f8 01 	lds	r24, 0x01F8
    25c0:	90 91 f9 01 	lds	r25, 0x01F9
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	90 93 f9 01 	sts	0x01F9, r25
    25ca:	80 93 f8 01 	sts	0x01F8, r24
	}
}
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	9f 91       	pop	r25
    25d4:	8f 91       	pop	r24
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	0f 90       	pop	r0
    25dc:	1f 90       	pop	r1
    25de:	18 95       	reti

000025e0 <INT0_Init>:
 * 					for WSS. 											*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void INT0_Init(void) {
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
	/* Set the direction of external interrupt 0 to be input */
	DIO_setupPinDirection(INT0_PORT_ID, INT0_PIN_ID, PIN_INPUT);
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	62 e0       	ldi	r22, 0x02	; 2
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

	/************************** MCUCR Description **************************
	 * ISC00:01	= 1	The rising edge of INT0 generates an interrupt request
	 ***********************************************************************/
	MCUCR |= (1 << ISC01) | (1 << ISC00);
    25f2:	a5 e5       	ldi	r26, 0x55	; 85
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e5 e5       	ldi	r30, 0x55	; 85
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	83 60       	ori	r24, 0x03	; 3
    25fe:	8c 93       	st	X, r24

	/************************** GICR Description **************************
	 * INT0	= 1	External Interrupt Request 0 Enable
	 **********************************************************************/
	GICR |= (1 << INT0);
    2600:	ab e5       	ldi	r26, 0x5B	; 91
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	eb e5       	ldi	r30, 0x5B	; 91
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	80 68       	ori	r24, 0x80	; 128
    260c:	8c 93       	st	X, r24

	//SREG |= (1<<7);
}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <WSS_timeCounter>:
 * 					to set one second timer flag 						*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void WSS_timeCounter(void) {
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
	/* Set one second timer flag */
	g_oneSecFlag = 1;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	80 93 fa 01 	sts	0x01FA, r24
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <WSS_Init>:
 * [Description]:	Function to initialize WSS module.				 	*
 * 																		*
 * [Args]			void												*
 * [Return]			void												*
 *======================================================================*/
void WSS_Init(void) {
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	2e 97       	sbiw	r28, 0x0e	; 14
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
	/* Timer configuration struct specifying which Timer, mode of
	 * operation, initial count value, compare value (corresponding
	 * to one second), prescaler value, and ISR */
	Timer_configuration Config =
			{ Timer1, CTC, 0, 15625, 1024, WSS_timeCounter };
    263c:	ce 01       	movw	r24, r28
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	9b 87       	std	Y+11, r25	; 0x0b
    2642:	8a 87       	std	Y+10, r24	; 0x0a
    2644:	eb ed       	ldi	r30, 0xDB	; 219
    2646:	f1 e0       	ldi	r31, 0x01	; 1
    2648:	fd 87       	std	Y+13, r31	; 0x0d
    264a:	ec 87       	std	Y+12, r30	; 0x0c
    264c:	f9 e0       	ldi	r31, 0x09	; 9
    264e:	fe 87       	std	Y+14, r31	; 0x0e
    2650:	ec 85       	ldd	r30, Y+12	; 0x0c
    2652:	fd 85       	ldd	r31, Y+13	; 0x0d
    2654:	00 80       	ld	r0, Z
    2656:	8c 85       	ldd	r24, Y+12	; 0x0c
    2658:	9d 85       	ldd	r25, Y+13	; 0x0d
    265a:	01 96       	adiw	r24, 0x01	; 1
    265c:	9d 87       	std	Y+13, r25	; 0x0d
    265e:	8c 87       	std	Y+12, r24	; 0x0c
    2660:	ea 85       	ldd	r30, Y+10	; 0x0a
    2662:	fb 85       	ldd	r31, Y+11	; 0x0b
    2664:	00 82       	st	Z, r0
    2666:	8a 85       	ldd	r24, Y+10	; 0x0a
    2668:	9b 85       	ldd	r25, Y+11	; 0x0b
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	9b 87       	std	Y+11, r25	; 0x0b
    266e:	8a 87       	std	Y+10, r24	; 0x0a
    2670:	9e 85       	ldd	r25, Y+14	; 0x0e
    2672:	91 50       	subi	r25, 0x01	; 1
    2674:	9e 87       	std	Y+14, r25	; 0x0e
    2676:	ee 85       	ldd	r30, Y+14	; 0x0e
    2678:	ee 23       	and	r30, r30
    267a:	51 f7       	brne	.-44     	; 0x2650 <WSS_Init+0x28>

	INT0_Init();
    267c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <INT0_Init>
}
    2680:	2e 96       	adiw	r28, 0x0e	; 14
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <WSS_getRPM>:
 * 					which means RPM										*
 * 																		*
 * [Args]			void												*
 * [Return]			RPM value											*
 *======================================================================*/
uint16 WSS_getRPM(void) {
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <WSS_getRPM+0x6>
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
	uint16 rpm = 0;
    269c:	1a 82       	std	Y+2, r1	; 0x02
    269e:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate wheel speed in pulses per minute */
	rpm = g_pulsesPerSecond * 60;
    26a0:	20 91 fb 01 	lds	r18, 0x01FB
    26a4:	30 91 fc 01 	lds	r19, 0x01FC
    26a8:	8c e3       	ldi	r24, 0x3C	; 60
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	ac 01       	movw	r20, r24
    26ae:	24 9f       	mul	r18, r20
    26b0:	c0 01       	movw	r24, r0
    26b2:	25 9f       	mul	r18, r21
    26b4:	90 0d       	add	r25, r0
    26b6:	34 9f       	mul	r19, r20
    26b8:	90 0d       	add	r25, r0
    26ba:	11 24       	eor	r1, r1
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01

	/* Convert pulses per minute to RPM */
	rpm = rpm / PULSEPERREVOLUTION;

	return rpm;
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <WATERPUMP_init>:

#include "../../MCAL/DIO/dio.h"
#include "../../ECUAL/WATERPUMP/waterpump.h"

void WATERPUMP_init(void)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <WATERPUMP_on>:

void WATERPUMP_on(void)
{
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <WATERPUMP_off>:

void WATERPUMP_off(void)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <Ultrasonic_edgeProcessing>:
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_edgeProcessing(void)

{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
		g_edgeCount++;
    2728:	80 91 fd 01 	lds	r24, 0x01FD
    272c:	8f 5f       	subi	r24, 0xFF	; 255
    272e:	80 93 fd 01 	sts	0x01FD, r24
		if(g_edgeCount == 1)
    2732:	80 91 fd 01 	lds	r24, 0x01FD
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	31 f4       	brne	.+12     	; 0x2746 <Ultrasonic_edgeProcessing+0x26>
		{
			/*
			 * Clear the timer counter register to start measurements from the
			 * first detected rising edge
			 */
			Icu_clearTimerValue();
    273a:	0e 94 43 0c 	call	0x1886	; 0x1886 <Icu_clearTimerValue>
			/* Detect falling edge */
			Icu_setEdgeDetectionType(FALLING);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	0e 94 19 0c 	call	0x1832	; 0x1832 <Icu_setEdgeDetectionType>
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <Ultrasonic_edgeProcessing+0x44>
		}
		else if(g_edgeCount == 2)
    2746:	80 91 fd 01 	lds	r24, 0x01FD
    274a:	82 30       	cpi	r24, 0x02	; 2
    274c:	59 f4       	brne	.+22     	; 0x2764 <Ultrasonic_edgeProcessing+0x44>
		{
			/* storing the value of the 'ICR1' register in the g_timerValue variable where it's global *
		 	* as it will be used again in another function which is called "ULTRASONIC_readDistance". */

			g_timeHigh = Icu_getInputCaptureValue();
    274e:	0e 94 38 0c 	call	0x1870	; 0x1870 <Icu_getInputCaptureValue>
    2752:	90 93 ff 01 	sts	0x01FF, r25
    2756:	80 93 fe 01 	sts	0x01FE, r24
			/* Detect rising edge */


			Icu_setEdgeDetectionType(RISING);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	0e 94 19 0c 	call	0x1832	; 0x1832 <Icu_setEdgeDetectionType>
			g_edgeCount=0;
    2760:	10 92 fd 01 	sts	0x01FD, r1
		}


}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <Ultrasonic_init>:
 *
 * [Args]          : NONE
 *******************************************************************************/

void Ultrasonic_init(void)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	00 d0       	rcall	.+0      	; 0x2770 <Ultrasonic_init+0x6>
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	8a 83       	std	Y+2, r24	; 0x02
	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    277c:	80 e9       	ldi	r24, 0x90	; 144
    277e:	93 e1       	ldi	r25, 0x13	; 19
    2780:	0e 94 07 0c 	call	0x180e	; 0x180e <Icu_setCallBack>
	/* Initialize the ICU driver */
	Icu_init(&Icu_Config);
    2784:	ce 01       	movw	r24, r28
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	0e 94 ab 0b 	call	0x1756	; 0x1756 <Icu_init>
	/*setup the direction of the trigger pin as output pin through the DIO driver*/
	DIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	65 e0       	ldi	r22, 0x05	; 5
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	/*disabling trigger pin*/
	DIO_writePin(PORTB_ID,PIN5_ID,LOGIC_LOW);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	65 e0       	ldi	r22, 0x05	; 5
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>

}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <Ultrasonic_Trigger>:
 * [Description]   : Send the Trigger pulse to the ultrasonic
 *
 * [Args]          : NONE
 *******************************************************************************/
void Ultrasonic_Trigger(void)
{
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	2e 97       	sbiw	r28, 0x0e	; 14
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
	DIO_writePin(PORTB_ID,PIN5_ID,1);
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	65 e0       	ldi	r22, 0x05	; 5
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    27c8:	8a e9       	ldi	r24, 0x9A	; 154
    27ca:	99 e9       	ldi	r25, 0x99	; 153
    27cc:	a9 e1       	ldi	r26, 0x19	; 25
    27ce:	be e3       	ldi	r27, 0x3E	; 62
    27d0:	8b 87       	std	Y+11, r24	; 0x0b
    27d2:	9c 87       	std	Y+12, r25	; 0x0c
    27d4:	ad 87       	std	Y+13, r26	; 0x0d
    27d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27da:	7c 85       	ldd	r23, Y+12	; 0x0c
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4a e7       	ldi	r20, 0x7A	; 122
    27e6:	55 e4       	ldi	r21, 0x45	; 69
    27e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	8f 83       	std	Y+7, r24	; 0x07
    27f2:	98 87       	std	Y+8, r25	; 0x08
    27f4:	a9 87       	std	Y+9, r26	; 0x09
    27f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f8:	6f 81       	ldd	r22, Y+7	; 0x07
    27fa:	78 85       	ldd	r23, Y+8	; 0x08
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <Ultrasonic_Trigger+0x70>
		__ticks = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	8d 83       	std	Y+5, r24	; 0x05
    2818:	3f c0       	rjmp	.+126    	; 0x2898 <Ultrasonic_Trigger+0xee>
	else if (__tmp > 65535)
    281a:	6f 81       	ldd	r22, Y+7	; 0x07
    281c:	78 85       	ldd	r23, Y+8	; 0x08
    281e:	89 85       	ldd	r24, Y+9	; 0x09
    2820:	9a 85       	ldd	r25, Y+10	; 0x0a
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	4c f5       	brge	.+82     	; 0x2884 <Ultrasonic_Trigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
    285a:	0f c0       	rjmp	.+30     	; 0x287a <Ultrasonic_Trigger+0xd0>
    285c:	80 e9       	ldi	r24, 0x90	; 144
    285e:	91 e0       	ldi	r25, 0x01	; 1
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <Ultrasonic_Trigger+0xbe>
    286c:	9c 83       	std	Y+4, r25	; 0x04
    286e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	9e 81       	ldd	r25, Y+6	; 0x06
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	69 f7       	brne	.-38     	; 0x285c <Ultrasonic_Trigger+0xb2>
    2882:	14 c0       	rjmp	.+40     	; 0x28ac <Ultrasonic_Trigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	78 85       	ldd	r23, Y+8	; 0x08
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9e 83       	std	Y+6, r25	; 0x06
    2896:	8d 83       	std	Y+5, r24	; 0x05
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <Ultrasonic_Trigger+0xfa>
    28a8:	9a 83       	std	Y+2, r25	; 0x02
    28aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(0.15);
	DIO_writePin(PORTB_ID,PIN5_ID,0);
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	65 e0       	ldi	r22, 0x05	; 5
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>

}
    28b6:	2e 96       	adiw	r28, 0x0e	; 14
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	de bf       	out	0x3e, r29	; 62
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	cd bf       	out	0x3d, r28	; 61
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <Ultrasonic_readDistance>:
 * [Returns]       : Distance (The measured distance in Centimeter).
 * [NOTE]          : The calculated distance will be updated when use another prescaler and CPU freq
 *******************************************************************************/

uint16 Ultrasonic_readDistance(void)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <Ultrasonic_readDistance+0x6>
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
	static uint32 distance;
	/*for calibrating the reading due to ultrasonic tolerance*/
	static uint32 distance_calibration;

	/*enabling triggering*/
	Ultrasonic_Trigger();
    28d2:	0e 94 d5 13 	call	0x27aa	; 0x27aa <Ultrasonic_Trigger>
				 in this case i will work with no prescaler so prescaler=1
				 distance is divided by 2 because it is distance of going and return back*/

	/******** distance =(g_timeHigh*0.01715)*(Prescaler/FCPU)+1  ***********/

	 distance = (g_timeHigh*0.01715)/2+1;
    28d6:	80 91 fe 01 	lds	r24, 0x01FE
    28da:	90 91 ff 01 	lds	r25, 0x01FF
    28de:	cc 01       	movw	r24, r24
    28e0:	a0 e0       	ldi	r26, 0x00	; 0
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	28 e2       	ldi	r18, 0x28	; 40
    28f6:	3e e7       	ldi	r19, 0x7E	; 126
    28f8:	4c e8       	ldi	r20, 0x8C	; 140
    28fa:	5c e3       	ldi	r21, 0x3C	; 60
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e4       	ldi	r21, 0x40	; 64
    2910:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e8       	ldi	r20, 0x80	; 128
    2922:	5f e3       	ldi	r21, 0x3F	; 63
    2924:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	80 93 04 02 	sts	0x0204, r24
    293c:	90 93 05 02 	sts	0x0205, r25
    2940:	a0 93 06 02 	sts	0x0206, r26
    2944:	b0 93 07 02 	sts	0x0207, r27
	 /* (+1) because of ultrasonic tolerence*/
	 /*Also for calibration*/

	 if(distance>=342){
    2948:	80 91 04 02 	lds	r24, 0x0204
    294c:	90 91 05 02 	lds	r25, 0x0205
    2950:	a0 91 06 02 	lds	r26, 0x0206
    2954:	b0 91 07 02 	lds	r27, 0x0207
    2958:	86 35       	cpi	r24, 0x56	; 86
    295a:	21 e0       	ldi	r18, 0x01	; 1
    295c:	92 07       	cpc	r25, r18
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	a2 07       	cpc	r26, r18
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	b2 07       	cpc	r27, r18
    2966:	f0 f0       	brcs	.+60     	; 0x29a4 <Ultrasonic_readDistance+0xdc>
	 		distance_calibration=distance+2;
    2968:	80 91 04 02 	lds	r24, 0x0204
    296c:	90 91 05 02 	lds	r25, 0x0205
    2970:	a0 91 06 02 	lds	r26, 0x0206
    2974:	b0 91 07 02 	lds	r27, 0x0207
    2978:	02 96       	adiw	r24, 0x02	; 2
    297a:	a1 1d       	adc	r26, r1
    297c:	b1 1d       	adc	r27, r1
    297e:	80 93 00 02 	sts	0x0200, r24
    2982:	90 93 01 02 	sts	0x0201, r25
    2986:	a0 93 02 02 	sts	0x0202, r26
    298a:	b0 93 03 02 	sts	0x0203, r27
	 		return distance_calibration;
    298e:	80 91 00 02 	lds	r24, 0x0200
    2992:	90 91 01 02 	lds	r25, 0x0201
    2996:	a0 91 02 02 	lds	r26, 0x0202
    299a:	b0 91 03 02 	lds	r27, 0x0203
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	35 c0       	rjmp	.+106    	; 0x2a0e <Ultrasonic_readDistance+0x146>
	 	}
	 	else if(distance>=154){
    29a4:	80 91 04 02 	lds	r24, 0x0204
    29a8:	90 91 05 02 	lds	r25, 0x0205
    29ac:	a0 91 06 02 	lds	r26, 0x0206
    29b0:	b0 91 07 02 	lds	r27, 0x0207
    29b4:	8a 39       	cpi	r24, 0x9A	; 154
    29b6:	91 05       	cpc	r25, r1
    29b8:	a1 05       	cpc	r26, r1
    29ba:	b1 05       	cpc	r27, r1
    29bc:	f0 f0       	brcs	.+60     	; 0x29fa <Ultrasonic_readDistance+0x132>
	 		distance_calibration=distance+1;
    29be:	80 91 04 02 	lds	r24, 0x0204
    29c2:	90 91 05 02 	lds	r25, 0x0205
    29c6:	a0 91 06 02 	lds	r26, 0x0206
    29ca:	b0 91 07 02 	lds	r27, 0x0207
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	a1 1d       	adc	r26, r1
    29d2:	b1 1d       	adc	r27, r1
    29d4:	80 93 00 02 	sts	0x0200, r24
    29d8:	90 93 01 02 	sts	0x0201, r25
    29dc:	a0 93 02 02 	sts	0x0202, r26
    29e0:	b0 93 03 02 	sts	0x0203, r27
	 		return distance_calibration;
    29e4:	80 91 00 02 	lds	r24, 0x0200
    29e8:	90 91 01 02 	lds	r25, 0x0201
    29ec:	a0 91 02 02 	lds	r26, 0x0202
    29f0:	b0 91 03 02 	lds	r27, 0x0203
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	0a c0       	rjmp	.+20     	; 0x2a0e <Ultrasonic_readDistance+0x146>
	 	}

	 	else{
	 	return distance;}
    29fa:	80 91 04 02 	lds	r24, 0x0204
    29fe:	90 91 05 02 	lds	r25, 0x0205
    2a02:	a0 91 06 02 	lds	r26, 0x0206
    2a06:	b0 91 07 02 	lds	r27, 0x0207
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02

	 	return 1;



}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the DIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	2e 97       	sbiw	r28, 0x0e	; 14
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	DIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	63 e0       	ldi	r22, 0x03	; 3
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	62 e0       	ldi	r22, 0x02	; 2
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	a0 ea       	ldi	r26, 0xA0	; 160
    2a4a:	b1 e4       	ldi	r27, 0x41	; 65
    2a4c:	8b 87       	std	Y+11, r24	; 0x0b
    2a4e:	9c 87       	std	Y+12, r25	; 0x0c
    2a50:	ad 87       	std	Y+13, r26	; 0x0d
    2a52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a e7       	ldi	r20, 0x7A	; 122
    2a62:	55 e4       	ldi	r21, 0x45	; 69
    2a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	8f 83       	std	Y+7, r24	; 0x07
    2a6e:	98 87       	std	Y+8, r25	; 0x08
    2a70:	a9 87       	std	Y+9, r26	; 0x09
    2a72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a74:	6f 81       	ldd	r22, Y+7	; 0x07
    2a76:	78 85       	ldd	r23, Y+8	; 0x08
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <LCD_init+0x7a>
		__ticks = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2a96:	6f 81       	ldd	r22, Y+7	; 0x07
    2a98:	78 85       	ldd	r23, Y+8	; 0x08
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	4f e7       	ldi	r20, 0x7F	; 127
    2aa4:	57 e4       	ldi	r21, 0x47	; 71
    2aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aaa:	18 16       	cp	r1, r24
    2aac:	4c f5       	brge	.+82     	; 0x2b00 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <LCD_init+0xda>
    2ad8:	80 e9       	ldi	r24, 0x90	; 144
    2ada:	91 e0       	ldi	r25, 0x01	; 1
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_init+0xc8>
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	9e 83       	std	Y+6, r25	; 0x06
    2af4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
    2af8:	9e 81       	ldd	r25, Y+6	; 0x06
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f7       	brne	.-38     	; 0x2ad8 <LCD_init+0xbc>
    2afe:	14 c0       	rjmp	.+40     	; 0x2b28 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	6f 81       	ldd	r22, Y+7	; 0x07
    2b02:	78 85       	ldd	r23, Y+8	; 0x08
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <LCD_init+0x104>
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	60 e0       	ldi	r22, 0x00	; 0
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	61 e0       	ldi	r22, 0x01	; 1
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	62 e0       	ldi	r22, 0x02	; 2
    2b40:	41 e0       	ldi	r20, 0x01	; 1
    2b42:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	64 e0       	ldi	r22, 0x04	; 4
    2b4a:	41 e0       	ldi	r20, 0x01	; 1
    2b4c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2b50:	83 e3       	ldi	r24, 0x33	; 51
    2b52:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2b56:	82 e3       	ldi	r24, 0x32	; 50
    2b58:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2b5c:	88 e2       	ldi	r24, 0x28	; 40
    2b5e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2b62:	8c e0       	ldi	r24, 0x0C	; 12
    2b64:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_sendCommand>
}
    2b6e:	2e 96       	adiw	r28, 0x0e	; 14
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2b80:	0f 93       	push	r16
    2b82:	1f 93       	push	r17
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	c3 56       	subi	r28, 0x63	; 99
    2b8e:	d0 40       	sbci	r29, 0x00	; 0
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ed 59       	subi	r30, 0x9D	; 157
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	63 e0       	ldi	r22, 0x03	; 3
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    2bac:	fe 01       	movw	r30, r28
    2bae:	e1 5a       	subi	r30, 0xA1	; 161
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 e8       	ldi	r26, 0x80	; 128
    2bb8:	bf e3       	ldi	r27, 0x3F	; 63
    2bba:	80 83       	st	Z, r24
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	a2 83       	std	Z+2, r26	; 0x02
    2bc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	8e 01       	movw	r16, r28
    2bc4:	05 5a       	subi	r16, 0xA5	; 165
    2bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e1 5a       	subi	r30, 0xA1	; 161
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	4a e7       	ldi	r20, 0x7A	; 122
    2bdc:	55 e4       	ldi	r21, 0x45	; 69
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	f8 01       	movw	r30, r16
    2be8:	80 83       	st	Z, r24
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	a2 83       	std	Z+2, r26	; 0x02
    2bee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e5 5a       	subi	r30, 0xA5	; 165
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	44 f4       	brge	.+16     	; 0x2c1e <LCD_sendCommand+0x9e>
		__ticks = 1;
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e7 5a       	subi	r30, 0xA7	; 167
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
    2c1c:	64 c0       	rjmp	.+200    	; 0x2ce6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e5 5a       	subi	r30, 0xA5	; 165
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	0c f0       	brlt	.+2      	; 0x2c3e <LCD_sendCommand+0xbe>
    2c3c:	43 c0       	rjmp	.+134    	; 0x2cc4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e1 5a       	subi	r30, 0xA1	; 161
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e2       	ldi	r20, 0x20	; 32
    2c52:	51 e4       	ldi	r21, 0x41	; 65
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8e 01       	movw	r16, r28
    2c5e:	07 5a       	subi	r16, 0xA7	; 167
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	f8 01       	movw	r30, r16
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	1f c0       	rjmp	.+62     	; 0x2cb4 <LCD_sendCommand+0x134>
    2c76:	fe 01       	movw	r30, r28
    2c78:	e9 5a       	subi	r30, 0xA9	; 169
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 e9       	ldi	r24, 0x90	; 144
    2c7e:	91 e0       	ldi	r25, 0x01	; 1
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
    2c84:	fe 01       	movw	r30, r28
    2c86:	e9 5a       	subi	r30, 0xA9	; 169
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_sendCommand+0x10e>
    2c92:	fe 01       	movw	r30, r28
    2c94:	e9 5a       	subi	r30, 0xA9	; 169
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9c:	de 01       	movw	r26, r28
    2c9e:	a7 5a       	subi	r26, 0xA7	; 167
    2ca0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e7 5a       	subi	r30, 0xA7	; 167
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	80 81       	ld	r24, Z
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	11 96       	adiw	r26, 0x01	; 1
    2cb0:	9c 93       	st	X, r25
    2cb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	e7 5a       	subi	r30, 0xA7	; 167
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	91 81       	ldd	r25, Z+1	; 0x01
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	d1 f6       	brne	.-76     	; 0x2c76 <LCD_sendCommand+0xf6>
    2cc2:	27 c0       	rjmp	.+78     	; 0x2d12 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc4:	8e 01       	movw	r16, r28
    2cc6:	07 5a       	subi	r16, 0xA7	; 167
    2cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e5 5a       	subi	r30, 0xA5	; 165
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	de 01       	movw	r26, r28
    2ce8:	ab 5a       	subi	r26, 0xAB	; 171
    2cea:	bf 4f       	sbci	r27, 0xFF	; 255
    2cec:	fe 01       	movw	r30, r28
    2cee:	e7 5a       	subi	r30, 0xA7	; 167
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	8d 93       	st	X+, r24
    2cf8:	9c 93       	st	X, r25
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	eb 5a       	subi	r30, 0xAB	; 171
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_sendCommand+0x184>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	eb 5a       	subi	r30, 0xAB	; 171
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	62 e0       	ldi	r22, 0x02	; 2
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ef 5a       	subi	r30, 0xAF	; 175
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	a0 e8       	ldi	r26, 0x80	; 128
    2d28:	bf e3       	ldi	r27, 0x3F	; 63
    2d2a:	80 83       	st	Z, r24
    2d2c:	91 83       	std	Z+1, r25	; 0x01
    2d2e:	a2 83       	std	Z+2, r26	; 0x02
    2d30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d32:	8e 01       	movw	r16, r28
    2d34:	03 5b       	subi	r16, 0xB3	; 179
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ef 5a       	subi	r30, 0xAF	; 175
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a e7       	ldi	r20, 0x7A	; 122
    2d4c:	55 e4       	ldi	r21, 0x45	; 69
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	80 83       	st	Z, r24
    2d5a:	91 83       	std	Z+1, r25	; 0x01
    2d5c:	a2 83       	std	Z+2, r26	; 0x02
    2d5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d60:	fe 01       	movw	r30, r28
    2d62:	e3 5b       	subi	r30, 0xB3	; 179
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	44 f4       	brge	.+16     	; 0x2d8e <LCD_sendCommand+0x20e>
		__ticks = 1;
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e5 5b       	subi	r30, 0xB5	; 181
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	91 83       	std	Z+1, r25	; 0x01
    2d8a:	80 83       	st	Z, r24
    2d8c:	64 c0       	rjmp	.+200    	; 0x2e56 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e3 5b       	subi	r30, 0xB3	; 179
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	3f ef       	ldi	r19, 0xFF	; 255
    2da0:	4f e7       	ldi	r20, 0x7F	; 127
    2da2:	57 e4       	ldi	r21, 0x47	; 71
    2da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da8:	18 16       	cp	r1, r24
    2daa:	0c f0       	brlt	.+2      	; 0x2dae <LCD_sendCommand+0x22e>
    2dac:	43 c0       	rjmp	.+134    	; 0x2e34 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dae:	fe 01       	movw	r30, r28
    2db0:	ef 5a       	subi	r30, 0xAF	; 175
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	8e 01       	movw	r16, r28
    2dce:	05 5b       	subi	r16, 0xB5	; 181
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	bc 01       	movw	r22, r24
    2dd4:	cd 01       	movw	r24, r26
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	f8 01       	movw	r30, r16
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
    2de4:	1f c0       	rjmp	.+62     	; 0x2e24 <LCD_sendCommand+0x2a4>
    2de6:	fe 01       	movw	r30, r28
    2de8:	e7 5b       	subi	r30, 0xB7	; 183
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 e9       	ldi	r24, 0x90	; 144
    2dee:	91 e0       	ldi	r25, 0x01	; 1
    2df0:	91 83       	std	Z+1, r25	; 0x01
    2df2:	80 83       	st	Z, r24
    2df4:	fe 01       	movw	r30, r28
    2df6:	e7 5b       	subi	r30, 0xB7	; 183
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_sendCommand+0x27e>
    2e02:	fe 01       	movw	r30, r28
    2e04:	e7 5b       	subi	r30, 0xB7	; 183
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	de 01       	movw	r26, r28
    2e0e:	a5 5b       	subi	r26, 0xB5	; 181
    2e10:	bf 4f       	sbci	r27, 0xFF	; 255
    2e12:	fe 01       	movw	r30, r28
    2e14:	e5 5b       	subi	r30, 0xB5	; 181
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	11 96       	adiw	r26, 0x01	; 1
    2e20:	9c 93       	st	X, r25
    2e22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e24:	fe 01       	movw	r30, r28
    2e26:	e5 5b       	subi	r30, 0xB5	; 181
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	d1 f6       	brne	.-76     	; 0x2de6 <LCD_sendCommand+0x266>
    2e32:	27 c0       	rjmp	.+78     	; 0x2e82 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e34:	8e 01       	movw	r16, r28
    2e36:	05 5b       	subi	r16, 0xB5	; 181
    2e38:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	e3 5b       	subi	r30, 0xB3	; 179
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	60 81       	ld	r22, Z
    2e42:	71 81       	ldd	r23, Z+1	; 0x01
    2e44:	82 81       	ldd	r24, Z+2	; 0x02
    2e46:	93 81       	ldd	r25, Z+3	; 0x03
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	f8 01       	movw	r30, r16
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	80 83       	st	Z, r24
    2e56:	de 01       	movw	r26, r28
    2e58:	a9 5b       	subi	r26, 0xB9	; 185
    2e5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e5 5b       	subi	r30, 0xB5	; 181
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	8d 93       	st	X+, r24
    2e68:	9c 93       	st	X, r25
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e9 5b       	subi	r30, 0xB9	; 185
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	f1 f7       	brne	.-4      	; 0x2e74 <LCD_sendCommand+0x2f4>
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e9 5b       	subi	r30, 0xB9	; 185
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2e82:	fe 01       	movw	r30, r28
    2e84:	ed 59       	subi	r30, 0x9D	; 157
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 81       	ld	r24, Z
    2e8a:	88 2f       	mov	r24, r24
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	80 71       	andi	r24, 0x10	; 16
    2e90:	90 70       	andi	r25, 0x00	; 0
    2e92:	95 95       	asr	r25
    2e94:	87 95       	ror	r24
    2e96:	95 95       	asr	r25
    2e98:	87 95       	ror	r24
    2e9a:	95 95       	asr	r25
    2e9c:	87 95       	ror	r24
    2e9e:	95 95       	asr	r25
    2ea0:	87 95       	ror	r24
    2ea2:	98 2f       	mov	r25, r24
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	49 2f       	mov	r20, r25
    2eaa:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2eae:	fe 01       	movw	r30, r28
    2eb0:	ed 59       	subi	r30, 0x9D	; 157
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	80 72       	andi	r24, 0x20	; 32
    2ebc:	90 70       	andi	r25, 0x00	; 0
    2ebe:	95 95       	asr	r25
    2ec0:	87 95       	ror	r24
    2ec2:	95 95       	asr	r25
    2ec4:	87 95       	ror	r24
    2ec6:	95 95       	asr	r25
    2ec8:	87 95       	ror	r24
    2eca:	95 95       	asr	r25
    2ecc:	87 95       	ror	r24
    2ece:	95 95       	asr	r25
    2ed0:	87 95       	ror	r24
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	61 e0       	ldi	r22, 0x01	; 1
    2ed8:	49 2f       	mov	r20, r25
    2eda:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ed 59       	subi	r30, 0x9D	; 157
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	80 74       	andi	r24, 0x40	; 64
    2eec:	90 70       	andi	r25, 0x00	; 0
    2eee:	08 2e       	mov	r0, r24
    2ef0:	89 2f       	mov	r24, r25
    2ef2:	00 0c       	add	r0, r0
    2ef4:	88 1f       	adc	r24, r24
    2ef6:	99 0b       	sbc	r25, r25
    2ef8:	00 0c       	add	r0, r0
    2efa:	88 1f       	adc	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	98 2f       	mov	r25, r24
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	62 e0       	ldi	r22, 0x02	; 2
    2f04:	49 2f       	mov	r20, r25
    2f06:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	ed 59       	subi	r30, 0x9D	; 157
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	80 81       	ld	r24, Z
    2f12:	98 2f       	mov	r25, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	99 27       	eor	r25, r25
    2f18:	99 1f       	adc	r25, r25
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	64 e0       	ldi	r22, 0x04	; 4
    2f1e:	49 2f       	mov	r20, r25
    2f20:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    2f24:	fe 01       	movw	r30, r28
    2f26:	ed 5b       	subi	r30, 0xBD	; 189
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a0 e8       	ldi	r26, 0x80	; 128
    2f30:	bf e3       	ldi	r27, 0x3F	; 63
    2f32:	80 83       	st	Z, r24
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	a2 83       	std	Z+2, r26	; 0x02
    2f38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3a:	8e 01       	movw	r16, r28
    2f3c:	01 5c       	subi	r16, 0xC1	; 193
    2f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f40:	fe 01       	movw	r30, r28
    2f42:	ed 5b       	subi	r30, 0xBD	; 189
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	4a e7       	ldi	r20, 0x7A	; 122
    2f54:	55 e4       	ldi	r21, 0x45	; 69
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 83       	st	Z, r24
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	a2 83       	std	Z+2, r26	; 0x02
    2f66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ff 96       	adiw	r30, 0x3f	; 63
    2f6c:	60 81       	ld	r22, Z
    2f6e:	71 81       	ldd	r23, Z+1	; 0x01
    2f70:	82 81       	ldd	r24, Z+2	; 0x02
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	40 e8       	ldi	r20, 0x80	; 128
    2f7a:	5f e3       	ldi	r21, 0x3F	; 63
    2f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f80:	88 23       	and	r24, r24
    2f82:	2c f4       	brge	.+10     	; 0x2f8e <LCD_sendCommand+0x40e>
		__ticks = 1;
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	9e af       	std	Y+62, r25	; 0x3e
    2f8a:	8d af       	std	Y+61, r24	; 0x3d
    2f8c:	46 c0       	rjmp	.+140    	; 0x301a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2f8e:	fe 01       	movw	r30, r28
    2f90:	ff 96       	adiw	r30, 0x3f	; 63
    2f92:	60 81       	ld	r22, Z
    2f94:	71 81       	ldd	r23, Z+1	; 0x01
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	93 81       	ldd	r25, Z+3	; 0x03
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f e7       	ldi	r20, 0x7F	; 127
    2fa0:	57 e4       	ldi	r21, 0x47	; 71
    2fa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa6:	18 16       	cp	r1, r24
    2fa8:	64 f5       	brge	.+88     	; 0x3002 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2faa:	fe 01       	movw	r30, r28
    2fac:	ed 5b       	subi	r30, 0xBD	; 189
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	60 81       	ld	r22, Z
    2fb2:	71 81       	ldd	r23, Z+1	; 0x01
    2fb4:	82 81       	ldd	r24, Z+2	; 0x02
    2fb6:	93 81       	ldd	r25, Z+3	; 0x03
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9e af       	std	Y+62, r25	; 0x3e
    2fd6:	8d af       	std	Y+61, r24	; 0x3d
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <LCD_sendCommand+0x478>
    2fda:	80 e9       	ldi	r24, 0x90	; 144
    2fdc:	91 e0       	ldi	r25, 0x01	; 1
    2fde:	9c af       	std	Y+60, r25	; 0x3c
    2fe0:	8b af       	std	Y+59, r24	; 0x3b
    2fe2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fe4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_sendCommand+0x466>
    2fea:	9c af       	std	Y+60, r25	; 0x3c
    2fec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9e af       	std	Y+62, r25	; 0x3e
    2ff6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ffa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <LCD_sendCommand+0x45a>
    3000:	16 c0       	rjmp	.+44     	; 0x302e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	fe 01       	movw	r30, r28
    3004:	ff 96       	adiw	r30, 0x3f	; 63
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9e af       	std	Y+62, r25	; 0x3e
    3018:	8d af       	std	Y+61, r24	; 0x3d
    301a:	8d ad       	ldd	r24, Y+61	; 0x3d
    301c:	9e ad       	ldd	r25, Y+62	; 0x3e
    301e:	9a af       	std	Y+58, r25	; 0x3a
    3020:	89 af       	std	Y+57, r24	; 0x39
    3022:	89 ad       	ldd	r24, Y+57	; 0x39
    3024:	9a ad       	ldd	r25, Y+58	; 0x3a
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <LCD_sendCommand+0x4a6>
    302a:	9a af       	std	Y+58, r25	; 0x3a
    302c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	62 e0       	ldi	r22, 0x02	; 2
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e8       	ldi	r26, 0x80	; 128
    303e:	bf e3       	ldi	r27, 0x3F	; 63
    3040:	8d ab       	std	Y+53, r24	; 0x35
    3042:	9e ab       	std	Y+54, r25	; 0x36
    3044:	af ab       	std	Y+55, r26	; 0x37
    3046:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6d a9       	ldd	r22, Y+53	; 0x35
    304a:	7e a9       	ldd	r23, Y+54	; 0x36
    304c:	8f a9       	ldd	r24, Y+55	; 0x37
    304e:	98 ad       	ldd	r25, Y+56	; 0x38
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a e7       	ldi	r20, 0x7A	; 122
    3056:	55 e4       	ldi	r21, 0x45	; 69
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	89 ab       	std	Y+49, r24	; 0x31
    3062:	9a ab       	std	Y+50, r25	; 0x32
    3064:	ab ab       	std	Y+51, r26	; 0x33
    3066:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3068:	69 a9       	ldd	r22, Y+49	; 0x31
    306a:	7a a9       	ldd	r23, Y+50	; 0x32
    306c:	8b a9       	ldd	r24, Y+51	; 0x33
    306e:	9c a9       	ldd	r25, Y+52	; 0x34
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_sendCommand+0x50a>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	98 ab       	std	Y+48, r25	; 0x30
    3086:	8f a7       	std	Y+47, r24	; 0x2f
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    308a:	69 a9       	ldd	r22, Y+49	; 0x31
    308c:	7a a9       	ldd	r23, Y+50	; 0x32
    308e:	8b a9       	ldd	r24, Y+51	; 0x33
    3090:	9c a9       	ldd	r25, Y+52	; 0x34
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6d a9       	ldd	r22, Y+53	; 0x35
    30a4:	7e a9       	ldd	r23, Y+54	; 0x36
    30a6:	8f a9       	ldd	r24, Y+55	; 0x37
    30a8:	98 ad       	ldd	r25, Y+56	; 0x38
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	98 ab       	std	Y+48, r25	; 0x30
    30c8:	8f a7       	std	Y+47, r24	; 0x2f
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_sendCommand+0x56a>
    30cc:	80 e9       	ldi	r24, 0x90	; 144
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	9e a7       	std	Y+46, r25	; 0x2e
    30d2:	8d a7       	std	Y+45, r24	; 0x2d
    30d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_sendCommand+0x558>
    30dc:	9e a7       	std	Y+46, r25	; 0x2e
    30de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e2:	98 a9       	ldd	r25, Y+48	; 0x30
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	98 ab       	std	Y+48, r25	; 0x30
    30e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ec:	98 a9       	ldd	r25, Y+48	; 0x30
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_sendCommand+0x54c>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	69 a9       	ldd	r22, Y+49	; 0x31
    30f6:	7a a9       	ldd	r23, Y+50	; 0x32
    30f8:	8b a9       	ldd	r24, Y+51	; 0x33
    30fa:	9c a9       	ldd	r25, Y+52	; 0x34
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	98 ab       	std	Y+48, r25	; 0x30
    3106:	8f a7       	std	Y+47, r24	; 0x2f
    3108:	8f a5       	ldd	r24, Y+47	; 0x2f
    310a:	98 a9       	ldd	r25, Y+48	; 0x30
    310c:	9c a7       	std	Y+44, r25	; 0x2c
    310e:	8b a7       	std	Y+43, r24	; 0x2b
    3110:	8b a5       	ldd	r24, Y+43	; 0x2b
    3112:	9c a5       	ldd	r25, Y+44	; 0x2c
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_sendCommand+0x594>
    3118:	9c a7       	std	Y+44, r25	; 0x2c
    311a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	62 e0       	ldi	r22, 0x02	; 2
    3120:	41 e0       	ldi	r20, 0x01	; 1
    3122:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a0 e8       	ldi	r26, 0x80	; 128
    312c:	bf e3       	ldi	r27, 0x3F	; 63
    312e:	8f a3       	std	Y+39, r24	; 0x27
    3130:	98 a7       	std	Y+40, r25	; 0x28
    3132:	a9 a7       	std	Y+41, r26	; 0x29
    3134:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3136:	6f a1       	ldd	r22, Y+39	; 0x27
    3138:	78 a5       	ldd	r23, Y+40	; 0x28
    313a:	89 a5       	ldd	r24, Y+41	; 0x29
    313c:	9a a5       	ldd	r25, Y+42	; 0x2a
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	4a e7       	ldi	r20, 0x7A	; 122
    3144:	55 e4       	ldi	r21, 0x45	; 69
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	8b a3       	std	Y+35, r24	; 0x23
    3150:	9c a3       	std	Y+36, r25	; 0x24
    3152:	ad a3       	std	Y+37, r26	; 0x25
    3154:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3156:	6b a1       	ldd	r22, Y+35	; 0x23
    3158:	7c a1       	ldd	r23, Y+36	; 0x24
    315a:	8d a1       	ldd	r24, Y+37	; 0x25
    315c:	9e a1       	ldd	r25, Y+38	; 0x26
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	2c f4       	brge	.+10     	; 0x3178 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9a a3       	std	Y+34, r25	; 0x22
    3174:	89 a3       	std	Y+33, r24	; 0x21
    3176:	3f c0       	rjmp	.+126    	; 0x31f6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3178:	6b a1       	ldd	r22, Y+35	; 0x23
    317a:	7c a1       	ldd	r23, Y+36	; 0x24
    317c:	8d a1       	ldd	r24, Y+37	; 0x25
    317e:	9e a1       	ldd	r25, Y+38	; 0x26
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	3f ef       	ldi	r19, 0xFF	; 255
    3184:	4f e7       	ldi	r20, 0x7F	; 127
    3186:	57 e4       	ldi	r21, 0x47	; 71
    3188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318c:	18 16       	cp	r1, r24
    318e:	4c f5       	brge	.+82     	; 0x31e2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3190:	6f a1       	ldd	r22, Y+39	; 0x27
    3192:	78 a5       	ldd	r23, Y+40	; 0x28
    3194:	89 a5       	ldd	r24, Y+41	; 0x29
    3196:	9a a5       	ldd	r25, Y+42	; 0x2a
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e2       	ldi	r20, 0x20	; 32
    319e:	51 e4       	ldi	r21, 0x41	; 65
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9a a3       	std	Y+34, r25	; 0x22
    31b6:	89 a3       	std	Y+33, r24	; 0x21
    31b8:	0f c0       	rjmp	.+30     	; 0x31d8 <LCD_sendCommand+0x658>
    31ba:	80 e9       	ldi	r24, 0x90	; 144
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	98 a3       	std	Y+32, r25	; 0x20
    31c0:	8f 8f       	std	Y+31, r24	; 0x1f
    31c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31c4:	98 a1       	ldd	r25, Y+32	; 0x20
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <LCD_sendCommand+0x646>
    31ca:	98 a3       	std	Y+32, r25	; 0x20
    31cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ce:	89 a1       	ldd	r24, Y+33	; 0x21
    31d0:	9a a1       	ldd	r25, Y+34	; 0x22
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	9a a3       	std	Y+34, r25	; 0x22
    31d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d8:	89 a1       	ldd	r24, Y+33	; 0x21
    31da:	9a a1       	ldd	r25, Y+34	; 0x22
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	69 f7       	brne	.-38     	; 0x31ba <LCD_sendCommand+0x63a>
    31e0:	14 c0       	rjmp	.+40     	; 0x320a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e2:	6b a1       	ldd	r22, Y+35	; 0x23
    31e4:	7c a1       	ldd	r23, Y+36	; 0x24
    31e6:	8d a1       	ldd	r24, Y+37	; 0x25
    31e8:	9e a1       	ldd	r25, Y+38	; 0x26
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	9a a3       	std	Y+34, r25	; 0x22
    31f4:	89 a3       	std	Y+33, r24	; 0x21
    31f6:	89 a1       	ldd	r24, Y+33	; 0x21
    31f8:	9a a1       	ldd	r25, Y+34	; 0x22
    31fa:	9e 8f       	std	Y+30, r25	; 0x1e
    31fc:	8d 8f       	std	Y+29, r24	; 0x1d
    31fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <LCD_sendCommand+0x682>
    3206:	9e 8f       	std	Y+30, r25	; 0x1e
    3208:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    320a:	fe 01       	movw	r30, r28
    320c:	ed 59       	subi	r30, 0x9D	; 157
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 81       	ld	r24, Z
    3212:	98 2f       	mov	r25, r24
    3214:	91 70       	andi	r25, 0x01	; 1
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	49 2f       	mov	r20, r25
    321c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    3220:	fe 01       	movw	r30, r28
    3222:	ed 59       	subi	r30, 0x9D	; 157
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 81       	ld	r24, Z
    3228:	88 2f       	mov	r24, r24
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	82 70       	andi	r24, 0x02	; 2
    322e:	90 70       	andi	r25, 0x00	; 0
    3230:	95 95       	asr	r25
    3232:	87 95       	ror	r24
    3234:	98 2f       	mov	r25, r24
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	61 e0       	ldi	r22, 0x01	; 1
    323a:	49 2f       	mov	r20, r25
    323c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    3240:	fe 01       	movw	r30, r28
    3242:	ed 59       	subi	r30, 0x9D	; 157
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	88 2f       	mov	r24, r24
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	84 70       	andi	r24, 0x04	; 4
    324e:	90 70       	andi	r25, 0x00	; 0
    3250:	95 95       	asr	r25
    3252:	87 95       	ror	r24
    3254:	95 95       	asr	r25
    3256:	87 95       	ror	r24
    3258:	98 2f       	mov	r25, r24
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	62 e0       	ldi	r22, 0x02	; 2
    325e:	49 2f       	mov	r20, r25
    3260:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    3264:	fe 01       	movw	r30, r28
    3266:	ed 59       	subi	r30, 0x9D	; 157
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	88 70       	andi	r24, 0x08	; 8
    3272:	90 70       	andi	r25, 0x00	; 0
    3274:	95 95       	asr	r25
    3276:	87 95       	ror	r24
    3278:	95 95       	asr	r25
    327a:	87 95       	ror	r24
    327c:	95 95       	asr	r25
    327e:	87 95       	ror	r24
    3280:	98 2f       	mov	r25, r24
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	64 e0       	ldi	r22, 0x04	; 4
    3286:	49 2f       	mov	r20, r25
    3288:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	a0 e8       	ldi	r26, 0x80	; 128
    3292:	bf e3       	ldi	r27, 0x3F	; 63
    3294:	89 8f       	std	Y+25, r24	; 0x19
    3296:	9a 8f       	std	Y+26, r25	; 0x1a
    3298:	ab 8f       	std	Y+27, r26	; 0x1b
    329a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329c:	69 8d       	ldd	r22, Y+25	; 0x19
    329e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	4a e7       	ldi	r20, 0x7A	; 122
    32aa:	55 e4       	ldi	r21, 0x45	; 69
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	8d 8b       	std	Y+21, r24	; 0x15
    32b6:	9e 8b       	std	Y+22, r25	; 0x16
    32b8:	af 8b       	std	Y+23, r26	; 0x17
    32ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32bc:	6d 89       	ldd	r22, Y+21	; 0x15
    32be:	7e 89       	ldd	r23, Y+22	; 0x16
    32c0:	8f 89       	ldd	r24, Y+23	; 0x17
    32c2:	98 8d       	ldd	r25, Y+24	; 0x18
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e8       	ldi	r20, 0x80	; 128
    32ca:	5f e3       	ldi	r21, 0x3F	; 63
    32cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d0:	88 23       	and	r24, r24
    32d2:	2c f4       	brge	.+10     	; 0x32de <LCD_sendCommand+0x75e>
		__ticks = 1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	9c 8b       	std	Y+20, r25	; 0x14
    32da:	8b 8b       	std	Y+19, r24	; 0x13
    32dc:	3f c0       	rjmp	.+126    	; 0x335c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    32de:	6d 89       	ldd	r22, Y+21	; 0x15
    32e0:	7e 89       	ldd	r23, Y+22	; 0x16
    32e2:	8f 89       	ldd	r24, Y+23	; 0x17
    32e4:	98 8d       	ldd	r25, Y+24	; 0x18
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	3f ef       	ldi	r19, 0xFF	; 255
    32ea:	4f e7       	ldi	r20, 0x7F	; 127
    32ec:	57 e4       	ldi	r21, 0x47	; 71
    32ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f2:	18 16       	cp	r1, r24
    32f4:	4c f5       	brge	.+82     	; 0x3348 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f6:	69 8d       	ldd	r22, Y+25	; 0x19
    32f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e2       	ldi	r20, 0x20	; 32
    3304:	51 e4       	ldi	r21, 0x41	; 65
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	9c 8b       	std	Y+20, r25	; 0x14
    331c:	8b 8b       	std	Y+19, r24	; 0x13
    331e:	0f c0       	rjmp	.+30     	; 0x333e <LCD_sendCommand+0x7be>
    3320:	80 e9       	ldi	r24, 0x90	; 144
    3322:	91 e0       	ldi	r25, 0x01	; 1
    3324:	9a 8b       	std	Y+18, r25	; 0x12
    3326:	89 8b       	std	Y+17, r24	; 0x11
    3328:	89 89       	ldd	r24, Y+17	; 0x11
    332a:	9a 89       	ldd	r25, Y+18	; 0x12
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <LCD_sendCommand+0x7ac>
    3330:	9a 8b       	std	Y+18, r25	; 0x12
    3332:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3334:	8b 89       	ldd	r24, Y+19	; 0x13
    3336:	9c 89       	ldd	r25, Y+20	; 0x14
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	9c 8b       	std	Y+20, r25	; 0x14
    333c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333e:	8b 89       	ldd	r24, Y+19	; 0x13
    3340:	9c 89       	ldd	r25, Y+20	; 0x14
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	69 f7       	brne	.-38     	; 0x3320 <LCD_sendCommand+0x7a0>
    3346:	14 c0       	rjmp	.+40     	; 0x3370 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3348:	6d 89       	ldd	r22, Y+21	; 0x15
    334a:	7e 89       	ldd	r23, Y+22	; 0x16
    334c:	8f 89       	ldd	r24, Y+23	; 0x17
    334e:	98 8d       	ldd	r25, Y+24	; 0x18
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	9c 8b       	std	Y+20, r25	; 0x14
    335a:	8b 8b       	std	Y+19, r24	; 0x13
    335c:	8b 89       	ldd	r24, Y+19	; 0x13
    335e:	9c 89       	ldd	r25, Y+20	; 0x14
    3360:	98 8b       	std	Y+16, r25	; 0x10
    3362:	8f 87       	std	Y+15, r24	; 0x0f
    3364:	8f 85       	ldd	r24, Y+15	; 0x0f
    3366:	98 89       	ldd	r25, Y+16	; 0x10
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <LCD_sendCommand+0x7e8>
    336c:	98 8b       	std	Y+16, r25	; 0x10
    336e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	62 e0       	ldi	r22, 0x02	; 2
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	a0 e8       	ldi	r26, 0x80	; 128
    3380:	bf e3       	ldi	r27, 0x3F	; 63
    3382:	8b 87       	std	Y+11, r24	; 0x0b
    3384:	9c 87       	std	Y+12, r25	; 0x0c
    3386:	ad 87       	std	Y+13, r26	; 0x0d
    3388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338a:	6b 85       	ldd	r22, Y+11	; 0x0b
    338c:	7c 85       	ldd	r23, Y+12	; 0x0c
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4a e7       	ldi	r20, 0x7A	; 122
    3398:	55 e4       	ldi	r21, 0x45	; 69
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	8f 83       	std	Y+7, r24	; 0x07
    33a4:	98 87       	std	Y+8, r25	; 0x08
    33a6:	a9 87       	std	Y+9, r26	; 0x09
    33a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	2c f4       	brge	.+10     	; 0x33cc <LCD_sendCommand+0x84c>
		__ticks = 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	9e 83       	std	Y+6, r25	; 0x06
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	3f c0       	rjmp	.+126    	; 0x344a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    33cc:	6f 81       	ldd	r22, Y+7	; 0x07
    33ce:	78 85       	ldd	r23, Y+8	; 0x08
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	3f ef       	ldi	r19, 0xFF	; 255
    33d8:	4f e7       	ldi	r20, 0x7F	; 127
    33da:	57 e4       	ldi	r21, 0x47	; 71
    33dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e0:	18 16       	cp	r1, r24
    33e2:	4c f5       	brge	.+82     	; 0x3436 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	51 e4       	ldi	r21, 0x41	; 65
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9e 83       	std	Y+6, r25	; 0x06
    340a:	8d 83       	std	Y+5, r24	; 0x05
    340c:	0f c0       	rjmp	.+30     	; 0x342c <LCD_sendCommand+0x8ac>
    340e:	80 e9       	ldi	r24, 0x90	; 144
    3410:	91 e0       	ldi	r25, 0x01	; 1
    3412:	9c 83       	std	Y+4, r25	; 0x04
    3414:	8b 83       	std	Y+3, r24	; 0x03
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <LCD_sendCommand+0x89a>
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	9e 81       	ldd	r25, Y+6	; 0x06
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	9e 83       	std	Y+6, r25	; 0x06
    342a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	69 f7       	brne	.-38     	; 0x340e <LCD_sendCommand+0x88e>
    3434:	14 c0       	rjmp	.+40     	; 0x345e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3436:	6f 81       	ldd	r22, Y+7	; 0x07
    3438:	78 85       	ldd	r23, Y+8	; 0x08
    343a:	89 85       	ldd	r24, Y+9	; 0x09
    343c:	9a 85       	ldd	r25, Y+10	; 0x0a
    343e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	9a 81       	ldd	r25, Y+2	; 0x02
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <LCD_sendCommand+0x8d6>
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    345e:	cd 59       	subi	r28, 0x9D	; 157
    3460:	df 4f       	sbci	r29, 0xFF	; 255
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	08 95       	ret

00003476 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3476:	0f 93       	push	r16
    3478:	1f 93       	push	r17
    347a:	df 93       	push	r29
    347c:	cf 93       	push	r28
    347e:	cd b7       	in	r28, 0x3d	; 61
    3480:	de b7       	in	r29, 0x3e	; 62
    3482:	c3 56       	subi	r28, 0x63	; 99
    3484:	d0 40       	sbci	r29, 0x00	; 0
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	fe 01       	movw	r30, r28
    3492:	ed 59       	subi	r30, 0x9D	; 157
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 83       	st	Z, r24
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	63 e0       	ldi	r22, 0x03	; 3
    349c:	41 e0       	ldi	r20, 0x01	; 1
    349e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    34a2:	fe 01       	movw	r30, r28
    34a4:	e1 5a       	subi	r30, 0xA1	; 161
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e8       	ldi	r26, 0x80	; 128
    34ae:	bf e3       	ldi	r27, 0x3F	; 63
    34b0:	80 83       	st	Z, r24
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	a2 83       	std	Z+2, r26	; 0x02
    34b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b8:	8e 01       	movw	r16, r28
    34ba:	05 5a       	subi	r16, 0xA5	; 165
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	fe 01       	movw	r30, r28
    34c0:	e1 5a       	subi	r30, 0xA1	; 161
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4a e7       	ldi	r20, 0x7A	; 122
    34d2:	55 e4       	ldi	r21, 0x45	; 69
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	f8 01       	movw	r30, r16
    34de:	80 83       	st	Z, r24
    34e0:	91 83       	std	Z+1, r25	; 0x01
    34e2:	a2 83       	std	Z+2, r26	; 0x02
    34e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e6:	fe 01       	movw	r30, r28
    34e8:	e5 5a       	subi	r30, 0xA5	; 165
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	5f e3       	ldi	r21, 0x3F	; 63
    34fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3500:	88 23       	and	r24, r24
    3502:	44 f4       	brge	.+16     	; 0x3514 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3504:	fe 01       	movw	r30, r28
    3506:	e7 5a       	subi	r30, 0xA7	; 167
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    3512:	64 c0       	rjmp	.+200    	; 0x35dc <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3514:	fe 01       	movw	r30, r28
    3516:	e5 5a       	subi	r30, 0xA5	; 165
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	3f ef       	ldi	r19, 0xFF	; 255
    3526:	4f e7       	ldi	r20, 0x7F	; 127
    3528:	57 e4       	ldi	r21, 0x47	; 71
    352a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352e:	18 16       	cp	r1, r24
    3530:	0c f0       	brlt	.+2      	; 0x3534 <LCD_displayCharacter+0xbe>
    3532:	43 c0       	rjmp	.+134    	; 0x35ba <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3534:	fe 01       	movw	r30, r28
    3536:	e1 5a       	subi	r30, 0xA1	; 161
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	60 81       	ld	r22, Z
    353c:	71 81       	ldd	r23, Z+1	; 0x01
    353e:	82 81       	ldd	r24, Z+2	; 0x02
    3540:	93 81       	ldd	r25, Z+3	; 0x03
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e2       	ldi	r20, 0x20	; 32
    3548:	51 e4       	ldi	r21, 0x41	; 65
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8e 01       	movw	r16, r28
    3554:	07 5a       	subi	r16, 0xA7	; 167
    3556:	1f 4f       	sbci	r17, 0xFF	; 255
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	f8 01       	movw	r30, r16
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
    356a:	1f c0       	rjmp	.+62     	; 0x35aa <LCD_displayCharacter+0x134>
    356c:	fe 01       	movw	r30, r28
    356e:	e9 5a       	subi	r30, 0xA9	; 169
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	80 e9       	ldi	r24, 0x90	; 144
    3574:	91 e0       	ldi	r25, 0x01	; 1
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	80 83       	st	Z, r24
    357a:	fe 01       	movw	r30, r28
    357c:	e9 5a       	subi	r30, 0xA9	; 169
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <LCD_displayCharacter+0x10e>
    3588:	fe 01       	movw	r30, r28
    358a:	e9 5a       	subi	r30, 0xA9	; 169
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3592:	de 01       	movw	r26, r28
    3594:	a7 5a       	subi	r26, 0xA7	; 167
    3596:	bf 4f       	sbci	r27, 0xFF	; 255
    3598:	fe 01       	movw	r30, r28
    359a:	e7 5a       	subi	r30, 0xA7	; 167
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	80 81       	ld	r24, Z
    35a0:	91 81       	ldd	r25, Z+1	; 0x01
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	11 96       	adiw	r26, 0x01	; 1
    35a6:	9c 93       	st	X, r25
    35a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35aa:	fe 01       	movw	r30, r28
    35ac:	e7 5a       	subi	r30, 0xA7	; 167
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 81       	ld	r24, Z
    35b2:	91 81       	ldd	r25, Z+1	; 0x01
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	d1 f6       	brne	.-76     	; 0x356c <LCD_displayCharacter+0xf6>
    35b8:	27 c0       	rjmp	.+78     	; 0x3608 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	8e 01       	movw	r16, r28
    35bc:	07 5a       	subi	r16, 0xA7	; 167
    35be:	1f 4f       	sbci	r17, 0xFF	; 255
    35c0:	fe 01       	movw	r30, r28
    35c2:	e5 5a       	subi	r30, 0xA5	; 165
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	60 81       	ld	r22, Z
    35c8:	71 81       	ldd	r23, Z+1	; 0x01
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	93 81       	ldd	r25, Z+3	; 0x03
    35ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	f8 01       	movw	r30, r16
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	80 83       	st	Z, r24
    35dc:	de 01       	movw	r26, r28
    35de:	ab 5a       	subi	r26, 0xAB	; 171
    35e0:	bf 4f       	sbci	r27, 0xFF	; 255
    35e2:	fe 01       	movw	r30, r28
    35e4:	e7 5a       	subi	r30, 0xA7	; 167
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	8d 93       	st	X+, r24
    35ee:	9c 93       	st	X, r25
    35f0:	fe 01       	movw	r30, r28
    35f2:	eb 5a       	subi	r30, 0xAB	; 171
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 81       	ld	r24, Z
    35f8:	91 81       	ldd	r25, Z+1	; 0x01
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	f1 f7       	brne	.-4      	; 0x35fa <LCD_displayCharacter+0x184>
    35fe:	fe 01       	movw	r30, r28
    3600:	eb 5a       	subi	r30, 0xAB	; 171
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	62 e0       	ldi	r22, 0x02	; 2
    360c:	41 e0       	ldi	r20, 0x01	; 1
    360e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3612:	fe 01       	movw	r30, r28
    3614:	ef 5a       	subi	r30, 0xAF	; 175
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a0 e8       	ldi	r26, 0x80	; 128
    361e:	bf e3       	ldi	r27, 0x3F	; 63
    3620:	80 83       	st	Z, r24
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	a2 83       	std	Z+2, r26	; 0x02
    3626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	8e 01       	movw	r16, r28
    362a:	03 5b       	subi	r16, 0xB3	; 179
    362c:	1f 4f       	sbci	r17, 0xFF	; 255
    362e:	fe 01       	movw	r30, r28
    3630:	ef 5a       	subi	r30, 0xAF	; 175
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	4a e7       	ldi	r20, 0x7A	; 122
    3642:	55 e4       	ldi	r21, 0x45	; 69
    3644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	f8 01       	movw	r30, r16
    364e:	80 83       	st	Z, r24
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	a2 83       	std	Z+2, r26	; 0x02
    3654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3656:	fe 01       	movw	r30, r28
    3658:	e3 5b       	subi	r30, 0xB3	; 179
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e8       	ldi	r20, 0x80	; 128
    366a:	5f e3       	ldi	r21, 0x3F	; 63
    366c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3670:	88 23       	and	r24, r24
    3672:	44 f4       	brge	.+16     	; 0x3684 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3674:	fe 01       	movw	r30, r28
    3676:	e5 5b       	subi	r30, 0xB5	; 181
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
    3682:	64 c0       	rjmp	.+200    	; 0x374c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3684:	fe 01       	movw	r30, r28
    3686:	e3 5b       	subi	r30, 0xB3	; 179
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	60 81       	ld	r22, Z
    368c:	71 81       	ldd	r23, Z+1	; 0x01
    368e:	82 81       	ldd	r24, Z+2	; 0x02
    3690:	93 81       	ldd	r25, Z+3	; 0x03
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	57 e4       	ldi	r21, 0x47	; 71
    369a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	0c f0       	brlt	.+2      	; 0x36a4 <LCD_displayCharacter+0x22e>
    36a2:	43 c0       	rjmp	.+134    	; 0x372a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a4:	fe 01       	movw	r30, r28
    36a6:	ef 5a       	subi	r30, 0xAF	; 175
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 e2       	ldi	r20, 0x20	; 32
    36b8:	51 e4       	ldi	r21, 0x41	; 65
    36ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	8e 01       	movw	r16, r28
    36c4:	05 5b       	subi	r16, 0xB5	; 181
    36c6:	1f 4f       	sbci	r17, 0xFF	; 255
    36c8:	bc 01       	movw	r22, r24
    36ca:	cd 01       	movw	r24, r26
    36cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	f8 01       	movw	r30, r16
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
    36da:	1f c0       	rjmp	.+62     	; 0x371a <LCD_displayCharacter+0x2a4>
    36dc:	fe 01       	movw	r30, r28
    36de:	e7 5b       	subi	r30, 0xB7	; 183
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 e9       	ldi	r24, 0x90	; 144
    36e4:	91 e0       	ldi	r25, 0x01	; 1
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
    36ea:	fe 01       	movw	r30, r28
    36ec:	e7 5b       	subi	r30, 0xB7	; 183
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	80 81       	ld	r24, Z
    36f2:	91 81       	ldd	r25, Z+1	; 0x01
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <LCD_displayCharacter+0x27e>
    36f8:	fe 01       	movw	r30, r28
    36fa:	e7 5b       	subi	r30, 0xB7	; 183
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3702:	de 01       	movw	r26, r28
    3704:	a5 5b       	subi	r26, 0xB5	; 181
    3706:	bf 4f       	sbci	r27, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	e5 5b       	subi	r30, 0xB5	; 181
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	11 96       	adiw	r26, 0x01	; 1
    3716:	9c 93       	st	X, r25
    3718:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371a:	fe 01       	movw	r30, r28
    371c:	e5 5b       	subi	r30, 0xB5	; 181
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	d1 f6       	brne	.-76     	; 0x36dc <LCD_displayCharacter+0x266>
    3728:	27 c0       	rjmp	.+78     	; 0x3778 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372a:	8e 01       	movw	r16, r28
    372c:	05 5b       	subi	r16, 0xB5	; 181
    372e:	1f 4f       	sbci	r17, 0xFF	; 255
    3730:	fe 01       	movw	r30, r28
    3732:	e3 5b       	subi	r30, 0xB3	; 179
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3742:	dc 01       	movw	r26, r24
    3744:	cb 01       	movw	r24, r22
    3746:	f8 01       	movw	r30, r16
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	80 83       	st	Z, r24
    374c:	de 01       	movw	r26, r28
    374e:	a9 5b       	subi	r26, 0xB9	; 185
    3750:	bf 4f       	sbci	r27, 0xFF	; 255
    3752:	fe 01       	movw	r30, r28
    3754:	e5 5b       	subi	r30, 0xB5	; 181
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	8d 93       	st	X+, r24
    375e:	9c 93       	st	X, r25
    3760:	fe 01       	movw	r30, r28
    3762:	e9 5b       	subi	r30, 0xB9	; 185
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	80 81       	ld	r24, Z
    3768:	91 81       	ldd	r25, Z+1	; 0x01
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <LCD_displayCharacter+0x2f4>
    376e:	fe 01       	movw	r30, r28
    3770:	e9 5b       	subi	r30, 0xB9	; 185
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	91 83       	std	Z+1, r25	; 0x01
    3776:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3778:	fe 01       	movw	r30, r28
    377a:	ed 59       	subi	r30, 0x9D	; 157
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	88 2f       	mov	r24, r24
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	80 71       	andi	r24, 0x10	; 16
    3786:	90 70       	andi	r25, 0x00	; 0
    3788:	95 95       	asr	r25
    378a:	87 95       	ror	r24
    378c:	95 95       	asr	r25
    378e:	87 95       	ror	r24
    3790:	95 95       	asr	r25
    3792:	87 95       	ror	r24
    3794:	95 95       	asr	r25
    3796:	87 95       	ror	r24
    3798:	98 2f       	mov	r25, r24
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	49 2f       	mov	r20, r25
    37a0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    37a4:	fe 01       	movw	r30, r28
    37a6:	ed 59       	subi	r30, 0x9D	; 157
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	80 81       	ld	r24, Z
    37ac:	88 2f       	mov	r24, r24
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	80 72       	andi	r24, 0x20	; 32
    37b2:	90 70       	andi	r25, 0x00	; 0
    37b4:	95 95       	asr	r25
    37b6:	87 95       	ror	r24
    37b8:	95 95       	asr	r25
    37ba:	87 95       	ror	r24
    37bc:	95 95       	asr	r25
    37be:	87 95       	ror	r24
    37c0:	95 95       	asr	r25
    37c2:	87 95       	ror	r24
    37c4:	95 95       	asr	r25
    37c6:	87 95       	ror	r24
    37c8:	98 2f       	mov	r25, r24
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	49 2f       	mov	r20, r25
    37d0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    37d4:	fe 01       	movw	r30, r28
    37d6:	ed 59       	subi	r30, 0x9D	; 157
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	88 2f       	mov	r24, r24
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	80 74       	andi	r24, 0x40	; 64
    37e2:	90 70       	andi	r25, 0x00	; 0
    37e4:	08 2e       	mov	r0, r24
    37e6:	89 2f       	mov	r24, r25
    37e8:	00 0c       	add	r0, r0
    37ea:	88 1f       	adc	r24, r24
    37ec:	99 0b       	sbc	r25, r25
    37ee:	00 0c       	add	r0, r0
    37f0:	88 1f       	adc	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	98 2f       	mov	r25, r24
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	62 e0       	ldi	r22, 0x02	; 2
    37fa:	49 2f       	mov	r20, r25
    37fc:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3800:	fe 01       	movw	r30, r28
    3802:	ed 59       	subi	r30, 0x9D	; 157
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	80 81       	ld	r24, Z
    3808:	98 2f       	mov	r25, r24
    380a:	99 1f       	adc	r25, r25
    380c:	99 27       	eor	r25, r25
    380e:	99 1f       	adc	r25, r25
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	64 e0       	ldi	r22, 0x04	; 4
    3814:	49 2f       	mov	r20, r25
    3816:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    381a:	fe 01       	movw	r30, r28
    381c:	ed 5b       	subi	r30, 0xBD	; 189
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	a0 e8       	ldi	r26, 0x80	; 128
    3826:	bf e3       	ldi	r27, 0x3F	; 63
    3828:	80 83       	st	Z, r24
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	a2 83       	std	Z+2, r26	; 0x02
    382e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3830:	8e 01       	movw	r16, r28
    3832:	01 5c       	subi	r16, 0xC1	; 193
    3834:	1f 4f       	sbci	r17, 0xFF	; 255
    3836:	fe 01       	movw	r30, r28
    3838:	ed 5b       	subi	r30, 0xBD	; 189
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	60 81       	ld	r22, Z
    383e:	71 81       	ldd	r23, Z+1	; 0x01
    3840:	82 81       	ldd	r24, Z+2	; 0x02
    3842:	93 81       	ldd	r25, Z+3	; 0x03
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	4a e7       	ldi	r20, 0x7A	; 122
    384a:	55 e4       	ldi	r21, 0x45	; 69
    384c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	f8 01       	movw	r30, r16
    3856:	80 83       	st	Z, r24
    3858:	91 83       	std	Z+1, r25	; 0x01
    385a:	a2 83       	std	Z+2, r26	; 0x02
    385c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    385e:	fe 01       	movw	r30, r28
    3860:	ff 96       	adiw	r30, 0x3f	; 63
    3862:	60 81       	ld	r22, Z
    3864:	71 81       	ldd	r23, Z+1	; 0x01
    3866:	82 81       	ldd	r24, Z+2	; 0x02
    3868:	93 81       	ldd	r25, Z+3	; 0x03
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	40 e8       	ldi	r20, 0x80	; 128
    3870:	5f e3       	ldi	r21, 0x3F	; 63
    3872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3876:	88 23       	and	r24, r24
    3878:	2c f4       	brge	.+10     	; 0x3884 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	9e af       	std	Y+62, r25	; 0x3e
    3880:	8d af       	std	Y+61, r24	; 0x3d
    3882:	46 c0       	rjmp	.+140    	; 0x3910 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    3884:	fe 01       	movw	r30, r28
    3886:	ff 96       	adiw	r30, 0x3f	; 63
    3888:	60 81       	ld	r22, Z
    388a:	71 81       	ldd	r23, Z+1	; 0x01
    388c:	82 81       	ldd	r24, Z+2	; 0x02
    388e:	93 81       	ldd	r25, Z+3	; 0x03
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	3f ef       	ldi	r19, 0xFF	; 255
    3894:	4f e7       	ldi	r20, 0x7F	; 127
    3896:	57 e4       	ldi	r21, 0x47	; 71
    3898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389c:	18 16       	cp	r1, r24
    389e:	64 f5       	brge	.+88     	; 0x38f8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a0:	fe 01       	movw	r30, r28
    38a2:	ed 5b       	subi	r30, 0xBD	; 189
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	60 81       	ld	r22, Z
    38a8:	71 81       	ldd	r23, Z+1	; 0x01
    38aa:	82 81       	ldd	r24, Z+2	; 0x02
    38ac:	93 81       	ldd	r25, Z+3	; 0x03
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e2       	ldi	r20, 0x20	; 32
    38b4:	51 e4       	ldi	r21, 0x41	; 65
    38b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	9e af       	std	Y+62, r25	; 0x3e
    38cc:	8d af       	std	Y+61, r24	; 0x3d
    38ce:	0f c0       	rjmp	.+30     	; 0x38ee <LCD_displayCharacter+0x478>
    38d0:	80 e9       	ldi	r24, 0x90	; 144
    38d2:	91 e0       	ldi	r25, 0x01	; 1
    38d4:	9c af       	std	Y+60, r25	; 0x3c
    38d6:	8b af       	std	Y+59, r24	; 0x3b
    38d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    38da:	9c ad       	ldd	r25, Y+60	; 0x3c
    38dc:	01 97       	sbiw	r24, 0x01	; 1
    38de:	f1 f7       	brne	.-4      	; 0x38dc <LCD_displayCharacter+0x466>
    38e0:	9c af       	std	Y+60, r25	; 0x3c
    38e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    38e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	9e af       	std	Y+62, r25	; 0x3e
    38ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    38f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    38f2:	00 97       	sbiw	r24, 0x00	; 0
    38f4:	69 f7       	brne	.-38     	; 0x38d0 <LCD_displayCharacter+0x45a>
    38f6:	16 c0       	rjmp	.+44     	; 0x3924 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f8:	fe 01       	movw	r30, r28
    38fa:	ff 96       	adiw	r30, 0x3f	; 63
    38fc:	60 81       	ld	r22, Z
    38fe:	71 81       	ldd	r23, Z+1	; 0x01
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	93 81       	ldd	r25, Z+3	; 0x03
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	9e af       	std	Y+62, r25	; 0x3e
    390e:	8d af       	std	Y+61, r24	; 0x3d
    3910:	8d ad       	ldd	r24, Y+61	; 0x3d
    3912:	9e ad       	ldd	r25, Y+62	; 0x3e
    3914:	9a af       	std	Y+58, r25	; 0x3a
    3916:	89 af       	std	Y+57, r24	; 0x39
    3918:	89 ad       	ldd	r24, Y+57	; 0x39
    391a:	9a ad       	ldd	r25, Y+58	; 0x3a
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	f1 f7       	brne	.-4      	; 0x391c <LCD_displayCharacter+0x4a6>
    3920:	9a af       	std	Y+58, r25	; 0x3a
    3922:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	62 e0       	ldi	r22, 0x02	; 2
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a0 e8       	ldi	r26, 0x80	; 128
    3934:	bf e3       	ldi	r27, 0x3F	; 63
    3936:	8d ab       	std	Y+53, r24	; 0x35
    3938:	9e ab       	std	Y+54, r25	; 0x36
    393a:	af ab       	std	Y+55, r26	; 0x37
    393c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393e:	6d a9       	ldd	r22, Y+53	; 0x35
    3940:	7e a9       	ldd	r23, Y+54	; 0x36
    3942:	8f a9       	ldd	r24, Y+55	; 0x37
    3944:	98 ad       	ldd	r25, Y+56	; 0x38
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	4a e7       	ldi	r20, 0x7A	; 122
    394c:	55 e4       	ldi	r21, 0x45	; 69
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	89 ab       	std	Y+49, r24	; 0x31
    3958:	9a ab       	std	Y+50, r25	; 0x32
    395a:	ab ab       	std	Y+51, r26	; 0x33
    395c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    395e:	69 a9       	ldd	r22, Y+49	; 0x31
    3960:	7a a9       	ldd	r23, Y+50	; 0x32
    3962:	8b a9       	ldd	r24, Y+51	; 0x33
    3964:	9c a9       	ldd	r25, Y+52	; 0x34
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	40 e8       	ldi	r20, 0x80	; 128
    396c:	5f e3       	ldi	r21, 0x3F	; 63
    396e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3972:	88 23       	and	r24, r24
    3974:	2c f4       	brge	.+10     	; 0x3980 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	98 ab       	std	Y+48, r25	; 0x30
    397c:	8f a7       	std	Y+47, r24	; 0x2f
    397e:	3f c0       	rjmp	.+126    	; 0x39fe <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3980:	69 a9       	ldd	r22, Y+49	; 0x31
    3982:	7a a9       	ldd	r23, Y+50	; 0x32
    3984:	8b a9       	ldd	r24, Y+51	; 0x33
    3986:	9c a9       	ldd	r25, Y+52	; 0x34
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	3f ef       	ldi	r19, 0xFF	; 255
    398c:	4f e7       	ldi	r20, 0x7F	; 127
    398e:	57 e4       	ldi	r21, 0x47	; 71
    3990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3994:	18 16       	cp	r1, r24
    3996:	4c f5       	brge	.+82     	; 0x39ea <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3998:	6d a9       	ldd	r22, Y+53	; 0x35
    399a:	7e a9       	ldd	r23, Y+54	; 0x36
    399c:	8f a9       	ldd	r24, Y+55	; 0x37
    399e:	98 ad       	ldd	r25, Y+56	; 0x38
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e2       	ldi	r20, 0x20	; 32
    39a6:	51 e4       	ldi	r21, 0x41	; 65
    39a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	bc 01       	movw	r22, r24
    39b2:	cd 01       	movw	r24, r26
    39b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	98 ab       	std	Y+48, r25	; 0x30
    39be:	8f a7       	std	Y+47, r24	; 0x2f
    39c0:	0f c0       	rjmp	.+30     	; 0x39e0 <LCD_displayCharacter+0x56a>
    39c2:	80 e9       	ldi	r24, 0x90	; 144
    39c4:	91 e0       	ldi	r25, 0x01	; 1
    39c6:	9e a7       	std	Y+46, r25	; 0x2e
    39c8:	8d a7       	std	Y+45, r24	; 0x2d
    39ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    39cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <LCD_displayCharacter+0x558>
    39d2:	9e a7       	std	Y+46, r25	; 0x2e
    39d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39d8:	98 a9       	ldd	r25, Y+48	; 0x30
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	98 ab       	std	Y+48, r25	; 0x30
    39de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e2:	98 a9       	ldd	r25, Y+48	; 0x30
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	69 f7       	brne	.-38     	; 0x39c2 <LCD_displayCharacter+0x54c>
    39e8:	14 c0       	rjmp	.+40     	; 0x3a12 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ea:	69 a9       	ldd	r22, Y+49	; 0x31
    39ec:	7a a9       	ldd	r23, Y+50	; 0x32
    39ee:	8b a9       	ldd	r24, Y+51	; 0x33
    39f0:	9c a9       	ldd	r25, Y+52	; 0x34
    39f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	98 ab       	std	Y+48, r25	; 0x30
    39fc:	8f a7       	std	Y+47, r24	; 0x2f
    39fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a00:	98 a9       	ldd	r25, Y+48	; 0x30
    3a02:	9c a7       	std	Y+44, r25	; 0x2c
    3a04:	8b a7       	std	Y+43, r24	; 0x2b
    3a06:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a08:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <LCD_displayCharacter+0x594>
    3a0e:	9c a7       	std	Y+44, r25	; 0x2c
    3a10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	62 e0       	ldi	r22, 0x02	; 2
    3a16:	41 e0       	ldi	r20, 0x01	; 1
    3a18:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	a0 e8       	ldi	r26, 0x80	; 128
    3a22:	bf e3       	ldi	r27, 0x3F	; 63
    3a24:	8f a3       	std	Y+39, r24	; 0x27
    3a26:	98 a7       	std	Y+40, r25	; 0x28
    3a28:	a9 a7       	std	Y+41, r26	; 0x29
    3a2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2c:	6f a1       	ldd	r22, Y+39	; 0x27
    3a2e:	78 a5       	ldd	r23, Y+40	; 0x28
    3a30:	89 a5       	ldd	r24, Y+41	; 0x29
    3a32:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	4a e7       	ldi	r20, 0x7A	; 122
    3a3a:	55 e4       	ldi	r21, 0x45	; 69
    3a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	8b a3       	std	Y+35, r24	; 0x23
    3a46:	9c a3       	std	Y+36, r25	; 0x24
    3a48:	ad a3       	std	Y+37, r26	; 0x25
    3a4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a50:	8d a1       	ldd	r24, Y+37	; 0x25
    3a52:	9e a1       	ldd	r25, Y+38	; 0x26
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	40 e8       	ldi	r20, 0x80	; 128
    3a5a:	5f e3       	ldi	r21, 0x3F	; 63
    3a5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a60:	88 23       	and	r24, r24
    3a62:	2c f4       	brge	.+10     	; 0x3a6e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	9a a3       	std	Y+34, r25	; 0x22
    3a6a:	89 a3       	std	Y+33, r24	; 0x21
    3a6c:	3f c0       	rjmp	.+126    	; 0x3aec <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    3a70:	7c a1       	ldd	r23, Y+36	; 0x24
    3a72:	8d a1       	ldd	r24, Y+37	; 0x25
    3a74:	9e a1       	ldd	r25, Y+38	; 0x26
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	3f ef       	ldi	r19, 0xFF	; 255
    3a7a:	4f e7       	ldi	r20, 0x7F	; 127
    3a7c:	57 e4       	ldi	r21, 0x47	; 71
    3a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a82:	18 16       	cp	r1, r24
    3a84:	4c f5       	brge	.+82     	; 0x3ad8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a86:	6f a1       	ldd	r22, Y+39	; 0x27
    3a88:	78 a5       	ldd	r23, Y+40	; 0x28
    3a8a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e2       	ldi	r20, 0x20	; 32
    3a94:	51 e4       	ldi	r21, 0x41	; 65
    3a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	bc 01       	movw	r22, r24
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	9a a3       	std	Y+34, r25	; 0x22
    3aac:	89 a3       	std	Y+33, r24	; 0x21
    3aae:	0f c0       	rjmp	.+30     	; 0x3ace <LCD_displayCharacter+0x658>
    3ab0:	80 e9       	ldi	r24, 0x90	; 144
    3ab2:	91 e0       	ldi	r25, 0x01	; 1
    3ab4:	98 a3       	std	Y+32, r25	; 0x20
    3ab6:	8f 8f       	std	Y+31, r24	; 0x1f
    3ab8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3aba:	98 a1       	ldd	r25, Y+32	; 0x20
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	f1 f7       	brne	.-4      	; 0x3abc <LCD_displayCharacter+0x646>
    3ac0:	98 a3       	std	Y+32, r25	; 0x20
    3ac2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	9a a3       	std	Y+34, r25	; 0x22
    3acc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ace:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad2:	00 97       	sbiw	r24, 0x00	; 0
    3ad4:	69 f7       	brne	.-38     	; 0x3ab0 <LCD_displayCharacter+0x63a>
    3ad6:	14 c0       	rjmp	.+40     	; 0x3b00 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad8:	6b a1       	ldd	r22, Y+35	; 0x23
    3ada:	7c a1       	ldd	r23, Y+36	; 0x24
    3adc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ade:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	9a a3       	std	Y+34, r25	; 0x22
    3aea:	89 a3       	std	Y+33, r24	; 0x21
    3aec:	89 a1       	ldd	r24, Y+33	; 0x21
    3aee:	9a a1       	ldd	r25, Y+34	; 0x22
    3af0:	9e 8f       	std	Y+30, r25	; 0x1e
    3af2:	8d 8f       	std	Y+29, r24	; 0x1d
    3af4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3af6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3af8:	01 97       	sbiw	r24, 0x01	; 1
    3afa:	f1 f7       	brne	.-4      	; 0x3af8 <LCD_displayCharacter+0x682>
    3afc:	9e 8f       	std	Y+30, r25	; 0x1e
    3afe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3b00:	fe 01       	movw	r30, r28
    3b02:	ed 59       	subi	r30, 0x9D	; 157
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	80 81       	ld	r24, Z
    3b08:	98 2f       	mov	r25, r24
    3b0a:	91 70       	andi	r25, 0x01	; 1
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	49 2f       	mov	r20, r25
    3b12:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3b16:	fe 01       	movw	r30, r28
    3b18:	ed 59       	subi	r30, 0x9D	; 157
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	80 81       	ld	r24, Z
    3b1e:	88 2f       	mov	r24, r24
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	82 70       	andi	r24, 0x02	; 2
    3b24:	90 70       	andi	r25, 0x00	; 0
    3b26:	95 95       	asr	r25
    3b28:	87 95       	ror	r24
    3b2a:	98 2f       	mov	r25, r24
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	61 e0       	ldi	r22, 0x01	; 1
    3b30:	49 2f       	mov	r20, r25
    3b32:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3b36:	fe 01       	movw	r30, r28
    3b38:	ed 59       	subi	r30, 0x9D	; 157
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	80 81       	ld	r24, Z
    3b3e:	88 2f       	mov	r24, r24
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	84 70       	andi	r24, 0x04	; 4
    3b44:	90 70       	andi	r25, 0x00	; 0
    3b46:	95 95       	asr	r25
    3b48:	87 95       	ror	r24
    3b4a:	95 95       	asr	r25
    3b4c:	87 95       	ror	r24
    3b4e:	98 2f       	mov	r25, r24
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	62 e0       	ldi	r22, 0x02	; 2
    3b54:	49 2f       	mov	r20, r25
    3b56:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	ed 59       	subi	r30, 0x9D	; 157
    3b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b60:	80 81       	ld	r24, Z
    3b62:	88 2f       	mov	r24, r24
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	88 70       	andi	r24, 0x08	; 8
    3b68:	90 70       	andi	r25, 0x00	; 0
    3b6a:	95 95       	asr	r25
    3b6c:	87 95       	ror	r24
    3b6e:	95 95       	asr	r25
    3b70:	87 95       	ror	r24
    3b72:	95 95       	asr	r25
    3b74:	87 95       	ror	r24
    3b76:	98 2f       	mov	r25, r24
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	64 e0       	ldi	r22, 0x04	; 4
    3b7c:	49 2f       	mov	r20, r25
    3b7e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	a0 e8       	ldi	r26, 0x80	; 128
    3b88:	bf e3       	ldi	r27, 0x3F	; 63
    3b8a:	89 8f       	std	Y+25, r24	; 0x19
    3b8c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b8e:	ab 8f       	std	Y+27, r26	; 0x1b
    3b90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b92:	69 8d       	ldd	r22, Y+25	; 0x19
    3b94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	4a e7       	ldi	r20, 0x7A	; 122
    3ba0:	55 e4       	ldi	r21, 0x45	; 69
    3ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	8d 8b       	std	Y+21, r24	; 0x15
    3bac:	9e 8b       	std	Y+22, r25	; 0x16
    3bae:	af 8b       	std	Y+23, r26	; 0x17
    3bb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e8       	ldi	r20, 0x80	; 128
    3bc0:	5f e3       	ldi	r21, 0x3F	; 63
    3bc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bc6:	88 23       	and	r24, r24
    3bc8:	2c f4       	brge	.+10     	; 0x3bd4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	9c 8b       	std	Y+20, r25	; 0x14
    3bd0:	8b 8b       	std	Y+19, r24	; 0x13
    3bd2:	3f c0       	rjmp	.+126    	; 0x3c52 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bda:	98 8d       	ldd	r25, Y+24	; 0x18
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	3f ef       	ldi	r19, 0xFF	; 255
    3be0:	4f e7       	ldi	r20, 0x7F	; 127
    3be2:	57 e4       	ldi	r21, 0x47	; 71
    3be4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3be8:	18 16       	cp	r1, r24
    3bea:	4c f5       	brge	.+82     	; 0x3c3e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bec:	69 8d       	ldd	r22, Y+25	; 0x19
    3bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	40 e2       	ldi	r20, 0x20	; 32
    3bfa:	51 e4       	ldi	r21, 0x41	; 65
    3bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	bc 01       	movw	r22, r24
    3c06:	cd 01       	movw	r24, r26
    3c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
    3c10:	9c 8b       	std	Y+20, r25	; 0x14
    3c12:	8b 8b       	std	Y+19, r24	; 0x13
    3c14:	0f c0       	rjmp	.+30     	; 0x3c34 <LCD_displayCharacter+0x7be>
    3c16:	80 e9       	ldi	r24, 0x90	; 144
    3c18:	91 e0       	ldi	r25, 0x01	; 1
    3c1a:	9a 8b       	std	Y+18, r25	; 0x12
    3c1c:	89 8b       	std	Y+17, r24	; 0x11
    3c1e:	89 89       	ldd	r24, Y+17	; 0x11
    3c20:	9a 89       	ldd	r25, Y+18	; 0x12
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <LCD_displayCharacter+0x7ac>
    3c26:	9a 8b       	std	Y+18, r25	; 0x12
    3c28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	9c 8b       	std	Y+20, r25	; 0x14
    3c32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c34:	8b 89       	ldd	r24, Y+19	; 0x13
    3c36:	9c 89       	ldd	r25, Y+20	; 0x14
    3c38:	00 97       	sbiw	r24, 0x00	; 0
    3c3a:	69 f7       	brne	.-38     	; 0x3c16 <LCD_displayCharacter+0x7a0>
    3c3c:	14 c0       	rjmp	.+40     	; 0x3c66 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c40:	7e 89       	ldd	r23, Y+22	; 0x16
    3c42:	8f 89       	ldd	r24, Y+23	; 0x17
    3c44:	98 8d       	ldd	r25, Y+24	; 0x18
    3c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	9c 8b       	std	Y+20, r25	; 0x14
    3c50:	8b 8b       	std	Y+19, r24	; 0x13
    3c52:	8b 89       	ldd	r24, Y+19	; 0x13
    3c54:	9c 89       	ldd	r25, Y+20	; 0x14
    3c56:	98 8b       	std	Y+16, r25	; 0x10
    3c58:	8f 87       	std	Y+15, r24	; 0x0f
    3c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c5c:	98 89       	ldd	r25, Y+16	; 0x10
    3c5e:	01 97       	sbiw	r24, 0x01	; 1
    3c60:	f1 f7       	brne	.-4      	; 0x3c5e <LCD_displayCharacter+0x7e8>
    3c62:	98 8b       	std	Y+16, r25	; 0x10
    3c64:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	62 e0       	ldi	r22, 0x02	; 2
    3c6a:	40 e0       	ldi	r20, 0x00	; 0
    3c6c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	a0 e8       	ldi	r26, 0x80	; 128
    3c76:	bf e3       	ldi	r27, 0x3F	; 63
    3c78:	8b 87       	std	Y+11, r24	; 0x0b
    3c7a:	9c 87       	std	Y+12, r25	; 0x0c
    3c7c:	ad 87       	std	Y+13, r26	; 0x0d
    3c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	4a e7       	ldi	r20, 0x7A	; 122
    3c8e:	55 e4       	ldi	r21, 0x45	; 69
    3c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	8f 83       	std	Y+7, r24	; 0x07
    3c9a:	98 87       	std	Y+8, r25	; 0x08
    3c9c:	a9 87       	std	Y+9, r26	; 0x09
    3c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca2:	78 85       	ldd	r23, Y+8	; 0x08
    3ca4:	89 85       	ldd	r24, Y+9	; 0x09
    3ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e8       	ldi	r20, 0x80	; 128
    3cae:	5f e3       	ldi	r21, 0x3F	; 63
    3cb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cb4:	88 23       	and	r24, r24
    3cb6:	2c f4       	brge	.+10     	; 0x3cc2 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	9e 83       	std	Y+6, r25	; 0x06
    3cbe:	8d 83       	std	Y+5, r24	; 0x05
    3cc0:	3f c0       	rjmp	.+126    	; 0x3d40 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc4:	78 85       	ldd	r23, Y+8	; 0x08
    3cc6:	89 85       	ldd	r24, Y+9	; 0x09
    3cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	3f ef       	ldi	r19, 0xFF	; 255
    3cce:	4f e7       	ldi	r20, 0x7F	; 127
    3cd0:	57 e4       	ldi	r21, 0x47	; 71
    3cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cd6:	18 16       	cp	r1, r24
    3cd8:	4c f5       	brge	.+82     	; 0x3d2c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 e2       	ldi	r20, 0x20	; 32
    3ce8:	51 e4       	ldi	r21, 0x41	; 65
    3cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	bc 01       	movw	r22, r24
    3cf4:	cd 01       	movw	r24, r26
    3cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	9e 83       	std	Y+6, r25	; 0x06
    3d00:	8d 83       	std	Y+5, r24	; 0x05
    3d02:	0f c0       	rjmp	.+30     	; 0x3d22 <LCD_displayCharacter+0x8ac>
    3d04:	80 e9       	ldi	r24, 0x90	; 144
    3d06:	91 e0       	ldi	r25, 0x01	; 1
    3d08:	9c 83       	std	Y+4, r25	; 0x04
    3d0a:	8b 83       	std	Y+3, r24	; 0x03
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	f1 f7       	brne	.-4      	; 0x3d10 <LCD_displayCharacter+0x89a>
    3d14:	9c 83       	std	Y+4, r25	; 0x04
    3d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	9e 83       	std	Y+6, r25	; 0x06
    3d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	9e 81       	ldd	r25, Y+6	; 0x06
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	69 f7       	brne	.-38     	; 0x3d04 <LCD_displayCharacter+0x88e>
    3d2a:	14 c0       	rjmp	.+40     	; 0x3d54 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2e:	78 85       	ldd	r23, Y+8	; 0x08
    3d30:	89 85       	ldd	r24, Y+9	; 0x09
    3d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	9e 83       	std	Y+6, r25	; 0x06
    3d3e:	8d 83       	std	Y+5, r24	; 0x05
    3d40:	8d 81       	ldd	r24, Y+5	; 0x05
    3d42:	9e 81       	ldd	r25, Y+6	; 0x06
    3d44:	9a 83       	std	Y+2, r25	; 0x02
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <LCD_displayCharacter+0x8d6>
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3d54:	cd 59       	subi	r28, 0x9D	; 157
    3d56:	df 4f       	sbci	r29, 0xFF	; 255
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	1f 91       	pop	r17
    3d68:	0f 91       	pop	r16
    3d6a:	08 95       	ret

00003d6c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <LCD_displayString+0x6>
    3d72:	0f 92       	push	r0
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	9b 83       	std	Y+3, r25	; 0x03
    3d7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d7c:	19 82       	std	Y+1, r1	; 0x01
    3d7e:	0e c0       	rjmp	.+28     	; 0x3d9c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	28 2f       	mov	r18, r24
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	e2 0f       	add	r30, r18
    3d8e:	f3 1f       	adc	r31, r19
    3d90:	80 81       	ld	r24, Z
    3d92:	0e 94 3b 1a 	call	0x3476	; 0x3476 <LCD_displayCharacter>
		i++;
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	8f 5f       	subi	r24, 0xFF	; 255
    3d9a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	28 2f       	mov	r18, r24
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	8a 81       	ldd	r24, Y+2	; 0x02
    3da4:	9b 81       	ldd	r25, Y+3	; 0x03
    3da6:	fc 01       	movw	r30, r24
    3da8:	e2 0f       	add	r30, r18
    3daa:	f3 1f       	adc	r31, r19
    3dac:	80 81       	ld	r24, Z
    3dae:	88 23       	and	r24, r24
    3db0:	39 f7       	brne	.-50     	; 0x3d80 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	cf 91       	pop	r28
    3dba:	df 91       	pop	r29
    3dbc:	08 95       	ret

00003dbe <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3dbe:	df 93       	push	r29
    3dc0:	cf 93       	push	r28
    3dc2:	00 d0       	rcall	.+0      	; 0x3dc4 <LCD_moveCursor+0x6>
    3dc4:	00 d0       	rcall	.+0      	; 0x3dc6 <LCD_moveCursor+0x8>
    3dc6:	0f 92       	push	r0
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
    3dcc:	8a 83       	std	Y+2, r24	; 0x02
    3dce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	3d 83       	std	Y+5, r19	; 0x05
    3dd8:	2c 83       	std	Y+4, r18	; 0x04
    3dda:	8c 81       	ldd	r24, Y+4	; 0x04
    3ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    3dde:	81 30       	cpi	r24, 0x01	; 1
    3de0:	91 05       	cpc	r25, r1
    3de2:	c1 f0       	breq	.+48     	; 0x3e14 <LCD_moveCursor+0x56>
    3de4:	2c 81       	ldd	r18, Y+4	; 0x04
    3de6:	3d 81       	ldd	r19, Y+5	; 0x05
    3de8:	22 30       	cpi	r18, 0x02	; 2
    3dea:	31 05       	cpc	r19, r1
    3dec:	2c f4       	brge	.+10     	; 0x3df8 <LCD_moveCursor+0x3a>
    3dee:	8c 81       	ldd	r24, Y+4	; 0x04
    3df0:	9d 81       	ldd	r25, Y+5	; 0x05
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	61 f0       	breq	.+24     	; 0x3e0e <LCD_moveCursor+0x50>
    3df6:	19 c0       	rjmp	.+50     	; 0x3e2a <LCD_moveCursor+0x6c>
    3df8:	2c 81       	ldd	r18, Y+4	; 0x04
    3dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    3dfc:	22 30       	cpi	r18, 0x02	; 2
    3dfe:	31 05       	cpc	r19, r1
    3e00:	69 f0       	breq	.+26     	; 0x3e1c <LCD_moveCursor+0x5e>
    3e02:	8c 81       	ldd	r24, Y+4	; 0x04
    3e04:	9d 81       	ldd	r25, Y+5	; 0x05
    3e06:	83 30       	cpi	r24, 0x03	; 3
    3e08:	91 05       	cpc	r25, r1
    3e0a:	61 f0       	breq	.+24     	; 0x3e24 <LCD_moveCursor+0x66>
    3e0c:	0e c0       	rjmp	.+28     	; 0x3e2a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e10:	89 83       	std	Y+1, r24	; 0x01
    3e12:	0b c0       	rjmp	.+22     	; 0x3e2a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0xC0;
    3e14:	8b 81       	ldd	r24, Y+3	; 0x03
    3e16:	80 54       	subi	r24, 0x40	; 64
    3e18:	89 83       	std	Y+1, r24	; 0x01
    3e1a:	07 c0       	rjmp	.+14     	; 0x3e2a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x94;
    3e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1e:	8c 56       	subi	r24, 0x6C	; 108
    3e20:	89 83       	std	Y+1, r24	; 0x01
    3e22:	03 c0       	rjmp	.+6      	; 0x3e2a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0xD4;
    3e24:	8b 81       	ldd	r24, Y+3	; 0x03
    3e26:	8c 52       	subi	r24, 0x2C	; 44
    3e28:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	80 68       	ori	r24, 0x80	; 128
    3e2e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_sendCommand>
}
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
    3e3a:	0f 90       	pop	r0
    3e3c:	cf 91       	pop	r28
    3e3e:	df 91       	pop	r29
    3e40:	08 95       	ret

00003e42 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3e42:	df 93       	push	r29
    3e44:	cf 93       	push	r28
    3e46:	00 d0       	rcall	.+0      	; 0x3e48 <LCD_displayStringRowColumn+0x6>
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <LCD_displayStringRowColumn+0x8>
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	89 83       	std	Y+1, r24	; 0x01
    3e50:	6a 83       	std	Y+2, r22	; 0x02
    3e52:	5c 83       	std	Y+4, r21	; 0x04
    3e54:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	6a 81       	ldd	r22, Y+2	; 0x02
    3e5a:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e60:	9c 81       	ldd	r25, Y+4	; 0x04
    3e62:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
}
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	cf 91       	pop	r28
    3e70:	df 91       	pop	r29
    3e72:	08 95       	ret

00003e74 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3e74:	df 93       	push	r29
    3e76:	cf 93       	push	r28
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	62 97       	sbiw	r28, 0x12	; 18
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	9a 8b       	std	Y+18, r25	; 0x12
    3e8a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3e8c:	89 89       	ldd	r24, Y+17	; 0x11
    3e8e:	9a 89       	ldd	r25, Y+18	; 0x12
    3e90:	9e 01       	movw	r18, r28
    3e92:	2f 5f       	subi	r18, 0xFF	; 255
    3e94:	3f 4f       	sbci	r19, 0xFF	; 255
    3e96:	b9 01       	movw	r22, r18
    3e98:	4a e0       	ldi	r20, 0x0A	; 10
    3e9a:	50 e0       	ldi	r21, 0x00	; 0
    3e9c:	0e 94 db 30 	call	0x61b6	; 0x61b6 <itoa>
   LCD_displayString(buff); /* Display the string */
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
}
    3ea8:	62 96       	adiw	r28, 0x12	; 18
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	cf 91       	pop	r28
    3eb6:	df 91       	pop	r29
    3eb8:	08 95       	ret

00003eba <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3eba:	df 93       	push	r29
    3ebc:	cf 93       	push	r28
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_sendCommand>
}
    3ec8:	cf 91       	pop	r28
    3eca:	df 91       	pop	r29
    3ecc:	08 95       	ret

00003ece <BUZZER_init>:

#include "../../MCAL/DIO/dio.h"
#include "buzzer.h"

void BUZZER_init(void)
{
    3ece:	df 93       	push	r29
    3ed0:	cf 93       	push	r28
    3ed2:	cd b7       	in	r28, 0x3d	; 61
    3ed4:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	66 e0       	ldi	r22, 0x06	; 6
    3eda:	41 e0       	ldi	r20, 0x01	; 1
    3edc:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3ee0:	82 e0       	ldi	r24, 0x02	; 2
    3ee2:	66 e0       	ldi	r22, 0x06	; 6
    3ee4:	40 e0       	ldi	r20, 0x00	; 0
    3ee6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <BUZZER_on>:

void BUZZER_on(void)
{
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	66 e0       	ldi	r22, 0x06	; 6
    3efc:	41 e0       	ldi	r20, 0x01	; 1
    3efe:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <BUZZER_off>:

void BUZZER_off(void)
{
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	cd b7       	in	r28, 0x3d	; 61
    3f0e:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3f10:	82 e0       	ldi	r24, 0x02	; 2
    3f12:	66 e0       	ldi	r22, 0x06	; 6
    3f14:	40 e0       	ldi	r20, 0x00	; 0
    3f16:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    3f1a:	cf 91       	pop	r28
    3f1c:	df 91       	pop	r29
    3f1e:	08 95       	ret

00003f20 <BMP180_ReadCalb>:
/* Variables used in the below functions */
sint32 X1 = 0, X2 = 0, B5 = 0, UT = 0;
sint32 X3 = 0, B3 = 0, B6 = 0, P = 0, UP = 0;
uint32 B4 = 0, B7 = 0;
void delay(void);
void BMP180_ReadCalb(void) {
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	c2 59       	subi	r28, 0x92	; 146
    3f2e:	d0 40       	sbci	r29, 0x00	; 0
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61

	uint8_t Callib_Data[22] = { 0 };
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	83 58       	subi	r24, 0x83	; 131
    3f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f40:	26 e1       	ldi	r18, 0x16	; 22
    3f42:	fc 01       	movw	r30, r24
    3f44:	df 01       	movw	r26, r30
    3f46:	82 2f       	mov	r24, r18
    3f48:	1d 92       	st	X+, r1
    3f4a:	8a 95       	dec	r24
    3f4c:	e9 f7       	brne	.-6      	; 0x3f48 <BMP180_ReadCalb+0x28>
	uint16_t Callib_Start = 0xAA;
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e5 58       	subi	r30, 0x85	; 133
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	8a ea       	ldi	r24, 0xAA	; 170
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	91 83       	std	Z+1, r25	; 0x01
    3f5a:	80 83       	st	Z, r24

	for (int i = 0; i < 22; i++) {
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	e7 58       	subi	r30, 0x87	; 135
    3f60:	ff 4f       	sbci	r31, 0xFF	; 255
    3f62:	11 82       	std	Z+1, r1	; 0x01
    3f64:	10 82       	st	Z, r1
    3f66:	d9 c4       	rjmp	.+2482   	; 0x491a <BMP180_ReadCalb+0x9fa>
		TWI_Start_Wait(BMP180_ADDRESS_W);// To write
    3f68:	8e ee       	ldi	r24, 0xEE	; 238
    3f6a:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
    3f6e:	fe 01       	movw	r30, r28
    3f70:	eb 58       	subi	r30, 0x8B	; 139
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	a0 e2       	ldi	r26, 0x20	; 32
    3f7a:	b1 e4       	ldi	r27, 0x41	; 65
    3f7c:	80 83       	st	Z, r24
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	a2 83       	std	Z+2, r26	; 0x02
    3f82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f84:	8e 01       	movw	r16, r28
    3f86:	0f 58       	subi	r16, 0x8F	; 143
    3f88:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	eb 58       	subi	r30, 0x8B	; 139
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	60 81       	ld	r22, Z
    3f92:	71 81       	ldd	r23, Z+1	; 0x01
    3f94:	82 81       	ldd	r24, Z+2	; 0x02
    3f96:	93 81       	ldd	r25, Z+3	; 0x03
    3f98:	2b ea       	ldi	r18, 0xAB	; 171
    3f9a:	3a ea       	ldi	r19, 0xAA	; 170
    3f9c:	4a ea       	ldi	r20, 0xAA	; 170
    3f9e:	50 e4       	ldi	r21, 0x40	; 64
    3fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	f8 01       	movw	r30, r16
    3faa:	80 83       	st	Z, r24
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	a2 83       	std	Z+2, r26	; 0x02
    3fb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	ef 58       	subi	r30, 0x8F	; 143
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	60 81       	ld	r22, Z
    3fba:	71 81       	ldd	r23, Z+1	; 0x01
    3fbc:	82 81       	ldd	r24, Z+2	; 0x02
    3fbe:	93 81       	ldd	r25, Z+3	; 0x03
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	40 e8       	ldi	r20, 0x80	; 128
    3fc6:	5f e3       	ldi	r21, 0x3F	; 63
    3fc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fcc:	88 23       	and	r24, r24
    3fce:	34 f4       	brge	.+12     	; 0x3fdc <BMP180_ReadCalb+0xbc>
		__ticks = 1;
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e0 59       	subi	r30, 0x90	; 144
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	80 83       	st	Z, r24
    3fda:	e0 c0       	rjmp	.+448    	; 0x419c <BMP180_ReadCalb+0x27c>
	else if (__tmp > 255)
    3fdc:	fe 01       	movw	r30, r28
    3fde:	ef 58       	subi	r30, 0x8F	; 143
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	60 81       	ld	r22, Z
    3fe4:	71 81       	ldd	r23, Z+1	; 0x01
    3fe6:	82 81       	ldd	r24, Z+2	; 0x02
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	4f e7       	ldi	r20, 0x7F	; 127
    3ff0:	53 e4       	ldi	r21, 0x43	; 67
    3ff2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ff6:	18 16       	cp	r1, r24
    3ff8:	0c f0       	brlt	.+2      	; 0x3ffc <BMP180_ReadCalb+0xdc>
    3ffa:	c0 c0       	rjmp	.+384    	; 0x417c <BMP180_ReadCalb+0x25c>
	{
		_delay_ms(__us / 1000.0);
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	eb 58       	subi	r30, 0x8B	; 139
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	60 81       	ld	r22, Z
    4004:	71 81       	ldd	r23, Z+1	; 0x01
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	93 81       	ldd	r25, Z+3	; 0x03
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	4a e7       	ldi	r20, 0x7A	; 122
    4010:	54 e4       	ldi	r21, 0x44	; 68
    4012:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	fe 01       	movw	r30, r28
    401c:	e4 59       	subi	r30, 0x94	; 148
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	80 83       	st	Z, r24
    4022:	91 83       	std	Z+1, r25	; 0x01
    4024:	a2 83       	std	Z+2, r26	; 0x02
    4026:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4028:	8e 01       	movw	r16, r28
    402a:	08 59       	subi	r16, 0x98	; 152
    402c:	1f 4f       	sbci	r17, 0xFF	; 255
    402e:	fe 01       	movw	r30, r28
    4030:	e4 59       	subi	r30, 0x94	; 148
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	60 81       	ld	r22, Z
    4036:	71 81       	ldd	r23, Z+1	; 0x01
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	4a e7       	ldi	r20, 0x7A	; 122
    4042:	55 e4       	ldi	r21, 0x45	; 69
    4044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	f8 01       	movw	r30, r16
    404e:	80 83       	st	Z, r24
    4050:	91 83       	std	Z+1, r25	; 0x01
    4052:	a2 83       	std	Z+2, r26	; 0x02
    4054:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4056:	fe 01       	movw	r30, r28
    4058:	e8 59       	subi	r30, 0x98	; 152
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	60 81       	ld	r22, Z
    405e:	71 81       	ldd	r23, Z+1	; 0x01
    4060:	82 81       	ldd	r24, Z+2	; 0x02
    4062:	93 81       	ldd	r25, Z+3	; 0x03
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e8       	ldi	r20, 0x80	; 128
    406a:	5f e3       	ldi	r21, 0x3F	; 63
    406c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4070:	88 23       	and	r24, r24
    4072:	44 f4       	brge	.+16     	; 0x4084 <BMP180_ReadCalb+0x164>
		__ticks = 1;
    4074:	fe 01       	movw	r30, r28
    4076:	ea 59       	subi	r30, 0x9A	; 154
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	91 83       	std	Z+1, r25	; 0x01
    4080:	80 83       	st	Z, r24
    4082:	64 c0       	rjmp	.+200    	; 0x414c <BMP180_ReadCalb+0x22c>
	else if (__tmp > 65535)
    4084:	fe 01       	movw	r30, r28
    4086:	e8 59       	subi	r30, 0x98	; 152
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	60 81       	ld	r22, Z
    408c:	71 81       	ldd	r23, Z+1	; 0x01
    408e:	82 81       	ldd	r24, Z+2	; 0x02
    4090:	93 81       	ldd	r25, Z+3	; 0x03
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	3f ef       	ldi	r19, 0xFF	; 255
    4096:	4f e7       	ldi	r20, 0x7F	; 127
    4098:	57 e4       	ldi	r21, 0x47	; 71
    409a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    409e:	18 16       	cp	r1, r24
    40a0:	0c f0       	brlt	.+2      	; 0x40a4 <BMP180_ReadCalb+0x184>
    40a2:	43 c0       	rjmp	.+134    	; 0x412a <BMP180_ReadCalb+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a4:	fe 01       	movw	r30, r28
    40a6:	e4 59       	subi	r30, 0x94	; 148
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	60 81       	ld	r22, Z
    40ac:	71 81       	ldd	r23, Z+1	; 0x01
    40ae:	82 81       	ldd	r24, Z+2	; 0x02
    40b0:	93 81       	ldd	r25, Z+3	; 0x03
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	40 e2       	ldi	r20, 0x20	; 32
    40b8:	51 e4       	ldi	r21, 0x41	; 65
    40ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	8e 01       	movw	r16, r28
    40c4:	0a 59       	subi	r16, 0x9A	; 154
    40c6:	1f 4f       	sbci	r17, 0xFF	; 255
    40c8:	bc 01       	movw	r22, r24
    40ca:	cd 01       	movw	r24, r26
    40cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	f8 01       	movw	r30, r16
    40d6:	91 83       	std	Z+1, r25	; 0x01
    40d8:	80 83       	st	Z, r24
    40da:	1f c0       	rjmp	.+62     	; 0x411a <BMP180_ReadCalb+0x1fa>
    40dc:	fe 01       	movw	r30, r28
    40de:	ec 59       	subi	r30, 0x9C	; 156
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 e9       	ldi	r24, 0x90	; 144
    40e4:	91 e0       	ldi	r25, 0x01	; 1
    40e6:	91 83       	std	Z+1, r25	; 0x01
    40e8:	80 83       	st	Z, r24
    40ea:	fe 01       	movw	r30, r28
    40ec:	ec 59       	subi	r30, 0x9C	; 156
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	80 81       	ld	r24, Z
    40f2:	91 81       	ldd	r25, Z+1	; 0x01
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	f1 f7       	brne	.-4      	; 0x40f4 <BMP180_ReadCalb+0x1d4>
    40f8:	fe 01       	movw	r30, r28
    40fa:	ec 59       	subi	r30, 0x9C	; 156
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4102:	de 01       	movw	r26, r28
    4104:	aa 59       	subi	r26, 0x9A	; 154
    4106:	bf 4f       	sbci	r27, 0xFF	; 255
    4108:	fe 01       	movw	r30, r28
    410a:	ea 59       	subi	r30, 0x9A	; 154
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	11 96       	adiw	r26, 0x01	; 1
    4116:	9c 93       	st	X, r25
    4118:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411a:	fe 01       	movw	r30, r28
    411c:	ea 59       	subi	r30, 0x9A	; 154
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	00 97       	sbiw	r24, 0x00	; 0
    4126:	d1 f6       	brne	.-76     	; 0x40dc <BMP180_ReadCalb+0x1bc>
    4128:	4b c0       	rjmp	.+150    	; 0x41c0 <BMP180_ReadCalb+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412a:	8e 01       	movw	r16, r28
    412c:	0a 59       	subi	r16, 0x9A	; 154
    412e:	1f 4f       	sbci	r17, 0xFF	; 255
    4130:	fe 01       	movw	r30, r28
    4132:	e8 59       	subi	r30, 0x98	; 152
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	60 81       	ld	r22, Z
    4138:	71 81       	ldd	r23, Z+1	; 0x01
    413a:	82 81       	ldd	r24, Z+2	; 0x02
    413c:	93 81       	ldd	r25, Z+3	; 0x03
    413e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	f8 01       	movw	r30, r16
    4148:	91 83       	std	Z+1, r25	; 0x01
    414a:	80 83       	st	Z, r24
    414c:	de 01       	movw	r26, r28
    414e:	ae 59       	subi	r26, 0x9E	; 158
    4150:	bf 4f       	sbci	r27, 0xFF	; 255
    4152:	fe 01       	movw	r30, r28
    4154:	ea 59       	subi	r30, 0x9A	; 154
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	80 81       	ld	r24, Z
    415a:	91 81       	ldd	r25, Z+1	; 0x01
    415c:	11 96       	adiw	r26, 0x01	; 1
    415e:	9c 93       	st	X, r25
    4160:	8e 93       	st	-X, r24
    4162:	fe 01       	movw	r30, r28
    4164:	ee 59       	subi	r30, 0x9E	; 158
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	80 81       	ld	r24, Z
    416a:	91 81       	ldd	r25, Z+1	; 0x01
    416c:	01 97       	sbiw	r24, 0x01	; 1
    416e:	f1 f7       	brne	.-4      	; 0x416c <BMP180_ReadCalb+0x24c>
    4170:	fe 01       	movw	r30, r28
    4172:	ee 59       	subi	r30, 0x9E	; 158
    4174:	ff 4f       	sbci	r31, 0xFF	; 255
    4176:	91 83       	std	Z+1, r25	; 0x01
    4178:	80 83       	st	Z, r24
    417a:	22 c0       	rjmp	.+68     	; 0x41c0 <BMP180_ReadCalb+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    417c:	8e 01       	movw	r16, r28
    417e:	00 59       	subi	r16, 0x90	; 144
    4180:	1f 4f       	sbci	r17, 0xFF	; 255
    4182:	fe 01       	movw	r30, r28
    4184:	ef 58       	subi	r30, 0x8F	; 143
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	60 81       	ld	r22, Z
    418a:	71 81       	ldd	r23, Z+1	; 0x01
    418c:	82 81       	ldd	r24, Z+2	; 0x02
    418e:	93 81       	ldd	r25, Z+3	; 0x03
    4190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	f8 01       	movw	r30, r16
    419a:	80 83       	st	Z, r24
    419c:	de 01       	movw	r26, r28
    419e:	af 59       	subi	r26, 0x9F	; 159
    41a0:	bf 4f       	sbci	r27, 0xFF	; 255
    41a2:	fe 01       	movw	r30, r28
    41a4:	e0 59       	subi	r30, 0x90	; 144
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 81       	ld	r24, Z
    41aa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    41ac:	fe 01       	movw	r30, r28
    41ae:	ef 59       	subi	r30, 0x9F	; 159
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	80 81       	ld	r24, Z
    41b4:	8a 95       	dec	r24
    41b6:	f1 f7       	brne	.-4      	; 0x41b4 <BMP180_ReadCalb+0x294>
    41b8:	fe 01       	movw	r30, r28
    41ba:	ef 59       	subi	r30, 0x9F	; 159
    41bc:	ff 4f       	sbci	r31, 0xFF	; 255
    41be:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_WriteByte(Callib_Start + i);
    41c0:	fe 01       	movw	r30, r28
    41c2:	e5 58       	subi	r30, 0x85	; 133
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	90 81       	ld	r25, Z
    41c8:	fe 01       	movw	r30, r28
    41ca:	e7 58       	subi	r30, 0x87	; 135
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	89 0f       	add	r24, r25
    41d2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
    41d6:	fe 01       	movw	r30, r28
    41d8:	e3 5a       	subi	r30, 0xA3	; 163
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	a0 e2       	ldi	r26, 0x20	; 32
    41e2:	b1 e4       	ldi	r27, 0x41	; 65
    41e4:	80 83       	st	Z, r24
    41e6:	91 83       	std	Z+1, r25	; 0x01
    41e8:	a2 83       	std	Z+2, r26	; 0x02
    41ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    41ec:	8e 01       	movw	r16, r28
    41ee:	07 5a       	subi	r16, 0xA7	; 167
    41f0:	1f 4f       	sbci	r17, 0xFF	; 255
    41f2:	fe 01       	movw	r30, r28
    41f4:	e3 5a       	subi	r30, 0xA3	; 163
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	60 81       	ld	r22, Z
    41fa:	71 81       	ldd	r23, Z+1	; 0x01
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	93 81       	ldd	r25, Z+3	; 0x03
    4200:	2b ea       	ldi	r18, 0xAB	; 171
    4202:	3a ea       	ldi	r19, 0xAA	; 170
    4204:	4a ea       	ldi	r20, 0xAA	; 170
    4206:	50 e4       	ldi	r21, 0x40	; 64
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	f8 01       	movw	r30, r16
    4212:	80 83       	st	Z, r24
    4214:	91 83       	std	Z+1, r25	; 0x01
    4216:	a2 83       	std	Z+2, r26	; 0x02
    4218:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    421a:	fe 01       	movw	r30, r28
    421c:	e7 5a       	subi	r30, 0xA7	; 167
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	60 81       	ld	r22, Z
    4222:	71 81       	ldd	r23, Z+1	; 0x01
    4224:	82 81       	ldd	r24, Z+2	; 0x02
    4226:	93 81       	ldd	r25, Z+3	; 0x03
    4228:	20 e0       	ldi	r18, 0x00	; 0
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	40 e8       	ldi	r20, 0x80	; 128
    422e:	5f e3       	ldi	r21, 0x3F	; 63
    4230:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4234:	88 23       	and	r24, r24
    4236:	34 f4       	brge	.+12     	; 0x4244 <BMP180_ReadCalb+0x324>
		__ticks = 1;
    4238:	fe 01       	movw	r30, r28
    423a:	e8 5a       	subi	r30, 0xA8	; 168
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	80 83       	st	Z, r24
    4242:	e0 c0       	rjmp	.+448    	; 0x4404 <BMP180_ReadCalb+0x4e4>
	else if (__tmp > 255)
    4244:	fe 01       	movw	r30, r28
    4246:	e7 5a       	subi	r30, 0xA7	; 167
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	60 81       	ld	r22, Z
    424c:	71 81       	ldd	r23, Z+1	; 0x01
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4f e7       	ldi	r20, 0x7F	; 127
    4258:	53 e4       	ldi	r21, 0x43	; 67
    425a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    425e:	18 16       	cp	r1, r24
    4260:	0c f0       	brlt	.+2      	; 0x4264 <BMP180_ReadCalb+0x344>
    4262:	c0 c0       	rjmp	.+384    	; 0x43e4 <BMP180_ReadCalb+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    4264:	fe 01       	movw	r30, r28
    4266:	e3 5a       	subi	r30, 0xA3	; 163
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	60 81       	ld	r22, Z
    426c:	71 81       	ldd	r23, Z+1	; 0x01
    426e:	82 81       	ldd	r24, Z+2	; 0x02
    4270:	93 81       	ldd	r25, Z+3	; 0x03
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	4a e7       	ldi	r20, 0x7A	; 122
    4278:	54 e4       	ldi	r21, 0x44	; 68
    427a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    427e:	dc 01       	movw	r26, r24
    4280:	cb 01       	movw	r24, r22
    4282:	fe 01       	movw	r30, r28
    4284:	ec 5a       	subi	r30, 0xAC	; 172
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	80 83       	st	Z, r24
    428a:	91 83       	std	Z+1, r25	; 0x01
    428c:	a2 83       	std	Z+2, r26	; 0x02
    428e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4290:	8e 01       	movw	r16, r28
    4292:	00 5b       	subi	r16, 0xB0	; 176
    4294:	1f 4f       	sbci	r17, 0xFF	; 255
    4296:	fe 01       	movw	r30, r28
    4298:	ec 5a       	subi	r30, 0xAC	; 172
    429a:	ff 4f       	sbci	r31, 0xFF	; 255
    429c:	60 81       	ld	r22, Z
    429e:	71 81       	ldd	r23, Z+1	; 0x01
    42a0:	82 81       	ldd	r24, Z+2	; 0x02
    42a2:	93 81       	ldd	r25, Z+3	; 0x03
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	4a e7       	ldi	r20, 0x7A	; 122
    42aa:	55 e4       	ldi	r21, 0x45	; 69
    42ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	f8 01       	movw	r30, r16
    42b6:	80 83       	st	Z, r24
    42b8:	91 83       	std	Z+1, r25	; 0x01
    42ba:	a2 83       	std	Z+2, r26	; 0x02
    42bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42be:	fe 01       	movw	r30, r28
    42c0:	e0 5b       	subi	r30, 0xB0	; 176
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	60 81       	ld	r22, Z
    42c6:	71 81       	ldd	r23, Z+1	; 0x01
    42c8:	82 81       	ldd	r24, Z+2	; 0x02
    42ca:	93 81       	ldd	r25, Z+3	; 0x03
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	40 e8       	ldi	r20, 0x80	; 128
    42d2:	5f e3       	ldi	r21, 0x3F	; 63
    42d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d8:	88 23       	and	r24, r24
    42da:	44 f4       	brge	.+16     	; 0x42ec <BMP180_ReadCalb+0x3cc>
		__ticks = 1;
    42dc:	fe 01       	movw	r30, r28
    42de:	e2 5b       	subi	r30, 0xB2	; 178
    42e0:	ff 4f       	sbci	r31, 0xFF	; 255
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	91 83       	std	Z+1, r25	; 0x01
    42e8:	80 83       	st	Z, r24
    42ea:	64 c0       	rjmp	.+200    	; 0x43b4 <BMP180_ReadCalb+0x494>
	else if (__tmp > 65535)
    42ec:	fe 01       	movw	r30, r28
    42ee:	e0 5b       	subi	r30, 0xB0	; 176
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	60 81       	ld	r22, Z
    42f4:	71 81       	ldd	r23, Z+1	; 0x01
    42f6:	82 81       	ldd	r24, Z+2	; 0x02
    42f8:	93 81       	ldd	r25, Z+3	; 0x03
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	3f ef       	ldi	r19, 0xFF	; 255
    42fe:	4f e7       	ldi	r20, 0x7F	; 127
    4300:	57 e4       	ldi	r21, 0x47	; 71
    4302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4306:	18 16       	cp	r1, r24
    4308:	0c f0       	brlt	.+2      	; 0x430c <BMP180_ReadCalb+0x3ec>
    430a:	43 c0       	rjmp	.+134    	; 0x4392 <BMP180_ReadCalb+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    430c:	fe 01       	movw	r30, r28
    430e:	ec 5a       	subi	r30, 0xAC	; 172
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	60 81       	ld	r22, Z
    4314:	71 81       	ldd	r23, Z+1	; 0x01
    4316:	82 81       	ldd	r24, Z+2	; 0x02
    4318:	93 81       	ldd	r25, Z+3	; 0x03
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	40 e2       	ldi	r20, 0x20	; 32
    4320:	51 e4       	ldi	r21, 0x41	; 65
    4322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	8e 01       	movw	r16, r28
    432c:	02 5b       	subi	r16, 0xB2	; 178
    432e:	1f 4f       	sbci	r17, 0xFF	; 255
    4330:	bc 01       	movw	r22, r24
    4332:	cd 01       	movw	r24, r26
    4334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	f8 01       	movw	r30, r16
    433e:	91 83       	std	Z+1, r25	; 0x01
    4340:	80 83       	st	Z, r24
    4342:	1f c0       	rjmp	.+62     	; 0x4382 <BMP180_ReadCalb+0x462>
    4344:	fe 01       	movw	r30, r28
    4346:	e4 5b       	subi	r30, 0xB4	; 180
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	80 e9       	ldi	r24, 0x90	; 144
    434c:	91 e0       	ldi	r25, 0x01	; 1
    434e:	91 83       	std	Z+1, r25	; 0x01
    4350:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4352:	fe 01       	movw	r30, r28
    4354:	e4 5b       	subi	r30, 0xB4	; 180
    4356:	ff 4f       	sbci	r31, 0xFF	; 255
    4358:	80 81       	ld	r24, Z
    435a:	91 81       	ldd	r25, Z+1	; 0x01
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	f1 f7       	brne	.-4      	; 0x435c <BMP180_ReadCalb+0x43c>
    4360:	fe 01       	movw	r30, r28
    4362:	e4 5b       	subi	r30, 0xB4	; 180
    4364:	ff 4f       	sbci	r31, 0xFF	; 255
    4366:	91 83       	std	Z+1, r25	; 0x01
    4368:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436a:	de 01       	movw	r26, r28
    436c:	a2 5b       	subi	r26, 0xB2	; 178
    436e:	bf 4f       	sbci	r27, 0xFF	; 255
    4370:	fe 01       	movw	r30, r28
    4372:	e2 5b       	subi	r30, 0xB2	; 178
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 81       	ld	r24, Z
    4378:	91 81       	ldd	r25, Z+1	; 0x01
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	11 96       	adiw	r26, 0x01	; 1
    437e:	9c 93       	st	X, r25
    4380:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4382:	fe 01       	movw	r30, r28
    4384:	e2 5b       	subi	r30, 0xB2	; 178
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 81       	ld	r24, Z
    438a:	91 81       	ldd	r25, Z+1	; 0x01
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	d1 f6       	brne	.-76     	; 0x4344 <BMP180_ReadCalb+0x424>
    4390:	4b c0       	rjmp	.+150    	; 0x4428 <BMP180_ReadCalb+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4392:	8e 01       	movw	r16, r28
    4394:	02 5b       	subi	r16, 0xB2	; 178
    4396:	1f 4f       	sbci	r17, 0xFF	; 255
    4398:	fe 01       	movw	r30, r28
    439a:	e0 5b       	subi	r30, 0xB0	; 176
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	60 81       	ld	r22, Z
    43a0:	71 81       	ldd	r23, Z+1	; 0x01
    43a2:	82 81       	ldd	r24, Z+2	; 0x02
    43a4:	93 81       	ldd	r25, Z+3	; 0x03
    43a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	f8 01       	movw	r30, r16
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	80 83       	st	Z, r24
    43b4:	de 01       	movw	r26, r28
    43b6:	a6 5b       	subi	r26, 0xB6	; 182
    43b8:	bf 4f       	sbci	r27, 0xFF	; 255
    43ba:	fe 01       	movw	r30, r28
    43bc:	e2 5b       	subi	r30, 0xB2	; 178
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	80 81       	ld	r24, Z
    43c2:	91 81       	ldd	r25, Z+1	; 0x01
    43c4:	11 96       	adiw	r26, 0x01	; 1
    43c6:	9c 93       	st	X, r25
    43c8:	8e 93       	st	-X, r24
    43ca:	fe 01       	movw	r30, r28
    43cc:	e6 5b       	subi	r30, 0xB6	; 182
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	80 81       	ld	r24, Z
    43d2:	91 81       	ldd	r25, Z+1	; 0x01
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <BMP180_ReadCalb+0x4b4>
    43d8:	fe 01       	movw	r30, r28
    43da:	e6 5b       	subi	r30, 0xB6	; 182
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	80 83       	st	Z, r24
    43e2:	22 c0       	rjmp	.+68     	; 0x4428 <BMP180_ReadCalb+0x508>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43e4:	8e 01       	movw	r16, r28
    43e6:	08 5a       	subi	r16, 0xA8	; 168
    43e8:	1f 4f       	sbci	r17, 0xFF	; 255
    43ea:	fe 01       	movw	r30, r28
    43ec:	e7 5a       	subi	r30, 0xA7	; 167
    43ee:	ff 4f       	sbci	r31, 0xFF	; 255
    43f0:	60 81       	ld	r22, Z
    43f2:	71 81       	ldd	r23, Z+1	; 0x01
    43f4:	82 81       	ldd	r24, Z+2	; 0x02
    43f6:	93 81       	ldd	r25, Z+3	; 0x03
    43f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	f8 01       	movw	r30, r16
    4402:	80 83       	st	Z, r24
    4404:	de 01       	movw	r26, r28
    4406:	a7 5b       	subi	r26, 0xB7	; 183
    4408:	bf 4f       	sbci	r27, 0xFF	; 255
    440a:	fe 01       	movw	r30, r28
    440c:	e8 5a       	subi	r30, 0xA8	; 168
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	80 81       	ld	r24, Z
    4412:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4414:	fe 01       	movw	r30, r28
    4416:	e7 5b       	subi	r30, 0xB7	; 183
    4418:	ff 4f       	sbci	r31, 0xFF	; 255
    441a:	80 81       	ld	r24, Z
    441c:	8a 95       	dec	r24
    441e:	f1 f7       	brne	.-4      	; 0x441c <BMP180_ReadCalb+0x4fc>
    4420:	fe 01       	movw	r30, r28
    4422:	e7 5b       	subi	r30, 0xB7	; 183
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	80 83       	st	Z, r24
		_delay_us(10);
		TWI_Repeated_start(BMP180_ADDRESS_R);	// To read
    4428:	8f ee       	ldi	r24, 0xEF	; 239
    442a:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
    442e:	fe 01       	movw	r30, r28
    4430:	eb 5b       	subi	r30, 0xBB	; 187
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	a0 e2       	ldi	r26, 0x20	; 32
    443a:	b1 e4       	ldi	r27, 0x41	; 65
    443c:	80 83       	st	Z, r24
    443e:	91 83       	std	Z+1, r25	; 0x01
    4440:	a2 83       	std	Z+2, r26	; 0x02
    4442:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4444:	8e 01       	movw	r16, r28
    4446:	0f 5b       	subi	r16, 0xBF	; 191
    4448:	1f 4f       	sbci	r17, 0xFF	; 255
    444a:	fe 01       	movw	r30, r28
    444c:	eb 5b       	subi	r30, 0xBB	; 187
    444e:	ff 4f       	sbci	r31, 0xFF	; 255
    4450:	60 81       	ld	r22, Z
    4452:	71 81       	ldd	r23, Z+1	; 0x01
    4454:	82 81       	ldd	r24, Z+2	; 0x02
    4456:	93 81       	ldd	r25, Z+3	; 0x03
    4458:	2b ea       	ldi	r18, 0xAB	; 171
    445a:	3a ea       	ldi	r19, 0xAA	; 170
    445c:	4a ea       	ldi	r20, 0xAA	; 170
    445e:	50 e4       	ldi	r21, 0x40	; 64
    4460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4464:	dc 01       	movw	r26, r24
    4466:	cb 01       	movw	r24, r22
    4468:	f8 01       	movw	r30, r16
    446a:	80 83       	st	Z, r24
    446c:	91 83       	std	Z+1, r25	; 0x01
    446e:	a2 83       	std	Z+2, r26	; 0x02
    4470:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4472:	fe 01       	movw	r30, r28
    4474:	ef 5b       	subi	r30, 0xBF	; 191
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	60 81       	ld	r22, Z
    447a:	71 81       	ldd	r23, Z+1	; 0x01
    447c:	82 81       	ldd	r24, Z+2	; 0x02
    447e:	93 81       	ldd	r25, Z+3	; 0x03
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	40 e8       	ldi	r20, 0x80	; 128
    4486:	5f e3       	ldi	r21, 0x3F	; 63
    4488:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    448c:	88 23       	and	r24, r24
    448e:	34 f4       	brge	.+12     	; 0x449c <BMP180_ReadCalb+0x57c>
		__ticks = 1;
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	fe 01       	movw	r30, r28
    4494:	e0 5c       	subi	r30, 0xC0	; 192
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	80 83       	st	Z, r24
    449a:	9d c0       	rjmp	.+314    	; 0x45d6 <BMP180_ReadCalb+0x6b6>
	else if (__tmp > 255)
    449c:	fe 01       	movw	r30, r28
    449e:	ef 5b       	subi	r30, 0xBF	; 191
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	60 81       	ld	r22, Z
    44a4:	71 81       	ldd	r23, Z+1	; 0x01
    44a6:	82 81       	ldd	r24, Z+2	; 0x02
    44a8:	93 81       	ldd	r25, Z+3	; 0x03
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	4f e7       	ldi	r20, 0x7F	; 127
    44b0:	53 e4       	ldi	r21, 0x43	; 67
    44b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44b6:	18 16       	cp	r1, r24
    44b8:	0c f0       	brlt	.+2      	; 0x44bc <BMP180_ReadCalb+0x59c>
    44ba:	7e c0       	rjmp	.+252    	; 0x45b8 <BMP180_ReadCalb+0x698>
	{
		_delay_ms(__us / 1000.0);
    44bc:	fe 01       	movw	r30, r28
    44be:	eb 5b       	subi	r30, 0xBB	; 187
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	60 81       	ld	r22, Z
    44c4:	71 81       	ldd	r23, Z+1	; 0x01
    44c6:	82 81       	ldd	r24, Z+2	; 0x02
    44c8:	93 81       	ldd	r25, Z+3	; 0x03
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	4a e7       	ldi	r20, 0x7A	; 122
    44d0:	54 e4       	ldi	r21, 0x44	; 68
    44d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44d6:	dc 01       	movw	r26, r24
    44d8:	cb 01       	movw	r24, r22
    44da:	8c af       	std	Y+60, r24	; 0x3c
    44dc:	9d af       	std	Y+61, r25	; 0x3d
    44de:	ae af       	std	Y+62, r26	; 0x3e
    44e0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    44e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    44e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    44e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    44ea:	20 e0       	ldi	r18, 0x00	; 0
    44ec:	30 e0       	ldi	r19, 0x00	; 0
    44ee:	4a e7       	ldi	r20, 0x7A	; 122
    44f0:	55 e4       	ldi	r21, 0x45	; 69
    44f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	88 af       	std	Y+56, r24	; 0x38
    44fc:	99 af       	std	Y+57, r25	; 0x39
    44fe:	aa af       	std	Y+58, r26	; 0x3a
    4500:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4502:	68 ad       	ldd	r22, Y+56	; 0x38
    4504:	79 ad       	ldd	r23, Y+57	; 0x39
    4506:	8a ad       	ldd	r24, Y+58	; 0x3a
    4508:	9b ad       	ldd	r25, Y+59	; 0x3b
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e8       	ldi	r20, 0x80	; 128
    4510:	5f e3       	ldi	r21, 0x3F	; 63
    4512:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4516:	88 23       	and	r24, r24
    4518:	2c f4       	brge	.+10     	; 0x4524 <BMP180_ReadCalb+0x604>
		__ticks = 1;
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	9f ab       	std	Y+55, r25	; 0x37
    4520:	8e ab       	std	Y+54, r24	; 0x36
    4522:	3f c0       	rjmp	.+126    	; 0x45a2 <BMP180_ReadCalb+0x682>
	else if (__tmp > 65535)
    4524:	68 ad       	ldd	r22, Y+56	; 0x38
    4526:	79 ad       	ldd	r23, Y+57	; 0x39
    4528:	8a ad       	ldd	r24, Y+58	; 0x3a
    452a:	9b ad       	ldd	r25, Y+59	; 0x3b
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	3f ef       	ldi	r19, 0xFF	; 255
    4530:	4f e7       	ldi	r20, 0x7F	; 127
    4532:	57 e4       	ldi	r21, 0x47	; 71
    4534:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4538:	18 16       	cp	r1, r24
    453a:	4c f5       	brge	.+82     	; 0x458e <BMP180_ReadCalb+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    453c:	6c ad       	ldd	r22, Y+60	; 0x3c
    453e:	7d ad       	ldd	r23, Y+61	; 0x3d
    4540:	8e ad       	ldd	r24, Y+62	; 0x3e
    4542:	9f ad       	ldd	r25, Y+63	; 0x3f
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e2       	ldi	r20, 0x20	; 32
    454a:	51 e4       	ldi	r21, 0x41	; 65
    454c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	bc 01       	movw	r22, r24
    4556:	cd 01       	movw	r24, r26
    4558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	9f ab       	std	Y+55, r25	; 0x37
    4562:	8e ab       	std	Y+54, r24	; 0x36
    4564:	0f c0       	rjmp	.+30     	; 0x4584 <BMP180_ReadCalb+0x664>
    4566:	80 e9       	ldi	r24, 0x90	; 144
    4568:	91 e0       	ldi	r25, 0x01	; 1
    456a:	9d ab       	std	Y+53, r25	; 0x35
    456c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    456e:	8c a9       	ldd	r24, Y+52	; 0x34
    4570:	9d a9       	ldd	r25, Y+53	; 0x35
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	f1 f7       	brne	.-4      	; 0x4572 <BMP180_ReadCalb+0x652>
    4576:	9d ab       	std	Y+53, r25	; 0x35
    4578:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    457a:	8e a9       	ldd	r24, Y+54	; 0x36
    457c:	9f a9       	ldd	r25, Y+55	; 0x37
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	9f ab       	std	Y+55, r25	; 0x37
    4582:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4584:	8e a9       	ldd	r24, Y+54	; 0x36
    4586:	9f a9       	ldd	r25, Y+55	; 0x37
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	69 f7       	brne	.-38     	; 0x4566 <BMP180_ReadCalb+0x646>
    458c:	2d c0       	rjmp	.+90     	; 0x45e8 <BMP180_ReadCalb+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458e:	68 ad       	ldd	r22, Y+56	; 0x38
    4590:	79 ad       	ldd	r23, Y+57	; 0x39
    4592:	8a ad       	ldd	r24, Y+58	; 0x3a
    4594:	9b ad       	ldd	r25, Y+59	; 0x3b
    4596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	9f ab       	std	Y+55, r25	; 0x37
    45a0:	8e ab       	std	Y+54, r24	; 0x36
    45a2:	8e a9       	ldd	r24, Y+54	; 0x36
    45a4:	9f a9       	ldd	r25, Y+55	; 0x37
    45a6:	9b ab       	std	Y+51, r25	; 0x33
    45a8:	8a ab       	std	Y+50, r24	; 0x32
    45aa:	8a a9       	ldd	r24, Y+50	; 0x32
    45ac:	9b a9       	ldd	r25, Y+51	; 0x33
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	f1 f7       	brne	.-4      	; 0x45ae <BMP180_ReadCalb+0x68e>
    45b2:	9b ab       	std	Y+51, r25	; 0x33
    45b4:	8a ab       	std	Y+50, r24	; 0x32
    45b6:	18 c0       	rjmp	.+48     	; 0x45e8 <BMP180_ReadCalb+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    45b8:	fe 01       	movw	r30, r28
    45ba:	ef 5b       	subi	r30, 0xBF	; 191
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	60 81       	ld	r22, Z
    45c0:	71 81       	ldd	r23, Z+1	; 0x01
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	93 81       	ldd	r25, Z+3	; 0x03
    45c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	fe 01       	movw	r30, r28
    45d0:	e0 5c       	subi	r30, 0xC0	; 192
    45d2:	ff 4f       	sbci	r31, 0xFF	; 255
    45d4:	80 83       	st	Z, r24
    45d6:	fe 01       	movw	r30, r28
    45d8:	e0 5c       	subi	r30, 0xC0	; 192
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	80 81       	ld	r24, Z
    45de:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    45e0:	89 a9       	ldd	r24, Y+49	; 0x31
    45e2:	8a 95       	dec	r24
    45e4:	f1 f7       	brne	.-4      	; 0x45e2 <BMP180_ReadCalb+0x6c2>
    45e6:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(10);
		Callib_Data[i] = TWI_ReadByteWithNACK();
    45e8:	fe 01       	movw	r30, r28
    45ea:	e7 58       	subi	r30, 0x87	; 135
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	00 81       	ld	r16, Z
    45f0:	11 81       	ldd	r17, Z+1	; 0x01
    45f2:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    45f6:	28 2f       	mov	r18, r24
    45f8:	ce 01       	movw	r24, r28
    45fa:	83 58       	subi	r24, 0x83	; 131
    45fc:	9f 4f       	sbci	r25, 0xFF	; 255
    45fe:	fc 01       	movw	r30, r24
    4600:	e0 0f       	add	r30, r16
    4602:	f1 1f       	adc	r31, r17
    4604:	20 83       	st	Z, r18
    4606:	80 e0       	ldi	r24, 0x00	; 0
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	a0 e2       	ldi	r26, 0x20	; 32
    460c:	b1 e4       	ldi	r27, 0x41	; 65
    460e:	8d a7       	std	Y+45, r24	; 0x2d
    4610:	9e a7       	std	Y+46, r25	; 0x2e
    4612:	af a7       	std	Y+47, r26	; 0x2f
    4614:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4616:	6d a5       	ldd	r22, Y+45	; 0x2d
    4618:	7e a5       	ldd	r23, Y+46	; 0x2e
    461a:	8f a5       	ldd	r24, Y+47	; 0x2f
    461c:	98 a9       	ldd	r25, Y+48	; 0x30
    461e:	2b ea       	ldi	r18, 0xAB	; 171
    4620:	3a ea       	ldi	r19, 0xAA	; 170
    4622:	4a ea       	ldi	r20, 0xAA	; 170
    4624:	50 e4       	ldi	r21, 0x40	; 64
    4626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	89 a7       	std	Y+41, r24	; 0x29
    4630:	9a a7       	std	Y+42, r25	; 0x2a
    4632:	ab a7       	std	Y+43, r26	; 0x2b
    4634:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4636:	69 a5       	ldd	r22, Y+41	; 0x29
    4638:	7a a5       	ldd	r23, Y+42	; 0x2a
    463a:	8b a5       	ldd	r24, Y+43	; 0x2b
    463c:	9c a5       	ldd	r25, Y+44	; 0x2c
    463e:	20 e0       	ldi	r18, 0x00	; 0
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	40 e8       	ldi	r20, 0x80	; 128
    4644:	5f e3       	ldi	r21, 0x3F	; 63
    4646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    464a:	88 23       	and	r24, r24
    464c:	1c f4       	brge	.+6      	; 0x4654 <BMP180_ReadCalb+0x734>
		__ticks = 1;
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	88 a7       	std	Y+40, r24	; 0x28
    4652:	91 c0       	rjmp	.+290    	; 0x4776 <BMP180_ReadCalb+0x856>
	else if (__tmp > 255)
    4654:	69 a5       	ldd	r22, Y+41	; 0x29
    4656:	7a a5       	ldd	r23, Y+42	; 0x2a
    4658:	8b a5       	ldd	r24, Y+43	; 0x2b
    465a:	9c a5       	ldd	r25, Y+44	; 0x2c
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	4f e7       	ldi	r20, 0x7F	; 127
    4662:	53 e4       	ldi	r21, 0x43	; 67
    4664:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4668:	18 16       	cp	r1, r24
    466a:	0c f0       	brlt	.+2      	; 0x466e <BMP180_ReadCalb+0x74e>
    466c:	7b c0       	rjmp	.+246    	; 0x4764 <BMP180_ReadCalb+0x844>
	{
		_delay_ms(__us / 1000.0);
    466e:	6d a5       	ldd	r22, Y+45	; 0x2d
    4670:	7e a5       	ldd	r23, Y+46	; 0x2e
    4672:	8f a5       	ldd	r24, Y+47	; 0x2f
    4674:	98 a9       	ldd	r25, Y+48	; 0x30
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	4a e7       	ldi	r20, 0x7A	; 122
    467c:	54 e4       	ldi	r21, 0x44	; 68
    467e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	8c a3       	std	Y+36, r24	; 0x24
    4688:	9d a3       	std	Y+37, r25	; 0x25
    468a:	ae a3       	std	Y+38, r26	; 0x26
    468c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    468e:	6c a1       	ldd	r22, Y+36	; 0x24
    4690:	7d a1       	ldd	r23, Y+37	; 0x25
    4692:	8e a1       	ldd	r24, Y+38	; 0x26
    4694:	9f a1       	ldd	r25, Y+39	; 0x27
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	4a e7       	ldi	r20, 0x7A	; 122
    469c:	55 e4       	ldi	r21, 0x45	; 69
    469e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	88 a3       	std	Y+32, r24	; 0x20
    46a8:	99 a3       	std	Y+33, r25	; 0x21
    46aa:	aa a3       	std	Y+34, r26	; 0x22
    46ac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    46ae:	68 a1       	ldd	r22, Y+32	; 0x20
    46b0:	79 a1       	ldd	r23, Y+33	; 0x21
    46b2:	8a a1       	ldd	r24, Y+34	; 0x22
    46b4:	9b a1       	ldd	r25, Y+35	; 0x23
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e8       	ldi	r20, 0x80	; 128
    46bc:	5f e3       	ldi	r21, 0x3F	; 63
    46be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46c2:	88 23       	and	r24, r24
    46c4:	2c f4       	brge	.+10     	; 0x46d0 <BMP180_ReadCalb+0x7b0>
		__ticks = 1;
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	9f 8f       	std	Y+31, r25	; 0x1f
    46cc:	8e 8f       	std	Y+30, r24	; 0x1e
    46ce:	3f c0       	rjmp	.+126    	; 0x474e <BMP180_ReadCalb+0x82e>
	else if (__tmp > 65535)
    46d0:	68 a1       	ldd	r22, Y+32	; 0x20
    46d2:	79 a1       	ldd	r23, Y+33	; 0x21
    46d4:	8a a1       	ldd	r24, Y+34	; 0x22
    46d6:	9b a1       	ldd	r25, Y+35	; 0x23
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	3f ef       	ldi	r19, 0xFF	; 255
    46dc:	4f e7       	ldi	r20, 0x7F	; 127
    46de:	57 e4       	ldi	r21, 0x47	; 71
    46e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46e4:	18 16       	cp	r1, r24
    46e6:	4c f5       	brge	.+82     	; 0x473a <BMP180_ReadCalb+0x81a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e8:	6c a1       	ldd	r22, Y+36	; 0x24
    46ea:	7d a1       	ldd	r23, Y+37	; 0x25
    46ec:	8e a1       	ldd	r24, Y+38	; 0x26
    46ee:	9f a1       	ldd	r25, Y+39	; 0x27
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	40 e2       	ldi	r20, 0x20	; 32
    46f6:	51 e4       	ldi	r21, 0x41	; 65
    46f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fc:	dc 01       	movw	r26, r24
    46fe:	cb 01       	movw	r24, r22
    4700:	bc 01       	movw	r22, r24
    4702:	cd 01       	movw	r24, r26
    4704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	9f 8f       	std	Y+31, r25	; 0x1f
    470e:	8e 8f       	std	Y+30, r24	; 0x1e
    4710:	0f c0       	rjmp	.+30     	; 0x4730 <BMP180_ReadCalb+0x810>
    4712:	80 e9       	ldi	r24, 0x90	; 144
    4714:	91 e0       	ldi	r25, 0x01	; 1
    4716:	9d 8f       	std	Y+29, r25	; 0x1d
    4718:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    471a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    471c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <BMP180_ReadCalb+0x7fe>
    4722:	9d 8f       	std	Y+29, r25	; 0x1d
    4724:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4726:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4728:	9f 8d       	ldd	r25, Y+31	; 0x1f
    472a:	01 97       	sbiw	r24, 0x01	; 1
    472c:	9f 8f       	std	Y+31, r25	; 0x1f
    472e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4730:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4732:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4734:	00 97       	sbiw	r24, 0x00	; 0
    4736:	69 f7       	brne	.-38     	; 0x4712 <BMP180_ReadCalb+0x7f2>
    4738:	24 c0       	rjmp	.+72     	; 0x4782 <BMP180_ReadCalb+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473a:	68 a1       	ldd	r22, Y+32	; 0x20
    473c:	79 a1       	ldd	r23, Y+33	; 0x21
    473e:	8a a1       	ldd	r24, Y+34	; 0x22
    4740:	9b a1       	ldd	r25, Y+35	; 0x23
    4742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	9f 8f       	std	Y+31, r25	; 0x1f
    474c:	8e 8f       	std	Y+30, r24	; 0x1e
    474e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4750:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4752:	9b 8f       	std	Y+27, r25	; 0x1b
    4754:	8a 8f       	std	Y+26, r24	; 0x1a
    4756:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4758:	9b 8d       	ldd	r25, Y+27	; 0x1b
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	f1 f7       	brne	.-4      	; 0x475a <BMP180_ReadCalb+0x83a>
    475e:	9b 8f       	std	Y+27, r25	; 0x1b
    4760:	8a 8f       	std	Y+26, r24	; 0x1a
    4762:	0f c0       	rjmp	.+30     	; 0x4782 <BMP180_ReadCalb+0x862>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4764:	69 a5       	ldd	r22, Y+41	; 0x29
    4766:	7a a5       	ldd	r23, Y+42	; 0x2a
    4768:	8b a5       	ldd	r24, Y+43	; 0x2b
    476a:	9c a5       	ldd	r25, Y+44	; 0x2c
    476c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	88 a7       	std	Y+40, r24	; 0x28
    4776:	88 a5       	ldd	r24, Y+40	; 0x28
    4778:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    477a:	89 8d       	ldd	r24, Y+25	; 0x19
    477c:	8a 95       	dec	r24
    477e:	f1 f7       	brne	.-4      	; 0x477c <BMP180_ReadCalb+0x85c>
    4780:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		TWI_Stop();
    4782:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	a0 e2       	ldi	r26, 0x20	; 32
    478c:	b1 e4       	ldi	r27, 0x41	; 65
    478e:	8d 8b       	std	Y+21, r24	; 0x15
    4790:	9e 8b       	std	Y+22, r25	; 0x16
    4792:	af 8b       	std	Y+23, r26	; 0x17
    4794:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4796:	6d 89       	ldd	r22, Y+21	; 0x15
    4798:	7e 89       	ldd	r23, Y+22	; 0x16
    479a:	8f 89       	ldd	r24, Y+23	; 0x17
    479c:	98 8d       	ldd	r25, Y+24	; 0x18
    479e:	2b ea       	ldi	r18, 0xAB	; 171
    47a0:	3a ea       	ldi	r19, 0xAA	; 170
    47a2:	4a ea       	ldi	r20, 0xAA	; 170
    47a4:	50 e4       	ldi	r21, 0x40	; 64
    47a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47aa:	dc 01       	movw	r26, r24
    47ac:	cb 01       	movw	r24, r22
    47ae:	89 8b       	std	Y+17, r24	; 0x11
    47b0:	9a 8b       	std	Y+18, r25	; 0x12
    47b2:	ab 8b       	std	Y+19, r26	; 0x13
    47b4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    47b6:	69 89       	ldd	r22, Y+17	; 0x11
    47b8:	7a 89       	ldd	r23, Y+18	; 0x12
    47ba:	8b 89       	ldd	r24, Y+19	; 0x13
    47bc:	9c 89       	ldd	r25, Y+20	; 0x14
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	40 e8       	ldi	r20, 0x80	; 128
    47c4:	5f e3       	ldi	r21, 0x3F	; 63
    47c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ca:	88 23       	and	r24, r24
    47cc:	1c f4       	brge	.+6      	; 0x47d4 <BMP180_ReadCalb+0x8b4>
		__ticks = 1;
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	88 8b       	std	Y+16, r24	; 0x10
    47d2:	91 c0       	rjmp	.+290    	; 0x48f6 <BMP180_ReadCalb+0x9d6>
	else if (__tmp > 255)
    47d4:	69 89       	ldd	r22, Y+17	; 0x11
    47d6:	7a 89       	ldd	r23, Y+18	; 0x12
    47d8:	8b 89       	ldd	r24, Y+19	; 0x13
    47da:	9c 89       	ldd	r25, Y+20	; 0x14
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	4f e7       	ldi	r20, 0x7F	; 127
    47e2:	53 e4       	ldi	r21, 0x43	; 67
    47e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47e8:	18 16       	cp	r1, r24
    47ea:	0c f0       	brlt	.+2      	; 0x47ee <BMP180_ReadCalb+0x8ce>
    47ec:	7b c0       	rjmp	.+246    	; 0x48e4 <BMP180_ReadCalb+0x9c4>
	{
		_delay_ms(__us / 1000.0);
    47ee:	6d 89       	ldd	r22, Y+21	; 0x15
    47f0:	7e 89       	ldd	r23, Y+22	; 0x16
    47f2:	8f 89       	ldd	r24, Y+23	; 0x17
    47f4:	98 8d       	ldd	r25, Y+24	; 0x18
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	4a e7       	ldi	r20, 0x7A	; 122
    47fc:	54 e4       	ldi	r21, 0x44	; 68
    47fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4802:	dc 01       	movw	r26, r24
    4804:	cb 01       	movw	r24, r22
    4806:	8c 87       	std	Y+12, r24	; 0x0c
    4808:	9d 87       	std	Y+13, r25	; 0x0d
    480a:	ae 87       	std	Y+14, r26	; 0x0e
    480c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4810:	7d 85       	ldd	r23, Y+13	; 0x0d
    4812:	8e 85       	ldd	r24, Y+14	; 0x0e
    4814:	9f 85       	ldd	r25, Y+15	; 0x0f
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	4a e7       	ldi	r20, 0x7A	; 122
    481c:	55 e4       	ldi	r21, 0x45	; 69
    481e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	88 87       	std	Y+8, r24	; 0x08
    4828:	99 87       	std	Y+9, r25	; 0x09
    482a:	aa 87       	std	Y+10, r26	; 0x0a
    482c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    482e:	68 85       	ldd	r22, Y+8	; 0x08
    4830:	79 85       	ldd	r23, Y+9	; 0x09
    4832:	8a 85       	ldd	r24, Y+10	; 0x0a
    4834:	9b 85       	ldd	r25, Y+11	; 0x0b
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e8       	ldi	r20, 0x80	; 128
    483c:	5f e3       	ldi	r21, 0x3F	; 63
    483e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4842:	88 23       	and	r24, r24
    4844:	2c f4       	brge	.+10     	; 0x4850 <BMP180_ReadCalb+0x930>
		__ticks = 1;
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	9f 83       	std	Y+7, r25	; 0x07
    484c:	8e 83       	std	Y+6, r24	; 0x06
    484e:	3f c0       	rjmp	.+126    	; 0x48ce <BMP180_ReadCalb+0x9ae>
	else if (__tmp > 65535)
    4850:	68 85       	ldd	r22, Y+8	; 0x08
    4852:	79 85       	ldd	r23, Y+9	; 0x09
    4854:	8a 85       	ldd	r24, Y+10	; 0x0a
    4856:	9b 85       	ldd	r25, Y+11	; 0x0b
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	3f ef       	ldi	r19, 0xFF	; 255
    485c:	4f e7       	ldi	r20, 0x7F	; 127
    485e:	57 e4       	ldi	r21, 0x47	; 71
    4860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4864:	18 16       	cp	r1, r24
    4866:	4c f5       	brge	.+82     	; 0x48ba <BMP180_ReadCalb+0x99a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4868:	6c 85       	ldd	r22, Y+12	; 0x0c
    486a:	7d 85       	ldd	r23, Y+13	; 0x0d
    486c:	8e 85       	ldd	r24, Y+14	; 0x0e
    486e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	40 e2       	ldi	r20, 0x20	; 32
    4876:	51 e4       	ldi	r21, 0x41	; 65
    4878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	bc 01       	movw	r22, r24
    4882:	cd 01       	movw	r24, r26
    4884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	9f 83       	std	Y+7, r25	; 0x07
    488e:	8e 83       	std	Y+6, r24	; 0x06
    4890:	0f c0       	rjmp	.+30     	; 0x48b0 <BMP180_ReadCalb+0x990>
    4892:	80 e9       	ldi	r24, 0x90	; 144
    4894:	91 e0       	ldi	r25, 0x01	; 1
    4896:	9d 83       	std	Y+5, r25	; 0x05
    4898:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    489a:	8c 81       	ldd	r24, Y+4	; 0x04
    489c:	9d 81       	ldd	r25, Y+5	; 0x05
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	f1 f7       	brne	.-4      	; 0x489e <BMP180_ReadCalb+0x97e>
    48a2:	9d 83       	std	Y+5, r25	; 0x05
    48a4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a6:	8e 81       	ldd	r24, Y+6	; 0x06
    48a8:	9f 81       	ldd	r25, Y+7	; 0x07
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	9f 83       	std	Y+7, r25	; 0x07
    48ae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b0:	8e 81       	ldd	r24, Y+6	; 0x06
    48b2:	9f 81       	ldd	r25, Y+7	; 0x07
    48b4:	00 97       	sbiw	r24, 0x00	; 0
    48b6:	69 f7       	brne	.-38     	; 0x4892 <BMP180_ReadCalb+0x972>
    48b8:	24 c0       	rjmp	.+72     	; 0x4902 <BMP180_ReadCalb+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ba:	68 85       	ldd	r22, Y+8	; 0x08
    48bc:	79 85       	ldd	r23, Y+9	; 0x09
    48be:	8a 85       	ldd	r24, Y+10	; 0x0a
    48c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    48c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	9f 83       	std	Y+7, r25	; 0x07
    48cc:	8e 83       	std	Y+6, r24	; 0x06
    48ce:	8e 81       	ldd	r24, Y+6	; 0x06
    48d0:	9f 81       	ldd	r25, Y+7	; 0x07
    48d2:	9b 83       	std	Y+3, r25	; 0x03
    48d4:	8a 83       	std	Y+2, r24	; 0x02
    48d6:	8a 81       	ldd	r24, Y+2	; 0x02
    48d8:	9b 81       	ldd	r25, Y+3	; 0x03
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	f1 f7       	brne	.-4      	; 0x48da <BMP180_ReadCalb+0x9ba>
    48de:	9b 83       	std	Y+3, r25	; 0x03
    48e0:	8a 83       	std	Y+2, r24	; 0x02
    48e2:	0f c0       	rjmp	.+30     	; 0x4902 <BMP180_ReadCalb+0x9e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    48e4:	69 89       	ldd	r22, Y+17	; 0x11
    48e6:	7a 89       	ldd	r23, Y+18	; 0x12
    48e8:	8b 89       	ldd	r24, Y+19	; 0x13
    48ea:	9c 89       	ldd	r25, Y+20	; 0x14
    48ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	88 8b       	std	Y+16, r24	; 0x10
    48f6:	88 89       	ldd	r24, Y+16	; 0x10
    48f8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    48fa:	89 81       	ldd	r24, Y+1	; 0x01
    48fc:	8a 95       	dec	r24
    48fe:	f1 f7       	brne	.-4      	; 0x48fc <BMP180_ReadCalb+0x9dc>
    4900:	89 83       	std	Y+1, r24	; 0x01
void BMP180_ReadCalb(void) {

	uint8_t Callib_Data[22] = { 0 };
	uint16_t Callib_Start = 0xAA;

	for (int i = 0; i < 22; i++) {
    4902:	de 01       	movw	r26, r28
    4904:	a7 58       	subi	r26, 0x87	; 135
    4906:	bf 4f       	sbci	r27, 0xFF	; 255
    4908:	fe 01       	movw	r30, r28
    490a:	e7 58       	subi	r30, 0x87	; 135
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	80 81       	ld	r24, Z
    4910:	91 81       	ldd	r25, Z+1	; 0x01
    4912:	01 96       	adiw	r24, 0x01	; 1
    4914:	11 96       	adiw	r26, 0x01	; 1
    4916:	9c 93       	st	X, r25
    4918:	8e 93       	st	-X, r24
    491a:	fe 01       	movw	r30, r28
    491c:	e7 58       	subi	r30, 0x87	; 135
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	80 81       	ld	r24, Z
    4922:	91 81       	ldd	r25, Z+1	; 0x01
    4924:	86 31       	cpi	r24, 0x16	; 22
    4926:	91 05       	cpc	r25, r1
    4928:	0c f4       	brge	.+2      	; 0x492c <BMP180_ReadCalb+0xa0c>
    492a:	1e cb       	rjmp	.-2500   	; 0x3f68 <BMP180_ReadCalb+0x48>
		_delay_us(10);
		TWI_Stop();
		_delay_us(10);
	}

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
    492c:	fe 01       	movw	r30, r28
    492e:	e3 58       	subi	r30, 0x83	; 131
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	88 2f       	mov	r24, r24
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	38 2f       	mov	r19, r24
    493a:	22 27       	eor	r18, r18
    493c:	fe 01       	movw	r30, r28
    493e:	e3 58       	subi	r30, 0x83	; 131
    4940:	ff 4f       	sbci	r31, 0xFF	; 255
    4942:	81 81       	ldd	r24, Z+1	; 0x01
    4944:	88 2f       	mov	r24, r24
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	82 2b       	or	r24, r18
    494a:	93 2b       	or	r25, r19
    494c:	90 93 09 02 	sts	0x0209, r25
    4950:	80 93 08 02 	sts	0x0208, r24
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
    4954:	fe 01       	movw	r30, r28
    4956:	e3 58       	subi	r30, 0x83	; 131
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	82 81       	ldd	r24, Z+2	; 0x02
    495c:	88 2f       	mov	r24, r24
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	38 2f       	mov	r19, r24
    4962:	22 27       	eor	r18, r18
    4964:	fe 01       	movw	r30, r28
    4966:	e3 58       	subi	r30, 0x83	; 131
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	83 81       	ldd	r24, Z+3	; 0x03
    496c:	88 2f       	mov	r24, r24
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	82 2b       	or	r24, r18
    4972:	93 2b       	or	r25, r19
    4974:	90 93 0b 02 	sts	0x020B, r25
    4978:	80 93 0a 02 	sts	0x020A, r24
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
    497c:	fe 01       	movw	r30, r28
    497e:	e3 58       	subi	r30, 0x83	; 131
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	84 81       	ldd	r24, Z+4	; 0x04
    4984:	88 2f       	mov	r24, r24
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	38 2f       	mov	r19, r24
    498a:	22 27       	eor	r18, r18
    498c:	fe 01       	movw	r30, r28
    498e:	e3 58       	subi	r30, 0x83	; 131
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	85 81       	ldd	r24, Z+5	; 0x05
    4994:	88 2f       	mov	r24, r24
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	82 2b       	or	r24, r18
    499a:	93 2b       	or	r25, r19
    499c:	90 93 0d 02 	sts	0x020D, r25
    49a0:	80 93 0c 02 	sts	0x020C, r24
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
    49a4:	fe 01       	movw	r30, r28
    49a6:	e3 58       	subi	r30, 0x83	; 131
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	86 81       	ldd	r24, Z+6	; 0x06
    49ac:	88 2f       	mov	r24, r24
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	38 2f       	mov	r19, r24
    49b2:	22 27       	eor	r18, r18
    49b4:	fe 01       	movw	r30, r28
    49b6:	e3 58       	subi	r30, 0x83	; 131
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	87 81       	ldd	r24, Z+7	; 0x07
    49bc:	88 2f       	mov	r24, r24
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	82 2b       	or	r24, r18
    49c2:	93 2b       	or	r25, r19
    49c4:	90 93 19 02 	sts	0x0219, r25
    49c8:	80 93 18 02 	sts	0x0218, r24
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
    49cc:	fe 01       	movw	r30, r28
    49ce:	e3 58       	subi	r30, 0x83	; 131
    49d0:	ff 4f       	sbci	r31, 0xFF	; 255
    49d2:	80 85       	ldd	r24, Z+8	; 0x08
    49d4:	88 2f       	mov	r24, r24
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	38 2f       	mov	r19, r24
    49da:	22 27       	eor	r18, r18
    49dc:	fe 01       	movw	r30, r28
    49de:	e3 58       	subi	r30, 0x83	; 131
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	81 85       	ldd	r24, Z+9	; 0x09
    49e4:	88 2f       	mov	r24, r24
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	82 2b       	or	r24, r18
    49ea:	93 2b       	or	r25, r19
    49ec:	90 93 1b 02 	sts	0x021B, r25
    49f0:	80 93 1a 02 	sts	0x021A, r24
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
    49f4:	fe 01       	movw	r30, r28
    49f6:	e3 58       	subi	r30, 0x83	; 131
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	82 85       	ldd	r24, Z+10	; 0x0a
    49fc:	88 2f       	mov	r24, r24
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	38 2f       	mov	r19, r24
    4a02:	22 27       	eor	r18, r18
    4a04:	fe 01       	movw	r30, r28
    4a06:	e3 58       	subi	r30, 0x83	; 131
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	83 85       	ldd	r24, Z+11	; 0x0b
    4a0c:	88 2f       	mov	r24, r24
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	82 2b       	or	r24, r18
    4a12:	93 2b       	or	r25, r19
    4a14:	90 93 1d 02 	sts	0x021D, r25
    4a18:	80 93 1c 02 	sts	0x021C, r24
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e3 58       	subi	r30, 0x83	; 131
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	84 85       	ldd	r24, Z+12	; 0x0c
    4a24:	88 2f       	mov	r24, r24
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	38 2f       	mov	r19, r24
    4a2a:	22 27       	eor	r18, r18
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	e3 58       	subi	r30, 0x83	; 131
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	85 85       	ldd	r24, Z+13	; 0x0d
    4a34:	88 2f       	mov	r24, r24
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	82 2b       	or	r24, r18
    4a3a:	93 2b       	or	r25, r19
    4a3c:	90 93 0f 02 	sts	0x020F, r25
    4a40:	80 93 0e 02 	sts	0x020E, r24
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
    4a44:	fe 01       	movw	r30, r28
    4a46:	e3 58       	subi	r30, 0x83	; 131
    4a48:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4a:	86 85       	ldd	r24, Z+14	; 0x0e
    4a4c:	88 2f       	mov	r24, r24
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	38 2f       	mov	r19, r24
    4a52:	22 27       	eor	r18, r18
    4a54:	fe 01       	movw	r30, r28
    4a56:	e3 58       	subi	r30, 0x83	; 131
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	87 85       	ldd	r24, Z+15	; 0x0f
    4a5c:	88 2f       	mov	r24, r24
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	82 2b       	or	r24, r18
    4a62:	93 2b       	or	r25, r19
    4a64:	90 93 11 02 	sts	0x0211, r25
    4a68:	80 93 10 02 	sts	0x0210, r24
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	e3 58       	subi	r30, 0x83	; 131
    4a70:	ff 4f       	sbci	r31, 0xFF	; 255
    4a72:	80 89       	ldd	r24, Z+16	; 0x10
    4a74:	88 2f       	mov	r24, r24
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	38 2f       	mov	r19, r24
    4a7a:	22 27       	eor	r18, r18
    4a7c:	fe 01       	movw	r30, r28
    4a7e:	e3 58       	subi	r30, 0x83	; 131
    4a80:	ff 4f       	sbci	r31, 0xFF	; 255
    4a82:	81 89       	ldd	r24, Z+17	; 0x11
    4a84:	88 2f       	mov	r24, r24
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	82 2b       	or	r24, r18
    4a8a:	93 2b       	or	r25, r19
    4a8c:	90 93 13 02 	sts	0x0213, r25
    4a90:	80 93 12 02 	sts	0x0212, r24
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
    4a94:	fe 01       	movw	r30, r28
    4a96:	e3 58       	subi	r30, 0x83	; 131
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	82 89       	ldd	r24, Z+18	; 0x12
    4a9c:	88 2f       	mov	r24, r24
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	38 2f       	mov	r19, r24
    4aa2:	22 27       	eor	r18, r18
    4aa4:	fe 01       	movw	r30, r28
    4aa6:	e3 58       	subi	r30, 0x83	; 131
    4aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aaa:	83 89       	ldd	r24, Z+19	; 0x13
    4aac:	88 2f       	mov	r24, r24
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	82 2b       	or	r24, r18
    4ab2:	93 2b       	or	r25, r19
    4ab4:	90 93 15 02 	sts	0x0215, r25
    4ab8:	80 93 14 02 	sts	0x0214, r24
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
    4abc:	fe 01       	movw	r30, r28
    4abe:	e3 58       	subi	r30, 0x83	; 131
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	84 89       	ldd	r24, Z+20	; 0x14
    4ac4:	88 2f       	mov	r24, r24
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	38 2f       	mov	r19, r24
    4aca:	22 27       	eor	r18, r18
    4acc:	fe 01       	movw	r30, r28
    4ace:	e3 58       	subi	r30, 0x83	; 131
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	85 89       	ldd	r24, Z+21	; 0x15
    4ad4:	88 2f       	mov	r24, r24
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	82 2b       	or	r24, r18
    4ada:	93 2b       	or	r25, r19
    4adc:	90 93 17 02 	sts	0x0217, r25
    4ae0:	80 93 16 02 	sts	0x0216, r24

}
    4ae4:	ce 56       	subi	r28, 0x6E	; 110
    4ae6:	df 4f       	sbci	r29, 0xFF	; 255
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	cd bf       	out	0x3d, r28	; 61
    4af2:	cf 91       	pop	r28
    4af4:	df 91       	pop	r29
    4af6:	1f 91       	pop	r17
    4af8:	0f 91       	pop	r16
    4afa:	08 95       	ret

00004afc <Get_UP>:

uint32 Get_UP(void) {
    4afc:	df 93       	push	r29
    4afe:	cf 93       	push	r28
    4b00:	cd b7       	in	r28, 0x3d	; 61
    4b02:	de b7       	in	r29, 0x3e	; 62
    4b04:	66 97       	sbiw	r28, 0x16	; 22
    4b06:	0f b6       	in	r0, 0x3f	; 63
    4b08:	f8 94       	cli
    4b0a:	de bf       	out	0x3e, r29	; 62
    4b0c:	0f be       	out	0x3f, r0	; 63
    4b0e:	cd bf       	out	0x3d, r28	; 61
	// calculate the value to write to the BMP180 control register based on the oversampling setting
	uint8 datatowrite = 0x34 + (OSS << 6);
    4b10:	84 e7       	ldi	r24, 0x74	; 116
    4b12:	8b 8b       	std	Y+19, r24	; 0x13
	// array to store the raw pressure data
	uint8 Pressure_RAW[3] = { 0 };
    4b14:	83 e0       	ldi	r24, 0x03	; 3
    4b16:	fe 01       	movw	r30, r28
    4b18:	74 96       	adiw	r30, 0x14	; 20
    4b1a:	df 01       	movw	r26, r30
    4b1c:	98 2f       	mov	r25, r24
    4b1e:	1d 92       	st	X+, r1
    4b20:	9a 95       	dec	r25
    4b22:	e9 f7       	brne	.-6      	; 0x4b1e <Get_UP+0x22>

	uint32 data = 0;
    4b24:	1f 86       	std	Y+15, r1	; 0x0f
    4b26:	18 8a       	std	Y+16, r1	; 0x10
    4b28:	19 8a       	std	Y+17, r1	; 0x11
    4b2a:	1a 8a       	std	Y+18, r1	; 0x12

	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    4b2c:	8e ee       	ldi	r24, 0xEE	; 238
    4b2e:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    4b32:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// send the address of the BMP180 control register to initiate the pressure measurement
	TWI_WriteByte(0xF4);
    4b36:	84 ef       	ldi	r24, 0xF4	; 244
    4b38:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4b3c:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// send the value calculated above to start the measurement with the selected oversampling setting
	TWI_WriteByte(datatowrite);
    4b40:	8b 89       	ldd	r24, Y+19	; 0x13
    4b42:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4b46:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    4b4a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	a0 ea       	ldi	r26, 0xA0	; 160
    4b54:	b0 e4       	ldi	r27, 0x40	; 64
    4b56:	8b 87       	std	Y+11, r24	; 0x0b
    4b58:	9c 87       	std	Y+12, r25	; 0x0c
    4b5a:	ad 87       	std	Y+13, r26	; 0x0d
    4b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b66:	20 e0       	ldi	r18, 0x00	; 0
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	4a e7       	ldi	r20, 0x7A	; 122
    4b6c:	55 e4       	ldi	r21, 0x45	; 69
    4b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b72:	dc 01       	movw	r26, r24
    4b74:	cb 01       	movw	r24, r22
    4b76:	8f 83       	std	Y+7, r24	; 0x07
    4b78:	98 87       	std	Y+8, r25	; 0x08
    4b7a:	a9 87       	std	Y+9, r26	; 0x09
    4b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b80:	78 85       	ldd	r23, Y+8	; 0x08
    4b82:	89 85       	ldd	r24, Y+9	; 0x09
    4b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b86:	20 e0       	ldi	r18, 0x00	; 0
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e8       	ldi	r20, 0x80	; 128
    4b8c:	5f e3       	ldi	r21, 0x3F	; 63
    4b8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b92:	88 23       	and	r24, r24
    4b94:	2c f4       	brge	.+10     	; 0x4ba0 <Get_UP+0xa4>
		__ticks = 1;
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	9e 83       	std	Y+6, r25	; 0x06
    4b9c:	8d 83       	std	Y+5, r24	; 0x05
    4b9e:	3f c0       	rjmp	.+126    	; 0x4c1e <Get_UP+0x122>
	else if (__tmp > 65535)
    4ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ba2:	78 85       	ldd	r23, Y+8	; 0x08
    4ba4:	89 85       	ldd	r24, Y+9	; 0x09
    4ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	3f ef       	ldi	r19, 0xFF	; 255
    4bac:	4f e7       	ldi	r20, 0x7F	; 127
    4bae:	57 e4       	ldi	r21, 0x47	; 71
    4bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bb4:	18 16       	cp	r1, r24
    4bb6:	4c f5       	brge	.+82     	; 0x4c0a <Get_UP+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	40 e2       	ldi	r20, 0x20	; 32
    4bc6:	51 e4       	ldi	r21, 0x41	; 65
    4bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	bc 01       	movw	r22, r24
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	9e 83       	std	Y+6, r25	; 0x06
    4bde:	8d 83       	std	Y+5, r24	; 0x05
    4be0:	0f c0       	rjmp	.+30     	; 0x4c00 <Get_UP+0x104>
    4be2:	80 e9       	ldi	r24, 0x90	; 144
    4be4:	91 e0       	ldi	r25, 0x01	; 1
    4be6:	9c 83       	std	Y+4, r25	; 0x04
    4be8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4bea:	8b 81       	ldd	r24, Y+3	; 0x03
    4bec:	9c 81       	ldd	r25, Y+4	; 0x04
    4bee:	01 97       	sbiw	r24, 0x01	; 1
    4bf0:	f1 f7       	brne	.-4      	; 0x4bee <Get_UP+0xf2>
    4bf2:	9c 83       	std	Y+4, r25	; 0x04
    4bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfa:	01 97       	sbiw	r24, 0x01	; 1
    4bfc:	9e 83       	std	Y+6, r25	; 0x06
    4bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c00:	8d 81       	ldd	r24, Y+5	; 0x05
    4c02:	9e 81       	ldd	r25, Y+6	; 0x06
    4c04:	00 97       	sbiw	r24, 0x00	; 0
    4c06:	69 f7       	brne	.-38     	; 0x4be2 <Get_UP+0xe6>
    4c08:	14 c0       	rjmp	.+40     	; 0x4c32 <Get_UP+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c0c:	78 85       	ldd	r23, Y+8	; 0x08
    4c0e:	89 85       	ldd	r24, Y+9	; 0x09
    4c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c16:	dc 01       	movw	r26, r24
    4c18:	cb 01       	movw	r24, r22
    4c1a:	9e 83       	std	Y+6, r25	; 0x06
    4c1c:	8d 83       	std	Y+5, r24	; 0x05
    4c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c20:	9e 81       	ldd	r25, Y+6	; 0x06
    4c22:	9a 83       	std	Y+2, r25	; 0x02
    4c24:	89 83       	std	Y+1, r24	; 0x01
    4c26:	89 81       	ldd	r24, Y+1	; 0x01
    4c28:	9a 81       	ldd	r25, Y+2	; 0x02
    4c2a:	01 97       	sbiw	r24, 0x01	; 1
    4c2c:	f1 f7       	brne	.-4      	; 0x4c2a <Get_UP+0x12e>
    4c2e:	9a 83       	std	Y+2, r25	; 0x02
    4c30:	89 83       	std	Y+1, r24	; 0x01



	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4c32:	8e ee       	ldi	r24, 0xEE	; 238
    4c34:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4c38:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_WriteByte(0xF6);
    4c3c:	86 ef       	ldi	r24, 0xF6	; 246
    4c3e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4c42:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4c46:	8f ee       	ldi	r24, 0xEF	; 239
    4c48:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4c4c:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	Pressure_RAW[0] = TWI_ReadByteWithNACK();
    4c50:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4c54:	8c 8b       	std	Y+20, r24	; 0x14
	delay();
    4c56:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Stop();
    4c5a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    4c5e:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4c62:	8e ee       	ldi	r24, 0xEE	; 238
    4c64:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4c68:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_WriteByte(0xF7);
    4c6c:	87 ef       	ldi	r24, 0xF7	; 247
    4c6e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4c72:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4c76:	8f ee       	ldi	r24, 0xEF	; 239
    4c78:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4c7c:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	Pressure_RAW[1] = TWI_ReadByteWithNACK();
    4c80:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4c84:	8d 8b       	std	Y+21, r24	; 0x15
	delay();
    4c86:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Stop();
    4c8a:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    4c8e:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// read the LSB of the raw pressure data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4c92:	8e ee       	ldi	r24, 0xEE	; 238
    4c94:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4c98:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_WriteByte(0xF8);
    4c9c:	88 ef       	ldi	r24, 0xF8	; 248
    4c9e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4ca2:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4ca6:	8f ee       	ldi	r24, 0xEF	; 239
    4ca8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4cac:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	Pressure_RAW[2] = TWI_ReadByteWithNACK();
    4cb0:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4cb4:	8e 8b       	std	Y+22, r24	; 0x16
	delay();
    4cb6:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Stop();
    4cba:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>

	//return ((Pressure_RAW[0] << 8) + Pressure_RAW[1]);

	  //  data = ((Pressure_RAW[0] << 16) + (Pressure_RAW[1] << 8) + Pressure_RAW[2]) >> (8 - OSS);

	    data |= ((uint32_t) Pressure_RAW[0] << 16);
    4cbe:	8c 89       	ldd	r24, Y+20	; 0x14
    4cc0:	88 2f       	mov	r24, r24
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	a0 e0       	ldi	r26, 0x00	; 0
    4cc6:	b0 e0       	ldi	r27, 0x00	; 0
    4cc8:	ac 01       	movw	r20, r24
    4cca:	33 27       	eor	r19, r19
    4ccc:	22 27       	eor	r18, r18
    4cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cd0:	98 89       	ldd	r25, Y+16	; 0x10
    4cd2:	a9 89       	ldd	r26, Y+17	; 0x11
    4cd4:	ba 89       	ldd	r27, Y+18	; 0x12
    4cd6:	82 2b       	or	r24, r18
    4cd8:	93 2b       	or	r25, r19
    4cda:	a4 2b       	or	r26, r20
    4cdc:	b5 2b       	or	r27, r21
    4cde:	8f 87       	std	Y+15, r24	; 0x0f
    4ce0:	98 8b       	std	Y+16, r25	; 0x10
    4ce2:	a9 8b       	std	Y+17, r26	; 0x11
    4ce4:	ba 8b       	std	Y+18, r27	; 0x12
	    data |= ((uint32_t) Pressure_RAW[1] << 8);
    4ce6:	8d 89       	ldd	r24, Y+21	; 0x15
    4ce8:	88 2f       	mov	r24, r24
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	a0 e0       	ldi	r26, 0x00	; 0
    4cee:	b0 e0       	ldi	r27, 0x00	; 0
    4cf0:	22 27       	eor	r18, r18
    4cf2:	38 2f       	mov	r19, r24
    4cf4:	49 2f       	mov	r20, r25
    4cf6:	5a 2f       	mov	r21, r26
    4cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cfa:	98 89       	ldd	r25, Y+16	; 0x10
    4cfc:	a9 89       	ldd	r26, Y+17	; 0x11
    4cfe:	ba 89       	ldd	r27, Y+18	; 0x12
    4d00:	82 2b       	or	r24, r18
    4d02:	93 2b       	or	r25, r19
    4d04:	a4 2b       	or	r26, r20
    4d06:	b5 2b       	or	r27, r21
    4d08:	8f 87       	std	Y+15, r24	; 0x0f
    4d0a:	98 8b       	std	Y+16, r25	; 0x10
    4d0c:	a9 8b       	std	Y+17, r26	; 0x11
    4d0e:	ba 8b       	std	Y+18, r27	; 0x12
	    data |= (uint32_t) Pressure_RAW[2];
    4d10:	8e 89       	ldd	r24, Y+22	; 0x16
    4d12:	28 2f       	mov	r18, r24
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	50 e0       	ldi	r21, 0x00	; 0
    4d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d1c:	98 89       	ldd	r25, Y+16	; 0x10
    4d1e:	a9 89       	ldd	r26, Y+17	; 0x11
    4d20:	ba 89       	ldd	r27, Y+18	; 0x12
    4d22:	82 2b       	or	r24, r18
    4d24:	93 2b       	or	r25, r19
    4d26:	a4 2b       	or	r26, r20
    4d28:	b5 2b       	or	r27, r21
    4d2a:	8f 87       	std	Y+15, r24	; 0x0f
    4d2c:	98 8b       	std	Y+16, r25	; 0x10
    4d2e:	a9 8b       	std	Y+17, r26	; 0x11
    4d30:	ba 8b       	std	Y+18, r27	; 0x12
	    data = data >> (8 - OSS);
    4d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d34:	98 89       	ldd	r25, Y+16	; 0x10
    4d36:	a9 89       	ldd	r26, Y+17	; 0x11
    4d38:	ba 89       	ldd	r27, Y+18	; 0x12
    4d3a:	68 94       	set
    4d3c:	16 f8       	bld	r1, 6
    4d3e:	b6 95       	lsr	r27
    4d40:	a7 95       	ror	r26
    4d42:	97 95       	ror	r25
    4d44:	87 95       	ror	r24
    4d46:	16 94       	lsr	r1
    4d48:	d1 f7       	brne	.-12     	; 0x4d3e <Get_UP+0x242>
    4d4a:	8f 87       	std	Y+15, r24	; 0x0f
    4d4c:	98 8b       	std	Y+16, r25	; 0x10
    4d4e:	a9 8b       	std	Y+17, r26	; 0x11
    4d50:	ba 8b       	std	Y+18, r27	; 0x12

	    return data;
    4d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d54:	98 89       	ldd	r25, Y+16	; 0x10
    4d56:	a9 89       	ldd	r26, Y+17	; 0x11
    4d58:	ba 89       	ldd	r27, Y+18	; 0x12
}
    4d5a:	bc 01       	movw	r22, r24
    4d5c:	cd 01       	movw	r24, r26
    4d5e:	66 96       	adiw	r28, 0x16	; 22
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	f8 94       	cli
    4d64:	de bf       	out	0x3e, r29	; 62
    4d66:	0f be       	out	0x3f, r0	; 63
    4d68:	cd bf       	out	0x3d, r28	; 61
    4d6a:	cf 91       	pop	r28
    4d6c:	df 91       	pop	r29
    4d6e:	08 95       	ret

00004d70 <Get_UT>:

uint32 Get_UT(void) {
    4d70:	df 93       	push	r29
    4d72:	cf 93       	push	r28
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	61 97       	sbiw	r28, 0x11	; 17
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	cd bf       	out	0x3d, r28	; 61

	uint8 datatowrite = 0x2E;
    4d84:	8e e2       	ldi	r24, 0x2E	; 46
    4d86:	8f 87       	std	Y+15, r24	; 0x0f
	// array to store the raw pressure data
	uint8 Temperature_RAW[2] = { 0 };
    4d88:	19 8a       	std	Y+17, r1	; 0x11
    4d8a:	18 8a       	std	Y+16, r1	; 0x10
	// start the I2C communication with BMP180 by sending its address
	TWI_Start(BMP180_ADDRESS_W);
    4d8c:	8e ee       	ldi	r24, 0xEE	; 238
    4d8e:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_Start>
	delay();
    4d92:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// send the address of the BMP180 control register to initiate the temperature measurement
	TWI_WriteByte(0xF4);
    4d96:	84 ef       	ldi	r24, 0xF4	; 244
    4d98:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4d9c:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// send the value calculated above to start the measurement
	TWI_WriteByte(datatowrite);
    4da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4da2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4da6:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// stop the I2C communication with BMP180
	TWI_Stop();
    4daa:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
    4dae:	80 e0       	ldi	r24, 0x00	; 0
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	a0 ea       	ldi	r26, 0xA0	; 160
    4db4:	b0 e4       	ldi	r27, 0x40	; 64
    4db6:	8b 87       	std	Y+11, r24	; 0x0b
    4db8:	9c 87       	std	Y+12, r25	; 0x0c
    4dba:	ad 87       	std	Y+13, r26	; 0x0d
    4dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	4a e7       	ldi	r20, 0x7A	; 122
    4dcc:	55 e4       	ldi	r21, 0x45	; 69
    4dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	cb 01       	movw	r24, r22
    4dd6:	8f 83       	std	Y+7, r24	; 0x07
    4dd8:	98 87       	std	Y+8, r25	; 0x08
    4dda:	a9 87       	std	Y+9, r26	; 0x09
    4ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4dde:	6f 81       	ldd	r22, Y+7	; 0x07
    4de0:	78 85       	ldd	r23, Y+8	; 0x08
    4de2:	89 85       	ldd	r24, Y+9	; 0x09
    4de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	40 e8       	ldi	r20, 0x80	; 128
    4dec:	5f e3       	ldi	r21, 0x3F	; 63
    4dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df2:	88 23       	and	r24, r24
    4df4:	2c f4       	brge	.+10     	; 0x4e00 <Get_UT+0x90>
		__ticks = 1;
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	9e 83       	std	Y+6, r25	; 0x06
    4dfc:	8d 83       	std	Y+5, r24	; 0x05
    4dfe:	3f c0       	rjmp	.+126    	; 0x4e7e <Get_UT+0x10e>
	else if (__tmp > 65535)
    4e00:	6f 81       	ldd	r22, Y+7	; 0x07
    4e02:	78 85       	ldd	r23, Y+8	; 0x08
    4e04:	89 85       	ldd	r24, Y+9	; 0x09
    4e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	3f ef       	ldi	r19, 0xFF	; 255
    4e0c:	4f e7       	ldi	r20, 0x7F	; 127
    4e0e:	57 e4       	ldi	r21, 0x47	; 71
    4e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e14:	18 16       	cp	r1, r24
    4e16:	4c f5       	brge	.+82     	; 0x4e6a <Get_UT+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	40 e2       	ldi	r20, 0x20	; 32
    4e26:	51 e4       	ldi	r21, 0x41	; 65
    4e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	bc 01       	movw	r22, r24
    4e32:	cd 01       	movw	r24, r26
    4e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	cb 01       	movw	r24, r22
    4e3c:	9e 83       	std	Y+6, r25	; 0x06
    4e3e:	8d 83       	std	Y+5, r24	; 0x05
    4e40:	0f c0       	rjmp	.+30     	; 0x4e60 <Get_UT+0xf0>
    4e42:	80 e9       	ldi	r24, 0x90	; 144
    4e44:	91 e0       	ldi	r25, 0x01	; 1
    4e46:	9c 83       	std	Y+4, r25	; 0x04
    4e48:	8b 83       	std	Y+3, r24	; 0x03
    4e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e4e:	01 97       	sbiw	r24, 0x01	; 1
    4e50:	f1 f7       	brne	.-4      	; 0x4e4e <Get_UT+0xde>
    4e52:	9c 83       	std	Y+4, r25	; 0x04
    4e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e56:	8d 81       	ldd	r24, Y+5	; 0x05
    4e58:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5a:	01 97       	sbiw	r24, 0x01	; 1
    4e5c:	9e 83       	std	Y+6, r25	; 0x06
    4e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e60:	8d 81       	ldd	r24, Y+5	; 0x05
    4e62:	9e 81       	ldd	r25, Y+6	; 0x06
    4e64:	00 97       	sbiw	r24, 0x00	; 0
    4e66:	69 f7       	brne	.-38     	; 0x4e42 <Get_UT+0xd2>
    4e68:	14 c0       	rjmp	.+40     	; 0x4e92 <Get_UT+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e6c:	78 85       	ldd	r23, Y+8	; 0x08
    4e6e:	89 85       	ldd	r24, Y+9	; 0x09
    4e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e76:	dc 01       	movw	r26, r24
    4e78:	cb 01       	movw	r24, r22
    4e7a:	9e 83       	std	Y+6, r25	; 0x06
    4e7c:	8d 83       	std	Y+5, r24	; 0x05
    4e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e80:	9e 81       	ldd	r25, Y+6	; 0x06
    4e82:	9a 83       	std	Y+2, r25	; 0x02
    4e84:	89 83       	std	Y+1, r24	; 0x01
    4e86:	89 81       	ldd	r24, Y+1	; 0x01
    4e88:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8a:	01 97       	sbiw	r24, 0x01	; 1
    4e8c:	f1 f7       	brne	.-4      	; 0x4e8a <Get_UT+0x11a>
    4e8e:	9a 83       	std	Y+2, r25	; 0x02
    4e90:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	// start the I2C communication with BMP180 in read mode by sending its address with the read bit set
	// read the MSB of the raw temperature data and acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4e92:	8e ee       	ldi	r24, 0xEE	; 238
    4e94:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4e98:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_WriteByte(0xF6);
    4e9c:	86 ef       	ldi	r24, 0xF6	; 246
    4e9e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4ea2:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4ea6:	8f ee       	ldi	r24, 0xEF	; 239
    4ea8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4eac:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	Temperature_RAW[0] = TWI_ReadByteWithNACK();
    4eb0:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4eb4:	88 8b       	std	Y+16, r24	; 0x10
	delay();
    4eb6:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Stop();
    4eba:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	delay();
    4ebe:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	// read the middle byte of the raw pressure data and acknowledge the read
	// read the LSB of the raw temperature data and don't acknowledge the read
	TWI_Start_Wait(BMP180_ADDRESS_W);
    4ec2:	8e ee       	ldi	r24, 0xEE	; 238
    4ec4:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_Start_Wait>
	delay();
    4ec8:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_WriteByte(0xF7);
    4ecc:	87 ef       	ldi	r24, 0xF7	; 247
    4ece:	0e 94 59 08 	call	0x10b2	; 0x10b2 <TWI_WriteByte>
	delay();
    4ed2:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Repeated_start(BMP180_ADDRESS_R);
    4ed6:	8f ee       	ldi	r24, 0xEF	; 239
    4ed8:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_Repeated_start>
	delay();// To read
    4edc:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	Temperature_RAW[1] = TWI_ReadByteWithNACK();
    4ee0:	0e 94 83 08 	call	0x1106	; 0x1106 <TWI_ReadByteWithNACK>
    4ee4:	89 8b       	std	Y+17, r24	; 0x11
	delay();
    4ee6:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <delay>
	TWI_Stop();
    4eea:	0e 94 4e 08 	call	0x109c	; 0x109c <TWI_Stop>
	// stop the I2C communication with BMP180

	return ((Temperature_RAW[0] << 8) + Temperature_RAW[1]);
    4eee:	88 89       	ldd	r24, Y+16	; 0x10
    4ef0:	88 2f       	mov	r24, r24
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	38 2f       	mov	r19, r24
    4ef6:	22 27       	eor	r18, r18
    4ef8:	89 89       	ldd	r24, Y+17	; 0x11
    4efa:	88 2f       	mov	r24, r24
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	82 0f       	add	r24, r18
    4f00:	93 1f       	adc	r25, r19
    4f02:	aa 27       	eor	r26, r26
    4f04:	97 fd       	sbrc	r25, 7
    4f06:	a0 95       	com	r26
    4f08:	ba 2f       	mov	r27, r26

}
    4f0a:	bc 01       	movw	r22, r24
    4f0c:	cd 01       	movw	r24, r26
    4f0e:	61 96       	adiw	r28, 0x11	; 17
    4f10:	0f b6       	in	r0, 0x3f	; 63
    4f12:	f8 94       	cli
    4f14:	de bf       	out	0x3e, r29	; 62
    4f16:	0f be       	out	0x3f, r0	; 63
    4f18:	cd bf       	out	0x3d, r28	; 61
    4f1a:	cf 91       	pop	r28
    4f1c:	df 91       	pop	r29
    4f1e:	08 95       	ret

00004f20 <BMP180_calculateTemperature>:

sint32 BMP180_calculateTemperature(void) {
    4f20:	ef 92       	push	r14
    4f22:	ff 92       	push	r15
    4f24:	0f 93       	push	r16
    4f26:	1f 93       	push	r17
    4f28:	df 93       	push	r29
    4f2a:	cf 93       	push	r28
    4f2c:	00 d0       	rcall	.+0      	; 0x4f2e <BMP180_calculateTemperature+0xe>
    4f2e:	00 d0       	rcall	.+0      	; 0x4f30 <BMP180_calculateTemperature+0x10>
    4f30:	cd b7       	in	r28, 0x3d	; 61
    4f32:	de b7       	in	r29, 0x3e	; 62

	float32 temperature = 0;
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	a0 e0       	ldi	r26, 0x00	; 0
    4f3a:	b0 e0       	ldi	r27, 0x00	; 0
    4f3c:	89 83       	std	Y+1, r24	; 0x01
    4f3e:	9a 83       	std	Y+2, r25	; 0x02
    4f40:	ab 83       	std	Y+3, r26	; 0x03
    4f42:	bc 83       	std	Y+4, r27	; 0x04

	UT = Get_UT();
    4f44:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <Get_UT>
    4f48:	dc 01       	movw	r26, r24
    4f4a:	cb 01       	movw	r24, r22
    4f4c:	80 93 2a 02 	sts	0x022A, r24
    4f50:	90 93 2b 02 	sts	0x022B, r25
    4f54:	a0 93 2c 02 	sts	0x022C, r26
    4f58:	b0 93 2d 02 	sts	0x022D, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    4f5c:	20 91 2a 02 	lds	r18, 0x022A
    4f60:	30 91 2b 02 	lds	r19, 0x022B
    4f64:	40 91 2c 02 	lds	r20, 0x022C
    4f68:	50 91 2d 02 	lds	r21, 0x022D
    4f6c:	80 91 1c 02 	lds	r24, 0x021C
    4f70:	90 91 1d 02 	lds	r25, 0x021D
    4f74:	cc 01       	movw	r24, r24
    4f76:	a0 e0       	ldi	r26, 0x00	; 0
    4f78:	b0 e0       	ldi	r27, 0x00	; 0
    4f7a:	79 01       	movw	r14, r18
    4f7c:	8a 01       	movw	r16, r20
    4f7e:	e8 1a       	sub	r14, r24
    4f80:	f9 0a       	sbc	r15, r25
    4f82:	0a 0b       	sbc	r16, r26
    4f84:	1b 0b       	sbc	r17, r27
    4f86:	d8 01       	movw	r26, r16
    4f88:	c7 01       	movw	r24, r14
    4f8a:	bc 01       	movw	r22, r24
    4f8c:	cd 01       	movw	r24, r26
    4f8e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4f92:	7b 01       	movw	r14, r22
    4f94:	8c 01       	movw	r16, r24
    4f96:	80 91 1a 02 	lds	r24, 0x021A
    4f9a:	90 91 1b 02 	lds	r25, 0x021B
    4f9e:	cc 01       	movw	r24, r24
    4fa0:	a0 e0       	ldi	r26, 0x00	; 0
    4fa2:	b0 e0       	ldi	r27, 0x00	; 0
    4fa4:	bc 01       	movw	r22, r24
    4fa6:	cd 01       	movw	r24, r26
    4fa8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4fac:	dc 01       	movw	r26, r24
    4fae:	cb 01       	movw	r24, r22
    4fb0:	bc 01       	movw	r22, r24
    4fb2:	cd 01       	movw	r24, r26
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	40 e0       	ldi	r20, 0x00	; 0
    4fba:	57 e4       	ldi	r21, 0x47	; 71
    4fbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4fc0:	dc 01       	movw	r26, r24
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	9c 01       	movw	r18, r24
    4fc6:	ad 01       	movw	r20, r26
    4fc8:	c8 01       	movw	r24, r16
    4fca:	b7 01       	movw	r22, r14
    4fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	bc 01       	movw	r22, r24
    4fd6:	cd 01       	movw	r24, r26
    4fd8:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	80 93 1e 02 	sts	0x021E, r24
    4fe4:	90 93 1f 02 	sts	0x021F, r25
    4fe8:	a0 93 20 02 	sts	0x0220, r26
    4fec:	b0 93 21 02 	sts	0x0221, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    4ff0:	80 91 14 02 	lds	r24, 0x0214
    4ff4:	90 91 15 02 	lds	r25, 0x0215
    4ff8:	aa 27       	eor	r26, r26
    4ffa:	97 fd       	sbrc	r25, 7
    4ffc:	a0 95       	com	r26
    4ffe:	ba 2f       	mov	r27, r26
    5000:	bc 01       	movw	r22, r24
    5002:	cd 01       	movw	r24, r26
    5004:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5008:	dc 01       	movw	r26, r24
    500a:	cb 01       	movw	r24, r22
    500c:	bc 01       	movw	r22, r24
    500e:	cd 01       	movw	r24, r26
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	55 e4       	ldi	r21, 0x45	; 69
    5018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	7c 01       	movw	r14, r24
    5022:	8d 01       	movw	r16, r26
    5024:	80 91 16 02 	lds	r24, 0x0216
    5028:	90 91 17 02 	lds	r25, 0x0217
    502c:	9c 01       	movw	r18, r24
    502e:	44 27       	eor	r20, r20
    5030:	37 fd       	sbrc	r19, 7
    5032:	40 95       	com	r20
    5034:	54 2f       	mov	r21, r20
    5036:	80 91 1e 02 	lds	r24, 0x021E
    503a:	90 91 1f 02 	lds	r25, 0x021F
    503e:	a0 91 20 02 	lds	r26, 0x0220
    5042:	b0 91 21 02 	lds	r27, 0x0221
    5046:	82 0f       	add	r24, r18
    5048:	93 1f       	adc	r25, r19
    504a:	a4 1f       	adc	r26, r20
    504c:	b5 1f       	adc	r27, r21
    504e:	bc 01       	movw	r22, r24
    5050:	cd 01       	movw	r24, r26
    5052:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5056:	9b 01       	movw	r18, r22
    5058:	ac 01       	movw	r20, r24
    505a:	c8 01       	movw	r24, r16
    505c:	b7 01       	movw	r22, r14
    505e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5062:	dc 01       	movw	r26, r24
    5064:	cb 01       	movw	r24, r22
    5066:	bc 01       	movw	r22, r24
    5068:	cd 01       	movw	r24, r26
    506a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    506e:	dc 01       	movw	r26, r24
    5070:	cb 01       	movw	r24, r22
    5072:	80 93 22 02 	sts	0x0222, r24
    5076:	90 93 23 02 	sts	0x0223, r25
    507a:	a0 93 24 02 	sts	0x0224, r26
    507e:	b0 93 25 02 	sts	0x0225, r27
	B5 = X1 + X2;
    5082:	20 91 1e 02 	lds	r18, 0x021E
    5086:	30 91 1f 02 	lds	r19, 0x021F
    508a:	40 91 20 02 	lds	r20, 0x0220
    508e:	50 91 21 02 	lds	r21, 0x0221
    5092:	80 91 22 02 	lds	r24, 0x0222
    5096:	90 91 23 02 	lds	r25, 0x0223
    509a:	a0 91 24 02 	lds	r26, 0x0224
    509e:	b0 91 25 02 	lds	r27, 0x0225
    50a2:	82 0f       	add	r24, r18
    50a4:	93 1f       	adc	r25, r19
    50a6:	a4 1f       	adc	r26, r20
    50a8:	b5 1f       	adc	r27, r21
    50aa:	80 93 26 02 	sts	0x0226, r24
    50ae:	90 93 27 02 	sts	0x0227, r25
    50b2:	a0 93 28 02 	sts	0x0228, r26
    50b6:	b0 93 29 02 	sts	0x0229, r27
	temperature = (B5 + 8) / (pow(2, 4));
    50ba:	80 91 26 02 	lds	r24, 0x0226
    50be:	90 91 27 02 	lds	r25, 0x0227
    50c2:	a0 91 28 02 	lds	r26, 0x0228
    50c6:	b0 91 29 02 	lds	r27, 0x0229
    50ca:	08 96       	adiw	r24, 0x08	; 8
    50cc:	a1 1d       	adc	r26, r1
    50ce:	b1 1d       	adc	r27, r1
    50d0:	bc 01       	movw	r22, r24
    50d2:	cd 01       	movw	r24, r26
    50d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    50d8:	dc 01       	movw	r26, r24
    50da:	cb 01       	movw	r24, r22
    50dc:	bc 01       	movw	r22, r24
    50de:	cd 01       	movw	r24, r26
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	30 e0       	ldi	r19, 0x00	; 0
    50e4:	40 e8       	ldi	r20, 0x80	; 128
    50e6:	51 e4       	ldi	r21, 0x41	; 65
    50e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    50ec:	dc 01       	movw	r26, r24
    50ee:	cb 01       	movw	r24, r22
    50f0:	89 83       	std	Y+1, r24	; 0x01
    50f2:	9a 83       	std	Y+2, r25	; 0x02
    50f4:	ab 83       	std	Y+3, r26	; 0x03
    50f6:	bc 83       	std	Y+4, r27	; 0x04
	return temperature / 10.0;
    50f8:	69 81       	ldd	r22, Y+1	; 0x01
    50fa:	7a 81       	ldd	r23, Y+2	; 0x02
    50fc:	8b 81       	ldd	r24, Y+3	; 0x03
    50fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	40 e2       	ldi	r20, 0x20	; 32
    5106:	51 e4       	ldi	r21, 0x41	; 65
    5108:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    510c:	dc 01       	movw	r26, r24
    510e:	cb 01       	movw	r24, r22
    5110:	bc 01       	movw	r22, r24
    5112:	cd 01       	movw	r24, r26
    5114:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
}
    511c:	bc 01       	movw	r22, r24
    511e:	cd 01       	movw	r24, r26
    5120:	0f 90       	pop	r0
    5122:	0f 90       	pop	r0
    5124:	0f 90       	pop	r0
    5126:	0f 90       	pop	r0
    5128:	cf 91       	pop	r28
    512a:	df 91       	pop	r29
    512c:	1f 91       	pop	r17
    512e:	0f 91       	pop	r16
    5130:	ff 90       	pop	r15
    5132:	ef 90       	pop	r14
    5134:	08 95       	ret

00005136 <BMP180_calculatePressure>:

sint32 BMP180_calculatePressure(void) {
    5136:	ef 92       	push	r14
    5138:	ff 92       	push	r15
    513a:	0f 93       	push	r16
    513c:	1f 93       	push	r17
    513e:	df 93       	push	r29
    5140:	cf 93       	push	r28
    5142:	cd b7       	in	r28, 0x3d	; 61
    5144:	de b7       	in	r29, 0x3e	; 62
	UP = Get_UP();
    5146:	0e 94 7e 25 	call	0x4afc	; 0x4afc <Get_UP>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	80 93 3e 02 	sts	0x023E, r24
    5152:	90 93 3f 02 	sts	0x023F, r25
    5156:	a0 93 40 02 	sts	0x0240, r26
    515a:	b0 93 41 02 	sts	0x0241, r27

	X1 = ((UT - AC6) * (AC5 / (pow(2, 15))));
    515e:	20 91 2a 02 	lds	r18, 0x022A
    5162:	30 91 2b 02 	lds	r19, 0x022B
    5166:	40 91 2c 02 	lds	r20, 0x022C
    516a:	50 91 2d 02 	lds	r21, 0x022D
    516e:	80 91 1c 02 	lds	r24, 0x021C
    5172:	90 91 1d 02 	lds	r25, 0x021D
    5176:	cc 01       	movw	r24, r24
    5178:	a0 e0       	ldi	r26, 0x00	; 0
    517a:	b0 e0       	ldi	r27, 0x00	; 0
    517c:	79 01       	movw	r14, r18
    517e:	8a 01       	movw	r16, r20
    5180:	e8 1a       	sub	r14, r24
    5182:	f9 0a       	sbc	r15, r25
    5184:	0a 0b       	sbc	r16, r26
    5186:	1b 0b       	sbc	r17, r27
    5188:	d8 01       	movw	r26, r16
    518a:	c7 01       	movw	r24, r14
    518c:	bc 01       	movw	r22, r24
    518e:	cd 01       	movw	r24, r26
    5190:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5194:	7b 01       	movw	r14, r22
    5196:	8c 01       	movw	r16, r24
    5198:	80 91 1a 02 	lds	r24, 0x021A
    519c:	90 91 1b 02 	lds	r25, 0x021B
    51a0:	cc 01       	movw	r24, r24
    51a2:	a0 e0       	ldi	r26, 0x00	; 0
    51a4:	b0 e0       	ldi	r27, 0x00	; 0
    51a6:	bc 01       	movw	r22, r24
    51a8:	cd 01       	movw	r24, r26
    51aa:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	bc 01       	movw	r22, r24
    51b4:	cd 01       	movw	r24, r26
    51b6:	20 e0       	ldi	r18, 0x00	; 0
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	40 e0       	ldi	r20, 0x00	; 0
    51bc:	57 e4       	ldi	r21, 0x47	; 71
    51be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    51c2:	dc 01       	movw	r26, r24
    51c4:	cb 01       	movw	r24, r22
    51c6:	9c 01       	movw	r18, r24
    51c8:	ad 01       	movw	r20, r26
    51ca:	c8 01       	movw	r24, r16
    51cc:	b7 01       	movw	r22, r14
    51ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    51de:	dc 01       	movw	r26, r24
    51e0:	cb 01       	movw	r24, r22
    51e2:	80 93 1e 02 	sts	0x021E, r24
    51e6:	90 93 1f 02 	sts	0x021F, r25
    51ea:	a0 93 20 02 	sts	0x0220, r26
    51ee:	b0 93 21 02 	sts	0x0221, r27
	X2 = (MC * (pow(2, 11))) / (X1 + MD);
    51f2:	80 91 14 02 	lds	r24, 0x0214
    51f6:	90 91 15 02 	lds	r25, 0x0215
    51fa:	aa 27       	eor	r26, r26
    51fc:	97 fd       	sbrc	r25, 7
    51fe:	a0 95       	com	r26
    5200:	ba 2f       	mov	r27, r26
    5202:	bc 01       	movw	r22, r24
    5204:	cd 01       	movw	r24, r26
    5206:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	bc 01       	movw	r22, r24
    5210:	cd 01       	movw	r24, r26
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	40 e0       	ldi	r20, 0x00	; 0
    5218:	55 e4       	ldi	r21, 0x45	; 69
    521a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	7c 01       	movw	r14, r24
    5224:	8d 01       	movw	r16, r26
    5226:	80 91 16 02 	lds	r24, 0x0216
    522a:	90 91 17 02 	lds	r25, 0x0217
    522e:	9c 01       	movw	r18, r24
    5230:	44 27       	eor	r20, r20
    5232:	37 fd       	sbrc	r19, 7
    5234:	40 95       	com	r20
    5236:	54 2f       	mov	r21, r20
    5238:	80 91 1e 02 	lds	r24, 0x021E
    523c:	90 91 1f 02 	lds	r25, 0x021F
    5240:	a0 91 20 02 	lds	r26, 0x0220
    5244:	b0 91 21 02 	lds	r27, 0x0221
    5248:	82 0f       	add	r24, r18
    524a:	93 1f       	adc	r25, r19
    524c:	a4 1f       	adc	r26, r20
    524e:	b5 1f       	adc	r27, r21
    5250:	bc 01       	movw	r22, r24
    5252:	cd 01       	movw	r24, r26
    5254:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5258:	9b 01       	movw	r18, r22
    525a:	ac 01       	movw	r20, r24
    525c:	c8 01       	movw	r24, r16
    525e:	b7 01       	movw	r22, r14
    5260:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5264:	dc 01       	movw	r26, r24
    5266:	cb 01       	movw	r24, r22
    5268:	bc 01       	movw	r22, r24
    526a:	cd 01       	movw	r24, r26
    526c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5270:	dc 01       	movw	r26, r24
    5272:	cb 01       	movw	r24, r22
    5274:	80 93 22 02 	sts	0x0222, r24
    5278:	90 93 23 02 	sts	0x0223, r25
    527c:	a0 93 24 02 	sts	0x0224, r26
    5280:	b0 93 25 02 	sts	0x0225, r27
	B5 = X1 + X2;
    5284:	20 91 1e 02 	lds	r18, 0x021E
    5288:	30 91 1f 02 	lds	r19, 0x021F
    528c:	40 91 20 02 	lds	r20, 0x0220
    5290:	50 91 21 02 	lds	r21, 0x0221
    5294:	80 91 22 02 	lds	r24, 0x0222
    5298:	90 91 23 02 	lds	r25, 0x0223
    529c:	a0 91 24 02 	lds	r26, 0x0224
    52a0:	b0 91 25 02 	lds	r27, 0x0225
    52a4:	82 0f       	add	r24, r18
    52a6:	93 1f       	adc	r25, r19
    52a8:	a4 1f       	adc	r26, r20
    52aa:	b5 1f       	adc	r27, r21
    52ac:	80 93 26 02 	sts	0x0226, r24
    52b0:	90 93 27 02 	sts	0x0227, r25
    52b4:	a0 93 28 02 	sts	0x0228, r26
    52b8:	b0 93 29 02 	sts	0x0229, r27
	B6 = B5 - 4000;
    52bc:	80 91 26 02 	lds	r24, 0x0226
    52c0:	90 91 27 02 	lds	r25, 0x0227
    52c4:	a0 91 28 02 	lds	r26, 0x0228
    52c8:	b0 91 29 02 	lds	r27, 0x0229
    52cc:	80 5a       	subi	r24, 0xA0	; 160
    52ce:	9f 40       	sbci	r25, 0x0F	; 15
    52d0:	a0 40       	sbci	r26, 0x00	; 0
    52d2:	b0 40       	sbci	r27, 0x00	; 0
    52d4:	80 93 36 02 	sts	0x0236, r24
    52d8:	90 93 37 02 	sts	0x0237, r25
    52dc:	a0 93 38 02 	sts	0x0238, r26
    52e0:	b0 93 39 02 	sts	0x0239, r27
	X1 = (B2 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 11));
    52e4:	80 91 10 02 	lds	r24, 0x0210
    52e8:	90 91 11 02 	lds	r25, 0x0211
    52ec:	aa 27       	eor	r26, r26
    52ee:	97 fd       	sbrc	r25, 7
    52f0:	a0 95       	com	r26
    52f2:	ba 2f       	mov	r27, r26
    52f4:	bc 01       	movw	r22, r24
    52f6:	cd 01       	movw	r24, r26
    52f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    52fc:	7b 01       	movw	r14, r22
    52fe:	8c 01       	movw	r16, r24
    5300:	80 91 36 02 	lds	r24, 0x0236
    5304:	90 91 37 02 	lds	r25, 0x0237
    5308:	a0 91 38 02 	lds	r26, 0x0238
    530c:	b0 91 39 02 	lds	r27, 0x0239
    5310:	20 91 36 02 	lds	r18, 0x0236
    5314:	30 91 37 02 	lds	r19, 0x0237
    5318:	40 91 38 02 	lds	r20, 0x0238
    531c:	50 91 39 02 	lds	r21, 0x0239
    5320:	bc 01       	movw	r22, r24
    5322:	cd 01       	movw	r24, r26
    5324:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    5328:	dc 01       	movw	r26, r24
    532a:	cb 01       	movw	r24, r22
    532c:	bc 01       	movw	r22, r24
    532e:	cd 01       	movw	r24, r26
    5330:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5334:	dc 01       	movw	r26, r24
    5336:	cb 01       	movw	r24, r22
    5338:	bc 01       	movw	r22, r24
    533a:	cd 01       	movw	r24, r26
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	40 e8       	ldi	r20, 0x80	; 128
    5342:	55 e4       	ldi	r21, 0x45	; 69
    5344:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	9c 01       	movw	r18, r24
    534e:	ad 01       	movw	r20, r26
    5350:	c8 01       	movw	r24, r16
    5352:	b7 01       	movw	r22, r14
    5354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5358:	dc 01       	movw	r26, r24
    535a:	cb 01       	movw	r24, r22
    535c:	bc 01       	movw	r22, r24
    535e:	cd 01       	movw	r24, r26
    5360:	20 e0       	ldi	r18, 0x00	; 0
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	40 e0       	ldi	r20, 0x00	; 0
    5366:	55 e4       	ldi	r21, 0x45	; 69
    5368:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    536c:	dc 01       	movw	r26, r24
    536e:	cb 01       	movw	r24, r22
    5370:	bc 01       	movw	r22, r24
    5372:	cd 01       	movw	r24, r26
    5374:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	80 93 1e 02 	sts	0x021E, r24
    5380:	90 93 1f 02 	sts	0x021F, r25
    5384:	a0 93 20 02 	sts	0x0220, r26
    5388:	b0 93 21 02 	sts	0x0221, r27
	X2 = AC2 * B6 / (pow(2, 11));
    538c:	80 91 0a 02 	lds	r24, 0x020A
    5390:	90 91 0b 02 	lds	r25, 0x020B
    5394:	aa 27       	eor	r26, r26
    5396:	97 fd       	sbrc	r25, 7
    5398:	a0 95       	com	r26
    539a:	ba 2f       	mov	r27, r26
    539c:	20 91 36 02 	lds	r18, 0x0236
    53a0:	30 91 37 02 	lds	r19, 0x0237
    53a4:	40 91 38 02 	lds	r20, 0x0238
    53a8:	50 91 39 02 	lds	r21, 0x0239
    53ac:	bc 01       	movw	r22, r24
    53ae:	cd 01       	movw	r24, r26
    53b0:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	bc 01       	movw	r22, r24
    53ba:	cd 01       	movw	r24, r26
    53bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    53c0:	dc 01       	movw	r26, r24
    53c2:	cb 01       	movw	r24, r22
    53c4:	bc 01       	movw	r22, r24
    53c6:	cd 01       	movw	r24, r26
    53c8:	20 e0       	ldi	r18, 0x00	; 0
    53ca:	30 e0       	ldi	r19, 0x00	; 0
    53cc:	40 e0       	ldi	r20, 0x00	; 0
    53ce:	55 e4       	ldi	r21, 0x45	; 69
    53d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    53d4:	dc 01       	movw	r26, r24
    53d6:	cb 01       	movw	r24, r22
    53d8:	bc 01       	movw	r22, r24
    53da:	cd 01       	movw	r24, r26
    53dc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    53e0:	dc 01       	movw	r26, r24
    53e2:	cb 01       	movw	r24, r22
    53e4:	80 93 22 02 	sts	0x0222, r24
    53e8:	90 93 23 02 	sts	0x0223, r25
    53ec:	a0 93 24 02 	sts	0x0224, r26
    53f0:	b0 93 25 02 	sts	0x0225, r27
	X3 = X1 + X2;
    53f4:	20 91 1e 02 	lds	r18, 0x021E
    53f8:	30 91 1f 02 	lds	r19, 0x021F
    53fc:	40 91 20 02 	lds	r20, 0x0220
    5400:	50 91 21 02 	lds	r21, 0x0221
    5404:	80 91 22 02 	lds	r24, 0x0222
    5408:	90 91 23 02 	lds	r25, 0x0223
    540c:	a0 91 24 02 	lds	r26, 0x0224
    5410:	b0 91 25 02 	lds	r27, 0x0225
    5414:	82 0f       	add	r24, r18
    5416:	93 1f       	adc	r25, r19
    5418:	a4 1f       	adc	r26, r20
    541a:	b5 1f       	adc	r27, r21
    541c:	80 93 2e 02 	sts	0x022E, r24
    5420:	90 93 2f 02 	sts	0x022F, r25
    5424:	a0 93 30 02 	sts	0x0230, r26
    5428:	b0 93 31 02 	sts	0x0231, r27
	B3 = (((AC1 * 4 + X3) << OSS) + 2) / 4;
    542c:	80 91 08 02 	lds	r24, 0x0208
    5430:	90 91 09 02 	lds	r25, 0x0209
    5434:	88 0f       	add	r24, r24
    5436:	99 1f       	adc	r25, r25
    5438:	88 0f       	add	r24, r24
    543a:	99 1f       	adc	r25, r25
    543c:	9c 01       	movw	r18, r24
    543e:	44 27       	eor	r20, r20
    5440:	37 fd       	sbrc	r19, 7
    5442:	40 95       	com	r20
    5444:	54 2f       	mov	r21, r20
    5446:	80 91 2e 02 	lds	r24, 0x022E
    544a:	90 91 2f 02 	lds	r25, 0x022F
    544e:	a0 91 30 02 	lds	r26, 0x0230
    5452:	b0 91 31 02 	lds	r27, 0x0231
    5456:	82 0f       	add	r24, r18
    5458:	93 1f       	adc	r25, r19
    545a:	a4 1f       	adc	r26, r20
    545c:	b5 1f       	adc	r27, r21
    545e:	88 0f       	add	r24, r24
    5460:	99 1f       	adc	r25, r25
    5462:	aa 1f       	adc	r26, r26
    5464:	bb 1f       	adc	r27, r27
    5466:	02 96       	adiw	r24, 0x02	; 2
    5468:	a1 1d       	adc	r26, r1
    546a:	b1 1d       	adc	r27, r1
    546c:	24 e0       	ldi	r18, 0x04	; 4
    546e:	30 e0       	ldi	r19, 0x00	; 0
    5470:	40 e0       	ldi	r20, 0x00	; 0
    5472:	50 e0       	ldi	r21, 0x00	; 0
    5474:	bc 01       	movw	r22, r24
    5476:	cd 01       	movw	r24, r26
    5478:	0e 94 89 30 	call	0x6112	; 0x6112 <__divmodsi4>
    547c:	da 01       	movw	r26, r20
    547e:	c9 01       	movw	r24, r18
    5480:	80 93 32 02 	sts	0x0232, r24
    5484:	90 93 33 02 	sts	0x0233, r25
    5488:	a0 93 34 02 	sts	0x0234, r26
    548c:	b0 93 35 02 	sts	0x0235, r27
	X1 = AC3 * B6 / (pow(2, 13));
    5490:	80 91 0c 02 	lds	r24, 0x020C
    5494:	90 91 0d 02 	lds	r25, 0x020D
    5498:	aa 27       	eor	r26, r26
    549a:	97 fd       	sbrc	r25, 7
    549c:	a0 95       	com	r26
    549e:	ba 2f       	mov	r27, r26
    54a0:	20 91 36 02 	lds	r18, 0x0236
    54a4:	30 91 37 02 	lds	r19, 0x0237
    54a8:	40 91 38 02 	lds	r20, 0x0238
    54ac:	50 91 39 02 	lds	r21, 0x0239
    54b0:	bc 01       	movw	r22, r24
    54b2:	cd 01       	movw	r24, r26
    54b4:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    54b8:	dc 01       	movw	r26, r24
    54ba:	cb 01       	movw	r24, r22
    54bc:	bc 01       	movw	r22, r24
    54be:	cd 01       	movw	r24, r26
    54c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22
    54c8:	bc 01       	movw	r22, r24
    54ca:	cd 01       	movw	r24, r26
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	40 e0       	ldi	r20, 0x00	; 0
    54d2:	56 e4       	ldi	r21, 0x46	; 70
    54d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54d8:	dc 01       	movw	r26, r24
    54da:	cb 01       	movw	r24, r22
    54dc:	bc 01       	movw	r22, r24
    54de:	cd 01       	movw	r24, r26
    54e0:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	80 93 1e 02 	sts	0x021E, r24
    54ec:	90 93 1f 02 	sts	0x021F, r25
    54f0:	a0 93 20 02 	sts	0x0220, r26
    54f4:	b0 93 21 02 	sts	0x0221, r27
	X2 = (B1 * (B6 * B6 / (pow(2, 12)))) / (pow(2, 16));
    54f8:	80 91 0e 02 	lds	r24, 0x020E
    54fc:	90 91 0f 02 	lds	r25, 0x020F
    5500:	aa 27       	eor	r26, r26
    5502:	97 fd       	sbrc	r25, 7
    5504:	a0 95       	com	r26
    5506:	ba 2f       	mov	r27, r26
    5508:	bc 01       	movw	r22, r24
    550a:	cd 01       	movw	r24, r26
    550c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5510:	7b 01       	movw	r14, r22
    5512:	8c 01       	movw	r16, r24
    5514:	80 91 36 02 	lds	r24, 0x0236
    5518:	90 91 37 02 	lds	r25, 0x0237
    551c:	a0 91 38 02 	lds	r26, 0x0238
    5520:	b0 91 39 02 	lds	r27, 0x0239
    5524:	20 91 36 02 	lds	r18, 0x0236
    5528:	30 91 37 02 	lds	r19, 0x0237
    552c:	40 91 38 02 	lds	r20, 0x0238
    5530:	50 91 39 02 	lds	r21, 0x0239
    5534:	bc 01       	movw	r22, r24
    5536:	cd 01       	movw	r24, r26
    5538:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    553c:	dc 01       	movw	r26, r24
    553e:	cb 01       	movw	r24, r22
    5540:	bc 01       	movw	r22, r24
    5542:	cd 01       	movw	r24, r26
    5544:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5548:	dc 01       	movw	r26, r24
    554a:	cb 01       	movw	r24, r22
    554c:	bc 01       	movw	r22, r24
    554e:	cd 01       	movw	r24, r26
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	40 e8       	ldi	r20, 0x80	; 128
    5556:	55 e4       	ldi	r21, 0x45	; 69
    5558:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    555c:	dc 01       	movw	r26, r24
    555e:	cb 01       	movw	r24, r22
    5560:	9c 01       	movw	r18, r24
    5562:	ad 01       	movw	r20, r26
    5564:	c8 01       	movw	r24, r16
    5566:	b7 01       	movw	r22, r14
    5568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    556c:	dc 01       	movw	r26, r24
    556e:	cb 01       	movw	r24, r22
    5570:	bc 01       	movw	r22, r24
    5572:	cd 01       	movw	r24, r26
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	40 e8       	ldi	r20, 0x80	; 128
    557a:	57 e4       	ldi	r21, 0x47	; 71
    557c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5580:	dc 01       	movw	r26, r24
    5582:	cb 01       	movw	r24, r22
    5584:	bc 01       	movw	r22, r24
    5586:	cd 01       	movw	r24, r26
    5588:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	80 93 22 02 	sts	0x0222, r24
    5594:	90 93 23 02 	sts	0x0223, r25
    5598:	a0 93 24 02 	sts	0x0224, r26
    559c:	b0 93 25 02 	sts	0x0225, r27
	X3 = ((X1 + X2) + 2) / (pow(2, 2));
    55a0:	20 91 1e 02 	lds	r18, 0x021E
    55a4:	30 91 1f 02 	lds	r19, 0x021F
    55a8:	40 91 20 02 	lds	r20, 0x0220
    55ac:	50 91 21 02 	lds	r21, 0x0221
    55b0:	80 91 22 02 	lds	r24, 0x0222
    55b4:	90 91 23 02 	lds	r25, 0x0223
    55b8:	a0 91 24 02 	lds	r26, 0x0224
    55bc:	b0 91 25 02 	lds	r27, 0x0225
    55c0:	82 0f       	add	r24, r18
    55c2:	93 1f       	adc	r25, r19
    55c4:	a4 1f       	adc	r26, r20
    55c6:	b5 1f       	adc	r27, r21
    55c8:	02 96       	adiw	r24, 0x02	; 2
    55ca:	a1 1d       	adc	r26, r1
    55cc:	b1 1d       	adc	r27, r1
    55ce:	bc 01       	movw	r22, r24
    55d0:	cd 01       	movw	r24, r26
    55d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    55d6:	dc 01       	movw	r26, r24
    55d8:	cb 01       	movw	r24, r22
    55da:	bc 01       	movw	r22, r24
    55dc:	cd 01       	movw	r24, r26
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	40 e8       	ldi	r20, 0x80	; 128
    55e4:	50 e4       	ldi	r21, 0x40	; 64
    55e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	bc 01       	movw	r22, r24
    55f0:	cd 01       	movw	r24, r26
    55f2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    55f6:	dc 01       	movw	r26, r24
    55f8:	cb 01       	movw	r24, r22
    55fa:	80 93 2e 02 	sts	0x022E, r24
    55fe:	90 93 2f 02 	sts	0x022F, r25
    5602:	a0 93 30 02 	sts	0x0230, r26
    5606:	b0 93 31 02 	sts	0x0231, r27
	B4 = (AC4 * (uint32) (X3 + 32768)) / (pow(2, 15));
    560a:	80 91 18 02 	lds	r24, 0x0218
    560e:	90 91 19 02 	lds	r25, 0x0219
    5612:	7c 01       	movw	r14, r24
    5614:	00 e0       	ldi	r16, 0x00	; 0
    5616:	10 e0       	ldi	r17, 0x00	; 0
    5618:	80 91 2e 02 	lds	r24, 0x022E
    561c:	90 91 2f 02 	lds	r25, 0x022F
    5620:	a0 91 30 02 	lds	r26, 0x0230
    5624:	b0 91 31 02 	lds	r27, 0x0231
    5628:	80 50       	subi	r24, 0x00	; 0
    562a:	90 48       	sbci	r25, 0x80	; 128
    562c:	af 4f       	sbci	r26, 0xFF	; 255
    562e:	bf 4f       	sbci	r27, 0xFF	; 255
    5630:	9c 01       	movw	r18, r24
    5632:	ad 01       	movw	r20, r26
    5634:	c8 01       	movw	r24, r16
    5636:	b7 01       	movw	r22, r14
    5638:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    563c:	dc 01       	movw	r26, r24
    563e:	cb 01       	movw	r24, r22
    5640:	bc 01       	movw	r22, r24
    5642:	cd 01       	movw	r24, r26
    5644:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5648:	dc 01       	movw	r26, r24
    564a:	cb 01       	movw	r24, r22
    564c:	bc 01       	movw	r22, r24
    564e:	cd 01       	movw	r24, r26
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	40 e0       	ldi	r20, 0x00	; 0
    5656:	57 e4       	ldi	r21, 0x47	; 71
    5658:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	bc 01       	movw	r22, r24
    5662:	cd 01       	movw	r24, r26
    5664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5668:	dc 01       	movw	r26, r24
    566a:	cb 01       	movw	r24, r22
    566c:	80 93 42 02 	sts	0x0242, r24
    5670:	90 93 43 02 	sts	0x0243, r25
    5674:	a0 93 44 02 	sts	0x0244, r26
    5678:	b0 93 45 02 	sts	0x0245, r27
	B7 = ((uint32) UP - B3) * (50000 >> OSS);
    567c:	80 91 3e 02 	lds	r24, 0x023E
    5680:	90 91 3f 02 	lds	r25, 0x023F
    5684:	a0 91 40 02 	lds	r26, 0x0240
    5688:	b0 91 41 02 	lds	r27, 0x0241
    568c:	9c 01       	movw	r18, r24
    568e:	ad 01       	movw	r20, r26
    5690:	80 91 32 02 	lds	r24, 0x0232
    5694:	90 91 33 02 	lds	r25, 0x0233
    5698:	a0 91 34 02 	lds	r26, 0x0234
    569c:	b0 91 35 02 	lds	r27, 0x0235
    56a0:	79 01       	movw	r14, r18
    56a2:	8a 01       	movw	r16, r20
    56a4:	e8 1a       	sub	r14, r24
    56a6:	f9 0a       	sbc	r15, r25
    56a8:	0a 0b       	sbc	r16, r26
    56aa:	1b 0b       	sbc	r17, r27
    56ac:	d8 01       	movw	r26, r16
    56ae:	c7 01       	movw	r24, r14
    56b0:	28 ea       	ldi	r18, 0xA8	; 168
    56b2:	31 e6       	ldi	r19, 0x61	; 97
    56b4:	40 e0       	ldi	r20, 0x00	; 0
    56b6:	50 e0       	ldi	r21, 0x00	; 0
    56b8:	bc 01       	movw	r22, r24
    56ba:	cd 01       	movw	r24, r26
    56bc:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    56c0:	dc 01       	movw	r26, r24
    56c2:	cb 01       	movw	r24, r22
    56c4:	80 93 46 02 	sts	0x0246, r24
    56c8:	90 93 47 02 	sts	0x0247, r25
    56cc:	a0 93 48 02 	sts	0x0248, r26
    56d0:	b0 93 49 02 	sts	0x0249, r27

	if (B7 < 0x80000000) {
    56d4:	80 91 46 02 	lds	r24, 0x0246
    56d8:	90 91 47 02 	lds	r25, 0x0247
    56dc:	a0 91 48 02 	lds	r26, 0x0248
    56e0:	b0 91 49 02 	lds	r27, 0x0249
    56e4:	bb 23       	and	r27, r27
    56e6:	1c f1       	brlt	.+70     	; 0x572e <BMP180_calculatePressure+0x5f8>
		P = (B7 * 2) / B4;
    56e8:	80 91 46 02 	lds	r24, 0x0246
    56ec:	90 91 47 02 	lds	r25, 0x0247
    56f0:	a0 91 48 02 	lds	r26, 0x0248
    56f4:	b0 91 49 02 	lds	r27, 0x0249
    56f8:	88 0f       	add	r24, r24
    56fa:	99 1f       	adc	r25, r25
    56fc:	aa 1f       	adc	r26, r26
    56fe:	bb 1f       	adc	r27, r27
    5700:	20 91 42 02 	lds	r18, 0x0242
    5704:	30 91 43 02 	lds	r19, 0x0243
    5708:	40 91 44 02 	lds	r20, 0x0244
    570c:	50 91 45 02 	lds	r21, 0x0245
    5710:	bc 01       	movw	r22, r24
    5712:	cd 01       	movw	r24, r26
    5714:	0e 94 67 30 	call	0x60ce	; 0x60ce <__udivmodsi4>
    5718:	da 01       	movw	r26, r20
    571a:	c9 01       	movw	r24, r18
    571c:	80 93 3a 02 	sts	0x023A, r24
    5720:	90 93 3b 02 	sts	0x023B, r25
    5724:	a0 93 3c 02 	sts	0x023C, r26
    5728:	b0 93 3d 02 	sts	0x023D, r27
    572c:	22 c0       	rjmp	.+68     	; 0x5772 <BMP180_calculatePressure+0x63c>
	} else {
		P = (B7 / B4) * 2;
    572e:	80 91 46 02 	lds	r24, 0x0246
    5732:	90 91 47 02 	lds	r25, 0x0247
    5736:	a0 91 48 02 	lds	r26, 0x0248
    573a:	b0 91 49 02 	lds	r27, 0x0249
    573e:	20 91 42 02 	lds	r18, 0x0242
    5742:	30 91 43 02 	lds	r19, 0x0243
    5746:	40 91 44 02 	lds	r20, 0x0244
    574a:	50 91 45 02 	lds	r21, 0x0245
    574e:	bc 01       	movw	r22, r24
    5750:	cd 01       	movw	r24, r26
    5752:	0e 94 67 30 	call	0x60ce	; 0x60ce <__udivmodsi4>
    5756:	da 01       	movw	r26, r20
    5758:	c9 01       	movw	r24, r18
    575a:	88 0f       	add	r24, r24
    575c:	99 1f       	adc	r25, r25
    575e:	aa 1f       	adc	r26, r26
    5760:	bb 1f       	adc	r27, r27
    5762:	80 93 3a 02 	sts	0x023A, r24
    5766:	90 93 3b 02 	sts	0x023B, r25
    576a:	a0 93 3c 02 	sts	0x023C, r26
    576e:	b0 93 3d 02 	sts	0x023D, r27
	}
	X1 = (P / (pow(2, 8))) * (P / (pow(2, 8)));
    5772:	80 91 3a 02 	lds	r24, 0x023A
    5776:	90 91 3b 02 	lds	r25, 0x023B
    577a:	a0 91 3c 02 	lds	r26, 0x023C
    577e:	b0 91 3d 02 	lds	r27, 0x023D
    5782:	bc 01       	movw	r22, r24
    5784:	cd 01       	movw	r24, r26
    5786:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    578a:	dc 01       	movw	r26, r24
    578c:	cb 01       	movw	r24, r22
    578e:	bc 01       	movw	r22, r24
    5790:	cd 01       	movw	r24, r26
    5792:	20 e0       	ldi	r18, 0x00	; 0
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	40 e8       	ldi	r20, 0x80	; 128
    5798:	53 e4       	ldi	r21, 0x43	; 67
    579a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    579e:	dc 01       	movw	r26, r24
    57a0:	cb 01       	movw	r24, r22
    57a2:	7c 01       	movw	r14, r24
    57a4:	8d 01       	movw	r16, r26
    57a6:	80 91 3a 02 	lds	r24, 0x023A
    57aa:	90 91 3b 02 	lds	r25, 0x023B
    57ae:	a0 91 3c 02 	lds	r26, 0x023C
    57b2:	b0 91 3d 02 	lds	r27, 0x023D
    57b6:	bc 01       	movw	r22, r24
    57b8:	cd 01       	movw	r24, r26
    57ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	bc 01       	movw	r22, r24
    57c4:	cd 01       	movw	r24, r26
    57c6:	20 e0       	ldi	r18, 0x00	; 0
    57c8:	30 e0       	ldi	r19, 0x00	; 0
    57ca:	40 e8       	ldi	r20, 0x80	; 128
    57cc:	53 e4       	ldi	r21, 0x43	; 67
    57ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    57d2:	dc 01       	movw	r26, r24
    57d4:	cb 01       	movw	r24, r22
    57d6:	9c 01       	movw	r18, r24
    57d8:	ad 01       	movw	r20, r26
    57da:	c8 01       	movw	r24, r16
    57dc:	b7 01       	movw	r22, r14
    57de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e2:	dc 01       	movw	r26, r24
    57e4:	cb 01       	movw	r24, r22
    57e6:	bc 01       	movw	r22, r24
    57e8:	cd 01       	movw	r24, r26
    57ea:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	80 93 1e 02 	sts	0x021E, r24
    57f6:	90 93 1f 02 	sts	0x021F, r25
    57fa:	a0 93 20 02 	sts	0x0220, r26
    57fe:	b0 93 21 02 	sts	0x0221, r27
	X1 = (X1 * 3038) / (pow(2, 16));
    5802:	80 91 1e 02 	lds	r24, 0x021E
    5806:	90 91 1f 02 	lds	r25, 0x021F
    580a:	a0 91 20 02 	lds	r26, 0x0220
    580e:	b0 91 21 02 	lds	r27, 0x0221
    5812:	2e ed       	ldi	r18, 0xDE	; 222
    5814:	3b e0       	ldi	r19, 0x0B	; 11
    5816:	40 e0       	ldi	r20, 0x00	; 0
    5818:	50 e0       	ldi	r21, 0x00	; 0
    581a:	bc 01       	movw	r22, r24
    581c:	cd 01       	movw	r24, r26
    581e:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    5822:	dc 01       	movw	r26, r24
    5824:	cb 01       	movw	r24, r22
    5826:	bc 01       	movw	r22, r24
    5828:	cd 01       	movw	r24, r26
    582a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    582e:	dc 01       	movw	r26, r24
    5830:	cb 01       	movw	r24, r22
    5832:	bc 01       	movw	r22, r24
    5834:	cd 01       	movw	r24, r26
    5836:	20 e0       	ldi	r18, 0x00	; 0
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	40 e8       	ldi	r20, 0x80	; 128
    583c:	57 e4       	ldi	r21, 0x47	; 71
    583e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	80 93 1e 02 	sts	0x021E, r24
    5856:	90 93 1f 02 	sts	0x021F, r25
    585a:	a0 93 20 02 	sts	0x0220, r26
    585e:	b0 93 21 02 	sts	0x0221, r27
	X2 = (-7357 * P) / (pow(2, 16));
    5862:	80 91 3a 02 	lds	r24, 0x023A
    5866:	90 91 3b 02 	lds	r25, 0x023B
    586a:	a0 91 3c 02 	lds	r26, 0x023C
    586e:	b0 91 3d 02 	lds	r27, 0x023D
    5872:	23 e4       	ldi	r18, 0x43	; 67
    5874:	33 ee       	ldi	r19, 0xE3	; 227
    5876:	4f ef       	ldi	r20, 0xFF	; 255
    5878:	5f ef       	ldi	r21, 0xFF	; 255
    587a:	bc 01       	movw	r22, r24
    587c:	cd 01       	movw	r24, r26
    587e:	0e 94 48 30 	call	0x6090	; 0x6090 <__mulsi3>
    5882:	dc 01       	movw	r26, r24
    5884:	cb 01       	movw	r24, r22
    5886:	bc 01       	movw	r22, r24
    5888:	cd 01       	movw	r24, r26
    588a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    588e:	dc 01       	movw	r26, r24
    5890:	cb 01       	movw	r24, r22
    5892:	bc 01       	movw	r22, r24
    5894:	cd 01       	movw	r24, r26
    5896:	20 e0       	ldi	r18, 0x00	; 0
    5898:	30 e0       	ldi	r19, 0x00	; 0
    589a:	40 e8       	ldi	r20, 0x80	; 128
    589c:	57 e4       	ldi	r21, 0x47	; 71
    589e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    58a2:	dc 01       	movw	r26, r24
    58a4:	cb 01       	movw	r24, r22
    58a6:	bc 01       	movw	r22, r24
    58a8:	cd 01       	movw	r24, r26
    58aa:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    58ae:	dc 01       	movw	r26, r24
    58b0:	cb 01       	movw	r24, r22
    58b2:	80 93 22 02 	sts	0x0222, r24
    58b6:	90 93 23 02 	sts	0x0223, r25
    58ba:	a0 93 24 02 	sts	0x0224, r26
    58be:	b0 93 25 02 	sts	0x0225, r27
	P = P + (X1 + X2 + 3791) / (pow(2, 4));
    58c2:	80 91 3a 02 	lds	r24, 0x023A
    58c6:	90 91 3b 02 	lds	r25, 0x023B
    58ca:	a0 91 3c 02 	lds	r26, 0x023C
    58ce:	b0 91 3d 02 	lds	r27, 0x023D
    58d2:	bc 01       	movw	r22, r24
    58d4:	cd 01       	movw	r24, r26
    58d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    58da:	7b 01       	movw	r14, r22
    58dc:	8c 01       	movw	r16, r24
    58de:	20 91 1e 02 	lds	r18, 0x021E
    58e2:	30 91 1f 02 	lds	r19, 0x021F
    58e6:	40 91 20 02 	lds	r20, 0x0220
    58ea:	50 91 21 02 	lds	r21, 0x0221
    58ee:	80 91 22 02 	lds	r24, 0x0222
    58f2:	90 91 23 02 	lds	r25, 0x0223
    58f6:	a0 91 24 02 	lds	r26, 0x0224
    58fa:	b0 91 25 02 	lds	r27, 0x0225
    58fe:	82 0f       	add	r24, r18
    5900:	93 1f       	adc	r25, r19
    5902:	a4 1f       	adc	r26, r20
    5904:	b5 1f       	adc	r27, r21
    5906:	81 53       	subi	r24, 0x31	; 49
    5908:	91 4f       	sbci	r25, 0xF1	; 241
    590a:	af 4f       	sbci	r26, 0xFF	; 255
    590c:	bf 4f       	sbci	r27, 0xFF	; 255
    590e:	bc 01       	movw	r22, r24
    5910:	cd 01       	movw	r24, r26
    5912:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5916:	dc 01       	movw	r26, r24
    5918:	cb 01       	movw	r24, r22
    591a:	bc 01       	movw	r22, r24
    591c:	cd 01       	movw	r24, r26
    591e:	20 e0       	ldi	r18, 0x00	; 0
    5920:	30 e0       	ldi	r19, 0x00	; 0
    5922:	40 e8       	ldi	r20, 0x80	; 128
    5924:	51 e4       	ldi	r21, 0x41	; 65
    5926:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    592a:	dc 01       	movw	r26, r24
    592c:	cb 01       	movw	r24, r22
    592e:	9c 01       	movw	r18, r24
    5930:	ad 01       	movw	r20, r26
    5932:	c8 01       	movw	r24, r16
    5934:	b7 01       	movw	r22, r14
    5936:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    593a:	dc 01       	movw	r26, r24
    593c:	cb 01       	movw	r24, r22
    593e:	bc 01       	movw	r22, r24
    5940:	cd 01       	movw	r24, r26
    5942:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5946:	dc 01       	movw	r26, r24
    5948:	cb 01       	movw	r24, r22
    594a:	80 93 3a 02 	sts	0x023A, r24
    594e:	90 93 3b 02 	sts	0x023B, r25
    5952:	a0 93 3c 02 	sts	0x023C, r26
    5956:	b0 93 3d 02 	sts	0x023D, r27

	P = P / 100;
    595a:	80 91 3a 02 	lds	r24, 0x023A
    595e:	90 91 3b 02 	lds	r25, 0x023B
    5962:	a0 91 3c 02 	lds	r26, 0x023C
    5966:	b0 91 3d 02 	lds	r27, 0x023D
    596a:	24 e6       	ldi	r18, 0x64	; 100
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	40 e0       	ldi	r20, 0x00	; 0
    5970:	50 e0       	ldi	r21, 0x00	; 0
    5972:	bc 01       	movw	r22, r24
    5974:	cd 01       	movw	r24, r26
    5976:	0e 94 89 30 	call	0x6112	; 0x6112 <__divmodsi4>
    597a:	da 01       	movw	r26, r20
    597c:	c9 01       	movw	r24, r18
    597e:	80 93 3a 02 	sts	0x023A, r24
    5982:	90 93 3b 02 	sts	0x023B, r25
    5986:	a0 93 3c 02 	sts	0x023C, r26
    598a:	b0 93 3d 02 	sts	0x023D, r27

	return P;
    598e:	80 91 3a 02 	lds	r24, 0x023A
    5992:	90 91 3b 02 	lds	r25, 0x023B
    5996:	a0 91 3c 02 	lds	r26, 0x023C
    599a:	b0 91 3d 02 	lds	r27, 0x023D
}
    599e:	bc 01       	movw	r22, r24
    59a0:	cd 01       	movw	r24, r26
    59a2:	cf 91       	pop	r28
    59a4:	df 91       	pop	r29
    59a6:	1f 91       	pop	r17
    59a8:	0f 91       	pop	r16
    59aa:	ff 90       	pop	r15
    59ac:	ef 90       	pop	r14
    59ae:	08 95       	ret

000059b0 <BMP180_Start>:

void BMP180_Start(void) {
    59b0:	df 93       	push	r29
    59b2:	cf 93       	push	r28
    59b4:	cd b7       	in	r28, 0x3d	; 61
    59b6:	de b7       	in	r29, 0x3e	; 62
	BMP180_ReadCalb();
    59b8:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <BMP180_ReadCalb>
}
    59bc:	cf 91       	pop	r28
    59be:	df 91       	pop	r29
    59c0:	08 95       	ret

000059c2 <delay>:

void delay(void){
    59c2:	df 93       	push	r29
    59c4:	cf 93       	push	r28
    59c6:	cd b7       	in	r28, 0x3d	; 61
    59c8:	de b7       	in	r29, 0x3e	; 62
    59ca:	68 97       	sbiw	r28, 0x18	; 24
    59cc:	0f b6       	in	r0, 0x3f	; 63
    59ce:	f8 94       	cli
    59d0:	de bf       	out	0x3e, r29	; 62
    59d2:	0f be       	out	0x3f, r0	; 63
    59d4:	cd bf       	out	0x3d, r28	; 61
    59d6:	80 e0       	ldi	r24, 0x00	; 0
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	a0 e2       	ldi	r26, 0x20	; 32
    59dc:	b1 e4       	ldi	r27, 0x41	; 65
    59de:	8d 8b       	std	Y+21, r24	; 0x15
    59e0:	9e 8b       	std	Y+22, r25	; 0x16
    59e2:	af 8b       	std	Y+23, r26	; 0x17
    59e4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    59e6:	6d 89       	ldd	r22, Y+21	; 0x15
    59e8:	7e 89       	ldd	r23, Y+22	; 0x16
    59ea:	8f 89       	ldd	r24, Y+23	; 0x17
    59ec:	98 8d       	ldd	r25, Y+24	; 0x18
    59ee:	2b ea       	ldi	r18, 0xAB	; 171
    59f0:	3a ea       	ldi	r19, 0xAA	; 170
    59f2:	4a ea       	ldi	r20, 0xAA	; 170
    59f4:	50 e4       	ldi	r21, 0x40	; 64
    59f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59fa:	dc 01       	movw	r26, r24
    59fc:	cb 01       	movw	r24, r22
    59fe:	89 8b       	std	Y+17, r24	; 0x11
    5a00:	9a 8b       	std	Y+18, r25	; 0x12
    5a02:	ab 8b       	std	Y+19, r26	; 0x13
    5a04:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5a06:	69 89       	ldd	r22, Y+17	; 0x11
    5a08:	7a 89       	ldd	r23, Y+18	; 0x12
    5a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    5a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	40 e8       	ldi	r20, 0x80	; 128
    5a14:	5f e3       	ldi	r21, 0x3F	; 63
    5a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a1a:	88 23       	and	r24, r24
    5a1c:	1c f4       	brge	.+6      	; 0x5a24 <delay+0x62>
		__ticks = 1;
    5a1e:	81 e0       	ldi	r24, 0x01	; 1
    5a20:	88 8b       	std	Y+16, r24	; 0x10
    5a22:	91 c0       	rjmp	.+290    	; 0x5b46 <delay+0x184>
	else if (__tmp > 255)
    5a24:	69 89       	ldd	r22, Y+17	; 0x11
    5a26:	7a 89       	ldd	r23, Y+18	; 0x12
    5a28:	8b 89       	ldd	r24, Y+19	; 0x13
    5a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    5a2c:	20 e0       	ldi	r18, 0x00	; 0
    5a2e:	30 e0       	ldi	r19, 0x00	; 0
    5a30:	4f e7       	ldi	r20, 0x7F	; 127
    5a32:	53 e4       	ldi	r21, 0x43	; 67
    5a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a38:	18 16       	cp	r1, r24
    5a3a:	0c f0       	brlt	.+2      	; 0x5a3e <delay+0x7c>
    5a3c:	7b c0       	rjmp	.+246    	; 0x5b34 <delay+0x172>
	{
		_delay_ms(__us / 1000.0);
    5a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    5a40:	7e 89       	ldd	r23, Y+22	; 0x16
    5a42:	8f 89       	ldd	r24, Y+23	; 0x17
    5a44:	98 8d       	ldd	r25, Y+24	; 0x18
    5a46:	20 e0       	ldi	r18, 0x00	; 0
    5a48:	30 e0       	ldi	r19, 0x00	; 0
    5a4a:	4a e7       	ldi	r20, 0x7A	; 122
    5a4c:	54 e4       	ldi	r21, 0x44	; 68
    5a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	8c 87       	std	Y+12, r24	; 0x0c
    5a58:	9d 87       	std	Y+13, r25	; 0x0d
    5a5a:	ae 87       	std	Y+14, r26	; 0x0e
    5a5c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a60:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a62:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a64:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a66:	20 e0       	ldi	r18, 0x00	; 0
    5a68:	30 e0       	ldi	r19, 0x00	; 0
    5a6a:	4a e7       	ldi	r20, 0x7A	; 122
    5a6c:	55 e4       	ldi	r21, 0x45	; 69
    5a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a72:	dc 01       	movw	r26, r24
    5a74:	cb 01       	movw	r24, r22
    5a76:	88 87       	std	Y+8, r24	; 0x08
    5a78:	99 87       	std	Y+9, r25	; 0x09
    5a7a:	aa 87       	std	Y+10, r26	; 0x0a
    5a7c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5a7e:	68 85       	ldd	r22, Y+8	; 0x08
    5a80:	79 85       	ldd	r23, Y+9	; 0x09
    5a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a84:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	30 e0       	ldi	r19, 0x00	; 0
    5a8a:	40 e8       	ldi	r20, 0x80	; 128
    5a8c:	5f e3       	ldi	r21, 0x3F	; 63
    5a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a92:	88 23       	and	r24, r24
    5a94:	2c f4       	brge	.+10     	; 0x5aa0 <delay+0xde>
		__ticks = 1;
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	9f 83       	std	Y+7, r25	; 0x07
    5a9c:	8e 83       	std	Y+6, r24	; 0x06
    5a9e:	3f c0       	rjmp	.+126    	; 0x5b1e <delay+0x15c>
	else if (__tmp > 65535)
    5aa0:	68 85       	ldd	r22, Y+8	; 0x08
    5aa2:	79 85       	ldd	r23, Y+9	; 0x09
    5aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
    5aaa:	3f ef       	ldi	r19, 0xFF	; 255
    5aac:	4f e7       	ldi	r20, 0x7F	; 127
    5aae:	57 e4       	ldi	r21, 0x47	; 71
    5ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ab4:	18 16       	cp	r1, r24
    5ab6:	4c f5       	brge	.+82     	; 0x5b0a <delay+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab8:	6c 85       	ldd	r22, Y+12	; 0x0c
    5aba:	7d 85       	ldd	r23, Y+13	; 0x0d
    5abc:	8e 85       	ldd	r24, Y+14	; 0x0e
    5abe:	9f 85       	ldd	r25, Y+15	; 0x0f
    5ac0:	20 e0       	ldi	r18, 0x00	; 0
    5ac2:	30 e0       	ldi	r19, 0x00	; 0
    5ac4:	40 e2       	ldi	r20, 0x20	; 32
    5ac6:	51 e4       	ldi	r21, 0x41	; 65
    5ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5acc:	dc 01       	movw	r26, r24
    5ace:	cb 01       	movw	r24, r22
    5ad0:	bc 01       	movw	r22, r24
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	9f 83       	std	Y+7, r25	; 0x07
    5ade:	8e 83       	std	Y+6, r24	; 0x06
    5ae0:	0f c0       	rjmp	.+30     	; 0x5b00 <delay+0x13e>
    5ae2:	80 e9       	ldi	r24, 0x90	; 144
    5ae4:	91 e0       	ldi	r25, 0x01	; 1
    5ae6:	9d 83       	std	Y+5, r25	; 0x05
    5ae8:	8c 83       	std	Y+4, r24	; 0x04
    5aea:	8c 81       	ldd	r24, Y+4	; 0x04
    5aec:	9d 81       	ldd	r25, Y+5	; 0x05
    5aee:	01 97       	sbiw	r24, 0x01	; 1
    5af0:	f1 f7       	brne	.-4      	; 0x5aee <delay+0x12c>
    5af2:	9d 83       	std	Y+5, r25	; 0x05
    5af4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5af6:	8e 81       	ldd	r24, Y+6	; 0x06
    5af8:	9f 81       	ldd	r25, Y+7	; 0x07
    5afa:	01 97       	sbiw	r24, 0x01	; 1
    5afc:	9f 83       	std	Y+7, r25	; 0x07
    5afe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b00:	8e 81       	ldd	r24, Y+6	; 0x06
    5b02:	9f 81       	ldd	r25, Y+7	; 0x07
    5b04:	00 97       	sbiw	r24, 0x00	; 0
    5b06:	69 f7       	brne	.-38     	; 0x5ae2 <delay+0x120>
    5b08:	24 c0       	rjmp	.+72     	; 0x5b52 <delay+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b0a:	68 85       	ldd	r22, Y+8	; 0x08
    5b0c:	79 85       	ldd	r23, Y+9	; 0x09
    5b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b16:	dc 01       	movw	r26, r24
    5b18:	cb 01       	movw	r24, r22
    5b1a:	9f 83       	std	Y+7, r25	; 0x07
    5b1c:	8e 83       	std	Y+6, r24	; 0x06
    5b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    5b20:	9f 81       	ldd	r25, Y+7	; 0x07
    5b22:	9b 83       	std	Y+3, r25	; 0x03
    5b24:	8a 83       	std	Y+2, r24	; 0x02
    5b26:	8a 81       	ldd	r24, Y+2	; 0x02
    5b28:	9b 81       	ldd	r25, Y+3	; 0x03
    5b2a:	01 97       	sbiw	r24, 0x01	; 1
    5b2c:	f1 f7       	brne	.-4      	; 0x5b2a <delay+0x168>
    5b2e:	9b 83       	std	Y+3, r25	; 0x03
    5b30:	8a 83       	std	Y+2, r24	; 0x02
    5b32:	0f c0       	rjmp	.+30     	; 0x5b52 <delay+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5b34:	69 89       	ldd	r22, Y+17	; 0x11
    5b36:	7a 89       	ldd	r23, Y+18	; 0x12
    5b38:	8b 89       	ldd	r24, Y+19	; 0x13
    5b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    5b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	88 8b       	std	Y+16, r24	; 0x10
    5b46:	88 89       	ldd	r24, Y+16	; 0x10
    5b48:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5b4a:	89 81       	ldd	r24, Y+1	; 0x01
    5b4c:	8a 95       	dec	r24
    5b4e:	f1 f7       	brne	.-4      	; 0x5b4c <delay+0x18a>
    5b50:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
    5b52:	68 96       	adiw	r28, 0x18	; 24
    5b54:	0f b6       	in	r0, 0x3f	; 63
    5b56:	f8 94       	cli
    5b58:	de bf       	out	0x3e, r29	; 62
    5b5a:	0f be       	out	0x3f, r0	; 63
    5b5c:	cd bf       	out	0x3d, r28	; 61
    5b5e:	cf 91       	pop	r28
    5b60:	df 91       	pop	r29
    5b62:	08 95       	ret

00005b64 <EDS_displayTemp>:
#define LED_PIN			PIN4_ID
#define BUZZER_PIN		PIN6_ID


void EDS_displayTemp(uint32 temperature)
{
    5b64:	df 93       	push	r29
    5b66:	cf 93       	push	r28
    5b68:	00 d0       	rcall	.+0      	; 0x5b6a <EDS_displayTemp+0x6>
    5b6a:	00 d0       	rcall	.+0      	; 0x5b6c <EDS_displayTemp+0x8>
    5b6c:	cd b7       	in	r28, 0x3d	; 61
    5b6e:	de b7       	in	r29, 0x3e	; 62
    5b70:	69 83       	std	Y+1, r22	; 0x01
    5b72:	7a 83       	std	Y+2, r23	; 0x02
    5b74:	8b 83       	std	Y+3, r24	; 0x03
    5b76:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(1,7);
    5b78:	81 e0       	ldi	r24, 0x01	; 1
    5b7a:	67 e0       	ldi	r22, 0x07	; 7
    5b7c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <LCD_moveCursor>
	if ((1000 <= temperature) || (0 > temperature))
    5b80:	89 81       	ldd	r24, Y+1	; 0x01
    5b82:	9a 81       	ldd	r25, Y+2	; 0x02
    5b84:	ab 81       	ldd	r26, Y+3	; 0x03
    5b86:	bc 81       	ldd	r27, Y+4	; 0x04
    5b88:	88 3e       	cpi	r24, 0xE8	; 232
    5b8a:	23 e0       	ldi	r18, 0x03	; 3
    5b8c:	92 07       	cpc	r25, r18
    5b8e:	20 e0       	ldi	r18, 0x00	; 0
    5b90:	a2 07       	cpc	r26, r18
    5b92:	20 e0       	ldi	r18, 0x00	; 0
    5b94:	b2 07       	cpc	r27, r18
    5b96:	28 f0       	brcs	.+10     	; 0x5ba2 <EDS_displayTemp+0x3e>
	{
		LCD_displayString("ERR");
    5b98:	85 eb       	ldi	r24, 0xB5	; 181
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    5ba0:	3a c0       	rjmp	.+116    	; 0x5c16 <EDS_displayTemp+0xb2>
	}
	else if(100 <= temperature)
    5ba2:	89 81       	ldd	r24, Y+1	; 0x01
    5ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ba6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ba8:	bc 81       	ldd	r27, Y+4	; 0x04
    5baa:	84 36       	cpi	r24, 0x64	; 100
    5bac:	91 05       	cpc	r25, r1
    5bae:	a1 05       	cpc	r26, r1
    5bb0:	b1 05       	cpc	r27, r1
    5bb2:	28 f0       	brcs	.+10     	; 0x5bbe <EDS_displayTemp+0x5a>
	{
		LCD_intgerToString(temperature);
    5bb4:	89 81       	ldd	r24, Y+1	; 0x01
    5bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    5bb8:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
    5bbc:	2c c0       	rjmp	.+88     	; 0x5c16 <EDS_displayTemp+0xb2>
	}
	else if((10 <= temperature) && (100 > temperature))
    5bbe:	89 81       	ldd	r24, Y+1	; 0x01
    5bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5bc2:	ab 81       	ldd	r26, Y+3	; 0x03
    5bc4:	bc 81       	ldd	r27, Y+4	; 0x04
    5bc6:	8a 30       	cpi	r24, 0x0A	; 10
    5bc8:	91 05       	cpc	r25, r1
    5bca:	a1 05       	cpc	r26, r1
    5bcc:	b1 05       	cpc	r27, r1
    5bce:	90 f0       	brcs	.+36     	; 0x5bf4 <EDS_displayTemp+0x90>
    5bd0:	89 81       	ldd	r24, Y+1	; 0x01
    5bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd4:	ab 81       	ldd	r26, Y+3	; 0x03
    5bd6:	bc 81       	ldd	r27, Y+4	; 0x04
    5bd8:	84 36       	cpi	r24, 0x64	; 100
    5bda:	91 05       	cpc	r25, r1
    5bdc:	a1 05       	cpc	r26, r1
    5bde:	b1 05       	cpc	r27, r1
    5be0:	48 f4       	brcc	.+18     	; 0x5bf4 <EDS_displayTemp+0x90>
	{
		LCD_intgerToString(temperature);
    5be2:	89 81       	ldd	r24, Y+1	; 0x01
    5be4:	9a 81       	ldd	r25, Y+2	; 0x02
    5be6:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString(" ");
    5bea:	89 eb       	ldi	r24, 0xB9	; 185
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    5bf2:	11 c0       	rjmp	.+34     	; 0x5c16 <EDS_displayTemp+0xb2>
	}
	else if((0 <= temperature) && (10 > temperature))
    5bf4:	89 81       	ldd	r24, Y+1	; 0x01
    5bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf8:	ab 81       	ldd	r26, Y+3	; 0x03
    5bfa:	bc 81       	ldd	r27, Y+4	; 0x04
    5bfc:	8a 30       	cpi	r24, 0x0A	; 10
    5bfe:	91 05       	cpc	r25, r1
    5c00:	a1 05       	cpc	r26, r1
    5c02:	b1 05       	cpc	r27, r1
    5c04:	40 f4       	brcc	.+16     	; 0x5c16 <EDS_displayTemp+0xb2>
	{
		LCD_intgerToString(temperature);
    5c06:	89 81       	ldd	r24, Y+1	; 0x01
    5c08:	9a 81       	ldd	r25, Y+2	; 0x02
    5c0a:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString("  ");
    5c0e:	8b eb       	ldi	r24, 0xBB	; 187
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
	}
}
    5c16:	0f 90       	pop	r0
    5c18:	0f 90       	pop	r0
    5c1a:	0f 90       	pop	r0
    5c1c:	0f 90       	pop	r0
    5c1e:	cf 91       	pop	r28
    5c20:	df 91       	pop	r29
    5c22:	08 95       	ret

00005c24 <EDS_displayPress>:

void EDS_displayPress(uint32 pressure)
{
    5c24:	df 93       	push	r29
    5c26:	cf 93       	push	r28
    5c28:	00 d0       	rcall	.+0      	; 0x5c2a <EDS_displayPress+0x6>
    5c2a:	00 d0       	rcall	.+0      	; 0x5c2c <EDS_displayPress+0x8>
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	69 83       	std	Y+1, r22	; 0x01
    5c32:	7a 83       	std	Y+2, r23	; 0x02
    5c34:	8b 83       	std	Y+3, r24	; 0x03
    5c36:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(0,8);
    5c38:	80 e0       	ldi	r24, 0x00	; 0
    5c3a:	68 e0       	ldi	r22, 0x08	; 8
    5c3c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <LCD_moveCursor>
	if ((10000 <= pressure) || (0 > pressure))
    5c40:	89 81       	ldd	r24, Y+1	; 0x01
    5c42:	9a 81       	ldd	r25, Y+2	; 0x02
    5c44:	ab 81       	ldd	r26, Y+3	; 0x03
    5c46:	bc 81       	ldd	r27, Y+4	; 0x04
    5c48:	80 31       	cpi	r24, 0x10	; 16
    5c4a:	27 e2       	ldi	r18, 0x27	; 39
    5c4c:	92 07       	cpc	r25, r18
    5c4e:	20 e0       	ldi	r18, 0x00	; 0
    5c50:	a2 07       	cpc	r26, r18
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	b2 07       	cpc	r27, r18
    5c56:	48 f0       	brcs	.+18     	; 0x5c6a <EDS_displayPress+0x46>
	{
		LCD_displayString("ERR");
    5c58:	85 eb       	ldi	r24, 0xB5	; 181
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
		LCD_displayString(" ");
    5c60:	89 eb       	ldi	r24, 0xB9	; 185
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    5c68:	67 c0       	rjmp	.+206    	; 0x5d38 <EDS_displayPress+0x114>
	}
	else if((1000 <= pressure) && (10000 > pressure))
    5c6a:	89 81       	ldd	r24, Y+1	; 0x01
    5c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c6e:	ab 81       	ldd	r26, Y+3	; 0x03
    5c70:	bc 81       	ldd	r27, Y+4	; 0x04
    5c72:	88 3e       	cpi	r24, 0xE8	; 232
    5c74:	23 e0       	ldi	r18, 0x03	; 3
    5c76:	92 07       	cpc	r25, r18
    5c78:	20 e0       	ldi	r18, 0x00	; 0
    5c7a:	a2 07       	cpc	r26, r18
    5c7c:	20 e0       	ldi	r18, 0x00	; 0
    5c7e:	b2 07       	cpc	r27, r18
    5c80:	88 f0       	brcs	.+34     	; 0x5ca4 <EDS_displayPress+0x80>
    5c82:	89 81       	ldd	r24, Y+1	; 0x01
    5c84:	9a 81       	ldd	r25, Y+2	; 0x02
    5c86:	ab 81       	ldd	r26, Y+3	; 0x03
    5c88:	bc 81       	ldd	r27, Y+4	; 0x04
    5c8a:	80 31       	cpi	r24, 0x10	; 16
    5c8c:	27 e2       	ldi	r18, 0x27	; 39
    5c8e:	92 07       	cpc	r25, r18
    5c90:	20 e0       	ldi	r18, 0x00	; 0
    5c92:	a2 07       	cpc	r26, r18
    5c94:	20 e0       	ldi	r18, 0x00	; 0
    5c96:	b2 07       	cpc	r27, r18
    5c98:	28 f4       	brcc	.+10     	; 0x5ca4 <EDS_displayPress+0x80>
	{
		LCD_intgerToString(pressure);
    5c9a:	89 81       	ldd	r24, Y+1	; 0x01
    5c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
    5ca2:	4a c0       	rjmp	.+148    	; 0x5d38 <EDS_displayPress+0x114>
	}
	else if((100 <= pressure) && (1000 > pressure))
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca8:	ab 81       	ldd	r26, Y+3	; 0x03
    5caa:	bc 81       	ldd	r27, Y+4	; 0x04
    5cac:	84 36       	cpi	r24, 0x64	; 100
    5cae:	91 05       	cpc	r25, r1
    5cb0:	a1 05       	cpc	r26, r1
    5cb2:	b1 05       	cpc	r27, r1
    5cb4:	a8 f0       	brcs	.+42     	; 0x5ce0 <EDS_displayPress+0xbc>
    5cb6:	89 81       	ldd	r24, Y+1	; 0x01
    5cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cba:	ab 81       	ldd	r26, Y+3	; 0x03
    5cbc:	bc 81       	ldd	r27, Y+4	; 0x04
    5cbe:	88 3e       	cpi	r24, 0xE8	; 232
    5cc0:	23 e0       	ldi	r18, 0x03	; 3
    5cc2:	92 07       	cpc	r25, r18
    5cc4:	20 e0       	ldi	r18, 0x00	; 0
    5cc6:	a2 07       	cpc	r26, r18
    5cc8:	20 e0       	ldi	r18, 0x00	; 0
    5cca:	b2 07       	cpc	r27, r18
    5ccc:	48 f4       	brcc	.+18     	; 0x5ce0 <EDS_displayPress+0xbc>
	{
		LCD_intgerToString(pressure);
    5cce:	89 81       	ldd	r24, Y+1	; 0x01
    5cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cd2:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString(" ");
    5cd6:	89 eb       	ldi	r24, 0xB9	; 185
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    5cde:	2c c0       	rjmp	.+88     	; 0x5d38 <EDS_displayPress+0x114>
	}
	else if((10 <= pressure) && (100 > pressure))
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
    5ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ce6:	bc 81       	ldd	r27, Y+4	; 0x04
    5ce8:	8a 30       	cpi	r24, 0x0A	; 10
    5cea:	91 05       	cpc	r25, r1
    5cec:	a1 05       	cpc	r26, r1
    5cee:	b1 05       	cpc	r27, r1
    5cf0:	90 f0       	brcs	.+36     	; 0x5d16 <EDS_displayPress+0xf2>
    5cf2:	89 81       	ldd	r24, Y+1	; 0x01
    5cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf6:	ab 81       	ldd	r26, Y+3	; 0x03
    5cf8:	bc 81       	ldd	r27, Y+4	; 0x04
    5cfa:	84 36       	cpi	r24, 0x64	; 100
    5cfc:	91 05       	cpc	r25, r1
    5cfe:	a1 05       	cpc	r26, r1
    5d00:	b1 05       	cpc	r27, r1
    5d02:	48 f4       	brcc	.+18     	; 0x5d16 <EDS_displayPress+0xf2>
	{
		LCD_intgerToString(pressure);
    5d04:	89 81       	ldd	r24, Y+1	; 0x01
    5d06:	9a 81       	ldd	r25, Y+2	; 0x02
    5d08:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString("  ");
    5d0c:	8b eb       	ldi	r24, 0xBB	; 187
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    5d14:	11 c0       	rjmp	.+34     	; 0x5d38 <EDS_displayPress+0x114>
	}
	else if((0 <= pressure) && (10 > pressure))
    5d16:	89 81       	ldd	r24, Y+1	; 0x01
    5d18:	9a 81       	ldd	r25, Y+2	; 0x02
    5d1a:	ab 81       	ldd	r26, Y+3	; 0x03
    5d1c:	bc 81       	ldd	r27, Y+4	; 0x04
    5d1e:	8a 30       	cpi	r24, 0x0A	; 10
    5d20:	91 05       	cpc	r25, r1
    5d22:	a1 05       	cpc	r26, r1
    5d24:	b1 05       	cpc	r27, r1
    5d26:	40 f4       	brcc	.+16     	; 0x5d38 <EDS_displayPress+0x114>
	{
		LCD_intgerToString(pressure);
    5d28:	89 81       	ldd	r24, Y+1	; 0x01
    5d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d2c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString("   ");
    5d30:	8e eb       	ldi	r24, 0xBE	; 190
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
	}
}
    5d38:	0f 90       	pop	r0
    5d3a:	0f 90       	pop	r0
    5d3c:	0f 90       	pop	r0
    5d3e:	0f 90       	pop	r0
    5d40:	cf 91       	pop	r28
    5d42:	df 91       	pop	r29
    5d44:	08 95       	ret

00005d46 <LED_Buzzer_init>:

void LED_Buzzer_init(void)
{
    5d46:	df 93       	push	r29
    5d48:	cf 93       	push	r28
    5d4a:	cd b7       	in	r28, 0x3d	; 61
    5d4c:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(LED_PORT,LED_PIN,PIN_OUTPUT);
    5d4e:	80 e0       	ldi	r24, 0x00	; 0
    5d50:	64 e0       	ldi	r22, 0x04	; 4
    5d52:	41 e0       	ldi	r20, 0x01	; 1
    5d54:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    5d58:	82 e0       	ldi	r24, 0x02	; 2
    5d5a:	66 e0       	ldi	r22, 0x06	; 6
    5d5c:	41 e0       	ldi	r20, 0x01	; 1
    5d5e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTA_ID,PIN1_ID,PIN_OUTPUT);
    5d62:	80 e0       	ldi	r24, 0x00	; 0
    5d64:	61 e0       	ldi	r22, 0x01	; 1
    5d66:	41 e0       	ldi	r20, 0x01	; 1
    5d68:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_LOW);
    5d6c:	80 e0       	ldi	r24, 0x00	; 0
    5d6e:	64 e0       	ldi	r22, 0x04	; 4
    5d70:	40 e0       	ldi	r20, 0x00	; 0
    5d72:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    5d76:	82 e0       	ldi	r24, 0x02	; 2
    5d78:	66 e0       	ldi	r22, 0x06	; 6
    5d7a:	40 e0       	ldi	r20, 0x00	; 0
    5d7c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
    5d80:	80 e0       	ldi	r24, 0x00	; 0
    5d82:	61 e0       	ldi	r22, 0x01	; 1
    5d84:	40 e0       	ldi	r20, 0x00	; 0
    5d86:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    5d8a:	cf 91       	pop	r28
    5d8c:	df 91       	pop	r29
    5d8e:	08 95       	ret

00005d90 <EDS_ActionValid>:

void EDS_ActionValid(void)
{
    5d90:	df 93       	push	r29
    5d92:	cf 93       	push	r28
    5d94:	cd b7       	in	r28, 0x3d	; 61
    5d96:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_LOW);
    5d98:	80 e0       	ldi	r24, 0x00	; 0
    5d9a:	64 e0       	ldi	r22, 0x04	; 4
    5d9c:	40 e0       	ldi	r20, 0x00	; 0
    5d9e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    5da2:	82 e0       	ldi	r24, 0x02	; 2
    5da4:	66 e0       	ldi	r22, 0x06	; 6
    5da6:	40 e0       	ldi	r20, 0x00	; 0
    5da8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    5dac:	cf 91       	pop	r28
    5dae:	df 91       	pop	r29
    5db0:	08 95       	ret

00005db2 <EDS_ActionInvalid>:

void EDS_ActionInvalid(void)
{
    5db2:	df 93       	push	r29
    5db4:	cf 93       	push	r28
    5db6:	cd b7       	in	r28, 0x3d	; 61
    5db8:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_HIGH);
    5dba:	80 e0       	ldi	r24, 0x00	; 0
    5dbc:	64 e0       	ldi	r22, 0x04	; 4
    5dbe:	41 e0       	ldi	r20, 0x01	; 1
    5dc0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    5dc4:	82 e0       	ldi	r24, 0x02	; 2
    5dc6:	66 e0       	ldi	r22, 0x06	; 6
    5dc8:	41 e0       	ldi	r20, 0x01	; 1
    5dca:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    5dce:	cf 91       	pop	r28
    5dd0:	df 91       	pop	r29
    5dd2:	08 95       	ret

00005dd4 <EDS_Detection>:

void EDS_Detection(uint32 temperature, uint32 pressure)
{
    5dd4:	df 93       	push	r29
    5dd6:	cf 93       	push	r28
    5dd8:	cd b7       	in	r28, 0x3d	; 61
    5dda:	de b7       	in	r29, 0x3e	; 62
    5ddc:	28 97       	sbiw	r28, 0x08	; 8
    5dde:	0f b6       	in	r0, 0x3f	; 63
    5de0:	f8 94       	cli
    5de2:	de bf       	out	0x3e, r29	; 62
    5de4:	0f be       	out	0x3f, r0	; 63
    5de6:	cd bf       	out	0x3d, r28	; 61
    5de8:	69 83       	std	Y+1, r22	; 0x01
    5dea:	7a 83       	std	Y+2, r23	; 0x02
    5dec:	8b 83       	std	Y+3, r24	; 0x03
    5dee:	9c 83       	std	Y+4, r25	; 0x04
    5df0:	2d 83       	std	Y+5, r18	; 0x05
    5df2:	3e 83       	std	Y+6, r19	; 0x06
    5df4:	4f 83       	std	Y+7, r20	; 0x07
    5df6:	58 87       	std	Y+8, r21	; 0x08
	if ((temperature < EDS_TEMP_LOW) || (temperature > EDS_TEMP_HIGH) || (pressure < EDS_PRESS_LOW) || (pressure > EDS_PRESS_HIGH))
    5df8:	89 81       	ldd	r24, Y+1	; 0x01
    5dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    5dfc:	ab 81       	ldd	r26, Y+3	; 0x03
    5dfe:	bc 81       	ldd	r27, Y+4	; 0x04
    5e00:	84 31       	cpi	r24, 0x14	; 20
    5e02:	91 05       	cpc	r25, r1
    5e04:	a1 05       	cpc	r26, r1
    5e06:	b1 05       	cpc	r27, r1
    5e08:	08 f1       	brcs	.+66     	; 0x5e4c <EDS_Detection+0x78>
    5e0a:	89 81       	ldd	r24, Y+1	; 0x01
    5e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e0e:	ab 81       	ldd	r26, Y+3	; 0x03
    5e10:	bc 81       	ldd	r27, Y+4	; 0x04
    5e12:	89 32       	cpi	r24, 0x29	; 41
    5e14:	91 05       	cpc	r25, r1
    5e16:	a1 05       	cpc	r26, r1
    5e18:	b1 05       	cpc	r27, r1
    5e1a:	c0 f4       	brcc	.+48     	; 0x5e4c <EDS_Detection+0x78>
    5e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e20:	af 81       	ldd	r26, Y+7	; 0x07
    5e22:	b8 85       	ldd	r27, Y+8	; 0x08
    5e24:	88 35       	cpi	r24, 0x58	; 88
    5e26:	22 e0       	ldi	r18, 0x02	; 2
    5e28:	92 07       	cpc	r25, r18
    5e2a:	20 e0       	ldi	r18, 0x00	; 0
    5e2c:	a2 07       	cpc	r26, r18
    5e2e:	20 e0       	ldi	r18, 0x00	; 0
    5e30:	b2 07       	cpc	r27, r18
    5e32:	60 f0       	brcs	.+24     	; 0x5e4c <EDS_Detection+0x78>
    5e34:	8d 81       	ldd	r24, Y+5	; 0x05
    5e36:	9e 81       	ldd	r25, Y+6	; 0x06
    5e38:	af 81       	ldd	r26, Y+7	; 0x07
    5e3a:	b8 85       	ldd	r27, Y+8	; 0x08
    5e3c:	81 32       	cpi	r24, 0x21	; 33
    5e3e:	23 e0       	ldi	r18, 0x03	; 3
    5e40:	92 07       	cpc	r25, r18
    5e42:	20 e0       	ldi	r18, 0x00	; 0
    5e44:	a2 07       	cpc	r26, r18
    5e46:	20 e0       	ldi	r18, 0x00	; 0
    5e48:	b2 07       	cpc	r27, r18
    5e4a:	18 f0       	brcs	.+6      	; 0x5e52 <EDS_Detection+0x7e>
	{
		EDS_ActionInvalid();
    5e4c:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <EDS_ActionInvalid>
    5e50:	02 c0       	rjmp	.+4      	; 0x5e56 <EDS_Detection+0x82>
	}
	else
	{
		EDS_ActionValid();
    5e52:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <EDS_ActionValid>
	}
}
    5e56:	28 96       	adiw	r28, 0x08	; 8
    5e58:	0f b6       	in	r0, 0x3f	; 63
    5e5a:	f8 94       	cli
    5e5c:	de bf       	out	0x3e, r29	; 62
    5e5e:	0f be       	out	0x3f, r0	; 63
    5e60:	cd bf       	out	0x3d, r28	; 61
    5e62:	cf 91       	pop	r28
    5e64:	df 91       	pop	r29
    5e66:	08 95       	ret

00005e68 <WCS_displayTemp>:
#define NOT_PRESSED		0

uint32 temperature = 0;

void WCS_displayTemp(uint32 temperature)
{
    5e68:	df 93       	push	r29
    5e6a:	cf 93       	push	r28
    5e6c:	00 d0       	rcall	.+0      	; 0x5e6e <WCS_displayTemp+0x6>
    5e6e:	00 d0       	rcall	.+0      	; 0x5e70 <WCS_displayTemp+0x8>
    5e70:	cd b7       	in	r28, 0x3d	; 61
    5e72:	de b7       	in	r29, 0x3e	; 62
    5e74:	69 83       	std	Y+1, r22	; 0x01
    5e76:	7a 83       	std	Y+2, r23	; 0x02
    5e78:	8b 83       	std	Y+3, r24	; 0x03
    5e7a:	9c 83       	std	Y+4, r25	; 0x04
	LCD_moveCursor(1,7);
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	67 e0       	ldi	r22, 0x07	; 7
    5e80:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <LCD_moveCursor>
	if ((1000 <= temperature) || (0 > temperature))
    5e84:	89 81       	ldd	r24, Y+1	; 0x01
    5e86:	9a 81       	ldd	r25, Y+2	; 0x02
    5e88:	ab 81       	ldd	r26, Y+3	; 0x03
    5e8a:	bc 81       	ldd	r27, Y+4	; 0x04
    5e8c:	88 3e       	cpi	r24, 0xE8	; 232
    5e8e:	23 e0       	ldi	r18, 0x03	; 3
    5e90:	92 07       	cpc	r25, r18
    5e92:	20 e0       	ldi	r18, 0x00	; 0
    5e94:	a2 07       	cpc	r26, r18
    5e96:	20 e0       	ldi	r18, 0x00	; 0
    5e98:	b2 07       	cpc	r27, r18
    5e9a:	28 f0       	brcs	.+10     	; 0x5ea6 <WCS_displayTemp+0x3e>
	{
		LCD_displayString("ERR");
    5e9c:	82 ec       	ldi	r24, 0xC2	; 194
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    5ea4:	3a c0       	rjmp	.+116    	; 0x5f1a <WCS_displayTemp+0xb2>
	}
	else if(100 <= temperature)
    5ea6:	89 81       	ldd	r24, Y+1	; 0x01
    5ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eaa:	ab 81       	ldd	r26, Y+3	; 0x03
    5eac:	bc 81       	ldd	r27, Y+4	; 0x04
    5eae:	84 36       	cpi	r24, 0x64	; 100
    5eb0:	91 05       	cpc	r25, r1
    5eb2:	a1 05       	cpc	r26, r1
    5eb4:	b1 05       	cpc	r27, r1
    5eb6:	28 f0       	brcs	.+10     	; 0x5ec2 <WCS_displayTemp+0x5a>
	{
		LCD_intgerToString(temperature);
    5eb8:	89 81       	ldd	r24, Y+1	; 0x01
    5eba:	9a 81       	ldd	r25, Y+2	; 0x02
    5ebc:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
    5ec0:	2c c0       	rjmp	.+88     	; 0x5f1a <WCS_displayTemp+0xb2>
	}
	else if((10 <= temperature) && (100 > temperature))
    5ec2:	89 81       	ldd	r24, Y+1	; 0x01
    5ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec6:	ab 81       	ldd	r26, Y+3	; 0x03
    5ec8:	bc 81       	ldd	r27, Y+4	; 0x04
    5eca:	8a 30       	cpi	r24, 0x0A	; 10
    5ecc:	91 05       	cpc	r25, r1
    5ece:	a1 05       	cpc	r26, r1
    5ed0:	b1 05       	cpc	r27, r1
    5ed2:	90 f0       	brcs	.+36     	; 0x5ef8 <WCS_displayTemp+0x90>
    5ed4:	89 81       	ldd	r24, Y+1	; 0x01
    5ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed8:	ab 81       	ldd	r26, Y+3	; 0x03
    5eda:	bc 81       	ldd	r27, Y+4	; 0x04
    5edc:	84 36       	cpi	r24, 0x64	; 100
    5ede:	91 05       	cpc	r25, r1
    5ee0:	a1 05       	cpc	r26, r1
    5ee2:	b1 05       	cpc	r27, r1
    5ee4:	48 f4       	brcc	.+18     	; 0x5ef8 <WCS_displayTemp+0x90>
	{
		LCD_intgerToString(temperature);
    5ee6:	89 81       	ldd	r24, Y+1	; 0x01
    5ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eea:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString(" ");
    5eee:	86 ec       	ldi	r24, 0xC6	; 198
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
    5ef6:	11 c0       	rjmp	.+34     	; 0x5f1a <WCS_displayTemp+0xb2>
	}
	else if((0 <= temperature) && (10 > temperature))
    5ef8:	89 81       	ldd	r24, Y+1	; 0x01
    5efa:	9a 81       	ldd	r25, Y+2	; 0x02
    5efc:	ab 81       	ldd	r26, Y+3	; 0x03
    5efe:	bc 81       	ldd	r27, Y+4	; 0x04
    5f00:	8a 30       	cpi	r24, 0x0A	; 10
    5f02:	91 05       	cpc	r25, r1
    5f04:	a1 05       	cpc	r26, r1
    5f06:	b1 05       	cpc	r27, r1
    5f08:	40 f4       	brcc	.+16     	; 0x5f1a <WCS_displayTemp+0xb2>
	{
		LCD_intgerToString(temperature);
    5f0a:	89 81       	ldd	r24, Y+1	; 0x01
    5f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f0e:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <LCD_intgerToString>
		LCD_displayString("  ");
    5f12:	88 ec       	ldi	r24, 0xC8	; 200
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LCD_displayString>
	}
}
    5f1a:	0f 90       	pop	r0
    5f1c:	0f 90       	pop	r0
    5f1e:	0f 90       	pop	r0
    5f20:	0f 90       	pop	r0
    5f22:	cf 91       	pop	r28
    5f24:	df 91       	pop	r29
    5f26:	08 95       	ret

00005f28 <WaterPump_init>:

void WaterPump_init(void)
{
    5f28:	df 93       	push	r29
    5f2a:	cf 93       	push	r28
    5f2c:	cd b7       	in	r28, 0x3d	; 61
    5f2e:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
    5f30:	83 e0       	ldi	r24, 0x03	; 3
    5f32:	64 e0       	ldi	r22, 0x04	; 4
    5f34:	41 e0       	ldi	r20, 0x01	; 1
    5f36:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    5f3a:	83 e0       	ldi	r24, 0x03	; 3
    5f3c:	64 e0       	ldi	r22, 0x04	; 4
    5f3e:	40 e0       	ldi	r20, 0x00	; 0
    5f40:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    5f44:	cf 91       	pop	r28
    5f46:	df 91       	pop	r29
    5f48:	08 95       	ret

00005f4a <LED_init>:

void LED_init(void)
{
    5f4a:	df 93       	push	r29
    5f4c:	cf 93       	push	r28
    5f4e:	cd b7       	in	r28, 0x3d	; 61
    5f50:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(LED_PORT,LED_PIN,PIN_OUTPUT);
    5f52:	80 e0       	ldi	r24, 0x00	; 0
    5f54:	64 e0       	ldi	r22, 0x04	; 4
    5f56:	41 e0       	ldi	r20, 0x01	; 1
    5f58:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_LOW);
    5f5c:	80 e0       	ldi	r24, 0x00	; 0
    5f5e:	64 e0       	ldi	r22, 0x04	; 4
    5f60:	40 e0       	ldi	r20, 0x00	; 0
    5f62:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
}
    5f66:	cf 91       	pop	r28
    5f68:	df 91       	pop	r29
    5f6a:	08 95       	ret

00005f6c <WCS_ActionValid>:

void WCS_ActionValid(void)
{
    5f6c:	df 93       	push	r29
    5f6e:	cf 93       	push	r28
    5f70:	cd b7       	in	r28, 0x3d	; 61
    5f72:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_LOW);
    5f74:	80 e0       	ldi	r24, 0x00	; 0
    5f76:	64 e0       	ldi	r22, 0x04	; 4
    5f78:	40 e0       	ldi	r20, 0x00	; 0
    5f7a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
    5f7e:	83 e0       	ldi	r24, 0x03	; 3
    5f80:	64 e0       	ldi	r22, 0x04	; 4
    5f82:	40 e0       	ldi	r20, 0x00	; 0
    5f84:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
	LCD_displayStringRowColumn(0,11,"OFF");
    5f88:	2b ec       	ldi	r18, 0xCB	; 203
    5f8a:	30 e0       	ldi	r19, 0x00	; 0
    5f8c:	80 e0       	ldi	r24, 0x00	; 0
    5f8e:	6b e0       	ldi	r22, 0x0B	; 11
    5f90:	a9 01       	movw	r20, r18
    5f92:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
}
    5f96:	cf 91       	pop	r28
    5f98:	df 91       	pop	r29
    5f9a:	08 95       	ret

00005f9c <WCS_ActionInvalid>:

void WCS_ActionInvalid(void)
{
    5f9c:	df 93       	push	r29
    5f9e:	cf 93       	push	r28
    5fa0:	cd b7       	in	r28, 0x3d	; 61
    5fa2:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT,LED_PIN,LOGIC_HIGH);
    5fa4:	80 e0       	ldi	r24, 0x00	; 0
    5fa6:	64 e0       	ldi	r22, 0x04	; 4
    5fa8:	41 e0       	ldi	r20, 0x01	; 1
    5faa:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <DIO_writePin>
//	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
	LCD_displayStringRowColumn(0,11,"ON ");
    5fae:	2f ec       	ldi	r18, 0xCF	; 207
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	80 e0       	ldi	r24, 0x00	; 0
    5fb4:	6b e0       	ldi	r22, 0x0B	; 11
    5fb6:	a9 01       	movw	r20, r18
    5fb8:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <LCD_displayStringRowColumn>
}
    5fbc:	cf 91       	pop	r28
    5fbe:	df 91       	pop	r29
    5fc0:	08 95       	ret

00005fc2 <WCS_Detection>:

void WCS_Detection(uint32 temperature)
{
    5fc2:	df 93       	push	r29
    5fc4:	cf 93       	push	r28
    5fc6:	00 d0       	rcall	.+0      	; 0x5fc8 <WCS_Detection+0x6>
    5fc8:	00 d0       	rcall	.+0      	; 0x5fca <WCS_Detection+0x8>
    5fca:	cd b7       	in	r28, 0x3d	; 61
    5fcc:	de b7       	in	r29, 0x3e	; 62
    5fce:	69 83       	std	Y+1, r22	; 0x01
    5fd0:	7a 83       	std	Y+2, r23	; 0x02
    5fd2:	8b 83       	std	Y+3, r24	; 0x03
    5fd4:	9c 83       	std	Y+4, r25	; 0x04
	if (temperature > WCS_TEMP_HIGH)
    5fd6:	89 81       	ldd	r24, Y+1	; 0x01
    5fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    5fda:	ab 81       	ldd	r26, Y+3	; 0x03
    5fdc:	bc 81       	ldd	r27, Y+4	; 0x04
    5fde:	8f 31       	cpi	r24, 0x1F	; 31
    5fe0:	91 05       	cpc	r25, r1
    5fe2:	a1 05       	cpc	r26, r1
    5fe4:	b1 05       	cpc	r27, r1
    5fe6:	18 f0       	brcs	.+6      	; 0x5fee <WCS_Detection+0x2c>
	{
		WCS_ActionInvalid();
    5fe8:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <WCS_ActionInvalid>
    5fec:	02 c0       	rjmp	.+4      	; 0x5ff2 <WCS_Detection+0x30>
	}
	else
	{
		WCS_ActionValid();
    5fee:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <WCS_ActionValid>
	}
}
    5ff2:	0f 90       	pop	r0
    5ff4:	0f 90       	pop	r0
    5ff6:	0f 90       	pop	r0
    5ff8:	0f 90       	pop	r0
    5ffa:	cf 91       	pop	r28
    5ffc:	df 91       	pop	r29
    5ffe:	08 95       	ret

00006000 <WCS_KEYPAD_init>:

void WCS_KEYPAD_init(void)
{
    6000:	df 93       	push	r29
    6002:	cf 93       	push	r28
    6004:	cd b7       	in	r28, 0x3d	; 61
    6006:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_INPUT);
    6008:	82 e0       	ldi	r24, 0x02	; 2
    600a:	62 e0       	ldi	r22, 0x02	; 2
    600c:	40 e0       	ldi	r20, 0x00	; 0
    600e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
	DIO_setupPinDirection(PORTC_ID,PIN3_ID,PIN_INPUT);
    6012:	82 e0       	ldi	r24, 0x02	; 2
    6014:	63 e0       	ldi	r22, 0x03	; 3
    6016:	40 e0       	ldi	r20, 0x00	; 0
    6018:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <DIO_setupPinDirection>
}
    601c:	cf 91       	pop	r28
    601e:	df 91       	pop	r29
    6020:	08 95       	ret

00006022 <WCS_ControlTemp>:

void WCS_ControlTemp(uint8 key)
{//c2,c3
    6022:	df 93       	push	r29
    6024:	cf 93       	push	r28
    6026:	0f 92       	push	r0
    6028:	cd b7       	in	r28, 0x3d	; 61
    602a:	de b7       	in	r29, 0x3e	; 62
    602c:	89 83       	std	Y+1, r24	; 0x01
	if(key == 16){
    602e:	89 81       	ldd	r24, Y+1	; 0x01
    6030:	80 31       	cpi	r24, 0x10	; 16
    6032:	a1 f4       	brne	.+40     	; 0x605c <WCS_ControlTemp+0x3a>
//		_delay_ms(500);
		temperature++;
    6034:	80 91 4a 02 	lds	r24, 0x024A
    6038:	90 91 4b 02 	lds	r25, 0x024B
    603c:	a0 91 4c 02 	lds	r26, 0x024C
    6040:	b0 91 4d 02 	lds	r27, 0x024D
    6044:	01 96       	adiw	r24, 0x01	; 1
    6046:	a1 1d       	adc	r26, r1
    6048:	b1 1d       	adc	r27, r1
    604a:	80 93 4a 02 	sts	0x024A, r24
    604e:	90 93 4b 02 	sts	0x024B, r25
    6052:	a0 93 4c 02 	sts	0x024C, r26
    6056:	b0 93 4d 02 	sts	0x024D, r27
    605a:	16 c0       	rjmp	.+44     	; 0x6088 <WCS_ControlTemp+0x66>
	}
	else if(key == 15){
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	8f 30       	cpi	r24, 0x0F	; 15
    6060:	99 f4       	brne	.+38     	; 0x6088 <WCS_ControlTemp+0x66>
//		_delay_ms(500);
		temperature--;
    6062:	80 91 4a 02 	lds	r24, 0x024A
    6066:	90 91 4b 02 	lds	r25, 0x024B
    606a:	a0 91 4c 02 	lds	r26, 0x024C
    606e:	b0 91 4d 02 	lds	r27, 0x024D
    6072:	01 97       	sbiw	r24, 0x01	; 1
    6074:	a1 09       	sbc	r26, r1
    6076:	b1 09       	sbc	r27, r1
    6078:	80 93 4a 02 	sts	0x024A, r24
    607c:	90 93 4b 02 	sts	0x024B, r25
    6080:	a0 93 4c 02 	sts	0x024C, r26
    6084:	b0 93 4d 02 	sts	0x024D, r27
	}
}
    6088:	0f 90       	pop	r0
    608a:	cf 91       	pop	r28
    608c:	df 91       	pop	r29
    608e:	08 95       	ret

00006090 <__mulsi3>:
    6090:	62 9f       	mul	r22, r18
    6092:	d0 01       	movw	r26, r0
    6094:	73 9f       	mul	r23, r19
    6096:	f0 01       	movw	r30, r0
    6098:	82 9f       	mul	r24, r18
    609a:	e0 0d       	add	r30, r0
    609c:	f1 1d       	adc	r31, r1
    609e:	64 9f       	mul	r22, r20
    60a0:	e0 0d       	add	r30, r0
    60a2:	f1 1d       	adc	r31, r1
    60a4:	92 9f       	mul	r25, r18
    60a6:	f0 0d       	add	r31, r0
    60a8:	83 9f       	mul	r24, r19
    60aa:	f0 0d       	add	r31, r0
    60ac:	74 9f       	mul	r23, r20
    60ae:	f0 0d       	add	r31, r0
    60b0:	65 9f       	mul	r22, r21
    60b2:	f0 0d       	add	r31, r0
    60b4:	99 27       	eor	r25, r25
    60b6:	72 9f       	mul	r23, r18
    60b8:	b0 0d       	add	r27, r0
    60ba:	e1 1d       	adc	r30, r1
    60bc:	f9 1f       	adc	r31, r25
    60be:	63 9f       	mul	r22, r19
    60c0:	b0 0d       	add	r27, r0
    60c2:	e1 1d       	adc	r30, r1
    60c4:	f9 1f       	adc	r31, r25
    60c6:	bd 01       	movw	r22, r26
    60c8:	cf 01       	movw	r24, r30
    60ca:	11 24       	eor	r1, r1
    60cc:	08 95       	ret

000060ce <__udivmodsi4>:
    60ce:	a1 e2       	ldi	r26, 0x21	; 33
    60d0:	1a 2e       	mov	r1, r26
    60d2:	aa 1b       	sub	r26, r26
    60d4:	bb 1b       	sub	r27, r27
    60d6:	fd 01       	movw	r30, r26
    60d8:	0d c0       	rjmp	.+26     	; 0x60f4 <__udivmodsi4_ep>

000060da <__udivmodsi4_loop>:
    60da:	aa 1f       	adc	r26, r26
    60dc:	bb 1f       	adc	r27, r27
    60de:	ee 1f       	adc	r30, r30
    60e0:	ff 1f       	adc	r31, r31
    60e2:	a2 17       	cp	r26, r18
    60e4:	b3 07       	cpc	r27, r19
    60e6:	e4 07       	cpc	r30, r20
    60e8:	f5 07       	cpc	r31, r21
    60ea:	20 f0       	brcs	.+8      	; 0x60f4 <__udivmodsi4_ep>
    60ec:	a2 1b       	sub	r26, r18
    60ee:	b3 0b       	sbc	r27, r19
    60f0:	e4 0b       	sbc	r30, r20
    60f2:	f5 0b       	sbc	r31, r21

000060f4 <__udivmodsi4_ep>:
    60f4:	66 1f       	adc	r22, r22
    60f6:	77 1f       	adc	r23, r23
    60f8:	88 1f       	adc	r24, r24
    60fa:	99 1f       	adc	r25, r25
    60fc:	1a 94       	dec	r1
    60fe:	69 f7       	brne	.-38     	; 0x60da <__udivmodsi4_loop>
    6100:	60 95       	com	r22
    6102:	70 95       	com	r23
    6104:	80 95       	com	r24
    6106:	90 95       	com	r25
    6108:	9b 01       	movw	r18, r22
    610a:	ac 01       	movw	r20, r24
    610c:	bd 01       	movw	r22, r26
    610e:	cf 01       	movw	r24, r30
    6110:	08 95       	ret

00006112 <__divmodsi4>:
    6112:	97 fb       	bst	r25, 7
    6114:	09 2e       	mov	r0, r25
    6116:	05 26       	eor	r0, r21
    6118:	0e d0       	rcall	.+28     	; 0x6136 <__divmodsi4_neg1>
    611a:	57 fd       	sbrc	r21, 7
    611c:	04 d0       	rcall	.+8      	; 0x6126 <__divmodsi4_neg2>
    611e:	d7 df       	rcall	.-82     	; 0x60ce <__udivmodsi4>
    6120:	0a d0       	rcall	.+20     	; 0x6136 <__divmodsi4_neg1>
    6122:	00 1c       	adc	r0, r0
    6124:	38 f4       	brcc	.+14     	; 0x6134 <__divmodsi4_exit>

00006126 <__divmodsi4_neg2>:
    6126:	50 95       	com	r21
    6128:	40 95       	com	r20
    612a:	30 95       	com	r19
    612c:	21 95       	neg	r18
    612e:	3f 4f       	sbci	r19, 0xFF	; 255
    6130:	4f 4f       	sbci	r20, 0xFF	; 255
    6132:	5f 4f       	sbci	r21, 0xFF	; 255

00006134 <__divmodsi4_exit>:
    6134:	08 95       	ret

00006136 <__divmodsi4_neg1>:
    6136:	f6 f7       	brtc	.-4      	; 0x6134 <__divmodsi4_exit>
    6138:	90 95       	com	r25
    613a:	80 95       	com	r24
    613c:	70 95       	com	r23
    613e:	61 95       	neg	r22
    6140:	7f 4f       	sbci	r23, 0xFF	; 255
    6142:	8f 4f       	sbci	r24, 0xFF	; 255
    6144:	9f 4f       	sbci	r25, 0xFF	; 255
    6146:	08 95       	ret

00006148 <__prologue_saves__>:
    6148:	2f 92       	push	r2
    614a:	3f 92       	push	r3
    614c:	4f 92       	push	r4
    614e:	5f 92       	push	r5
    6150:	6f 92       	push	r6
    6152:	7f 92       	push	r7
    6154:	8f 92       	push	r8
    6156:	9f 92       	push	r9
    6158:	af 92       	push	r10
    615a:	bf 92       	push	r11
    615c:	cf 92       	push	r12
    615e:	df 92       	push	r13
    6160:	ef 92       	push	r14
    6162:	ff 92       	push	r15
    6164:	0f 93       	push	r16
    6166:	1f 93       	push	r17
    6168:	cf 93       	push	r28
    616a:	df 93       	push	r29
    616c:	cd b7       	in	r28, 0x3d	; 61
    616e:	de b7       	in	r29, 0x3e	; 62
    6170:	ca 1b       	sub	r28, r26
    6172:	db 0b       	sbc	r29, r27
    6174:	0f b6       	in	r0, 0x3f	; 63
    6176:	f8 94       	cli
    6178:	de bf       	out	0x3e, r29	; 62
    617a:	0f be       	out	0x3f, r0	; 63
    617c:	cd bf       	out	0x3d, r28	; 61
    617e:	09 94       	ijmp

00006180 <__epilogue_restores__>:
    6180:	2a 88       	ldd	r2, Y+18	; 0x12
    6182:	39 88       	ldd	r3, Y+17	; 0x11
    6184:	48 88       	ldd	r4, Y+16	; 0x10
    6186:	5f 84       	ldd	r5, Y+15	; 0x0f
    6188:	6e 84       	ldd	r6, Y+14	; 0x0e
    618a:	7d 84       	ldd	r7, Y+13	; 0x0d
    618c:	8c 84       	ldd	r8, Y+12	; 0x0c
    618e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6190:	aa 84       	ldd	r10, Y+10	; 0x0a
    6192:	b9 84       	ldd	r11, Y+9	; 0x09
    6194:	c8 84       	ldd	r12, Y+8	; 0x08
    6196:	df 80       	ldd	r13, Y+7	; 0x07
    6198:	ee 80       	ldd	r14, Y+6	; 0x06
    619a:	fd 80       	ldd	r15, Y+5	; 0x05
    619c:	0c 81       	ldd	r16, Y+4	; 0x04
    619e:	1b 81       	ldd	r17, Y+3	; 0x03
    61a0:	aa 81       	ldd	r26, Y+2	; 0x02
    61a2:	b9 81       	ldd	r27, Y+1	; 0x01
    61a4:	ce 0f       	add	r28, r30
    61a6:	d1 1d       	adc	r29, r1
    61a8:	0f b6       	in	r0, 0x3f	; 63
    61aa:	f8 94       	cli
    61ac:	de bf       	out	0x3e, r29	; 62
    61ae:	0f be       	out	0x3f, r0	; 63
    61b0:	cd bf       	out	0x3d, r28	; 61
    61b2:	ed 01       	movw	r28, r26
    61b4:	08 95       	ret

000061b6 <itoa>:
    61b6:	fb 01       	movw	r30, r22
    61b8:	9f 01       	movw	r18, r30
    61ba:	e8 94       	clt
    61bc:	42 30       	cpi	r20, 0x02	; 2
    61be:	c4 f0       	brlt	.+48     	; 0x61f0 <itoa+0x3a>
    61c0:	45 32       	cpi	r20, 0x25	; 37
    61c2:	b4 f4       	brge	.+44     	; 0x61f0 <itoa+0x3a>
    61c4:	4a 30       	cpi	r20, 0x0A	; 10
    61c6:	29 f4       	brne	.+10     	; 0x61d2 <itoa+0x1c>
    61c8:	97 fb       	bst	r25, 7
    61ca:	1e f4       	brtc	.+6      	; 0x61d2 <itoa+0x1c>
    61cc:	90 95       	com	r25
    61ce:	81 95       	neg	r24
    61d0:	9f 4f       	sbci	r25, 0xFF	; 255
    61d2:	64 2f       	mov	r22, r20
    61d4:	77 27       	eor	r23, r23
    61d6:	0e 94 0c 31 	call	0x6218	; 0x6218 <__udivmodhi4>
    61da:	80 5d       	subi	r24, 0xD0	; 208
    61dc:	8a 33       	cpi	r24, 0x3A	; 58
    61de:	0c f0       	brlt	.+2      	; 0x61e2 <itoa+0x2c>
    61e0:	89 5d       	subi	r24, 0xD9	; 217
    61e2:	81 93       	st	Z+, r24
    61e4:	cb 01       	movw	r24, r22
    61e6:	00 97       	sbiw	r24, 0x00	; 0
    61e8:	a1 f7       	brne	.-24     	; 0x61d2 <itoa+0x1c>
    61ea:	16 f4       	brtc	.+4      	; 0x61f0 <itoa+0x3a>
    61ec:	5d e2       	ldi	r21, 0x2D	; 45
    61ee:	51 93       	st	Z+, r21
    61f0:	10 82       	st	Z, r1
    61f2:	c9 01       	movw	r24, r18
    61f4:	0c 94 fc 30 	jmp	0x61f8	; 0x61f8 <strrev>

000061f8 <strrev>:
    61f8:	dc 01       	movw	r26, r24
    61fa:	fc 01       	movw	r30, r24
    61fc:	67 2f       	mov	r22, r23
    61fe:	71 91       	ld	r23, Z+
    6200:	77 23       	and	r23, r23
    6202:	e1 f7       	brne	.-8      	; 0x61fc <strrev+0x4>
    6204:	32 97       	sbiw	r30, 0x02	; 2
    6206:	04 c0       	rjmp	.+8      	; 0x6210 <strrev+0x18>
    6208:	7c 91       	ld	r23, X
    620a:	6d 93       	st	X+, r22
    620c:	70 83       	st	Z, r23
    620e:	62 91       	ld	r22, -Z
    6210:	ae 17       	cp	r26, r30
    6212:	bf 07       	cpc	r27, r31
    6214:	c8 f3       	brcs	.-14     	; 0x6208 <strrev+0x10>
    6216:	08 95       	ret

00006218 <__udivmodhi4>:
    6218:	aa 1b       	sub	r26, r26
    621a:	bb 1b       	sub	r27, r27
    621c:	51 e1       	ldi	r21, 0x11	; 17
    621e:	07 c0       	rjmp	.+14     	; 0x622e <__udivmodhi4_ep>

00006220 <__udivmodhi4_loop>:
    6220:	aa 1f       	adc	r26, r26
    6222:	bb 1f       	adc	r27, r27
    6224:	a6 17       	cp	r26, r22
    6226:	b7 07       	cpc	r27, r23
    6228:	10 f0       	brcs	.+4      	; 0x622e <__udivmodhi4_ep>
    622a:	a6 1b       	sub	r26, r22
    622c:	b7 0b       	sbc	r27, r23

0000622e <__udivmodhi4_ep>:
    622e:	88 1f       	adc	r24, r24
    6230:	99 1f       	adc	r25, r25
    6232:	5a 95       	dec	r21
    6234:	a9 f7       	brne	.-22     	; 0x6220 <__udivmodhi4_loop>
    6236:	80 95       	com	r24
    6238:	90 95       	com	r25
    623a:	bc 01       	movw	r22, r24
    623c:	cd 01       	movw	r24, r26
    623e:	08 95       	ret

00006240 <_exit>:
    6240:	f8 94       	cli

00006242 <__stop_program>:
    6242:	ff cf       	rjmp	.-2      	; 0x6242 <__stop_program>
