
PumP_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d8c  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009b2  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
  64:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BUZZER_init>:

#include "dio.h"
#include "buzzer.h"

void BUZZER_init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
  74:	82 e0       	ldi	r24, 0x02	; 2
  76:	66 e0       	ldi	r22, 0x06	; 6
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_setupPinDirection>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	66 e0       	ldi	r22, 0x06	; 6
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
}
  88:	cf 91       	pop	r28
  8a:	df 91       	pop	r29
  8c:	08 95       	ret

0000008e <BUZZER_on>:

void BUZZER_on(void)
{
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	66 e0       	ldi	r22, 0x06	; 6
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
}
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	08 95       	ret

000000a6 <BUZZER_off>:

void BUZZER_off(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	66 e0       	ldi	r22, 0x06	; 6
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <DIO_setupPinDirection>:
 *      Author: MR.MAHMOUD
 */

#include"dio.h"
#include "common_macros.h"
void DIO_setupPinDirection(uint8 port_number, uint8 pin_number, uint8 direction){
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <DIO_setupPinDirection+0x6>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DIO_setupPinDirection+0x8>
  c6:	0f 92       	push	r0
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	89 83       	std	Y+1, r24	; 0x01
  ce:	6a 83       	std	Y+2, r22	; 0x02
  d0:	4b 83       	std	Y+3, r20	; 0x03
/*
 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	08 f0       	brcs	.+2      	; 0xda <DIO_setupPinDirection+0x1c>
  d8:	d5 c0       	rjmp	.+426    	; 0x284 <DIO_setupPinDirection+0x1c6>
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	08 f0       	brcs	.+2      	; 0xe2 <DIO_setupPinDirection+0x24>
  e0:	d1 c0       	rjmp	.+418    	; 0x284 <DIO_setupPinDirection+0x1c6>
		
	}
	else
	{
		/* Setup the pin direction*/
		switch (port_number)
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	3d 83       	std	Y+5, r19	; 0x05
  ea:	2c 83       	std	Y+4, r18	; 0x04
  ec:	8c 81       	ldd	r24, Y+4	; 0x04
  ee:	9d 81       	ldd	r25, Y+5	; 0x05
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	09 f4       	brne	.+2      	; 0xf8 <DIO_setupPinDirection+0x3a>
  f6:	43 c0       	rjmp	.+134    	; 0x17e <DIO_setupPinDirection+0xc0>
  f8:	2c 81       	ldd	r18, Y+4	; 0x04
  fa:	3d 81       	ldd	r19, Y+5	; 0x05
  fc:	22 30       	cpi	r18, 0x02	; 2
  fe:	31 05       	cpc	r19, r1
 100:	2c f4       	brge	.+10     	; 0x10c <DIO_setupPinDirection+0x4e>
 102:	8c 81       	ldd	r24, Y+4	; 0x04
 104:	9d 81       	ldd	r25, Y+5	; 0x05
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	71 f0       	breq	.+28     	; 0x126 <DIO_setupPinDirection+0x68>
 10a:	bc c0       	rjmp	.+376    	; 0x284 <DIO_setupPinDirection+0x1c6>
 10c:	2c 81       	ldd	r18, Y+4	; 0x04
 10e:	3d 81       	ldd	r19, Y+5	; 0x05
 110:	22 30       	cpi	r18, 0x02	; 2
 112:	31 05       	cpc	r19, r1
 114:	09 f4       	brne	.+2      	; 0x118 <DIO_setupPinDirection+0x5a>
 116:	5f c0       	rjmp	.+190    	; 0x1d6 <DIO_setupPinDirection+0x118>
 118:	8c 81       	ldd	r24, Y+4	; 0x04
 11a:	9d 81       	ldd	r25, Y+5	; 0x05
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	91 05       	cpc	r25, r1
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_setupPinDirection+0x66>
 122:	85 c0       	rjmp	.+266    	; 0x22e <DIO_setupPinDirection+0x170>
 124:	af c0       	rjmp	.+350    	; 0x284 <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	a1 f4       	brne	.+40     	; 0x154 <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA, pin_number);
 12c:	aa e3       	ldi	r26, 0x3A	; 58
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	ea e3       	ldi	r30, 0x3A	; 58
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_setupPinDirection+0x8c>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_setupPinDirection+0x88>
 14e:	84 2b       	or	r24, r20
 150:	8c 93       	st	X, r24
 152:	98 c0       	rjmp	.+304    	; 0x284 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA, pin_number);
 154:	aa e3       	ldi	r26, 0x3A	; 58
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	ea e3       	ldi	r30, 0x3A	; 58
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_setupPinDirection+0xb4>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_setupPinDirection+0xb0>
 176:	80 95       	com	r24
 178:	84 23       	and	r24, r20
 17a:	8c 93       	st	X, r24
 17c:	83 c0       	rjmp	.+262    	; 0x284 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	a1 f4       	brne	.+40     	; 0x1ac <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB, pin_number);
 184:	a7 e3       	ldi	r26, 0x37	; 55
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	e7 e3       	ldi	r30, 0x37	; 55
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	48 2f       	mov	r20, r24
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 2e       	mov	r0, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setupPinDirection+0xe4>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setupPinDirection+0xe0>
 1a6:	84 2b       	or	r24, r20
 1a8:	8c 93       	st	X, r24
 1aa:	6c c0       	rjmp	.+216    	; 0x284 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB, pin_number);
 1ac:	a7 e3       	ldi	r26, 0x37	; 55
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e7 e3       	ldi	r30, 0x37	; 55
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	48 2f       	mov	r20, r24
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 2e       	mov	r0, r18
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_setupPinDirection+0x10c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_setupPinDirection+0x108>
 1ce:	80 95       	com	r24
 1d0:	84 23       	and	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	57 c0       	rjmp	.+174    	; 0x284 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	a1 f4       	brne	.+40     	; 0x204 <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC, pin_number);
 1dc:	a4 e3       	ldi	r26, 0x34	; 52
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	e4 e3       	ldi	r30, 0x34	; 52
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_setupPinDirection+0x13c>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_setupPinDirection+0x138>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	40 c0       	rjmp	.+128    	; 0x284 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC, pin_number);
 204:	a4 e3       	ldi	r26, 0x34	; 52
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e4 e3       	ldi	r30, 0x34	; 52
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setupPinDirection+0x164>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setupPinDirection+0x160>
 226:	80 95       	com	r24
 228:	84 23       	and	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	2b c0       	rjmp	.+86     	; 0x284 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	a1 f4       	brne	.+40     	; 0x25c <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD, pin_number);
 234:	a1 e3       	ldi	r26, 0x31	; 49
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e1 e3       	ldi	r30, 0x31	; 49
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_setupPinDirection+0x194>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_setupPinDirection+0x190>
 256:	84 2b       	or	r24, r20
 258:	8c 93       	st	X, r24
 25a:	14 c0       	rjmp	.+40     	; 0x284 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD, pin_number);
 25c:	a1 e3       	ldi	r26, 0x31	; 49
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e1 e3       	ldi	r30, 0x31	; 49
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	48 2f       	mov	r20, r24
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 2e       	mov	r0, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_setupPinDirection+0x1bc>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	0a 94       	dec	r0
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_setupPinDirection+0x1b8>
 27e:	80 95       	com	r24
 280:	84 23       	and	r24, r20
 282:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	cf 91       	pop	r28
 290:	df 91       	pop	r29
 292:	08 95       	ret

00000294 <DIO_writePin>:
void DIO_writePin(uint8 port_number, uint8 pin_number, uint8 value){
 294:	df 93       	push	r29
 296:	cf 93       	push	r28
 298:	00 d0       	rcall	.+0      	; 0x29a <DIO_writePin+0x6>
 29a:	00 d0       	rcall	.+0      	; 0x29c <DIO_writePin+0x8>
 29c:	0f 92       	push	r0
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	89 83       	std	Y+1, r24	; 0x01
 2a4:	6a 83       	std	Y+2, r22	; 0x02
 2a6:	4b 83       	std	Y+3, r20	; 0x03

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	88 30       	cpi	r24, 0x08	; 8
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <DIO_writePin+0x1c>
 2ae:	d5 c0       	rjmp	.+426    	; 0x45a <DIO_writePin+0x1c6>
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <DIO_writePin+0x24>
 2b6:	d1 c0       	rjmp	.+418    	; 0x45a <DIO_writePin+0x1c6>
	{
	}
	else
	{
		/* Write the pin value*/
		switch (port_number)
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	3d 83       	std	Y+5, r19	; 0x05
 2c0:	2c 83       	std	Y+4, r18	; 0x04
 2c2:	8c 81       	ldd	r24, Y+4	; 0x04
 2c4:	9d 81       	ldd	r25, Y+5	; 0x05
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	91 05       	cpc	r25, r1
 2ca:	09 f4       	brne	.+2      	; 0x2ce <DIO_writePin+0x3a>
 2cc:	43 c0       	rjmp	.+134    	; 0x354 <DIO_writePin+0xc0>
 2ce:	2c 81       	ldd	r18, Y+4	; 0x04
 2d0:	3d 81       	ldd	r19, Y+5	; 0x05
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	2c f4       	brge	.+10     	; 0x2e2 <DIO_writePin+0x4e>
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	9d 81       	ldd	r25, Y+5	; 0x05
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	71 f0       	breq	.+28     	; 0x2fc <DIO_writePin+0x68>
 2e0:	bc c0       	rjmp	.+376    	; 0x45a <DIO_writePin+0x1c6>
 2e2:	2c 81       	ldd	r18, Y+4	; 0x04
 2e4:	3d 81       	ldd	r19, Y+5	; 0x05
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	31 05       	cpc	r19, r1
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_writePin+0x5a>
 2ec:	5f c0       	rjmp	.+190    	; 0x3ac <DIO_writePin+0x118>
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	9d 81       	ldd	r25, Y+5	; 0x05
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	91 05       	cpc	r25, r1
 2f6:	09 f4       	brne	.+2      	; 0x2fa <DIO_writePin+0x66>
 2f8:	85 c0       	rjmp	.+266    	; 0x404 <DIO_writePin+0x170>
 2fa:	af c0       	rjmp	.+350    	; 0x45a <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	a1 f4       	brne	.+40     	; 0x32a <DIO_writePin+0x96>
			{
				SET_BIT(PORTA, pin_number);
 302:	ab e3       	ldi	r26, 0x3B	; 59
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	eb e3       	ldi	r30, 0x3B	; 59
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	48 2f       	mov	r20, r24
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	28 2f       	mov	r18, r24
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 2e       	mov	r0, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_writePin+0x8c>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_writePin+0x88>
 324:	84 2b       	or	r24, r20
 326:	8c 93       	st	X, r24
 328:	98 c0       	rjmp	.+304    	; 0x45a <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, pin_number);
 32a:	ab e3       	ldi	r26, 0x3B	; 59
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	eb e3       	ldi	r30, 0x3B	; 59
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	48 2f       	mov	r20, r24
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 2e       	mov	r0, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_writePin+0xb4>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_writePin+0xb0>
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	8c 93       	st	X, r24
 352:	83 c0       	rjmp	.+262    	; 0x45a <DIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	a1 f4       	brne	.+40     	; 0x382 <DIO_writePin+0xee>
			{
				SET_BIT(PORTB, pin_number);
 35a:	a8 e3       	ldi	r26, 0x38	; 56
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e8 e3       	ldi	r30, 0x38	; 56
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_writePin+0xe4>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_writePin+0xe0>
 37c:	84 2b       	or	r24, r20
 37e:	8c 93       	st	X, r24
 380:	6c c0       	rjmp	.+216    	; 0x45a <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, pin_number);
 382:	a8 e3       	ldi	r26, 0x38	; 56
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e8 e3       	ldi	r30, 0x38	; 56
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_writePin+0x10c>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_writePin+0x108>
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	57 c0       	rjmp	.+174    	; 0x45a <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	a1 f4       	brne	.+40     	; 0x3da <DIO_writePin+0x146>
			{
				SET_BIT(PORTC, pin_number);
 3b2:	a5 e3       	ldi	r26, 0x35	; 53
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e5 e3       	ldi	r30, 0x35	; 53
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_writePin+0x13c>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_writePin+0x138>
 3d4:	84 2b       	or	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	40 c0       	rjmp	.+128    	; 0x45a <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, pin_number);
 3da:	a5 e3       	ldi	r26, 0x35	; 53
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	e5 e3       	ldi	r30, 0x35	; 53
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	48 2f       	mov	r20, r24
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 2e       	mov	r0, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_writePin+0x164>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_writePin+0x160>
 3fc:	80 95       	com	r24
 3fe:	84 23       	and	r24, r20
 400:	8c 93       	st	X, r24
 402:	2b c0       	rjmp	.+86     	; 0x45a <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	a1 f4       	brne	.+40     	; 0x432 <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_number);
 40a:	a2 e3       	ldi	r26, 0x32	; 50
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	e2 e3       	ldi	r30, 0x32	; 50
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	48 2f       	mov	r20, r24
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	28 2f       	mov	r18, r24
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 2e       	mov	r0, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_writePin+0x194>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_writePin+0x190>
 42c:	84 2b       	or	r24, r20
 42e:	8c 93       	st	X, r24
 430:	14 c0       	rjmp	.+40     	; 0x45a <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, pin_number);
 432:	a2 e3       	ldi	r26, 0x32	; 50
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	e2 e3       	ldi	r30, 0x32	; 50
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_writePin+0x1bc>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_writePin+0x1b8>
 454:	80 95       	com	r24
 456:	84 23       	and	r24, r20
 458:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	cf 91       	pop	r28
 466:	df 91       	pop	r29
 468:	08 95       	ret

0000046a <DIO_readPin>:
uint8 DIO_readPin(uint8 port_number, uint8 pin_number){
 46a:	df 93       	push	r29
 46c:	cf 93       	push	r28
 46e:	00 d0       	rcall	.+0      	; 0x470 <DIO_readPin+0x6>
 470:	00 d0       	rcall	.+0      	; 0x472 <DIO_readPin+0x8>
 472:	0f 92       	push	r0
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	8a 83       	std	Y+2, r24	; 0x02
 47a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 47c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 */
	if ((pin_number >= NUM_OF_PINS_PER_PORT) || (port_number >= NUM_OF_PORTS))
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	88 30       	cpi	r24, 0x08	; 8
 482:	08 f0       	brcs	.+2      	; 0x486 <DIO_readPin+0x1c>
 484:	84 c0       	rjmp	.+264    	; 0x58e <DIO_readPin+0x124>
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	84 30       	cpi	r24, 0x04	; 4
 48a:	08 f0       	brcs	.+2      	; 0x48e <DIO_readPin+0x24>
 48c:	80 c0       	rjmp	.+256    	; 0x58e <DIO_readPin+0x124>
	
	}
	else
	{
		/* Read the pin value*/
		switch (port_number)
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	3d 83       	std	Y+5, r19	; 0x05
 496:	2c 83       	std	Y+4, r18	; 0x04
 498:	4c 81       	ldd	r20, Y+4	; 0x04
 49a:	5d 81       	ldd	r21, Y+5	; 0x05
 49c:	41 30       	cpi	r20, 0x01	; 1
 49e:	51 05       	cpc	r21, r1
 4a0:	79 f1       	breq	.+94     	; 0x500 <DIO_readPin+0x96>
 4a2:	8c 81       	ldd	r24, Y+4	; 0x04
 4a4:	9d 81       	ldd	r25, Y+5	; 0x05
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	91 05       	cpc	r25, r1
 4aa:	34 f4       	brge	.+12     	; 0x4b8 <DIO_readPin+0x4e>
 4ac:	2c 81       	ldd	r18, Y+4	; 0x04
 4ae:	3d 81       	ldd	r19, Y+5	; 0x05
 4b0:	21 15       	cp	r18, r1
 4b2:	31 05       	cpc	r19, r1
 4b4:	69 f0       	breq	.+26     	; 0x4d0 <DIO_readPin+0x66>
 4b6:	6b c0       	rjmp	.+214    	; 0x58e <DIO_readPin+0x124>
 4b8:	4c 81       	ldd	r20, Y+4	; 0x04
 4ba:	5d 81       	ldd	r21, Y+5	; 0x05
 4bc:	42 30       	cpi	r20, 0x02	; 2
 4be:	51 05       	cpc	r21, r1
 4c0:	b9 f1       	breq	.+110    	; 0x530 <DIO_readPin+0xc6>
 4c2:	8c 81       	ldd	r24, Y+4	; 0x04
 4c4:	9d 81       	ldd	r25, Y+5	; 0x05
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	91 05       	cpc	r25, r1
 4ca:	09 f4       	brne	.+2      	; 0x4ce <DIO_readPin+0x64>
 4cc:	49 c0       	rjmp	.+146    	; 0x560 <DIO_readPin+0xf6>
 4ce:	5f c0       	rjmp	.+190    	; 0x58e <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_number))
 4d0:	e9 e3       	ldi	r30, 0x39	; 57
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	88 2f       	mov	r24, r24
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	a9 01       	movw	r20, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_readPin+0x7e>
 4e4:	55 95       	asr	r21
 4e6:	47 95       	ror	r20
 4e8:	8a 95       	dec	r24
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_readPin+0x7a>
 4ec:	ca 01       	movw	r24, r20
 4ee:	81 70       	andi	r24, 0x01	; 1
 4f0:	90 70       	andi	r25, 0x00	; 0
 4f2:	88 23       	and	r24, r24
 4f4:	19 f0       	breq	.+6      	; 0x4fc <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	89 83       	std	Y+1, r24	; 0x01
 4fa:	49 c0       	rjmp	.+146    	; 0x58e <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 4fc:	19 82       	std	Y+1, r1	; 0x01
 4fe:	47 c0       	rjmp	.+142    	; 0x58e <DIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_number))
 500:	e6 e3       	ldi	r30, 0x36	; 54
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	88 2f       	mov	r24, r24
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	a9 01       	movw	r20, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_readPin+0xae>
 514:	55 95       	asr	r21
 516:	47 95       	ror	r20
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_readPin+0xaa>
 51c:	ca 01       	movw	r24, r20
 51e:	81 70       	andi	r24, 0x01	; 1
 520:	90 70       	andi	r25, 0x00	; 0
 522:	88 23       	and	r24, r24
 524:	19 f0       	breq	.+6      	; 0x52c <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	31 c0       	rjmp	.+98     	; 0x58e <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 52c:	19 82       	std	Y+1, r1	; 0x01
 52e:	2f c0       	rjmp	.+94     	; 0x58e <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_number))
 530:	e3 e3       	ldi	r30, 0x33	; 51
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	28 2f       	mov	r18, r24
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	8b 81       	ldd	r24, Y+3	; 0x03
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	a9 01       	movw	r20, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_readPin+0xde>
 544:	55 95       	asr	r21
 546:	47 95       	ror	r20
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_readPin+0xda>
 54c:	ca 01       	movw	r24, r20
 54e:	81 70       	andi	r24, 0x01	; 1
 550:	90 70       	andi	r25, 0x00	; 0
 552:	88 23       	and	r24, r24
 554:	19 f0       	breq	.+6      	; 0x55c <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	89 83       	std	Y+1, r24	; 0x01
 55a:	19 c0       	rjmp	.+50     	; 0x58e <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 55c:	19 82       	std	Y+1, r1	; 0x01
 55e:	17 c0       	rjmp	.+46     	; 0x58e <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_number))
 560:	e0 e3       	ldi	r30, 0x30	; 48
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	a9 01       	movw	r20, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_readPin+0x10e>
 574:	55 95       	asr	r21
 576:	47 95       	ror	r20
 578:	8a 95       	dec	r24
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_readPin+0x10a>
 57c:	ca 01       	movw	r24, r20
 57e:	81 70       	andi	r24, 0x01	; 1
 580:	90 70       	andi	r25, 0x00	; 0
 582:	88 23       	and	r24, r24
 584:	19 f0       	breq	.+6      	; 0x58c <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	01 c0       	rjmp	.+2      	; 0x58e <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 58c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 58e:	89 81       	ldd	r24, Y+1	; 0x01
}
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	08 95       	ret

000005a0 <DIO_setupPortDirection>:
void DIO_setupPortDirection(uint8 port_number, GPIO_PortDirectionType direction)
{
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <DIO_setupPortDirection+0x6>
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <DIO_setupPortDirection+0x8>
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	89 83       	std	Y+1, r24	; 0x01
 5ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_number >= NUM_OF_PORTS)
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	84 30       	cpi	r24, 0x04	; 4
 5b4:	90 f5       	brcc	.+100    	; 0x61a <DIO_setupPortDirection+0x7a>
	{
	}
	else
	{
		/* Setup the port direction*/
		switch (port_number)
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	28 2f       	mov	r18, r24
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	3c 83       	std	Y+4, r19	; 0x04
 5be:	2b 83       	std	Y+3, r18	; 0x03
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	9c 81       	ldd	r25, Y+4	; 0x04
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	91 05       	cpc	r25, r1
 5c8:	d1 f0       	breq	.+52     	; 0x5fe <DIO_setupPortDirection+0x5e>
 5ca:	2b 81       	ldd	r18, Y+3	; 0x03
 5cc:	3c 81       	ldd	r19, Y+4	; 0x04
 5ce:	22 30       	cpi	r18, 0x02	; 2
 5d0:	31 05       	cpc	r19, r1
 5d2:	2c f4       	brge	.+10     	; 0x5de <DIO_setupPortDirection+0x3e>
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	9c 81       	ldd	r25, Y+4	; 0x04
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	61 f0       	breq	.+24     	; 0x5f4 <DIO_setupPortDirection+0x54>
 5dc:	1e c0       	rjmp	.+60     	; 0x61a <DIO_setupPortDirection+0x7a>
 5de:	2b 81       	ldd	r18, Y+3	; 0x03
 5e0:	3c 81       	ldd	r19, Y+4	; 0x04
 5e2:	22 30       	cpi	r18, 0x02	; 2
 5e4:	31 05       	cpc	r19, r1
 5e6:	81 f0       	breq	.+32     	; 0x608 <DIO_setupPortDirection+0x68>
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	9c 81       	ldd	r25, Y+4	; 0x04
 5ec:	83 30       	cpi	r24, 0x03	; 3
 5ee:	91 05       	cpc	r25, r1
 5f0:	81 f0       	breq	.+32     	; 0x612 <DIO_setupPortDirection+0x72>
 5f2:	13 c0       	rjmp	.+38     	; 0x61a <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 5f4:	ea e3       	ldi	r30, 0x3A	; 58
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	8a 81       	ldd	r24, Y+2	; 0x02
 5fa:	80 83       	st	Z, r24
 5fc:	0e c0       	rjmp	.+28     	; 0x61a <DIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 5fe:	e7 e3       	ldi	r30, 0x37	; 55
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	80 83       	st	Z, r24
 606:	09 c0       	rjmp	.+18     	; 0x61a <DIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 608:	e4 e3       	ldi	r30, 0x34	; 52
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	8a 81       	ldd	r24, Y+2	; 0x02
 60e:	80 83       	st	Z, r24
 610:	04 c0       	rjmp	.+8      	; 0x61a <DIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 612:	e1 e3       	ldi	r30, 0x31	; 49
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	80 83       	st	Z, r24
			break;
		}
	}
}
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	cf 91       	pop	r28
 624:	df 91       	pop	r29
 626:	08 95       	ret

00000628 <DIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void DIO_writePort(uint8 port_number, uint8 value)
{
 628:	df 93       	push	r29
 62a:	cf 93       	push	r28
 62c:	00 d0       	rcall	.+0      	; 0x62e <DIO_writePort+0x6>
 62e:	00 d0       	rcall	.+0      	; 0x630 <DIO_writePort+0x8>
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	89 83       	std	Y+1, r24	; 0x01
 636:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	84 30       	cpi	r24, 0x04	; 4
 63c:	90 f5       	brcc	.+100    	; 0x6a2 <DIO_writePort+0x7a>
	{
	}
	else
	{
		/* Write the port value*/
		switch (port_number)
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	3c 83       	std	Y+4, r19	; 0x04
 646:	2b 83       	std	Y+3, r18	; 0x03
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	9c 81       	ldd	r25, Y+4	; 0x04
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	91 05       	cpc	r25, r1
 650:	d1 f0       	breq	.+52     	; 0x686 <DIO_writePort+0x5e>
 652:	2b 81       	ldd	r18, Y+3	; 0x03
 654:	3c 81       	ldd	r19, Y+4	; 0x04
 656:	22 30       	cpi	r18, 0x02	; 2
 658:	31 05       	cpc	r19, r1
 65a:	2c f4       	brge	.+10     	; 0x666 <DIO_writePort+0x3e>
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	9c 81       	ldd	r25, Y+4	; 0x04
 660:	00 97       	sbiw	r24, 0x00	; 0
 662:	61 f0       	breq	.+24     	; 0x67c <DIO_writePort+0x54>
 664:	1e c0       	rjmp	.+60     	; 0x6a2 <DIO_writePort+0x7a>
 666:	2b 81       	ldd	r18, Y+3	; 0x03
 668:	3c 81       	ldd	r19, Y+4	; 0x04
 66a:	22 30       	cpi	r18, 0x02	; 2
 66c:	31 05       	cpc	r19, r1
 66e:	81 f0       	breq	.+32     	; 0x690 <DIO_writePort+0x68>
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	9c 81       	ldd	r25, Y+4	; 0x04
 674:	83 30       	cpi	r24, 0x03	; 3
 676:	91 05       	cpc	r25, r1
 678:	81 f0       	breq	.+32     	; 0x69a <DIO_writePort+0x72>
 67a:	13 c0       	rjmp	.+38     	; 0x6a2 <DIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 67c:	eb e3       	ldi	r30, 0x3B	; 59
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	80 83       	st	Z, r24
 684:	0e c0       	rjmp	.+28     	; 0x6a2 <DIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 686:	e8 e3       	ldi	r30, 0x38	; 56
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	80 83       	st	Z, r24
 68e:	09 c0       	rjmp	.+18     	; 0x6a2 <DIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 690:	e5 e3       	ldi	r30, 0x35	; 53
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	80 83       	st	Z, r24
 698:	04 c0       	rjmp	.+8      	; 0x6a2 <DIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 69a:	e2 e3       	ldi	r30, 0x32	; 50
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	8a 81       	ldd	r24, Y+2	; 0x02
 6a0:	80 83       	st	Z, r24
			break;
		}
	}
}
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	cf 91       	pop	r28
 6ac:	df 91       	pop	r29
 6ae:	08 95       	ret

000006b0 <DIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 DIO_readPort(uint8 port_number)
{
 6b0:	df 93       	push	r29
 6b2:	cf 93       	push	r28
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <DIO_readPort+0x6>
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <DIO_readPort+0x8>
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
 6bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 6be:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 */
	if (port_number >= NUM_OF_PORTS)
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	84 30       	cpi	r24, 0x04	; 4
 6c4:	90 f5       	brcc	.+100    	; 0x72a <DIO_readPort+0x7a>
		
	}
	else
	{
		/* Read the port value*/
		switch (port_number)
 6c6:	8a 81       	ldd	r24, Y+2	; 0x02
 6c8:	28 2f       	mov	r18, r24
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	3c 83       	std	Y+4, r19	; 0x04
 6ce:	2b 83       	std	Y+3, r18	; 0x03
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	9c 81       	ldd	r25, Y+4	; 0x04
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	91 05       	cpc	r25, r1
 6d8:	d1 f0       	breq	.+52     	; 0x70e <DIO_readPort+0x5e>
 6da:	2b 81       	ldd	r18, Y+3	; 0x03
 6dc:	3c 81       	ldd	r19, Y+4	; 0x04
 6de:	22 30       	cpi	r18, 0x02	; 2
 6e0:	31 05       	cpc	r19, r1
 6e2:	2c f4       	brge	.+10     	; 0x6ee <DIO_readPort+0x3e>
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	9c 81       	ldd	r25, Y+4	; 0x04
 6e8:	00 97       	sbiw	r24, 0x00	; 0
 6ea:	61 f0       	breq	.+24     	; 0x704 <DIO_readPort+0x54>
 6ec:	1e c0       	rjmp	.+60     	; 0x72a <DIO_readPort+0x7a>
 6ee:	2b 81       	ldd	r18, Y+3	; 0x03
 6f0:	3c 81       	ldd	r19, Y+4	; 0x04
 6f2:	22 30       	cpi	r18, 0x02	; 2
 6f4:	31 05       	cpc	r19, r1
 6f6:	81 f0       	breq	.+32     	; 0x718 <DIO_readPort+0x68>
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	9c 81       	ldd	r25, Y+4	; 0x04
 6fc:	83 30       	cpi	r24, 0x03	; 3
 6fe:	91 05       	cpc	r25, r1
 700:	81 f0       	breq	.+32     	; 0x722 <DIO_readPort+0x72>
 702:	13 c0       	rjmp	.+38     	; 0x72a <DIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 704:	e9 e3       	ldi	r30, 0x39	; 57
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	0e c0       	rjmp	.+28     	; 0x72a <DIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 70e:	e6 e3       	ldi	r30, 0x36	; 54
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	09 c0       	rjmp	.+18     	; 0x72a <DIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 718:	e3 e3       	ldi	r30, 0x33	; 51
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	04 c0       	rjmp	.+8      	; 0x72a <DIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 722:	e0 e3       	ldi	r30, 0x30	; 48
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 72a:	89 81       	ldd	r24, Y+1	; 0x01
}
 72c:	0f 90       	pop	r0
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	cf 91       	pop	r28
 736:	df 91       	pop	r29
 738:	08 95       	ret

0000073a <main>:
#define PUMP_PIN				PIN0_ID
#define BUZZER_PORT				PORTC_ID
#define BUZZER_PIN				PIN6_ID

int main (void)
{
 73a:	df 93       	push	r29
 73c:	cf 93       	push	r28
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62

	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	41 e0       	ldi	r20, 0x01	; 1
 748:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>

	DIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	66 e0       	ldi	r22, 0x06	; 6
 75a:	41 e0       	ldi	r20, 0x01	; 1
 75c:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_setupPinDirection>
	DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	66 e0       	ldi	r22, 0x06	; 6
 764:	40 e0       	ldi	r20, 0x00	; 0
 766:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>

	while(1)
	{
		DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	41 e0       	ldi	r20, 0x01	; 1
 770:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
		DIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	66 e0       	ldi	r22, 0x06	; 6
 778:	41 e0       	ldi	r20, 0x01	; 1
 77a:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
 77e:	f5 cf       	rjmp	.-22     	; 0x76a <main+0x30>

00000780 <WATERPUMP_init>:

#include "dio.h"
#include "waterpump.h"

void WATERPUMP_init(void)
{
 780:	df 93       	push	r29
 782:	cf 93       	push	r28
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
	DIO_setupPinDirection(PUMP_PORT,PUMP_PIN,PIN_OUTPUT);
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	41 e0       	ldi	r20, 0x01	; 1
 78e:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_setupPinDirection>
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
}
 79c:	cf 91       	pop	r28
 79e:	df 91       	pop	r29
 7a0:	08 95       	ret

000007a2 <WATERPUMP_on>:

void WATERPUMP_on(void)
{
 7a2:	df 93       	push	r29
 7a4:	cf 93       	push	r28
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_HIGH);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
}
 7b4:	cf 91       	pop	r28
 7b6:	df 91       	pop	r29
 7b8:	08 95       	ret

000007ba <WATERPUMP_off>:

void WATERPUMP_off(void)
{
 7ba:	df 93       	push	r29
 7bc:	cf 93       	push	r28
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(PUMP_PORT,PUMP_PIN,LOGIC_LOW);
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	40 e0       	ldi	r20, 0x00	; 0
 7c8:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_writePin>
}
 7cc:	cf 91       	pop	r28
 7ce:	df 91       	pop	r29
 7d0:	08 95       	ret

000007d2 <_exit>:
 7d2:	f8 94       	cli

000007d4 <__stop_program>:
 7d4:	ff cf       	rjmp	.-2      	; 0x7d4 <__stop_program>
